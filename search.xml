<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客搭建</title>
      <link href="/2024/05/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/05/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>这里我使用hexo搭建的个人博客</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>下载[nodejs](<a href="https://nodejs.org/en/">Node.js — 随处运行 JavaScript (nodejs.org)</a>)</p><p>我是一路next</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da99016.png" alt="image-20240502162734610"></p><p>下载[git](<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a>)</p><p>一样next</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d4313.png" alt="image-20240502163015637"></p><blockquote><p>node -v</p><p>npm -v</p><p>git -v</p></blockquote><p>下载hexo</p><p>用管理员身份打开cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9a17df.png" alt="image-20240502163428108"></p><h2 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h2><p>成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库</p><p>登录github</p><p>新建一个仓库</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d65f0.png" alt="image-20240502163854157"></p><p>名字必须是账户名.github.io</p><p>要public</p><p>勾选 Add a README file</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da81881.png" alt="image-20240502170815788"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9b6803.png" alt="image-20240502170927546"></p><h2 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h2><p>git执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6dc24a18.png" alt="image-20240502171118745"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dbbfba3.png" alt="image-20240502171219549"></p><p>一直回车(4次)</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dadf6ba.png" alt="image-20240502171259459"></p><p>找到生成的文件</p><p><code>C:\Users\admin\.ssh</code></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da4487b.png" alt="image-20240502171410100"></p><p>用任意文件编辑器打开id_rsa.pub</p><p>全选复制</p><p>在github的setting中打开ssh</p><p>新建一个ssh key</p><p>把刚刚复制的粘贴进去</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6daabd0a.png" alt="image-20240502171802709"></p><p>创建</p><p>验证：<br>打开git </p><p>输入<code>ssh -T git@github.com</code></p><p>我这里报错：<br><img src="https://bu.dusays.com/2024/05/12/6640e6d9a8c51.png" alt="image-20240502172545147"></p><p><strong>解决：</strong></p><p>错误提示的是连接**<code>github.com</code>**的22端口被拒绝了。可以简单理解为此门不通，既然这个端口号走不通，那换一个端口号试试看</p><p>直接在该文件夹下新建config.txt文件，将下面的命令直接粘贴进去,保存退出后，把此文件的.txt后缀删除（重命名）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>再试  后跟yes</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dac9377.png" alt="image-20240502173004790"></p><p>成功</p><h2 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h2><p>再任意位置新建文件夹</p><p>打开 git</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d0284.png" alt="image-20240502173529224"></p><p>报错 前面加了npx也一样</p><p><strong>解决：</strong><br>错误： git SSL certificate problem: unable to get local issuer certificate</p><blockquote><p>这个问题是由于没有配置信任的服务器HTTPS验证。默认，<a href="https://so.csdn.net/so/search?q=cURL&spm=1001.2101.3001.7020">cURL</a>被设为不信任任何CAs，就是说，它不信任任何服务器验证</p></blockquote><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure><p>再初始化 即可</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6ec522a1.png" alt="image-20240502174237835"></p><p>成功</p><p>然后安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo install</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6da3976c.png" alt="image-20240502174432493"></p><p>接下来依次输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g     生成</span><br><span class="line">hexo s     本地部署</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d447c.png" alt="image-20240502174535921"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9c949f.png" alt="image-20240502174621298"></p><p>给的这个URL就是在本地部署的博客</p><p>给的这个localhost:4000 端口被占用了 请求被拒绝</p><p>改一下端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p 5000</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6dbab3cf.png" alt="image-20240502175245789"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240502175220172.png" alt="image-20240502175220172"></p><p>成功</p><h2 id="上线博客"><a href="#上线博客" class="headerlink" title="上线博客"></a>上线博客</h2><p>进入之前的Blog文件夹，用打开_config.yml</p><p>划到最后</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9b1792.png" alt="image-20240502175505659"></p><p>将最后的tpye:”改为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: </span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9c3ebc.png" alt="image-20240502175611545"></p><p>注意首行缩进</p><p>回到github</p><p>把仓库的连接复制过来</p><p>粘贴到repository后面</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da9fc16.png" alt="image-20240502175921333"></p><p>在博客文件夹中打开git</p><p>执行</p><blockquote><p>hexo g     生成</p><p>hexo d     上传</p></blockquote><p><img src="https://bu.dusays.com/2024/05/12/6640e6dac3183.png" alt="image-20240502180349908"></p><p>这里我也是报错了</p><p><strong>解决</strong></p><p>要在<strong>站点目录</strong>下执行以上安装<code>hexo-deployer-git</code>插件的命令，所谓站点目录就是执行<code>hexo init</code>的目录</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d99b973.png" alt="image-20240502180656958"></p><p>再执行hexo d</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d73c6.png" alt="image-20240502180732852"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dd1eaba.png" alt="image-20240502180825885"></p><p>成功</p><p>访问vvkladg0r.github.io</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dc7a03c.png" alt="image-20240502180922779"></p><p>成功</p><h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><p>Github提供的网址在国内的访问速度较慢，所以推荐在搭建完后用<a href="https://vercel.com/">Vercel</a>部署，再通过Vercel绑定到自己的域名上，这样会速度会很快。</p><p>因为Vercel给我们分配的域名在国内是无法访问的，所以我们需要把在Vercel部署的绑定到自己的域名上，这样就可以访问了。</p><p>这里大家可以选择购买域名</p><p>用 github连接Vercel账号</p><p>点击右上角的<code>Add New Project</code>创建新的项目，之后导入选项那里选择<code>Continue with Github</code>，这时候应该能看到你Github账号的仓库，选择你刚刚部署成功的存储静态博客的仓库<code>&lt;username&gt;.github.io</code>右边的<code>Import</code>选项，表示你要导入该仓库。</p><p>起一个只能有小写字母、数字或者或者连字符的项目名称，然后其他默认，点击<code>Deploy</code>，等待一分钟即可部署成功</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6ecc9c89.png" alt="image-20240505153802912"></p><p>部署成功</p><p>然后点<code>Continue to Dashboard</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240505154312979.png" alt="image-20240505154312979"></p><p>成功</p><p>是我们现在还不能访问他给出的域，因为GFW把Vercel屏蔽了</p><p>绑定自定义域名：</p><p>点控制器里的Domains </p><p>查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入我们要用的域名，添加后他会提示你添加一条DNS解析记录。</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dae9ca5.png" alt="image-20240505154919950"></p><p>接下来在域名解析记录里面添加记录，其中记录类型对应<code>Type</code>，主机记录对应<code>Name</code>，记录值对应<code>Value</code>，其他的设置默认即可。</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dca9f65.png" alt="image-20240505161023476"></p><p>我这里是腾讯云：</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da4fde0.png" alt="image-20240505161336615"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dab3e86.png" alt="image-20240505161357741"></p><p>成功</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240505161435423.png" alt="image-20240505161435423"></p><p>可以用自定义域名访问了</p><p>当你有了新的域名之后，需要将<code>[BlogRoot]\_config.yml</code>文件中的<code>url</code>配置项改为自己的新域名，这样博客的文章链接才会正确生成。</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9df4bc.png" alt="image-20240505194744268"></p><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>这里我选择的是安知鱼主题</p><p><a href="https://docs.anheyu.com/">安知鱼主题</a>一款基于Butterfly主题修改的主题</p><p>这里还有很多<a href="https://hexo.io/themes/">hexo主题</a></p><p>我们根据它的官方文档安装</p><p>下载主题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>在Blagfile文件中用vscode打开</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da4f282.png" alt="image-20240506140626319"></p><p>在vscode中打开终端 执行命令</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dacae57.png" alt="image-20240506141151070"></p><p>theme文件夹下出现了安知鱼的相关文件</p><p>这是主题的源码 以后更新的时候会覆盖所以源码 不是很方便</p><p>覆盖配置可以使<code>主题配置</code>放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p><p>所以执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><p>将主题的配置文件移出来</p><p>但是这是在linux&#x2F;mac下才能执行的命令</p><p>而我们window需要：</p><p>复制<code>/themes/anzhiyu/_config.yml</code>此文件到 hexo 根目录，并重命名为<code>_config.anzhiyu.yml</code></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da14661.png" alt="image-20240506142216602"></p><p>修改hexo主题配置</p><p>将_config.yml文件中的theme属性修改为anzhiyu</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da7a13b.png" alt="image-20240506142308758"></p><p>安装 pug 和 stylus 渲染插件:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>报错了：</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da00822.png" alt="image-20240506143045345"></p><p>解决：</p><p>根据他的提示先更新一下版本呢：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g npm@10.7.0</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d8dee.png" alt="image-20240506143215947"></p><p>行</p><p>再跑一下刚刚的命令呢</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6db15c1a.png" alt="image-20240506143438304"></p><p>好像没有问题了</p><p>本地启用一下hexo看看呢</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6e73642e.png" alt="image-20240506143728560"></p><p>网页无变化 说明没安起</p><p>换一条命令呢：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save --registry=http://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>也有回显</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9ee8ec.png" alt="image-20240506144534900"></p><p>再部署看看</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da074c9.png" alt="image-20240506144650106"></p><p>这次好像可以了</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da74907.png" alt="image-20240506144735874"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da55dc1.png" alt="image-20240506144754684"></p><p>应该没问题了</p><p>访问一下看看呢</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240506144857627.png" alt="image-20240506144857627"></p><p>行 本地访问没有问题</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240506144941111.png" alt="image-20240506144941111"></p><p>自定义域名访问没变</p><p>解决：</p><p>可能是更新花了一点时间</p><p>现在访问就是没问题的</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240506150442185.png" alt="image-20240506150442185"></p><h2 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h2><p>一般都在<code>_config.yml</code>中修改</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da13fe9.png" alt="image-20240506151958836"></p><p>主题的相关配置的话在<code>_config.anzhiyu.yml</code>里面 大家就自行修改吧</p><p><a href="https://docs.anheyu.com/">安知鱼官方配置文档</a></p><h2 id="上传文章"><a href="#上传文章" class="headerlink" title="上传文章"></a>上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e48e8bcd0.png" alt="image-20240512234724501"></p><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p><img src="https://bu.dusays.com/2024/05/12/6640e4e4793a0.png" alt="image-20240512234851152"></p><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>Front-matter</p><p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><p>如果标注可选的参数，可根据自己需要添加，不用全部都写</p><p><strong>Page Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">写法</th><th>解释</th></tr></thead><tbody><tr><td align="left">title</td><td>【必需】页面标题</td></tr><tr><td align="left">date</td><td>【必需】页面创建日期</td></tr><tr><td align="left">type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td align="left">updated</td><td>【可选】页面更新日期</td></tr><tr><td align="left">description</td><td>【可选】页面描述</td></tr><tr><td align="left">keywords</td><td>【可选】页面关键字</td></tr><tr><td align="left">comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="left">top_img</td><td>【可选】页面顶部图片</td></tr><tr><td align="left">mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td align="left">aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td align="left">highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><p><strong>Post Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>在网站配置这里遇到了相当多的问题 有些问题很快解决了 有些就真的花了很多时间</p><h3 id="访问-about路由-回显配置的md文档"><a href="#访问-about路由-回显配置的md文档" class="headerlink" title="访问&#x2F;about路由 回显配置的md文档"></a>访问&#x2F;about路由 回显配置的md文档</h3><p>这是这个博客搭建遇到的最大的问题 </p><p>我按照anzhiyu官网文档搭建关于页面</p><p>搭好了访问发现不能访问yaml的前端页面 只能访问它的配置页面</p><p>这个问题我卡了两三天</p><p>这个问题出现的原因主要是配置文档存在隐藏字符 因为这个文档不是直接生成的 我是从别的博客上复制了一部分下来 所以有隐藏字符 </p><p>这里最好是直接生成 或者手打 复制的话要检查有没有隐藏字符</p><h3 id="hexo-d时遇到的问题"><a href="#hexo-d时遇到的问题" class="headerlink" title="hexo d时遇到的问题"></a>hexo d时遇到的问题</h3><p>主要就是这个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\BlogFile\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:518:28)</span><br><span class="line">    at cp.emit (D:\BlogFile\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">    at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br></pre></td></tr></table></figure><p>对应这个报错 目前我还没有非常完美的解决方法</p><p>遇到过几次了 用的是不同的解决放到 但是都不能完全解决这个问题 都是当时解决了 后面配置的时候又出现了</p><p>法1：</p><p>不管他 他过一会就会自己好 但是这个过一会没有非常精确的数据、</p><p>法2：</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure><p>这个方法有时奏效</p><p>法3：</p><p>更新npm</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure><p>法4：</p><p>清除npm缓存 并重构依赖</p><p>先执行 清除缓存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>法5</p><p>这是我用的最离奇的方法 可能就是法1</p><p>当时是我查看hexo的报错日志 然后就直接好了</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy --debug</span><br></pre></td></tr></table></figure><h2 id="图床配置"><a href="#图床配置" class="headerlink" title="图床配置"></a>图床配置</h2><p>之前是用的picgo+github 但是他不是很稳定 所以这次我用的是<a href="https://7bu.top/">去不图床</a></p><p>这个比较便宜10块1G </p><p>用的时候直接上传 找URL就行</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240509020222854.png" alt="image-20240509020222854"></p><p>如果是去不图床的话 在连接typora的时候不能用picgo(不支持) 要用Upgit</p><p><strong>Upgit:</strong></p><p><a href="https://github.com/pluveto/upgit/releases">Upgit</a> 可以快捷地将文件上传到去不图床并得到其直链。简洁跨平台不常驻内存。可作为 Typora 自定义上传器使用</p><p>将下面代码保存为 <code>config.toml</code> 文件，其中 <code>TOKEN</code> 项，需改成自己的。注意 <code>TOKEN</code> 前的 <code>Bearer</code> 不要忘记添:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_uploader = &quot;lskypro2&quot;</span><br><span class="line">[uploaders.lskypro2]</span><br><span class="line">host = &quot;https://7bu.top&quot;</span><br><span class="line">token = &quot;Bearer TOKEN&quot;</span><br></pre></td></tr></table></figure><p>另外创建文件夹 <code>extensions</code>，并将下面代码保存为文件 <code>lskypro.jsonc</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;lskypro2&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;LskyPro2 Uploader&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;simple-http-uploader&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">        &quot;repository&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;http&quot;: &#123;</span><br><span class="line">        &quot;request&quot;: &#123;</span><br><span class="line">            &quot;url&quot;: &quot;$(ext_config.host)/api/v1/upload&quot;,</span><br><span class="line">            &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">            &quot;headers&quot;: &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;multipart/form-data&quot;,</span><br><span class="line">                &quot;Authorization&quot;: &quot;$(ext_config.token)&quot;,</span><br><span class="line">                &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;body&quot;: &#123;</span><br><span class="line">                &quot;file&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;file&quot;,</span><br><span class="line">                    &quot;value&quot;: &quot;$(task.local_path)&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;token&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">                    &quot;value&quot;: &quot;$(ext_config.token)&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;upload&quot;: &#123;</span><br><span class="line">        &quot;rawUrl&quot;: &#123;</span><br><span class="line">            &quot;from&quot;: &quot;json_response&quot;,</span><br><span class="line">            &quot;path&quot;: &quot;data.links.url&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拿token:</strong></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dbd2c23.png" alt="image-20240511175154599"></p><p>这里我只启用了上传图片</p><p><strong>使用方法：</strong></p><p>cmd到upgit目录下 执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upgit.exe FILENAME</span><br></pre></td></tr></table></figure><p>就可以将图片上传到图床</p><p><strong>连接Typora:</strong></p><p>转到 Image 选自定义命令作为图像上传器，在命令文本框中输入 Upgit 程序位置，然后就可以使用了：</p><p><img src="https://bu.dusays.com/2024/05/11/663f484a10070.png" alt="image-20240511182823193"></p><p><img src="https://bu.dusays.com/2024/05/11/663f48650bed9.png" alt="image-20240511182850080"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/02/hello-world/"/>
      <url>/2024/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
